// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css domainReferer
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewDomainReferer(ctx, "domainReferer", &Css.DomainRefererArgs{
//				AllowEmpty: pulumi.Int(1),
//				DomainName: pulumi.String("test122.jingxhu.top"),
//				Enable:     pulumi.Int(0),
//				Rules:      pulumi.String("example.com"),
//				Type:       pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css domain_referer can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/domainReferer:DomainReferer domain_referer domainName
//
// ```
type DomainReferer struct {
	pulumi.CustomResourceState

	// Allow blank referers, 0: not allowed, 1: allowed.
	AllowEmpty pulumi.IntOutput `pulumi:"allowEmpty"`
	// Domain Name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Whether to enable the referer blacklist authentication of the current domain name,`0`: off, `1`: on.
	Enable pulumi.IntOutput `pulumi:"enable"`
	// The list of referers to; separate.
	Rules pulumi.StringOutput `pulumi:"rules"`
	// List type: 0: blacklist, 1: whitelist.
	Type pulumi.IntOutput `pulumi:"type"`
}

// NewDomainReferer registers a new resource with the given unique name, arguments, and options.
func NewDomainReferer(ctx *pulumi.Context,
	name string, args *DomainRefererArgs, opts ...pulumi.ResourceOption) (*DomainReferer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowEmpty == nil {
		return nil, errors.New("invalid value for required argument 'AllowEmpty'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DomainReferer
	err := ctx.RegisterResource("tencentcloud:Css/domainReferer:DomainReferer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainReferer gets an existing DomainReferer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainReferer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainRefererState, opts ...pulumi.ResourceOption) (*DomainReferer, error) {
	var resource DomainReferer
	err := ctx.ReadResource("tencentcloud:Css/domainReferer:DomainReferer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainReferer resources.
type domainRefererState struct {
	// Allow blank referers, 0: not allowed, 1: allowed.
	AllowEmpty *int `pulumi:"allowEmpty"`
	// Domain Name.
	DomainName *string `pulumi:"domainName"`
	// Whether to enable the referer blacklist authentication of the current domain name,`0`: off, `1`: on.
	Enable *int `pulumi:"enable"`
	// The list of referers to; separate.
	Rules *string `pulumi:"rules"`
	// List type: 0: blacklist, 1: whitelist.
	Type *int `pulumi:"type"`
}

type DomainRefererState struct {
	// Allow blank referers, 0: not allowed, 1: allowed.
	AllowEmpty pulumi.IntPtrInput
	// Domain Name.
	DomainName pulumi.StringPtrInput
	// Whether to enable the referer blacklist authentication of the current domain name,`0`: off, `1`: on.
	Enable pulumi.IntPtrInput
	// The list of referers to; separate.
	Rules pulumi.StringPtrInput
	// List type: 0: blacklist, 1: whitelist.
	Type pulumi.IntPtrInput
}

func (DomainRefererState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRefererState)(nil)).Elem()
}

type domainRefererArgs struct {
	// Allow blank referers, 0: not allowed, 1: allowed.
	AllowEmpty int `pulumi:"allowEmpty"`
	// Domain Name.
	DomainName string `pulumi:"domainName"`
	// Whether to enable the referer blacklist authentication of the current domain name,`0`: off, `1`: on.
	Enable int `pulumi:"enable"`
	// The list of referers to; separate.
	Rules string `pulumi:"rules"`
	// List type: 0: blacklist, 1: whitelist.
	Type int `pulumi:"type"`
}

// The set of arguments for constructing a DomainReferer resource.
type DomainRefererArgs struct {
	// Allow blank referers, 0: not allowed, 1: allowed.
	AllowEmpty pulumi.IntInput
	// Domain Name.
	DomainName pulumi.StringInput
	// Whether to enable the referer blacklist authentication of the current domain name,`0`: off, `1`: on.
	Enable pulumi.IntInput
	// The list of referers to; separate.
	Rules pulumi.StringInput
	// List type: 0: blacklist, 1: whitelist.
	Type pulumi.IntInput
}

func (DomainRefererArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRefererArgs)(nil)).Elem()
}

type DomainRefererInput interface {
	pulumi.Input

	ToDomainRefererOutput() DomainRefererOutput
	ToDomainRefererOutputWithContext(ctx context.Context) DomainRefererOutput
}

func (*DomainReferer) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainReferer)(nil)).Elem()
}

func (i *DomainReferer) ToDomainRefererOutput() DomainRefererOutput {
	return i.ToDomainRefererOutputWithContext(context.Background())
}

func (i *DomainReferer) ToDomainRefererOutputWithContext(ctx context.Context) DomainRefererOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRefererOutput)
}

// DomainRefererArrayInput is an input type that accepts DomainRefererArray and DomainRefererArrayOutput values.
// You can construct a concrete instance of `DomainRefererArrayInput` via:
//
//	DomainRefererArray{ DomainRefererArgs{...} }
type DomainRefererArrayInput interface {
	pulumi.Input

	ToDomainRefererArrayOutput() DomainRefererArrayOutput
	ToDomainRefererArrayOutputWithContext(context.Context) DomainRefererArrayOutput
}

type DomainRefererArray []DomainRefererInput

func (DomainRefererArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainReferer)(nil)).Elem()
}

func (i DomainRefererArray) ToDomainRefererArrayOutput() DomainRefererArrayOutput {
	return i.ToDomainRefererArrayOutputWithContext(context.Background())
}

func (i DomainRefererArray) ToDomainRefererArrayOutputWithContext(ctx context.Context) DomainRefererArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRefererArrayOutput)
}

// DomainRefererMapInput is an input type that accepts DomainRefererMap and DomainRefererMapOutput values.
// You can construct a concrete instance of `DomainRefererMapInput` via:
//
//	DomainRefererMap{ "key": DomainRefererArgs{...} }
type DomainRefererMapInput interface {
	pulumi.Input

	ToDomainRefererMapOutput() DomainRefererMapOutput
	ToDomainRefererMapOutputWithContext(context.Context) DomainRefererMapOutput
}

type DomainRefererMap map[string]DomainRefererInput

func (DomainRefererMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainReferer)(nil)).Elem()
}

func (i DomainRefererMap) ToDomainRefererMapOutput() DomainRefererMapOutput {
	return i.ToDomainRefererMapOutputWithContext(context.Background())
}

func (i DomainRefererMap) ToDomainRefererMapOutputWithContext(ctx context.Context) DomainRefererMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRefererMapOutput)
}

type DomainRefererOutput struct{ *pulumi.OutputState }

func (DomainRefererOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainReferer)(nil)).Elem()
}

func (o DomainRefererOutput) ToDomainRefererOutput() DomainRefererOutput {
	return o
}

func (o DomainRefererOutput) ToDomainRefererOutputWithContext(ctx context.Context) DomainRefererOutput {
	return o
}

// Allow blank referers, 0: not allowed, 1: allowed.
func (o DomainRefererOutput) AllowEmpty() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainReferer) pulumi.IntOutput { return v.AllowEmpty }).(pulumi.IntOutput)
}

// Domain Name.
func (o DomainRefererOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainReferer) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Whether to enable the referer blacklist authentication of the current domain name,`0`: off, `1`: on.
func (o DomainRefererOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainReferer) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// The list of referers to; separate.
func (o DomainRefererOutput) Rules() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainReferer) pulumi.StringOutput { return v.Rules }).(pulumi.StringOutput)
}

// List type: 0: blacklist, 1: whitelist.
func (o DomainRefererOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainReferer) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

type DomainRefererArrayOutput struct{ *pulumi.OutputState }

func (DomainRefererArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainReferer)(nil)).Elem()
}

func (o DomainRefererArrayOutput) ToDomainRefererArrayOutput() DomainRefererArrayOutput {
	return o
}

func (o DomainRefererArrayOutput) ToDomainRefererArrayOutputWithContext(ctx context.Context) DomainRefererArrayOutput {
	return o
}

func (o DomainRefererArrayOutput) Index(i pulumi.IntInput) DomainRefererOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainReferer {
		return vs[0].([]*DomainReferer)[vs[1].(int)]
	}).(DomainRefererOutput)
}

type DomainRefererMapOutput struct{ *pulumi.OutputState }

func (DomainRefererMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainReferer)(nil)).Elem()
}

func (o DomainRefererMapOutput) ToDomainRefererMapOutput() DomainRefererMapOutput {
	return o
}

func (o DomainRefererMapOutput) ToDomainRefererMapOutputWithContext(ctx context.Context) DomainRefererMapOutput {
	return o
}

func (o DomainRefererMapOutput) MapIndex(k pulumi.StringInput) DomainRefererOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainReferer {
		return vs[0].(map[string]*DomainReferer)[vs[1].(string)]
	}).(DomainRefererOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRefererInput)(nil)).Elem(), &DomainReferer{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRefererArrayInput)(nil)).Elem(), DomainRefererArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRefererMapInput)(nil)).Elem(), DomainRefererMap{})
	pulumi.RegisterOutputType(DomainRefererOutput{})
	pulumi.RegisterOutputType(DomainRefererArrayOutput{})
	pulumi.RegisterOutputType(DomainRefererMapOutput{})
}
