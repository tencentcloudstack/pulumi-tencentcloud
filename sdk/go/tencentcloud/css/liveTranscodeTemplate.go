// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css liveTranscodeTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewLiveTranscodeTemplate(ctx, "liveTranscodeTemplate", &Css.LiveTranscodeTemplateArgs{
//				Acodec:              pulumi.String("aac"),
//				AdaptBitratePercent: pulumi.Float64(0),
//				AiTransCode:         pulumi.Int(0),
//				AudioBitrate:        pulumi.Int(128),
//				BitrateToOrig:       pulumi.Int(0),
//				Description:         pulumi.String("This_is_a_tf_test_temp."),
//				DrmTracks:           pulumi.String("SD"),
//				DrmType:             pulumi.String("fairplay"),
//				Fps:                 pulumi.Int(0),
//				FpsToOrig:           pulumi.Int(0),
//				Gop:                 pulumi.Int(2),
//				Height:              pulumi.Int(0),
//				HeightToOrig:        pulumi.Int(0),
//				NeedAudio:           pulumi.Int(1),
//				NeedVideo:           pulumi.Int(1),
//				Profile:             pulumi.String("baseline"),
//				Rotate:              pulumi.Int(0),
//				ShortEdgeAsHeight:   pulumi.Int(0),
//				TemplateName:        pulumi.String("template_name"),
//				Vcodec:              pulumi.String("origin"),
//				VideoBitrate:        pulumi.Int(100),
//				Width:               pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css live_transcode_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate live_transcode_template liveTranscodeTemplate_id
//
// ```
type LiveTranscodeTemplate struct {
	pulumi.CustomResourceState

	// default aac, not support now.
	Acodec pulumi.StringPtrOutput `pulumi:"acodec"`
	// high speed mode adapt bitrate, support 0 - 0.5.
	AdaptBitratePercent pulumi.Float64PtrOutput `pulumi:"adaptBitratePercent"`
	// enable high speed mode, default 0, 1 for enable, 0 for no.
	AiTransCode pulumi.IntPtrOutput `pulumi:"aiTransCode"`
	// default 0, range 0 - 500.
	AudioBitrate pulumi.IntPtrOutput `pulumi:"audioBitrate"`
	// base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
	BitrateToOrig pulumi.IntPtrOutput `pulumi:"bitrateToOrig"`
	// template desc.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
	DrmTracks pulumi.StringPtrOutput `pulumi:"drmTracks"`
	// DRM type, support fairplay/normalaes/widevine.
	DrmType pulumi.StringPtrOutput `pulumi:"drmType"`
	// video fps, default 0, range 0 - 60.
	Fps pulumi.IntPtrOutput `pulumi:"fps"`
	// base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
	FpsToOrig pulumi.IntPtrOutput `pulumi:"fpsToOrig"`
	// gop of the video, second, default origin of the video, range 2 - 6.
	Gop pulumi.IntPtrOutput `pulumi:"gop"`
	// template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
	Height pulumi.IntPtrOutput `pulumi:"height"`
	// base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
	HeightToOrig pulumi.IntPtrOutput `pulumi:"heightToOrig"`
	// keep audio or not, default 1 for yes, 0 for no.
	NeedAudio pulumi.IntPtrOutput `pulumi:"needAudio"`
	// keep video or not, default 1 for yes, 0 for no.
	NeedVideo pulumi.IntPtrOutput `pulumi:"needVideo"`
	// quality of the video, default baseline, support baseline/main/high.
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// roate degree, default 0, support 0/90/180/270.
	Rotate pulumi.IntPtrOutput `pulumi:"rotate"`
	// let the short edge as the height.
	ShortEdgeAsHeight pulumi.IntPtrOutput `pulumi:"shortEdgeAsHeight"`
	// template name, only support 0-9 and a-z.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
	// video codec, default origin, support h264/h265/origin.
	Vcodec pulumi.StringPtrOutput `pulumi:"vcodec"`
	// video bitrate, 0 for origin, range 0kbps - 8000kbps.
	VideoBitrate pulumi.IntOutput `pulumi:"videoBitrate"`
	// template width, default 0, range 0 - 3000, must be pow of 2.
	Width pulumi.IntPtrOutput `pulumi:"width"`
}

// NewLiveTranscodeTemplate registers a new resource with the given unique name, arguments, and options.
func NewLiveTranscodeTemplate(ctx *pulumi.Context,
	name string, args *LiveTranscodeTemplateArgs, opts ...pulumi.ResourceOption) (*LiveTranscodeTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	if args.VideoBitrate == nil {
		return nil, errors.New("invalid value for required argument 'VideoBitrate'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LiveTranscodeTemplate
	err := ctx.RegisterResource("tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLiveTranscodeTemplate gets an existing LiveTranscodeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLiveTranscodeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LiveTranscodeTemplateState, opts ...pulumi.ResourceOption) (*LiveTranscodeTemplate, error) {
	var resource LiveTranscodeTemplate
	err := ctx.ReadResource("tencentcloud:Css/liveTranscodeTemplate:LiveTranscodeTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LiveTranscodeTemplate resources.
type liveTranscodeTemplateState struct {
	// default aac, not support now.
	Acodec *string `pulumi:"acodec"`
	// high speed mode adapt bitrate, support 0 - 0.5.
	AdaptBitratePercent *float64 `pulumi:"adaptBitratePercent"`
	// enable high speed mode, default 0, 1 for enable, 0 for no.
	AiTransCode *int `pulumi:"aiTransCode"`
	// default 0, range 0 - 500.
	AudioBitrate *int `pulumi:"audioBitrate"`
	// base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
	BitrateToOrig *int `pulumi:"bitrateToOrig"`
	// template desc.
	Description *string `pulumi:"description"`
	// DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
	DrmTracks *string `pulumi:"drmTracks"`
	// DRM type, support fairplay/normalaes/widevine.
	DrmType *string `pulumi:"drmType"`
	// video fps, default 0, range 0 - 60.
	Fps *int `pulumi:"fps"`
	// base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
	FpsToOrig *int `pulumi:"fpsToOrig"`
	// gop of the video, second, default origin of the video, range 2 - 6.
	Gop *int `pulumi:"gop"`
	// template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
	Height *int `pulumi:"height"`
	// base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
	HeightToOrig *int `pulumi:"heightToOrig"`
	// keep audio or not, default 1 for yes, 0 for no.
	NeedAudio *int `pulumi:"needAudio"`
	// keep video or not, default 1 for yes, 0 for no.
	NeedVideo *int `pulumi:"needVideo"`
	// quality of the video, default baseline, support baseline/main/high.
	Profile *string `pulumi:"profile"`
	// roate degree, default 0, support 0/90/180/270.
	Rotate *int `pulumi:"rotate"`
	// let the short edge as the height.
	ShortEdgeAsHeight *int `pulumi:"shortEdgeAsHeight"`
	// template name, only support 0-9 and a-z.
	TemplateName *string `pulumi:"templateName"`
	// video codec, default origin, support h264/h265/origin.
	Vcodec *string `pulumi:"vcodec"`
	// video bitrate, 0 for origin, range 0kbps - 8000kbps.
	VideoBitrate *int `pulumi:"videoBitrate"`
	// template width, default 0, range 0 - 3000, must be pow of 2.
	Width *int `pulumi:"width"`
}

type LiveTranscodeTemplateState struct {
	// default aac, not support now.
	Acodec pulumi.StringPtrInput
	// high speed mode adapt bitrate, support 0 - 0.5.
	AdaptBitratePercent pulumi.Float64PtrInput
	// enable high speed mode, default 0, 1 for enable, 0 for no.
	AiTransCode pulumi.IntPtrInput
	// default 0, range 0 - 500.
	AudioBitrate pulumi.IntPtrInput
	// base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
	BitrateToOrig pulumi.IntPtrInput
	// template desc.
	Description pulumi.StringPtrInput
	// DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
	DrmTracks pulumi.StringPtrInput
	// DRM type, support fairplay/normalaes/widevine.
	DrmType pulumi.StringPtrInput
	// video fps, default 0, range 0 - 60.
	Fps pulumi.IntPtrInput
	// base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
	FpsToOrig pulumi.IntPtrInput
	// gop of the video, second, default origin of the video, range 2 - 6.
	Gop pulumi.IntPtrInput
	// template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
	Height pulumi.IntPtrInput
	// base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
	HeightToOrig pulumi.IntPtrInput
	// keep audio or not, default 1 for yes, 0 for no.
	NeedAudio pulumi.IntPtrInput
	// keep video or not, default 1 for yes, 0 for no.
	NeedVideo pulumi.IntPtrInput
	// quality of the video, default baseline, support baseline/main/high.
	Profile pulumi.StringPtrInput
	// roate degree, default 0, support 0/90/180/270.
	Rotate pulumi.IntPtrInput
	// let the short edge as the height.
	ShortEdgeAsHeight pulumi.IntPtrInput
	// template name, only support 0-9 and a-z.
	TemplateName pulumi.StringPtrInput
	// video codec, default origin, support h264/h265/origin.
	Vcodec pulumi.StringPtrInput
	// video bitrate, 0 for origin, range 0kbps - 8000kbps.
	VideoBitrate pulumi.IntPtrInput
	// template width, default 0, range 0 - 3000, must be pow of 2.
	Width pulumi.IntPtrInput
}

func (LiveTranscodeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*liveTranscodeTemplateState)(nil)).Elem()
}

type liveTranscodeTemplateArgs struct {
	// default aac, not support now.
	Acodec *string `pulumi:"acodec"`
	// high speed mode adapt bitrate, support 0 - 0.5.
	AdaptBitratePercent *float64 `pulumi:"adaptBitratePercent"`
	// enable high speed mode, default 0, 1 for enable, 0 for no.
	AiTransCode *int `pulumi:"aiTransCode"`
	// default 0, range 0 - 500.
	AudioBitrate *int `pulumi:"audioBitrate"`
	// base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
	BitrateToOrig *int `pulumi:"bitrateToOrig"`
	// template desc.
	Description *string `pulumi:"description"`
	// DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
	DrmTracks *string `pulumi:"drmTracks"`
	// DRM type, support fairplay/normalaes/widevine.
	DrmType *string `pulumi:"drmType"`
	// video fps, default 0, range 0 - 60.
	Fps *int `pulumi:"fps"`
	// base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
	FpsToOrig *int `pulumi:"fpsToOrig"`
	// gop of the video, second, default origin of the video, range 2 - 6.
	Gop *int `pulumi:"gop"`
	// template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
	Height *int `pulumi:"height"`
	// base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
	HeightToOrig *int `pulumi:"heightToOrig"`
	// keep audio or not, default 1 for yes, 0 for no.
	NeedAudio *int `pulumi:"needAudio"`
	// keep video or not, default 1 for yes, 0 for no.
	NeedVideo *int `pulumi:"needVideo"`
	// quality of the video, default baseline, support baseline/main/high.
	Profile *string `pulumi:"profile"`
	// roate degree, default 0, support 0/90/180/270.
	Rotate *int `pulumi:"rotate"`
	// let the short edge as the height.
	ShortEdgeAsHeight *int `pulumi:"shortEdgeAsHeight"`
	// template name, only support 0-9 and a-z.
	TemplateName string `pulumi:"templateName"`
	// video codec, default origin, support h264/h265/origin.
	Vcodec *string `pulumi:"vcodec"`
	// video bitrate, 0 for origin, range 0kbps - 8000kbps.
	VideoBitrate int `pulumi:"videoBitrate"`
	// template width, default 0, range 0 - 3000, must be pow of 2.
	Width *int `pulumi:"width"`
}

// The set of arguments for constructing a LiveTranscodeTemplate resource.
type LiveTranscodeTemplateArgs struct {
	// default aac, not support now.
	Acodec pulumi.StringPtrInput
	// high speed mode adapt bitrate, support 0 - 0.5.
	AdaptBitratePercent pulumi.Float64PtrInput
	// enable high speed mode, default 0, 1 for enable, 0 for no.
	AiTransCode pulumi.IntPtrInput
	// default 0, range 0 - 500.
	AudioBitrate pulumi.IntPtrInput
	// base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
	BitrateToOrig pulumi.IntPtrInput
	// template desc.
	Description pulumi.StringPtrInput
	// DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
	DrmTracks pulumi.StringPtrInput
	// DRM type, support fairplay/normalaes/widevine.
	DrmType pulumi.StringPtrInput
	// video fps, default 0, range 0 - 60.
	Fps pulumi.IntPtrInput
	// base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
	FpsToOrig pulumi.IntPtrInput
	// gop of the video, second, default origin of the video, range 2 - 6.
	Gop pulumi.IntPtrInput
	// template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
	Height pulumi.IntPtrInput
	// base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
	HeightToOrig pulumi.IntPtrInput
	// keep audio or not, default 1 for yes, 0 for no.
	NeedAudio pulumi.IntPtrInput
	// keep video or not, default 1 for yes, 0 for no.
	NeedVideo pulumi.IntPtrInput
	// quality of the video, default baseline, support baseline/main/high.
	Profile pulumi.StringPtrInput
	// roate degree, default 0, support 0/90/180/270.
	Rotate pulumi.IntPtrInput
	// let the short edge as the height.
	ShortEdgeAsHeight pulumi.IntPtrInput
	// template name, only support 0-9 and a-z.
	TemplateName pulumi.StringInput
	// video codec, default origin, support h264/h265/origin.
	Vcodec pulumi.StringPtrInput
	// video bitrate, 0 for origin, range 0kbps - 8000kbps.
	VideoBitrate pulumi.IntInput
	// template width, default 0, range 0 - 3000, must be pow of 2.
	Width pulumi.IntPtrInput
}

func (LiveTranscodeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*liveTranscodeTemplateArgs)(nil)).Elem()
}

type LiveTranscodeTemplateInput interface {
	pulumi.Input

	ToLiveTranscodeTemplateOutput() LiveTranscodeTemplateOutput
	ToLiveTranscodeTemplateOutputWithContext(ctx context.Context) LiveTranscodeTemplateOutput
}

func (*LiveTranscodeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveTranscodeTemplate)(nil)).Elem()
}

func (i *LiveTranscodeTemplate) ToLiveTranscodeTemplateOutput() LiveTranscodeTemplateOutput {
	return i.ToLiveTranscodeTemplateOutputWithContext(context.Background())
}

func (i *LiveTranscodeTemplate) ToLiveTranscodeTemplateOutputWithContext(ctx context.Context) LiveTranscodeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTranscodeTemplateOutput)
}

// LiveTranscodeTemplateArrayInput is an input type that accepts LiveTranscodeTemplateArray and LiveTranscodeTemplateArrayOutput values.
// You can construct a concrete instance of `LiveTranscodeTemplateArrayInput` via:
//
//	LiveTranscodeTemplateArray{ LiveTranscodeTemplateArgs{...} }
type LiveTranscodeTemplateArrayInput interface {
	pulumi.Input

	ToLiveTranscodeTemplateArrayOutput() LiveTranscodeTemplateArrayOutput
	ToLiveTranscodeTemplateArrayOutputWithContext(context.Context) LiveTranscodeTemplateArrayOutput
}

type LiveTranscodeTemplateArray []LiveTranscodeTemplateInput

func (LiveTranscodeTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveTranscodeTemplate)(nil)).Elem()
}

func (i LiveTranscodeTemplateArray) ToLiveTranscodeTemplateArrayOutput() LiveTranscodeTemplateArrayOutput {
	return i.ToLiveTranscodeTemplateArrayOutputWithContext(context.Background())
}

func (i LiveTranscodeTemplateArray) ToLiveTranscodeTemplateArrayOutputWithContext(ctx context.Context) LiveTranscodeTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTranscodeTemplateArrayOutput)
}

// LiveTranscodeTemplateMapInput is an input type that accepts LiveTranscodeTemplateMap and LiveTranscodeTemplateMapOutput values.
// You can construct a concrete instance of `LiveTranscodeTemplateMapInput` via:
//
//	LiveTranscodeTemplateMap{ "key": LiveTranscodeTemplateArgs{...} }
type LiveTranscodeTemplateMapInput interface {
	pulumi.Input

	ToLiveTranscodeTemplateMapOutput() LiveTranscodeTemplateMapOutput
	ToLiveTranscodeTemplateMapOutputWithContext(context.Context) LiveTranscodeTemplateMapOutput
}

type LiveTranscodeTemplateMap map[string]LiveTranscodeTemplateInput

func (LiveTranscodeTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveTranscodeTemplate)(nil)).Elem()
}

func (i LiveTranscodeTemplateMap) ToLiveTranscodeTemplateMapOutput() LiveTranscodeTemplateMapOutput {
	return i.ToLiveTranscodeTemplateMapOutputWithContext(context.Background())
}

func (i LiveTranscodeTemplateMap) ToLiveTranscodeTemplateMapOutputWithContext(ctx context.Context) LiveTranscodeTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LiveTranscodeTemplateMapOutput)
}

type LiveTranscodeTemplateOutput struct{ *pulumi.OutputState }

func (LiveTranscodeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LiveTranscodeTemplate)(nil)).Elem()
}

func (o LiveTranscodeTemplateOutput) ToLiveTranscodeTemplateOutput() LiveTranscodeTemplateOutput {
	return o
}

func (o LiveTranscodeTemplateOutput) ToLiveTranscodeTemplateOutputWithContext(ctx context.Context) LiveTranscodeTemplateOutput {
	return o
}

// default aac, not support now.
func (o LiveTranscodeTemplateOutput) Acodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringPtrOutput { return v.Acodec }).(pulumi.StringPtrOutput)
}

// high speed mode adapt bitrate, support 0 - 0.5.
func (o LiveTranscodeTemplateOutput) AdaptBitratePercent() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.Float64PtrOutput { return v.AdaptBitratePercent }).(pulumi.Float64PtrOutput)
}

// enable high speed mode, default 0, 1 for enable, 0 for no.
func (o LiveTranscodeTemplateOutput) AiTransCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.AiTransCode }).(pulumi.IntPtrOutput)
}

// default 0, range 0 - 500.
func (o LiveTranscodeTemplateOutput) AudioBitrate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.AudioBitrate }).(pulumi.IntPtrOutput)
}

// base on origin bitrate if origin bitrate is lower than the setting bitrate. default 0, 1 for yes, 0 for no.
func (o LiveTranscodeTemplateOutput) BitrateToOrig() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.BitrateToOrig }).(pulumi.IntPtrOutput)
}

// template desc.
func (o LiveTranscodeTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DRM tracks, support AUDIO/SD/HD/UHD1/UHD2.
func (o LiveTranscodeTemplateOutput) DrmTracks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringPtrOutput { return v.DrmTracks }).(pulumi.StringPtrOutput)
}

// DRM type, support fairplay/normalaes/widevine.
func (o LiveTranscodeTemplateOutput) DrmType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringPtrOutput { return v.DrmType }).(pulumi.StringPtrOutput)
}

// video fps, default 0, range 0 - 60.
func (o LiveTranscodeTemplateOutput) Fps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.Fps }).(pulumi.IntPtrOutput)
}

// base on origin fps if origin fps is lower than the setting fps. default 0, 1 for yes, 0 for no.
func (o LiveTranscodeTemplateOutput) FpsToOrig() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.FpsToOrig }).(pulumi.IntPtrOutput)
}

// gop of the video, second, default origin of the video, range 2 - 6.
func (o LiveTranscodeTemplateOutput) Gop() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.Gop }).(pulumi.IntPtrOutput)
}

// template height, default 0, range 0 - 3000, must be pow of 2, needed while AiTransCode = 1.
func (o LiveTranscodeTemplateOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.Height }).(pulumi.IntPtrOutput)
}

// base on origin height if origin height is lower than the setting height. default 0, 1 for yes, 0 for no.
func (o LiveTranscodeTemplateOutput) HeightToOrig() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.HeightToOrig }).(pulumi.IntPtrOutput)
}

// keep audio or not, default 1 for yes, 0 for no.
func (o LiveTranscodeTemplateOutput) NeedAudio() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.NeedAudio }).(pulumi.IntPtrOutput)
}

// keep video or not, default 1 for yes, 0 for no.
func (o LiveTranscodeTemplateOutput) NeedVideo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.NeedVideo }).(pulumi.IntPtrOutput)
}

// quality of the video, default baseline, support baseline/main/high.
func (o LiveTranscodeTemplateOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringPtrOutput { return v.Profile }).(pulumi.StringPtrOutput)
}

// roate degree, default 0, support 0/90/180/270.
func (o LiveTranscodeTemplateOutput) Rotate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.Rotate }).(pulumi.IntPtrOutput)
}

// let the short edge as the height.
func (o LiveTranscodeTemplateOutput) ShortEdgeAsHeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.ShortEdgeAsHeight }).(pulumi.IntPtrOutput)
}

// template name, only support 0-9 and a-z.
func (o LiveTranscodeTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

// video codec, default origin, support h264/h265/origin.
func (o LiveTranscodeTemplateOutput) Vcodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.StringPtrOutput { return v.Vcodec }).(pulumi.StringPtrOutput)
}

// video bitrate, 0 for origin, range 0kbps - 8000kbps.
func (o LiveTranscodeTemplateOutput) VideoBitrate() pulumi.IntOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntOutput { return v.VideoBitrate }).(pulumi.IntOutput)
}

// template width, default 0, range 0 - 3000, must be pow of 2.
func (o LiveTranscodeTemplateOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LiveTranscodeTemplate) pulumi.IntPtrOutput { return v.Width }).(pulumi.IntPtrOutput)
}

type LiveTranscodeTemplateArrayOutput struct{ *pulumi.OutputState }

func (LiveTranscodeTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LiveTranscodeTemplate)(nil)).Elem()
}

func (o LiveTranscodeTemplateArrayOutput) ToLiveTranscodeTemplateArrayOutput() LiveTranscodeTemplateArrayOutput {
	return o
}

func (o LiveTranscodeTemplateArrayOutput) ToLiveTranscodeTemplateArrayOutputWithContext(ctx context.Context) LiveTranscodeTemplateArrayOutput {
	return o
}

func (o LiveTranscodeTemplateArrayOutput) Index(i pulumi.IntInput) LiveTranscodeTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LiveTranscodeTemplate {
		return vs[0].([]*LiveTranscodeTemplate)[vs[1].(int)]
	}).(LiveTranscodeTemplateOutput)
}

type LiveTranscodeTemplateMapOutput struct{ *pulumi.OutputState }

func (LiveTranscodeTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LiveTranscodeTemplate)(nil)).Elem()
}

func (o LiveTranscodeTemplateMapOutput) ToLiveTranscodeTemplateMapOutput() LiveTranscodeTemplateMapOutput {
	return o
}

func (o LiveTranscodeTemplateMapOutput) ToLiveTranscodeTemplateMapOutputWithContext(ctx context.Context) LiveTranscodeTemplateMapOutput {
	return o
}

func (o LiveTranscodeTemplateMapOutput) MapIndex(k pulumi.StringInput) LiveTranscodeTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LiveTranscodeTemplate {
		return vs[0].(map[string]*LiveTranscodeTemplate)[vs[1].(string)]
	}).(LiveTranscodeTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LiveTranscodeTemplateInput)(nil)).Elem(), &LiveTranscodeTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveTranscodeTemplateArrayInput)(nil)).Elem(), LiveTranscodeTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LiveTranscodeTemplateMapInput)(nil)).Elem(), LiveTranscodeTemplateMap{})
	pulumi.RegisterOutputType(LiveTranscodeTemplateOutput{})
	pulumi.RegisterOutputType(LiveTranscodeTemplateArrayOutput{})
	pulumi.RegisterOutputType(LiveTranscodeTemplateMapOutput{})
}
