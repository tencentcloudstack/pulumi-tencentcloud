// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css streamMonitor
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewStreamMonitor(ctx, "streamMonitor", &Css.StreamMonitorArgs{
//				AiAsrInputIndexLists: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				AiFormatDiagnose: pulumi.Int(1),
//				AiOcrInputIndexLists: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				AllowMonitorReport:      pulumi.Int(1),
//				AsrLanguage:             pulumi.Int(1),
//				CheckStreamBroken:       pulumi.Int(1),
//				CheckStreamLowFrameRate: pulumi.Int(1),
//				InputLists: css.StreamMonitorInputListArray{
//					&css.StreamMonitorInputListArgs{
//						InputApp:        pulumi.String("live"),
//						InputDomain:     pulumi.String("177154.push.tlivecloud.com"),
//						InputStreamName: pulumi.String("ppp"),
//					},
//				},
//				MonitorName: pulumi.String("test"),
//				NotifyPolicy: &css.StreamMonitorNotifyPolicyArgs{
//					CallbackUrl:      pulumi.String("http://example.com/test"),
//					NotifyPolicyType: pulumi.Int(1),
//				},
//				OcrLanguage: pulumi.Int(1),
//				OutputInfo: &css.StreamMonitorOutputInfoArgs{
//					OutputDomain:       pulumi.String("test122.jingxhu.top"),
//					OutputStreamHeight: pulumi.Int(1080),
//					OutputStreamName:   pulumi.String("afc7847d-1fe1-43bc-b1e4-20d86303c393"),
//					OutputStreamWidth:  pulumi.Int(1920),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css stream_monitor can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/streamMonitor:StreamMonitor stream_monitor stream_monitor_id
//
// ```
type StreamMonitor struct {
	pulumi.CustomResourceState

	// AI asr input index list.(first input index is 1.).
	AiAsrInputIndexLists pulumi.IntArrayOutput `pulumi:"aiAsrInputIndexLists"`
	// If enable format diagnose.
	AiFormatDiagnose pulumi.IntPtrOutput `pulumi:"aiFormatDiagnose"`
	// Ai ocr input index list(first input index is 1.).
	AiOcrInputIndexLists pulumi.IntArrayOutput `pulumi:"aiOcrInputIndexLists"`
	// If store monitor event.
	AllowMonitorReport pulumi.IntPtrOutput `pulumi:"allowMonitorReport"`
	// Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
	AsrLanguage pulumi.IntPtrOutput `pulumi:"asrLanguage"`
	// If enable stream broken check.
	CheckStreamBroken pulumi.IntPtrOutput `pulumi:"checkStreamBroken"`
	// If enable low frame rate check.
	CheckStreamLowFrameRate pulumi.IntPtrOutput `pulumi:"checkStreamLowFrameRate"`
	// Wait monitor input info list.
	InputLists StreamMonitorInputListArrayOutput `pulumi:"inputLists"`
	// Monitor task name.
	MonitorName pulumi.StringPtrOutput `pulumi:"monitorName"`
	// Monitor event notify policy.
	NotifyPolicy StreamMonitorNotifyPolicyPtrOutput `pulumi:"notifyPolicy"`
	// Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
	OcrLanguage pulumi.IntPtrOutput `pulumi:"ocrLanguage"`
	// Monitor task output info.
	OutputInfo StreamMonitorOutputInfoOutput `pulumi:"outputInfo"`
}

// NewStreamMonitor registers a new resource with the given unique name, arguments, and options.
func NewStreamMonitor(ctx *pulumi.Context,
	name string, args *StreamMonitorArgs, opts ...pulumi.ResourceOption) (*StreamMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InputLists == nil {
		return nil, errors.New("invalid value for required argument 'InputLists'")
	}
	if args.OutputInfo == nil {
		return nil, errors.New("invalid value for required argument 'OutputInfo'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StreamMonitor
	err := ctx.RegisterResource("tencentcloud:Css/streamMonitor:StreamMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamMonitor gets an existing StreamMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamMonitorState, opts ...pulumi.ResourceOption) (*StreamMonitor, error) {
	var resource StreamMonitor
	err := ctx.ReadResource("tencentcloud:Css/streamMonitor:StreamMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamMonitor resources.
type streamMonitorState struct {
	// AI asr input index list.(first input index is 1.).
	AiAsrInputIndexLists []int `pulumi:"aiAsrInputIndexLists"`
	// If enable format diagnose.
	AiFormatDiagnose *int `pulumi:"aiFormatDiagnose"`
	// Ai ocr input index list(first input index is 1.).
	AiOcrInputIndexLists []int `pulumi:"aiOcrInputIndexLists"`
	// If store monitor event.
	AllowMonitorReport *int `pulumi:"allowMonitorReport"`
	// Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
	AsrLanguage *int `pulumi:"asrLanguage"`
	// If enable stream broken check.
	CheckStreamBroken *int `pulumi:"checkStreamBroken"`
	// If enable low frame rate check.
	CheckStreamLowFrameRate *int `pulumi:"checkStreamLowFrameRate"`
	// Wait monitor input info list.
	InputLists []StreamMonitorInputList `pulumi:"inputLists"`
	// Monitor task name.
	MonitorName *string `pulumi:"monitorName"`
	// Monitor event notify policy.
	NotifyPolicy *StreamMonitorNotifyPolicy `pulumi:"notifyPolicy"`
	// Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
	OcrLanguage *int `pulumi:"ocrLanguage"`
	// Monitor task output info.
	OutputInfo *StreamMonitorOutputInfo `pulumi:"outputInfo"`
}

type StreamMonitorState struct {
	// AI asr input index list.(first input index is 1.).
	AiAsrInputIndexLists pulumi.IntArrayInput
	// If enable format diagnose.
	AiFormatDiagnose pulumi.IntPtrInput
	// Ai ocr input index list(first input index is 1.).
	AiOcrInputIndexLists pulumi.IntArrayInput
	// If store monitor event.
	AllowMonitorReport pulumi.IntPtrInput
	// Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
	AsrLanguage pulumi.IntPtrInput
	// If enable stream broken check.
	CheckStreamBroken pulumi.IntPtrInput
	// If enable low frame rate check.
	CheckStreamLowFrameRate pulumi.IntPtrInput
	// Wait monitor input info list.
	InputLists StreamMonitorInputListArrayInput
	// Monitor task name.
	MonitorName pulumi.StringPtrInput
	// Monitor event notify policy.
	NotifyPolicy StreamMonitorNotifyPolicyPtrInput
	// Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
	OcrLanguage pulumi.IntPtrInput
	// Monitor task output info.
	OutputInfo StreamMonitorOutputInfoPtrInput
}

func (StreamMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamMonitorState)(nil)).Elem()
}

type streamMonitorArgs struct {
	// AI asr input index list.(first input index is 1.).
	AiAsrInputIndexLists []int `pulumi:"aiAsrInputIndexLists"`
	// If enable format diagnose.
	AiFormatDiagnose *int `pulumi:"aiFormatDiagnose"`
	// Ai ocr input index list(first input index is 1.).
	AiOcrInputIndexLists []int `pulumi:"aiOcrInputIndexLists"`
	// If store monitor event.
	AllowMonitorReport *int `pulumi:"allowMonitorReport"`
	// Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
	AsrLanguage *int `pulumi:"asrLanguage"`
	// If enable stream broken check.
	CheckStreamBroken *int `pulumi:"checkStreamBroken"`
	// If enable low frame rate check.
	CheckStreamLowFrameRate *int `pulumi:"checkStreamLowFrameRate"`
	// Wait monitor input info list.
	InputLists []StreamMonitorInputList `pulumi:"inputLists"`
	// Monitor task name.
	MonitorName *string `pulumi:"monitorName"`
	// Monitor event notify policy.
	NotifyPolicy *StreamMonitorNotifyPolicy `pulumi:"notifyPolicy"`
	// Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
	OcrLanguage *int `pulumi:"ocrLanguage"`
	// Monitor task output info.
	OutputInfo StreamMonitorOutputInfo `pulumi:"outputInfo"`
}

// The set of arguments for constructing a StreamMonitor resource.
type StreamMonitorArgs struct {
	// AI asr input index list.(first input index is 1.).
	AiAsrInputIndexLists pulumi.IntArrayInput
	// If enable format diagnose.
	AiFormatDiagnose pulumi.IntPtrInput
	// Ai ocr input index list(first input index is 1.).
	AiOcrInputIndexLists pulumi.IntArrayInput
	// If store monitor event.
	AllowMonitorReport pulumi.IntPtrInput
	// Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
	AsrLanguage pulumi.IntPtrInput
	// If enable stream broken check.
	CheckStreamBroken pulumi.IntPtrInput
	// If enable low frame rate check.
	CheckStreamLowFrameRate pulumi.IntPtrInput
	// Wait monitor input info list.
	InputLists StreamMonitorInputListArrayInput
	// Monitor task name.
	MonitorName pulumi.StringPtrInput
	// Monitor event notify policy.
	NotifyPolicy StreamMonitorNotifyPolicyPtrInput
	// Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
	OcrLanguage pulumi.IntPtrInput
	// Monitor task output info.
	OutputInfo StreamMonitorOutputInfoInput
}

func (StreamMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamMonitorArgs)(nil)).Elem()
}

type StreamMonitorInput interface {
	pulumi.Input

	ToStreamMonitorOutput() StreamMonitorOutput
	ToStreamMonitorOutputWithContext(ctx context.Context) StreamMonitorOutput
}

func (*StreamMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamMonitor)(nil)).Elem()
}

func (i *StreamMonitor) ToStreamMonitorOutput() StreamMonitorOutput {
	return i.ToStreamMonitorOutputWithContext(context.Background())
}

func (i *StreamMonitor) ToStreamMonitorOutputWithContext(ctx context.Context) StreamMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMonitorOutput)
}

// StreamMonitorArrayInput is an input type that accepts StreamMonitorArray and StreamMonitorArrayOutput values.
// You can construct a concrete instance of `StreamMonitorArrayInput` via:
//
//	StreamMonitorArray{ StreamMonitorArgs{...} }
type StreamMonitorArrayInput interface {
	pulumi.Input

	ToStreamMonitorArrayOutput() StreamMonitorArrayOutput
	ToStreamMonitorArrayOutputWithContext(context.Context) StreamMonitorArrayOutput
}

type StreamMonitorArray []StreamMonitorInput

func (StreamMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamMonitor)(nil)).Elem()
}

func (i StreamMonitorArray) ToStreamMonitorArrayOutput() StreamMonitorArrayOutput {
	return i.ToStreamMonitorArrayOutputWithContext(context.Background())
}

func (i StreamMonitorArray) ToStreamMonitorArrayOutputWithContext(ctx context.Context) StreamMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMonitorArrayOutput)
}

// StreamMonitorMapInput is an input type that accepts StreamMonitorMap and StreamMonitorMapOutput values.
// You can construct a concrete instance of `StreamMonitorMapInput` via:
//
//	StreamMonitorMap{ "key": StreamMonitorArgs{...} }
type StreamMonitorMapInput interface {
	pulumi.Input

	ToStreamMonitorMapOutput() StreamMonitorMapOutput
	ToStreamMonitorMapOutputWithContext(context.Context) StreamMonitorMapOutput
}

type StreamMonitorMap map[string]StreamMonitorInput

func (StreamMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamMonitor)(nil)).Elem()
}

func (i StreamMonitorMap) ToStreamMonitorMapOutput() StreamMonitorMapOutput {
	return i.ToStreamMonitorMapOutputWithContext(context.Background())
}

func (i StreamMonitorMap) ToStreamMonitorMapOutputWithContext(ctx context.Context) StreamMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamMonitorMapOutput)
}

type StreamMonitorOutput struct{ *pulumi.OutputState }

func (StreamMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamMonitor)(nil)).Elem()
}

func (o StreamMonitorOutput) ToStreamMonitorOutput() StreamMonitorOutput {
	return o
}

func (o StreamMonitorOutput) ToStreamMonitorOutputWithContext(ctx context.Context) StreamMonitorOutput {
	return o
}

// AI asr input index list.(first input index is 1.).
func (o StreamMonitorOutput) AiAsrInputIndexLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntArrayOutput { return v.AiAsrInputIndexLists }).(pulumi.IntArrayOutput)
}

// If enable format diagnose.
func (o StreamMonitorOutput) AiFormatDiagnose() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntPtrOutput { return v.AiFormatDiagnose }).(pulumi.IntPtrOutput)
}

// Ai ocr input index list(first input index is 1.).
func (o StreamMonitorOutput) AiOcrInputIndexLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntArrayOutput { return v.AiOcrInputIndexLists }).(pulumi.IntArrayOutput)
}

// If store monitor event.
func (o StreamMonitorOutput) AllowMonitorReport() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntPtrOutput { return v.AllowMonitorReport }).(pulumi.IntPtrOutput)
}

// Asr language.0: close.1: Chinese2: English3: Japanese4: Korean.
func (o StreamMonitorOutput) AsrLanguage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntPtrOutput { return v.AsrLanguage }).(pulumi.IntPtrOutput)
}

// If enable stream broken check.
func (o StreamMonitorOutput) CheckStreamBroken() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntPtrOutput { return v.CheckStreamBroken }).(pulumi.IntPtrOutput)
}

// If enable low frame rate check.
func (o StreamMonitorOutput) CheckStreamLowFrameRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntPtrOutput { return v.CheckStreamLowFrameRate }).(pulumi.IntPtrOutput)
}

// Wait monitor input info list.
func (o StreamMonitorOutput) InputLists() StreamMonitorInputListArrayOutput {
	return o.ApplyT(func(v *StreamMonitor) StreamMonitorInputListArrayOutput { return v.InputLists }).(StreamMonitorInputListArrayOutput)
}

// Monitor task name.
func (o StreamMonitorOutput) MonitorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.StringPtrOutput { return v.MonitorName }).(pulumi.StringPtrOutput)
}

// Monitor event notify policy.
func (o StreamMonitorOutput) NotifyPolicy() StreamMonitorNotifyPolicyPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) StreamMonitorNotifyPolicyPtrOutput { return v.NotifyPolicy }).(StreamMonitorNotifyPolicyPtrOutput)
}

// Intelligent text recognition language settings: ocr language.0: close.1. Chinese,English.
func (o StreamMonitorOutput) OcrLanguage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *StreamMonitor) pulumi.IntPtrOutput { return v.OcrLanguage }).(pulumi.IntPtrOutput)
}

// Monitor task output info.
func (o StreamMonitorOutput) OutputInfo() StreamMonitorOutputInfoOutput {
	return o.ApplyT(func(v *StreamMonitor) StreamMonitorOutputInfoOutput { return v.OutputInfo }).(StreamMonitorOutputInfoOutput)
}

type StreamMonitorArrayOutput struct{ *pulumi.OutputState }

func (StreamMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamMonitor)(nil)).Elem()
}

func (o StreamMonitorArrayOutput) ToStreamMonitorArrayOutput() StreamMonitorArrayOutput {
	return o
}

func (o StreamMonitorArrayOutput) ToStreamMonitorArrayOutputWithContext(ctx context.Context) StreamMonitorArrayOutput {
	return o
}

func (o StreamMonitorArrayOutput) Index(i pulumi.IntInput) StreamMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamMonitor {
		return vs[0].([]*StreamMonitor)[vs[1].(int)]
	}).(StreamMonitorOutput)
}

type StreamMonitorMapOutput struct{ *pulumi.OutputState }

func (StreamMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamMonitor)(nil)).Elem()
}

func (o StreamMonitorMapOutput) ToStreamMonitorMapOutput() StreamMonitorMapOutput {
	return o
}

func (o StreamMonitorMapOutput) ToStreamMonitorMapOutputWithContext(ctx context.Context) StreamMonitorMapOutput {
	return o
}

func (o StreamMonitorMapOutput) MapIndex(k pulumi.StringInput) StreamMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamMonitor {
		return vs[0].(map[string]*StreamMonitor)[vs[1].(string)]
	}).(StreamMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMonitorInput)(nil)).Elem(), &StreamMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMonitorArrayInput)(nil)).Elem(), StreamMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamMonitorMapInput)(nil)).Elem(), StreamMonitorMap{})
	pulumi.RegisterOutputType(StreamMonitorOutput{})
	pulumi.RegisterOutputType(StreamMonitorArrayOutput{})
	pulumi.RegisterOutputType(StreamMonitorMapOutput{})
}
