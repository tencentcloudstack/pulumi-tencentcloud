// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css timeshiftRuleAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewTimeshiftRuleAttachment(ctx, "timeshiftRuleAttachment", &Css.TimeshiftRuleAttachmentArgs{
//				AppName:    pulumi.String("qqq"),
//				DomainName: pulumi.String("177154.push.tlivecloud.com"),
//				StreamName: pulumi.String("ppp"),
//				TemplateId: pulumi.Int(252586),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css timeshift_rule_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment timeshift_rule_attachment templateId#domainName
//
// ```
type TimeshiftRuleAttachment struct {
	pulumi.CustomResourceState

	// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// The push domain.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// The template ID.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
}

// NewTimeshiftRuleAttachment registers a new resource with the given unique name, arguments, and options.
func NewTimeshiftRuleAttachment(ctx *pulumi.Context,
	name string, args *TimeshiftRuleAttachmentArgs, opts ...pulumi.ResourceOption) (*TimeshiftRuleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TimeshiftRuleAttachment
	err := ctx.RegisterResource("tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimeshiftRuleAttachment gets an existing TimeshiftRuleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimeshiftRuleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimeshiftRuleAttachmentState, opts ...pulumi.ResourceOption) (*TimeshiftRuleAttachment, error) {
	var resource TimeshiftRuleAttachment
	err := ctx.ReadResource("tencentcloud:Css/timeshiftRuleAttachment:TimeshiftRuleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TimeshiftRuleAttachment resources.
type timeshiftRuleAttachmentState struct {
	// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
	AppName *string `pulumi:"appName"`
	// The push domain.
	DomainName *string `pulumi:"domainName"`
	// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
	StreamName *string `pulumi:"streamName"`
	// The template ID.
	TemplateId *int `pulumi:"templateId"`
}

type TimeshiftRuleAttachmentState struct {
	// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
	AppName pulumi.StringPtrInput
	// The push domain.
	DomainName pulumi.StringPtrInput
	// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
	StreamName pulumi.StringPtrInput
	// The template ID.
	TemplateId pulumi.IntPtrInput
}

func (TimeshiftRuleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*timeshiftRuleAttachmentState)(nil)).Elem()
}

type timeshiftRuleAttachmentArgs struct {
	// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
	AppName string `pulumi:"appName"`
	// The push domain.
	DomainName string `pulumi:"domainName"`
	// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
	StreamName string `pulumi:"streamName"`
	// The template ID.
	TemplateId int `pulumi:"templateId"`
}

// The set of arguments for constructing a TimeshiftRuleAttachment resource.
type TimeshiftRuleAttachmentArgs struct {
	// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
	AppName pulumi.StringInput
	// The push domain.
	DomainName pulumi.StringInput
	// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
	StreamName pulumi.StringInput
	// The template ID.
	TemplateId pulumi.IntInput
}

func (TimeshiftRuleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timeshiftRuleAttachmentArgs)(nil)).Elem()
}

type TimeshiftRuleAttachmentInput interface {
	pulumi.Input

	ToTimeshiftRuleAttachmentOutput() TimeshiftRuleAttachmentOutput
	ToTimeshiftRuleAttachmentOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentOutput
}

func (*TimeshiftRuleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeshiftRuleAttachment)(nil)).Elem()
}

func (i *TimeshiftRuleAttachment) ToTimeshiftRuleAttachmentOutput() TimeshiftRuleAttachmentOutput {
	return i.ToTimeshiftRuleAttachmentOutputWithContext(context.Background())
}

func (i *TimeshiftRuleAttachment) ToTimeshiftRuleAttachmentOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeshiftRuleAttachmentOutput)
}

// TimeshiftRuleAttachmentArrayInput is an input type that accepts TimeshiftRuleAttachmentArray and TimeshiftRuleAttachmentArrayOutput values.
// You can construct a concrete instance of `TimeshiftRuleAttachmentArrayInput` via:
//
//	TimeshiftRuleAttachmentArray{ TimeshiftRuleAttachmentArgs{...} }
type TimeshiftRuleAttachmentArrayInput interface {
	pulumi.Input

	ToTimeshiftRuleAttachmentArrayOutput() TimeshiftRuleAttachmentArrayOutput
	ToTimeshiftRuleAttachmentArrayOutputWithContext(context.Context) TimeshiftRuleAttachmentArrayOutput
}

type TimeshiftRuleAttachmentArray []TimeshiftRuleAttachmentInput

func (TimeshiftRuleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeshiftRuleAttachment)(nil)).Elem()
}

func (i TimeshiftRuleAttachmentArray) ToTimeshiftRuleAttachmentArrayOutput() TimeshiftRuleAttachmentArrayOutput {
	return i.ToTimeshiftRuleAttachmentArrayOutputWithContext(context.Background())
}

func (i TimeshiftRuleAttachmentArray) ToTimeshiftRuleAttachmentArrayOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeshiftRuleAttachmentArrayOutput)
}

// TimeshiftRuleAttachmentMapInput is an input type that accepts TimeshiftRuleAttachmentMap and TimeshiftRuleAttachmentMapOutput values.
// You can construct a concrete instance of `TimeshiftRuleAttachmentMapInput` via:
//
//	TimeshiftRuleAttachmentMap{ "key": TimeshiftRuleAttachmentArgs{...} }
type TimeshiftRuleAttachmentMapInput interface {
	pulumi.Input

	ToTimeshiftRuleAttachmentMapOutput() TimeshiftRuleAttachmentMapOutput
	ToTimeshiftRuleAttachmentMapOutputWithContext(context.Context) TimeshiftRuleAttachmentMapOutput
}

type TimeshiftRuleAttachmentMap map[string]TimeshiftRuleAttachmentInput

func (TimeshiftRuleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeshiftRuleAttachment)(nil)).Elem()
}

func (i TimeshiftRuleAttachmentMap) ToTimeshiftRuleAttachmentMapOutput() TimeshiftRuleAttachmentMapOutput {
	return i.ToTimeshiftRuleAttachmentMapOutputWithContext(context.Background())
}

func (i TimeshiftRuleAttachmentMap) ToTimeshiftRuleAttachmentMapOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimeshiftRuleAttachmentMapOutput)
}

type TimeshiftRuleAttachmentOutput struct{ *pulumi.OutputState }

func (TimeshiftRuleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TimeshiftRuleAttachment)(nil)).Elem()
}

func (o TimeshiftRuleAttachmentOutput) ToTimeshiftRuleAttachmentOutput() TimeshiftRuleAttachmentOutput {
	return o
}

func (o TimeshiftRuleAttachmentOutput) ToTimeshiftRuleAttachmentOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentOutput {
	return o
}

// The push path, which should be the same as `AppName` in the push and playback URLs. The default value is `live`.
func (o TimeshiftRuleAttachmentOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeshiftRuleAttachment) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// The push domain.
func (o TimeshiftRuleAttachmentOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeshiftRuleAttachment) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// The stream name.Note: If you pass in a non-empty string, the rule will only be applied to the specified stream.
func (o TimeshiftRuleAttachmentOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *TimeshiftRuleAttachment) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

// The template ID.
func (o TimeshiftRuleAttachmentOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *TimeshiftRuleAttachment) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

type TimeshiftRuleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (TimeshiftRuleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TimeshiftRuleAttachment)(nil)).Elem()
}

func (o TimeshiftRuleAttachmentArrayOutput) ToTimeshiftRuleAttachmentArrayOutput() TimeshiftRuleAttachmentArrayOutput {
	return o
}

func (o TimeshiftRuleAttachmentArrayOutput) ToTimeshiftRuleAttachmentArrayOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentArrayOutput {
	return o
}

func (o TimeshiftRuleAttachmentArrayOutput) Index(i pulumi.IntInput) TimeshiftRuleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TimeshiftRuleAttachment {
		return vs[0].([]*TimeshiftRuleAttachment)[vs[1].(int)]
	}).(TimeshiftRuleAttachmentOutput)
}

type TimeshiftRuleAttachmentMapOutput struct{ *pulumi.OutputState }

func (TimeshiftRuleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TimeshiftRuleAttachment)(nil)).Elem()
}

func (o TimeshiftRuleAttachmentMapOutput) ToTimeshiftRuleAttachmentMapOutput() TimeshiftRuleAttachmentMapOutput {
	return o
}

func (o TimeshiftRuleAttachmentMapOutput) ToTimeshiftRuleAttachmentMapOutputWithContext(ctx context.Context) TimeshiftRuleAttachmentMapOutput {
	return o
}

func (o TimeshiftRuleAttachmentMapOutput) MapIndex(k pulumi.StringInput) TimeshiftRuleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TimeshiftRuleAttachment {
		return vs[0].(map[string]*TimeshiftRuleAttachment)[vs[1].(string)]
	}).(TimeshiftRuleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimeshiftRuleAttachmentInput)(nil)).Elem(), &TimeshiftRuleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeshiftRuleAttachmentArrayInput)(nil)).Elem(), TimeshiftRuleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimeshiftRuleAttachmentMapInput)(nil)).Elem(), TimeshiftRuleAttachmentMap{})
	pulumi.RegisterOutputType(TimeshiftRuleAttachmentOutput{})
	pulumi.RegisterOutputType(TimeshiftRuleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(TimeshiftRuleAttachmentMapOutput{})
}
