// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RecordTemplate struct {
	pulumi.CustomResourceState

	// Aac recording parameters are set when Aac recording is enabled.
	AacParam RecordTemplateAacParamPtrOutput `pulumi:"aacParam"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Flv recording parameters are set when Flv recording is enabled.
	FlvParam RecordTemplateFlvParamPtrOutput `pulumi:"flvParam"`
	// FLV records special parameters.
	FlvSpecialParam RecordTemplateFlvSpecialParamPtrOutput `pulumi:"flvSpecialParam"`
	// Hls recording parameters, which are set when hls recording is enabled.
	HlsParam RecordTemplateHlsParamPtrOutput `pulumi:"hlsParam"`
	// HLS specific recording parameters.
	HlsSpecialParam RecordTemplateHlsSpecialParamPtrOutput `pulumi:"hlsSpecialParam"`
	// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
	IsDelayLive pulumi.IntPtrOutput `pulumi:"isDelayLive"`
	// Mp3 recording parameters are set when Mp3 recording is turned on.
	Mp3Param RecordTemplateMp3ParamPtrOutput `pulumi:"mp3Param"`
	// Mp4 recording parameters are set when Mp4 recording is enabled.
	Mp4Param RecordTemplateMp4ParamPtrOutput `pulumi:"mp4Param"`
	// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
	RemoveWatermark pulumi.BoolPtrOutput `pulumi:"removeWatermark"`
	// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewRecordTemplate registers a new resource with the given unique name, arguments, and options.
func NewRecordTemplate(ctx *pulumi.Context,
	name string, args *RecordTemplateArgs, opts ...pulumi.ResourceOption) (*RecordTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RecordTemplate
	err := ctx.RegisterResource("tencentcloud:Css/recordTemplate:RecordTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordTemplate gets an existing RecordTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordTemplateState, opts ...pulumi.ResourceOption) (*RecordTemplate, error) {
	var resource RecordTemplate
	err := ctx.ReadResource("tencentcloud:Css/recordTemplate:RecordTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordTemplate resources.
type recordTemplateState struct {
	// Aac recording parameters are set when Aac recording is enabled.
	AacParam *RecordTemplateAacParam `pulumi:"aacParam"`
	// Description.
	Description *string `pulumi:"description"`
	// Flv recording parameters are set when Flv recording is enabled.
	FlvParam *RecordTemplateFlvParam `pulumi:"flvParam"`
	// FLV records special parameters.
	FlvSpecialParam *RecordTemplateFlvSpecialParam `pulumi:"flvSpecialParam"`
	// Hls recording parameters, which are set when hls recording is enabled.
	HlsParam *RecordTemplateHlsParam `pulumi:"hlsParam"`
	// HLS specific recording parameters.
	HlsSpecialParam *RecordTemplateHlsSpecialParam `pulumi:"hlsSpecialParam"`
	// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
	IsDelayLive *int `pulumi:"isDelayLive"`
	// Mp3 recording parameters are set when Mp3 recording is turned on.
	Mp3Param *RecordTemplateMp3Param `pulumi:"mp3Param"`
	// Mp4 recording parameters are set when Mp4 recording is enabled.
	Mp4Param *RecordTemplateMp4Param `pulumi:"mp4Param"`
	// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
	RemoveWatermark *bool `pulumi:"removeWatermark"`
	// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
	TemplateName *string `pulumi:"templateName"`
}

type RecordTemplateState struct {
	// Aac recording parameters are set when Aac recording is enabled.
	AacParam RecordTemplateAacParamPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Flv recording parameters are set when Flv recording is enabled.
	FlvParam RecordTemplateFlvParamPtrInput
	// FLV records special parameters.
	FlvSpecialParam RecordTemplateFlvSpecialParamPtrInput
	// Hls recording parameters, which are set when hls recording is enabled.
	HlsParam RecordTemplateHlsParamPtrInput
	// HLS specific recording parameters.
	HlsSpecialParam RecordTemplateHlsSpecialParamPtrInput
	// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
	IsDelayLive pulumi.IntPtrInput
	// Mp3 recording parameters are set when Mp3 recording is turned on.
	Mp3Param RecordTemplateMp3ParamPtrInput
	// Mp4 recording parameters are set when Mp4 recording is enabled.
	Mp4Param RecordTemplateMp4ParamPtrInput
	// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
	RemoveWatermark pulumi.BoolPtrInput
	// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
	TemplateName pulumi.StringPtrInput
}

func (RecordTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordTemplateState)(nil)).Elem()
}

type recordTemplateArgs struct {
	// Aac recording parameters are set when Aac recording is enabled.
	AacParam *RecordTemplateAacParam `pulumi:"aacParam"`
	// Description.
	Description *string `pulumi:"description"`
	// Flv recording parameters are set when Flv recording is enabled.
	FlvParam *RecordTemplateFlvParam `pulumi:"flvParam"`
	// FLV records special parameters.
	FlvSpecialParam *RecordTemplateFlvSpecialParam `pulumi:"flvSpecialParam"`
	// Hls recording parameters, which are set when hls recording is enabled.
	HlsParam *RecordTemplateHlsParam `pulumi:"hlsParam"`
	// HLS specific recording parameters.
	HlsSpecialParam *RecordTemplateHlsSpecialParam `pulumi:"hlsSpecialParam"`
	// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
	IsDelayLive *int `pulumi:"isDelayLive"`
	// Mp3 recording parameters are set when Mp3 recording is turned on.
	Mp3Param *RecordTemplateMp3Param `pulumi:"mp3Param"`
	// Mp4 recording parameters are set when Mp4 recording is enabled.
	Mp4Param *RecordTemplateMp4Param `pulumi:"mp4Param"`
	// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
	RemoveWatermark *bool `pulumi:"removeWatermark"`
	// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a RecordTemplate resource.
type RecordTemplateArgs struct {
	// Aac recording parameters are set when Aac recording is enabled.
	AacParam RecordTemplateAacParamPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Flv recording parameters are set when Flv recording is enabled.
	FlvParam RecordTemplateFlvParamPtrInput
	// FLV records special parameters.
	FlvSpecialParam RecordTemplateFlvSpecialParamPtrInput
	// Hls recording parameters, which are set when hls recording is enabled.
	HlsParam RecordTemplateHlsParamPtrInput
	// HLS specific recording parameters.
	HlsSpecialParam RecordTemplateHlsSpecialParamPtrInput
	// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
	IsDelayLive pulumi.IntPtrInput
	// Mp3 recording parameters are set when Mp3 recording is turned on.
	Mp3Param RecordTemplateMp3ParamPtrInput
	// Mp4 recording parameters are set when Mp4 recording is enabled.
	Mp4Param RecordTemplateMp4ParamPtrInput
	// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
	RemoveWatermark pulumi.BoolPtrInput
	// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
	TemplateName pulumi.StringInput
}

func (RecordTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordTemplateArgs)(nil)).Elem()
}

type RecordTemplateInput interface {
	pulumi.Input

	ToRecordTemplateOutput() RecordTemplateOutput
	ToRecordTemplateOutputWithContext(ctx context.Context) RecordTemplateOutput
}

func (*RecordTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordTemplate)(nil)).Elem()
}

func (i *RecordTemplate) ToRecordTemplateOutput() RecordTemplateOutput {
	return i.ToRecordTemplateOutputWithContext(context.Background())
}

func (i *RecordTemplate) ToRecordTemplateOutputWithContext(ctx context.Context) RecordTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordTemplateOutput)
}

// RecordTemplateArrayInput is an input type that accepts RecordTemplateArray and RecordTemplateArrayOutput values.
// You can construct a concrete instance of `RecordTemplateArrayInput` via:
//
//	RecordTemplateArray{ RecordTemplateArgs{...} }
type RecordTemplateArrayInput interface {
	pulumi.Input

	ToRecordTemplateArrayOutput() RecordTemplateArrayOutput
	ToRecordTemplateArrayOutputWithContext(context.Context) RecordTemplateArrayOutput
}

type RecordTemplateArray []RecordTemplateInput

func (RecordTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordTemplate)(nil)).Elem()
}

func (i RecordTemplateArray) ToRecordTemplateArrayOutput() RecordTemplateArrayOutput {
	return i.ToRecordTemplateArrayOutputWithContext(context.Background())
}

func (i RecordTemplateArray) ToRecordTemplateArrayOutputWithContext(ctx context.Context) RecordTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordTemplateArrayOutput)
}

// RecordTemplateMapInput is an input type that accepts RecordTemplateMap and RecordTemplateMapOutput values.
// You can construct a concrete instance of `RecordTemplateMapInput` via:
//
//	RecordTemplateMap{ "key": RecordTemplateArgs{...} }
type RecordTemplateMapInput interface {
	pulumi.Input

	ToRecordTemplateMapOutput() RecordTemplateMapOutput
	ToRecordTemplateMapOutputWithContext(context.Context) RecordTemplateMapOutput
}

type RecordTemplateMap map[string]RecordTemplateInput

func (RecordTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordTemplate)(nil)).Elem()
}

func (i RecordTemplateMap) ToRecordTemplateMapOutput() RecordTemplateMapOutput {
	return i.ToRecordTemplateMapOutputWithContext(context.Background())
}

func (i RecordTemplateMap) ToRecordTemplateMapOutputWithContext(ctx context.Context) RecordTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordTemplateMapOutput)
}

type RecordTemplateOutput struct{ *pulumi.OutputState }

func (RecordTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordTemplate)(nil)).Elem()
}

func (o RecordTemplateOutput) ToRecordTemplateOutput() RecordTemplateOutput {
	return o
}

func (o RecordTemplateOutput) ToRecordTemplateOutputWithContext(ctx context.Context) RecordTemplateOutput {
	return o
}

// Aac recording parameters are set when Aac recording is enabled.
func (o RecordTemplateOutput) AacParam() RecordTemplateAacParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateAacParamPtrOutput { return v.AacParam }).(RecordTemplateAacParamPtrOutput)
}

// Description.
func (o RecordTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Flv recording parameters are set when Flv recording is enabled.
func (o RecordTemplateOutput) FlvParam() RecordTemplateFlvParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateFlvParamPtrOutput { return v.FlvParam }).(RecordTemplateFlvParamPtrOutput)
}

// FLV records special parameters.
func (o RecordTemplateOutput) FlvSpecialParam() RecordTemplateFlvSpecialParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateFlvSpecialParamPtrOutput { return v.FlvSpecialParam }).(RecordTemplateFlvSpecialParamPtrOutput)
}

// Hls recording parameters, which are set when hls recording is enabled.
func (o RecordTemplateOutput) HlsParam() RecordTemplateHlsParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateHlsParamPtrOutput { return v.HlsParam }).(RecordTemplateHlsParamPtrOutput)
}

// HLS specific recording parameters.
func (o RecordTemplateOutput) HlsSpecialParam() RecordTemplateHlsSpecialParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateHlsSpecialParamPtrOutput { return v.HlsSpecialParam }).(RecordTemplateHlsSpecialParamPtrOutput)
}

// Live broadcast type, 0 by default. 0: Ordinary live broadcast, 1: Slow broadcast.
func (o RecordTemplateOutput) IsDelayLive() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) pulumi.IntPtrOutput { return v.IsDelayLive }).(pulumi.IntPtrOutput)
}

// Mp3 recording parameters are set when Mp3 recording is turned on.
func (o RecordTemplateOutput) Mp3Param() RecordTemplateMp3ParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateMp3ParamPtrOutput { return v.Mp3Param }).(RecordTemplateMp3ParamPtrOutput)
}

// Mp4 recording parameters are set when Mp4 recording is enabled.
func (o RecordTemplateOutput) Mp4Param() RecordTemplateMp4ParamPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) RecordTemplateMp4ParamPtrOutput { return v.Mp4Param }).(RecordTemplateMp4ParamPtrOutput)
}

// Whether to remove the watermark. This parameter is invalid when the type is slow live broadcast.
func (o RecordTemplateOutput) RemoveWatermark() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RecordTemplate) pulumi.BoolPtrOutput { return v.RemoveWatermark }).(pulumi.BoolPtrOutput)
}

// Template name. Only `Chinese`, `English`, `numbers`, `_`, `-` are supported.
func (o RecordTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

type RecordTemplateArrayOutput struct{ *pulumi.OutputState }

func (RecordTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordTemplate)(nil)).Elem()
}

func (o RecordTemplateArrayOutput) ToRecordTemplateArrayOutput() RecordTemplateArrayOutput {
	return o
}

func (o RecordTemplateArrayOutput) ToRecordTemplateArrayOutputWithContext(ctx context.Context) RecordTemplateArrayOutput {
	return o
}

func (o RecordTemplateArrayOutput) Index(i pulumi.IntInput) RecordTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecordTemplate {
		return vs[0].([]*RecordTemplate)[vs[1].(int)]
	}).(RecordTemplateOutput)
}

type RecordTemplateMapOutput struct{ *pulumi.OutputState }

func (RecordTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordTemplate)(nil)).Elem()
}

func (o RecordTemplateMapOutput) ToRecordTemplateMapOutput() RecordTemplateMapOutput {
	return o
}

func (o RecordTemplateMapOutput) ToRecordTemplateMapOutputWithContext(ctx context.Context) RecordTemplateMapOutput {
	return o
}

func (o RecordTemplateMapOutput) MapIndex(k pulumi.StringInput) RecordTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecordTemplate {
		return vs[0].(map[string]*RecordTemplate)[vs[1].(string)]
	}).(RecordTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordTemplateInput)(nil)).Elem(), &RecordTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordTemplateArrayInput)(nil)).Elem(), RecordTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordTemplateMapInput)(nil)).Elem(), RecordTemplateMap{})
	pulumi.RegisterOutputType(RecordTemplateOutput{})
	pulumi.RegisterOutputType(RecordTemplateArrayOutput{})
	pulumi.RegisterOutputType(RecordTemplateMapOutput{})
}
