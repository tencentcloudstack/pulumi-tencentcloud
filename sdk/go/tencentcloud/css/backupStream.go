// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css backupStream
//
// > **NOTE:** This resource is only valid when the push stream. When the push stream ends, it will be deleted.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewBackupStream(ctx, "backupStream", &Css.BackupStreamArgs{
//				AppName:          pulumi.String("live"),
//				PushDomainName:   pulumi.String("177154.push.tlivecloud.com"),
//				StreamName:       pulumi.String("1308919341_test"),
//				UpstreamSequence: pulumi.String("2209501773993286139"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css backup_stream can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/backupStream:BackupStream backup_stream pushDomainName#appName#streamName
//
// ```
type BackupStream struct {
	pulumi.CustomResourceState

	// App name.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// Push domain.
	PushDomainName pulumi.StringOutput `pulumi:"pushDomainName"`
	// Stream id.
	StreamName pulumi.StringOutput `pulumi:"streamName"`
	// Sequence.
	UpstreamSequence pulumi.StringOutput `pulumi:"upstreamSequence"`
}

// NewBackupStream registers a new resource with the given unique name, arguments, and options.
func NewBackupStream(ctx *pulumi.Context,
	name string, args *BackupStreamArgs, opts ...pulumi.ResourceOption) (*BackupStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.PushDomainName == nil {
		return nil, errors.New("invalid value for required argument 'PushDomainName'")
	}
	if args.StreamName == nil {
		return nil, errors.New("invalid value for required argument 'StreamName'")
	}
	if args.UpstreamSequence == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamSequence'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BackupStream
	err := ctx.RegisterResource("tencentcloud:Css/backupStream:BackupStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupStream gets an existing BackupStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupStreamState, opts ...pulumi.ResourceOption) (*BackupStream, error) {
	var resource BackupStream
	err := ctx.ReadResource("tencentcloud:Css/backupStream:BackupStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupStream resources.
type backupStreamState struct {
	// App name.
	AppName *string `pulumi:"appName"`
	// Push domain.
	PushDomainName *string `pulumi:"pushDomainName"`
	// Stream id.
	StreamName *string `pulumi:"streamName"`
	// Sequence.
	UpstreamSequence *string `pulumi:"upstreamSequence"`
}

type BackupStreamState struct {
	// App name.
	AppName pulumi.StringPtrInput
	// Push domain.
	PushDomainName pulumi.StringPtrInput
	// Stream id.
	StreamName pulumi.StringPtrInput
	// Sequence.
	UpstreamSequence pulumi.StringPtrInput
}

func (BackupStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupStreamState)(nil)).Elem()
}

type backupStreamArgs struct {
	// App name.
	AppName string `pulumi:"appName"`
	// Push domain.
	PushDomainName string `pulumi:"pushDomainName"`
	// Stream id.
	StreamName string `pulumi:"streamName"`
	// Sequence.
	UpstreamSequence string `pulumi:"upstreamSequence"`
}

// The set of arguments for constructing a BackupStream resource.
type BackupStreamArgs struct {
	// App name.
	AppName pulumi.StringInput
	// Push domain.
	PushDomainName pulumi.StringInput
	// Stream id.
	StreamName pulumi.StringInput
	// Sequence.
	UpstreamSequence pulumi.StringInput
}

func (BackupStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupStreamArgs)(nil)).Elem()
}

type BackupStreamInput interface {
	pulumi.Input

	ToBackupStreamOutput() BackupStreamOutput
	ToBackupStreamOutputWithContext(ctx context.Context) BackupStreamOutput
}

func (*BackupStream) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStream)(nil)).Elem()
}

func (i *BackupStream) ToBackupStreamOutput() BackupStreamOutput {
	return i.ToBackupStreamOutputWithContext(context.Background())
}

func (i *BackupStream) ToBackupStreamOutputWithContext(ctx context.Context) BackupStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStreamOutput)
}

// BackupStreamArrayInput is an input type that accepts BackupStreamArray and BackupStreamArrayOutput values.
// You can construct a concrete instance of `BackupStreamArrayInput` via:
//
//	BackupStreamArray{ BackupStreamArgs{...} }
type BackupStreamArrayInput interface {
	pulumi.Input

	ToBackupStreamArrayOutput() BackupStreamArrayOutput
	ToBackupStreamArrayOutputWithContext(context.Context) BackupStreamArrayOutput
}

type BackupStreamArray []BackupStreamInput

func (BackupStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupStream)(nil)).Elem()
}

func (i BackupStreamArray) ToBackupStreamArrayOutput() BackupStreamArrayOutput {
	return i.ToBackupStreamArrayOutputWithContext(context.Background())
}

func (i BackupStreamArray) ToBackupStreamArrayOutputWithContext(ctx context.Context) BackupStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStreamArrayOutput)
}

// BackupStreamMapInput is an input type that accepts BackupStreamMap and BackupStreamMapOutput values.
// You can construct a concrete instance of `BackupStreamMapInput` via:
//
//	BackupStreamMap{ "key": BackupStreamArgs{...} }
type BackupStreamMapInput interface {
	pulumi.Input

	ToBackupStreamMapOutput() BackupStreamMapOutput
	ToBackupStreamMapOutputWithContext(context.Context) BackupStreamMapOutput
}

type BackupStreamMap map[string]BackupStreamInput

func (BackupStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupStream)(nil)).Elem()
}

func (i BackupStreamMap) ToBackupStreamMapOutput() BackupStreamMapOutput {
	return i.ToBackupStreamMapOutputWithContext(context.Background())
}

func (i BackupStreamMap) ToBackupStreamMapOutputWithContext(ctx context.Context) BackupStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupStreamMapOutput)
}

type BackupStreamOutput struct{ *pulumi.OutputState }

func (BackupStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupStream)(nil)).Elem()
}

func (o BackupStreamOutput) ToBackupStreamOutput() BackupStreamOutput {
	return o
}

func (o BackupStreamOutput) ToBackupStreamOutputWithContext(ctx context.Context) BackupStreamOutput {
	return o
}

// App name.
func (o BackupStreamOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupStream) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// Push domain.
func (o BackupStreamOutput) PushDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupStream) pulumi.StringOutput { return v.PushDomainName }).(pulumi.StringOutput)
}

// Stream id.
func (o BackupStreamOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupStream) pulumi.StringOutput { return v.StreamName }).(pulumi.StringOutput)
}

// Sequence.
func (o BackupStreamOutput) UpstreamSequence() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupStream) pulumi.StringOutput { return v.UpstreamSequence }).(pulumi.StringOutput)
}

type BackupStreamArrayOutput struct{ *pulumi.OutputState }

func (BackupStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupStream)(nil)).Elem()
}

func (o BackupStreamArrayOutput) ToBackupStreamArrayOutput() BackupStreamArrayOutput {
	return o
}

func (o BackupStreamArrayOutput) ToBackupStreamArrayOutputWithContext(ctx context.Context) BackupStreamArrayOutput {
	return o
}

func (o BackupStreamArrayOutput) Index(i pulumi.IntInput) BackupStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupStream {
		return vs[0].([]*BackupStream)[vs[1].(int)]
	}).(BackupStreamOutput)
}

type BackupStreamMapOutput struct{ *pulumi.OutputState }

func (BackupStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupStream)(nil)).Elem()
}

func (o BackupStreamMapOutput) ToBackupStreamMapOutput() BackupStreamMapOutput {
	return o
}

func (o BackupStreamMapOutput) ToBackupStreamMapOutputWithContext(ctx context.Context) BackupStreamMapOutput {
	return o
}

func (o BackupStreamMapOutput) MapIndex(k pulumi.StringInput) BackupStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupStream {
		return vs[0].(map[string]*BackupStream)[vs[1].(string)]
	}).(BackupStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStreamInput)(nil)).Elem(), &BackupStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStreamArrayInput)(nil)).Elem(), BackupStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupStreamMapInput)(nil)).Elem(), BackupStreamMap{})
	pulumi.RegisterOutputType(BackupStreamOutput{})
	pulumi.RegisterOutputType(BackupStreamArrayOutput{})
	pulumi.RegisterOutputType(BackupStreamMapOutput{})
}
