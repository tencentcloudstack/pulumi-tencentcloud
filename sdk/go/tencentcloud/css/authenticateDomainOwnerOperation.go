// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to verify the domain ownership by specified way when DomainNeedVerifyOwner failed in domain creation.
//
// ## Example Usage
// ### dnsCheck way:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewAuthenticateDomainOwnerOperation(ctx, "dnsCheck", &Css.AuthenticateDomainOwnerOperationArgs{
//				DomainName: pulumi.String("your_domain_name"),
//				VerifyType: pulumi.String("dnsCheck"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### fileCheck way:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewAuthenticateDomainOwnerOperation(ctx, "fileCheck", &Css.AuthenticateDomainOwnerOperationArgs{
//				DomainName: pulumi.String("your_domain_name"),
//				VerifyType: pulumi.String("fileCheck"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type AuthenticateDomainOwnerOperation struct {
	pulumi.CustomResourceState

	// The domain name to verify.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
	VerifyType pulumi.StringPtrOutput `pulumi:"verifyType"`
}

// NewAuthenticateDomainOwnerOperation registers a new resource with the given unique name, arguments, and options.
func NewAuthenticateDomainOwnerOperation(ctx *pulumi.Context,
	name string, args *AuthenticateDomainOwnerOperationArgs, opts ...pulumi.ResourceOption) (*AuthenticateDomainOwnerOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AuthenticateDomainOwnerOperation
	err := ctx.RegisterResource("tencentcloud:Css/authenticateDomainOwnerOperation:AuthenticateDomainOwnerOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthenticateDomainOwnerOperation gets an existing AuthenticateDomainOwnerOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthenticateDomainOwnerOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthenticateDomainOwnerOperationState, opts ...pulumi.ResourceOption) (*AuthenticateDomainOwnerOperation, error) {
	var resource AuthenticateDomainOwnerOperation
	err := ctx.ReadResource("tencentcloud:Css/authenticateDomainOwnerOperation:AuthenticateDomainOwnerOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuthenticateDomainOwnerOperation resources.
type authenticateDomainOwnerOperationState struct {
	// The domain name to verify.
	DomainName *string `pulumi:"domainName"`
	// Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
	VerifyType *string `pulumi:"verifyType"`
}

type AuthenticateDomainOwnerOperationState struct {
	// The domain name to verify.
	DomainName pulumi.StringPtrInput
	// Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
	VerifyType pulumi.StringPtrInput
}

func (AuthenticateDomainOwnerOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticateDomainOwnerOperationState)(nil)).Elem()
}

type authenticateDomainOwnerOperationArgs struct {
	// The domain name to verify.
	DomainName string `pulumi:"domainName"`
	// Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
	VerifyType *string `pulumi:"verifyType"`
}

// The set of arguments for constructing a AuthenticateDomainOwnerOperation resource.
type AuthenticateDomainOwnerOperationArgs struct {
	// The domain name to verify.
	DomainName pulumi.StringInput
	// Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
	VerifyType pulumi.StringPtrInput
}

func (AuthenticateDomainOwnerOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authenticateDomainOwnerOperationArgs)(nil)).Elem()
}

type AuthenticateDomainOwnerOperationInput interface {
	pulumi.Input

	ToAuthenticateDomainOwnerOperationOutput() AuthenticateDomainOwnerOperationOutput
	ToAuthenticateDomainOwnerOperationOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationOutput
}

func (*AuthenticateDomainOwnerOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticateDomainOwnerOperation)(nil)).Elem()
}

func (i *AuthenticateDomainOwnerOperation) ToAuthenticateDomainOwnerOperationOutput() AuthenticateDomainOwnerOperationOutput {
	return i.ToAuthenticateDomainOwnerOperationOutputWithContext(context.Background())
}

func (i *AuthenticateDomainOwnerOperation) ToAuthenticateDomainOwnerOperationOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticateDomainOwnerOperationOutput)
}

// AuthenticateDomainOwnerOperationArrayInput is an input type that accepts AuthenticateDomainOwnerOperationArray and AuthenticateDomainOwnerOperationArrayOutput values.
// You can construct a concrete instance of `AuthenticateDomainOwnerOperationArrayInput` via:
//
//	AuthenticateDomainOwnerOperationArray{ AuthenticateDomainOwnerOperationArgs{...} }
type AuthenticateDomainOwnerOperationArrayInput interface {
	pulumi.Input

	ToAuthenticateDomainOwnerOperationArrayOutput() AuthenticateDomainOwnerOperationArrayOutput
	ToAuthenticateDomainOwnerOperationArrayOutputWithContext(context.Context) AuthenticateDomainOwnerOperationArrayOutput
}

type AuthenticateDomainOwnerOperationArray []AuthenticateDomainOwnerOperationInput

func (AuthenticateDomainOwnerOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticateDomainOwnerOperation)(nil)).Elem()
}

func (i AuthenticateDomainOwnerOperationArray) ToAuthenticateDomainOwnerOperationArrayOutput() AuthenticateDomainOwnerOperationArrayOutput {
	return i.ToAuthenticateDomainOwnerOperationArrayOutputWithContext(context.Background())
}

func (i AuthenticateDomainOwnerOperationArray) ToAuthenticateDomainOwnerOperationArrayOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticateDomainOwnerOperationArrayOutput)
}

// AuthenticateDomainOwnerOperationMapInput is an input type that accepts AuthenticateDomainOwnerOperationMap and AuthenticateDomainOwnerOperationMapOutput values.
// You can construct a concrete instance of `AuthenticateDomainOwnerOperationMapInput` via:
//
//	AuthenticateDomainOwnerOperationMap{ "key": AuthenticateDomainOwnerOperationArgs{...} }
type AuthenticateDomainOwnerOperationMapInput interface {
	pulumi.Input

	ToAuthenticateDomainOwnerOperationMapOutput() AuthenticateDomainOwnerOperationMapOutput
	ToAuthenticateDomainOwnerOperationMapOutputWithContext(context.Context) AuthenticateDomainOwnerOperationMapOutput
}

type AuthenticateDomainOwnerOperationMap map[string]AuthenticateDomainOwnerOperationInput

func (AuthenticateDomainOwnerOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticateDomainOwnerOperation)(nil)).Elem()
}

func (i AuthenticateDomainOwnerOperationMap) ToAuthenticateDomainOwnerOperationMapOutput() AuthenticateDomainOwnerOperationMapOutput {
	return i.ToAuthenticateDomainOwnerOperationMapOutputWithContext(context.Background())
}

func (i AuthenticateDomainOwnerOperationMap) ToAuthenticateDomainOwnerOperationMapOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthenticateDomainOwnerOperationMapOutput)
}

type AuthenticateDomainOwnerOperationOutput struct{ *pulumi.OutputState }

func (AuthenticateDomainOwnerOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuthenticateDomainOwnerOperation)(nil)).Elem()
}

func (o AuthenticateDomainOwnerOperationOutput) ToAuthenticateDomainOwnerOperationOutput() AuthenticateDomainOwnerOperationOutput {
	return o
}

func (o AuthenticateDomainOwnerOperationOutput) ToAuthenticateDomainOwnerOperationOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationOutput {
	return o
}

// The domain name to verify.
func (o AuthenticateDomainOwnerOperationOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *AuthenticateDomainOwnerOperation) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Authentication type. Possible values:`dnsCheck`: Immediately verify whether the resolution record of the configured dns is consistent with the content to be verified, and save the record if successful.`fileCheck`: Immediately verify whether the web file is consistent with the content to be verified, and save the record if successful.`dbCheck`: Check if authentication has been successful.
func (o AuthenticateDomainOwnerOperationOutput) VerifyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuthenticateDomainOwnerOperation) pulumi.StringPtrOutput { return v.VerifyType }).(pulumi.StringPtrOutput)
}

type AuthenticateDomainOwnerOperationArrayOutput struct{ *pulumi.OutputState }

func (AuthenticateDomainOwnerOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuthenticateDomainOwnerOperation)(nil)).Elem()
}

func (o AuthenticateDomainOwnerOperationArrayOutput) ToAuthenticateDomainOwnerOperationArrayOutput() AuthenticateDomainOwnerOperationArrayOutput {
	return o
}

func (o AuthenticateDomainOwnerOperationArrayOutput) ToAuthenticateDomainOwnerOperationArrayOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationArrayOutput {
	return o
}

func (o AuthenticateDomainOwnerOperationArrayOutput) Index(i pulumi.IntInput) AuthenticateDomainOwnerOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuthenticateDomainOwnerOperation {
		return vs[0].([]*AuthenticateDomainOwnerOperation)[vs[1].(int)]
	}).(AuthenticateDomainOwnerOperationOutput)
}

type AuthenticateDomainOwnerOperationMapOutput struct{ *pulumi.OutputState }

func (AuthenticateDomainOwnerOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuthenticateDomainOwnerOperation)(nil)).Elem()
}

func (o AuthenticateDomainOwnerOperationMapOutput) ToAuthenticateDomainOwnerOperationMapOutput() AuthenticateDomainOwnerOperationMapOutput {
	return o
}

func (o AuthenticateDomainOwnerOperationMapOutput) ToAuthenticateDomainOwnerOperationMapOutputWithContext(ctx context.Context) AuthenticateDomainOwnerOperationMapOutput {
	return o
}

func (o AuthenticateDomainOwnerOperationMapOutput) MapIndex(k pulumi.StringInput) AuthenticateDomainOwnerOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuthenticateDomainOwnerOperation {
		return vs[0].(map[string]*AuthenticateDomainOwnerOperation)[vs[1].(string)]
	}).(AuthenticateDomainOwnerOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticateDomainOwnerOperationInput)(nil)).Elem(), &AuthenticateDomainOwnerOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticateDomainOwnerOperationArrayInput)(nil)).Elem(), AuthenticateDomainOwnerOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthenticateDomainOwnerOperationMapInput)(nil)).Elem(), AuthenticateDomainOwnerOperationMap{})
	pulumi.RegisterOutputType(AuthenticateDomainOwnerOperationOutput{})
	pulumi.RegisterOutputType(AuthenticateDomainOwnerOperationArrayOutput{})
	pulumi.RegisterOutputType(AuthenticateDomainOwnerOperationMapOutput{})
}
