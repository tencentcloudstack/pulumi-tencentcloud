// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css recordRule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewRecordRuleAttachment(ctx, "recordRule", &Css.RecordRuleAttachmentArgs{
//				AppName:    pulumi.String("qqq"),
//				DomainName: pulumi.String("177154.push.tlivecloud.com"),
//				StreamName: pulumi.String("ppp"),
//				TemplateId: pulumi.Int(1262818),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css record_rule can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/recordRuleAttachment:RecordRuleAttachment record_rule templateId#domainName
//
// ```
type RecordRuleAttachment struct {
	pulumi.CustomResourceState

	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName pulumi.StringPtrOutput `pulumi:"appName"`
	// Streaming domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Stream name. Note: If this parameter is set to a non empty string, the rule will only work on this streaming.
	StreamName pulumi.StringPtrOutput `pulumi:"streamName"`
	// Template ID.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
}

// NewRecordRuleAttachment registers a new resource with the given unique name, arguments, and options.
func NewRecordRuleAttachment(ctx *pulumi.Context,
	name string, args *RecordRuleAttachmentArgs, opts ...pulumi.ResourceOption) (*RecordRuleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RecordRuleAttachment
	err := ctx.RegisterResource("tencentcloud:Css/recordRuleAttachment:RecordRuleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordRuleAttachment gets an existing RecordRuleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordRuleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordRuleAttachmentState, opts ...pulumi.ResourceOption) (*RecordRuleAttachment, error) {
	var resource RecordRuleAttachment
	err := ctx.ReadResource("tencentcloud:Css/recordRuleAttachment:RecordRuleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordRuleAttachment resources.
type recordRuleAttachmentState struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName *string `pulumi:"appName"`
	// Streaming domain name.
	DomainName *string `pulumi:"domainName"`
	// Stream name. Note: If this parameter is set to a non empty string, the rule will only work on this streaming.
	StreamName *string `pulumi:"streamName"`
	// Template ID.
	TemplateId *int `pulumi:"templateId"`
}

type RecordRuleAttachmentState struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName pulumi.StringPtrInput
	// Streaming domain name.
	DomainName pulumi.StringPtrInput
	// Stream name. Note: If this parameter is set to a non empty string, the rule will only work on this streaming.
	StreamName pulumi.StringPtrInput
	// Template ID.
	TemplateId pulumi.IntPtrInput
}

func (RecordRuleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordRuleAttachmentState)(nil)).Elem()
}

type recordRuleAttachmentArgs struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName *string `pulumi:"appName"`
	// Streaming domain name.
	DomainName string `pulumi:"domainName"`
	// Stream name. Note: If this parameter is set to a non empty string, the rule will only work on this streaming.
	StreamName *string `pulumi:"streamName"`
	// Template ID.
	TemplateId int `pulumi:"templateId"`
}

// The set of arguments for constructing a RecordRuleAttachment resource.
type RecordRuleAttachmentArgs struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName pulumi.StringPtrInput
	// Streaming domain name.
	DomainName pulumi.StringInput
	// Stream name. Note: If this parameter is set to a non empty string, the rule will only work on this streaming.
	StreamName pulumi.StringPtrInput
	// Template ID.
	TemplateId pulumi.IntInput
}

func (RecordRuleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordRuleAttachmentArgs)(nil)).Elem()
}

type RecordRuleAttachmentInput interface {
	pulumi.Input

	ToRecordRuleAttachmentOutput() RecordRuleAttachmentOutput
	ToRecordRuleAttachmentOutputWithContext(ctx context.Context) RecordRuleAttachmentOutput
}

func (*RecordRuleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordRuleAttachment)(nil)).Elem()
}

func (i *RecordRuleAttachment) ToRecordRuleAttachmentOutput() RecordRuleAttachmentOutput {
	return i.ToRecordRuleAttachmentOutputWithContext(context.Background())
}

func (i *RecordRuleAttachment) ToRecordRuleAttachmentOutputWithContext(ctx context.Context) RecordRuleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRuleAttachmentOutput)
}

// RecordRuleAttachmentArrayInput is an input type that accepts RecordRuleAttachmentArray and RecordRuleAttachmentArrayOutput values.
// You can construct a concrete instance of `RecordRuleAttachmentArrayInput` via:
//
//	RecordRuleAttachmentArray{ RecordRuleAttachmentArgs{...} }
type RecordRuleAttachmentArrayInput interface {
	pulumi.Input

	ToRecordRuleAttachmentArrayOutput() RecordRuleAttachmentArrayOutput
	ToRecordRuleAttachmentArrayOutputWithContext(context.Context) RecordRuleAttachmentArrayOutput
}

type RecordRuleAttachmentArray []RecordRuleAttachmentInput

func (RecordRuleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordRuleAttachment)(nil)).Elem()
}

func (i RecordRuleAttachmentArray) ToRecordRuleAttachmentArrayOutput() RecordRuleAttachmentArrayOutput {
	return i.ToRecordRuleAttachmentArrayOutputWithContext(context.Background())
}

func (i RecordRuleAttachmentArray) ToRecordRuleAttachmentArrayOutputWithContext(ctx context.Context) RecordRuleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRuleAttachmentArrayOutput)
}

// RecordRuleAttachmentMapInput is an input type that accepts RecordRuleAttachmentMap and RecordRuleAttachmentMapOutput values.
// You can construct a concrete instance of `RecordRuleAttachmentMapInput` via:
//
//	RecordRuleAttachmentMap{ "key": RecordRuleAttachmentArgs{...} }
type RecordRuleAttachmentMapInput interface {
	pulumi.Input

	ToRecordRuleAttachmentMapOutput() RecordRuleAttachmentMapOutput
	ToRecordRuleAttachmentMapOutputWithContext(context.Context) RecordRuleAttachmentMapOutput
}

type RecordRuleAttachmentMap map[string]RecordRuleAttachmentInput

func (RecordRuleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordRuleAttachment)(nil)).Elem()
}

func (i RecordRuleAttachmentMap) ToRecordRuleAttachmentMapOutput() RecordRuleAttachmentMapOutput {
	return i.ToRecordRuleAttachmentMapOutputWithContext(context.Background())
}

func (i RecordRuleAttachmentMap) ToRecordRuleAttachmentMapOutputWithContext(ctx context.Context) RecordRuleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordRuleAttachmentMapOutput)
}

type RecordRuleAttachmentOutput struct{ *pulumi.OutputState }

func (RecordRuleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordRuleAttachment)(nil)).Elem()
}

func (o RecordRuleAttachmentOutput) ToRecordRuleAttachmentOutput() RecordRuleAttachmentOutput {
	return o
}

func (o RecordRuleAttachmentOutput) ToRecordRuleAttachmentOutputWithContext(ctx context.Context) RecordRuleAttachmentOutput {
	return o
}

// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
func (o RecordRuleAttachmentOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordRuleAttachment) pulumi.StringPtrOutput { return v.AppName }).(pulumi.StringPtrOutput)
}

// Streaming domain name.
func (o RecordRuleAttachmentOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordRuleAttachment) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Stream name. Note: If this parameter is set to a non empty string, the rule will only work on this streaming.
func (o RecordRuleAttachmentOutput) StreamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RecordRuleAttachment) pulumi.StringPtrOutput { return v.StreamName }).(pulumi.StringPtrOutput)
}

// Template ID.
func (o RecordRuleAttachmentOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *RecordRuleAttachment) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

type RecordRuleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (RecordRuleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordRuleAttachment)(nil)).Elem()
}

func (o RecordRuleAttachmentArrayOutput) ToRecordRuleAttachmentArrayOutput() RecordRuleAttachmentArrayOutput {
	return o
}

func (o RecordRuleAttachmentArrayOutput) ToRecordRuleAttachmentArrayOutputWithContext(ctx context.Context) RecordRuleAttachmentArrayOutput {
	return o
}

func (o RecordRuleAttachmentArrayOutput) Index(i pulumi.IntInput) RecordRuleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecordRuleAttachment {
		return vs[0].([]*RecordRuleAttachment)[vs[1].(int)]
	}).(RecordRuleAttachmentOutput)
}

type RecordRuleAttachmentMapOutput struct{ *pulumi.OutputState }

func (RecordRuleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordRuleAttachment)(nil)).Elem()
}

func (o RecordRuleAttachmentMapOutput) ToRecordRuleAttachmentMapOutput() RecordRuleAttachmentMapOutput {
	return o
}

func (o RecordRuleAttachmentMapOutput) ToRecordRuleAttachmentMapOutputWithContext(ctx context.Context) RecordRuleAttachmentMapOutput {
	return o
}

func (o RecordRuleAttachmentMapOutput) MapIndex(k pulumi.StringInput) RecordRuleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecordRuleAttachment {
		return vs[0].(map[string]*RecordRuleAttachment)[vs[1].(string)]
	}).(RecordRuleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordRuleAttachmentInput)(nil)).Elem(), &RecordRuleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordRuleAttachmentArrayInput)(nil)).Elem(), RecordRuleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordRuleAttachmentMapInput)(nil)).Elem(), RecordRuleAttachmentMap{})
	pulumi.RegisterOutputType(RecordRuleAttachmentOutput{})
	pulumi.RegisterOutputType(RecordRuleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(RecordRuleAttachmentMapOutput{})
}
