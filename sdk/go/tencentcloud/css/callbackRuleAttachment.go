// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package css

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a css callbackRule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Css"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Css.NewCallbackRuleAttachment(ctx, "callbackRule", &Css.CallbackRuleAttachmentArgs{
//				AppName:    pulumi.String("live"),
//				DomainName: pulumi.String("177154.push.tlivecloud.com"),
//				TemplateId: pulumi.Int(434039),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// css callback_rule can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Css/callbackRuleAttachment:CallbackRuleAttachment callback_rule templateId#domainName
//
// ```
type CallbackRuleAttachment struct {
	pulumi.CustomResourceState

	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName pulumi.StringOutput `pulumi:"appName"`
	// Streaming domain name.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Template ID.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
}

// NewCallbackRuleAttachment registers a new resource with the given unique name, arguments, and options.
func NewCallbackRuleAttachment(ctx *pulumi.Context,
	name string, args *CallbackRuleAttachmentArgs, opts ...pulumi.ResourceOption) (*CallbackRuleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppName == nil {
		return nil, errors.New("invalid value for required argument 'AppName'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.TemplateId == nil {
		return nil, errors.New("invalid value for required argument 'TemplateId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CallbackRuleAttachment
	err := ctx.RegisterResource("tencentcloud:Css/callbackRuleAttachment:CallbackRuleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCallbackRuleAttachment gets an existing CallbackRuleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCallbackRuleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CallbackRuleAttachmentState, opts ...pulumi.ResourceOption) (*CallbackRuleAttachment, error) {
	var resource CallbackRuleAttachment
	err := ctx.ReadResource("tencentcloud:Css/callbackRuleAttachment:CallbackRuleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CallbackRuleAttachment resources.
type callbackRuleAttachmentState struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName *string `pulumi:"appName"`
	// Streaming domain name.
	DomainName *string `pulumi:"domainName"`
	// Template ID.
	TemplateId *int `pulumi:"templateId"`
}

type CallbackRuleAttachmentState struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName pulumi.StringPtrInput
	// Streaming domain name.
	DomainName pulumi.StringPtrInput
	// Template ID.
	TemplateId pulumi.IntPtrInput
}

func (CallbackRuleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*callbackRuleAttachmentState)(nil)).Elem()
}

type callbackRuleAttachmentArgs struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName string `pulumi:"appName"`
	// Streaming domain name.
	DomainName string `pulumi:"domainName"`
	// Template ID.
	TemplateId int `pulumi:"templateId"`
}

// The set of arguments for constructing a CallbackRuleAttachment resource.
type CallbackRuleAttachmentArgs struct {
	// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
	AppName pulumi.StringInput
	// Streaming domain name.
	DomainName pulumi.StringInput
	// Template ID.
	TemplateId pulumi.IntInput
}

func (CallbackRuleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*callbackRuleAttachmentArgs)(nil)).Elem()
}

type CallbackRuleAttachmentInput interface {
	pulumi.Input

	ToCallbackRuleAttachmentOutput() CallbackRuleAttachmentOutput
	ToCallbackRuleAttachmentOutputWithContext(ctx context.Context) CallbackRuleAttachmentOutput
}

func (*CallbackRuleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**CallbackRuleAttachment)(nil)).Elem()
}

func (i *CallbackRuleAttachment) ToCallbackRuleAttachmentOutput() CallbackRuleAttachmentOutput {
	return i.ToCallbackRuleAttachmentOutputWithContext(context.Background())
}

func (i *CallbackRuleAttachment) ToCallbackRuleAttachmentOutputWithContext(ctx context.Context) CallbackRuleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CallbackRuleAttachmentOutput)
}

// CallbackRuleAttachmentArrayInput is an input type that accepts CallbackRuleAttachmentArray and CallbackRuleAttachmentArrayOutput values.
// You can construct a concrete instance of `CallbackRuleAttachmentArrayInput` via:
//
//	CallbackRuleAttachmentArray{ CallbackRuleAttachmentArgs{...} }
type CallbackRuleAttachmentArrayInput interface {
	pulumi.Input

	ToCallbackRuleAttachmentArrayOutput() CallbackRuleAttachmentArrayOutput
	ToCallbackRuleAttachmentArrayOutputWithContext(context.Context) CallbackRuleAttachmentArrayOutput
}

type CallbackRuleAttachmentArray []CallbackRuleAttachmentInput

func (CallbackRuleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CallbackRuleAttachment)(nil)).Elem()
}

func (i CallbackRuleAttachmentArray) ToCallbackRuleAttachmentArrayOutput() CallbackRuleAttachmentArrayOutput {
	return i.ToCallbackRuleAttachmentArrayOutputWithContext(context.Background())
}

func (i CallbackRuleAttachmentArray) ToCallbackRuleAttachmentArrayOutputWithContext(ctx context.Context) CallbackRuleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CallbackRuleAttachmentArrayOutput)
}

// CallbackRuleAttachmentMapInput is an input type that accepts CallbackRuleAttachmentMap and CallbackRuleAttachmentMapOutput values.
// You can construct a concrete instance of `CallbackRuleAttachmentMapInput` via:
//
//	CallbackRuleAttachmentMap{ "key": CallbackRuleAttachmentArgs{...} }
type CallbackRuleAttachmentMapInput interface {
	pulumi.Input

	ToCallbackRuleAttachmentMapOutput() CallbackRuleAttachmentMapOutput
	ToCallbackRuleAttachmentMapOutputWithContext(context.Context) CallbackRuleAttachmentMapOutput
}

type CallbackRuleAttachmentMap map[string]CallbackRuleAttachmentInput

func (CallbackRuleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CallbackRuleAttachment)(nil)).Elem()
}

func (i CallbackRuleAttachmentMap) ToCallbackRuleAttachmentMapOutput() CallbackRuleAttachmentMapOutput {
	return i.ToCallbackRuleAttachmentMapOutputWithContext(context.Background())
}

func (i CallbackRuleAttachmentMap) ToCallbackRuleAttachmentMapOutputWithContext(ctx context.Context) CallbackRuleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CallbackRuleAttachmentMapOutput)
}

type CallbackRuleAttachmentOutput struct{ *pulumi.OutputState }

func (CallbackRuleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CallbackRuleAttachment)(nil)).Elem()
}

func (o CallbackRuleAttachmentOutput) ToCallbackRuleAttachmentOutput() CallbackRuleAttachmentOutput {
	return o
}

func (o CallbackRuleAttachmentOutput) ToCallbackRuleAttachmentOutputWithContext(ctx context.Context) CallbackRuleAttachmentOutput {
	return o
}

// The streaming path is consistent with the AppName in the streaming and playback addresses. The default is live.
func (o CallbackRuleAttachmentOutput) AppName() pulumi.StringOutput {
	return o.ApplyT(func(v *CallbackRuleAttachment) pulumi.StringOutput { return v.AppName }).(pulumi.StringOutput)
}

// Streaming domain name.
func (o CallbackRuleAttachmentOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *CallbackRuleAttachment) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Template ID.
func (o CallbackRuleAttachmentOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *CallbackRuleAttachment) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

type CallbackRuleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (CallbackRuleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CallbackRuleAttachment)(nil)).Elem()
}

func (o CallbackRuleAttachmentArrayOutput) ToCallbackRuleAttachmentArrayOutput() CallbackRuleAttachmentArrayOutput {
	return o
}

func (o CallbackRuleAttachmentArrayOutput) ToCallbackRuleAttachmentArrayOutputWithContext(ctx context.Context) CallbackRuleAttachmentArrayOutput {
	return o
}

func (o CallbackRuleAttachmentArrayOutput) Index(i pulumi.IntInput) CallbackRuleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CallbackRuleAttachment {
		return vs[0].([]*CallbackRuleAttachment)[vs[1].(int)]
	}).(CallbackRuleAttachmentOutput)
}

type CallbackRuleAttachmentMapOutput struct{ *pulumi.OutputState }

func (CallbackRuleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CallbackRuleAttachment)(nil)).Elem()
}

func (o CallbackRuleAttachmentMapOutput) ToCallbackRuleAttachmentMapOutput() CallbackRuleAttachmentMapOutput {
	return o
}

func (o CallbackRuleAttachmentMapOutput) ToCallbackRuleAttachmentMapOutputWithContext(ctx context.Context) CallbackRuleAttachmentMapOutput {
	return o
}

func (o CallbackRuleAttachmentMapOutput) MapIndex(k pulumi.StringInput) CallbackRuleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CallbackRuleAttachment {
		return vs[0].(map[string]*CallbackRuleAttachment)[vs[1].(string)]
	}).(CallbackRuleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CallbackRuleAttachmentInput)(nil)).Elem(), &CallbackRuleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CallbackRuleAttachmentArrayInput)(nil)).Elem(), CallbackRuleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CallbackRuleAttachmentMapInput)(nil)).Elem(), CallbackRuleAttachmentMap{})
	pulumi.RegisterOutputType(CallbackRuleAttachmentOutput{})
	pulumi.RegisterOutputType(CallbackRuleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(CallbackRuleAttachmentMapOutput{})
}
