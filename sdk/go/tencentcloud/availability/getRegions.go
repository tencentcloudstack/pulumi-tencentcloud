// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package availability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the available regions. By default only `AVAILABLE` regions will be returned, but `UNAVAILABLE` regions can also be fetched when `includeUnavailable` is specified.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Availability.GetRegions(ctx, &availability.GetRegionsArgs{
//				Name: pulumi.StringRef("ap-guangzhou"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRegions(ctx *pulumi.Context, args *GetRegionsArgs, opts ...pulumi.InvokeOption) (*GetRegionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRegionsResult
	err := ctx.Invoke("tencentcloud:Availability/getRegions:getRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegions.
type GetRegionsArgs struct {
	// A bool variable indicates that the query will include `UNAVAILABLE` regions.
	IncludeUnavailable *bool `pulumi:"includeUnavailable"`
	// When specified, only the region with the exactly name match will be returned. `default` value means it consistent with the provider region.
	Name *string `pulumi:"name"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getRegions.
type GetRegionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id                 string `pulumi:"id"`
	IncludeUnavailable *bool  `pulumi:"includeUnavailable"`
	// The name of the region, like `ap-guangzhou`.
	Name *string `pulumi:"name"`
	// A list of regions will be exported and its every element contains the following attributes:
	Regions          []GetRegionsRegion `pulumi:"regions"`
	ResultOutputFile *string            `pulumi:"resultOutputFile"`
}

func GetRegionsOutput(ctx *pulumi.Context, args GetRegionsOutputArgs, opts ...pulumi.InvokeOption) GetRegionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRegionsResult, error) {
			args := v.(GetRegionsArgs)
			r, err := GetRegions(ctx, &args, opts...)
			var s GetRegionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRegionsResultOutput)
}

// A collection of arguments for invoking getRegions.
type GetRegionsOutputArgs struct {
	// A bool variable indicates that the query will include `UNAVAILABLE` regions.
	IncludeUnavailable pulumi.BoolPtrInput `pulumi:"includeUnavailable"`
	// When specified, only the region with the exactly name match will be returned. `default` value means it consistent with the provider region.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetRegionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsArgs)(nil)).Elem()
}

// A collection of values returned by getRegions.
type GetRegionsResultOutput struct{ *pulumi.OutputState }

func (GetRegionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsResult)(nil)).Elem()
}

func (o GetRegionsResultOutput) ToGetRegionsResultOutput() GetRegionsResultOutput {
	return o
}

func (o GetRegionsResultOutput) ToGetRegionsResultOutputWithContext(ctx context.Context) GetRegionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetRegionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRegionsResultOutput) IncludeUnavailable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRegionsResult) *bool { return v.IncludeUnavailable }).(pulumi.BoolPtrOutput)
}

// The name of the region, like `ap-guangzhou`.
func (o GetRegionsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// A list of regions will be exported and its every element contains the following attributes:
func (o GetRegionsResultOutput) Regions() GetRegionsRegionArrayOutput {
	return o.ApplyT(func(v GetRegionsResult) []GetRegionsRegion { return v.Regions }).(GetRegionsRegionArrayOutput)
}

func (o GetRegionsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegionsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRegionsResultOutput{})
}
