// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql remoteBackupConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "cdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(0),
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.AnyMap{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewRemoteBackupConfig(ctx, "exampleRemoteBackupConfig", &Mysql.RemoteBackupConfigArgs{
//				InstanceId:       exampleInstance.ID(),
//				RemoteBackupSave: pulumi.String("on"),
//				RemoteBinlogSave: pulumi.String("on"),
//				RemoteRegions: pulumi.StringArray{
//					pulumi.String("ap-shanghai"),
//				},
//				ExpireDays: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mysql remote_backup_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mysql/remoteBackupConfig:RemoteBackupConfig remote_backup_config remote_backup_config_id
//
// ```
type RemoteBackupConfig struct {
	pulumi.CustomResourceState

	// Remote backup retention time, in days.
	ExpireDays pulumi.IntOutput `pulumi:"expireDays"`
	// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Remote data backup switch, off - disable remote backup, on - enable remote backup.
	RemoteBackupSave pulumi.StringOutput `pulumi:"remoteBackupSave"`
	// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave is on, the RemoteBinlogSave parameter can be set to on.
	RemoteBinlogSave pulumi.StringOutput `pulumi:"remoteBinlogSave"`
	// User settings off-site backup region list.
	RemoteRegions pulumi.StringArrayOutput `pulumi:"remoteRegions"`
}

// NewRemoteBackupConfig registers a new resource with the given unique name, arguments, and options.
func NewRemoteBackupConfig(ctx *pulumi.Context,
	name string, args *RemoteBackupConfigArgs, opts ...pulumi.ResourceOption) (*RemoteBackupConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpireDays == nil {
		return nil, errors.New("invalid value for required argument 'ExpireDays'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RemoteBackupSave == nil {
		return nil, errors.New("invalid value for required argument 'RemoteBackupSave'")
	}
	if args.RemoteBinlogSave == nil {
		return nil, errors.New("invalid value for required argument 'RemoteBinlogSave'")
	}
	if args.RemoteRegions == nil {
		return nil, errors.New("invalid value for required argument 'RemoteRegions'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RemoteBackupConfig
	err := ctx.RegisterResource("tencentcloud:Mysql/remoteBackupConfig:RemoteBackupConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRemoteBackupConfig gets an existing RemoteBackupConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRemoteBackupConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RemoteBackupConfigState, opts ...pulumi.ResourceOption) (*RemoteBackupConfig, error) {
	var resource RemoteBackupConfig
	err := ctx.ReadResource("tencentcloud:Mysql/remoteBackupConfig:RemoteBackupConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RemoteBackupConfig resources.
type remoteBackupConfigState struct {
	// Remote backup retention time, in days.
	ExpireDays *int `pulumi:"expireDays"`
	// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
	InstanceId *string `pulumi:"instanceId"`
	// Remote data backup switch, off - disable remote backup, on - enable remote backup.
	RemoteBackupSave *string `pulumi:"remoteBackupSave"`
	// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave is on, the RemoteBinlogSave parameter can be set to on.
	RemoteBinlogSave *string `pulumi:"remoteBinlogSave"`
	// User settings off-site backup region list.
	RemoteRegions []string `pulumi:"remoteRegions"`
}

type RemoteBackupConfigState struct {
	// Remote backup retention time, in days.
	ExpireDays pulumi.IntPtrInput
	// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
	InstanceId pulumi.StringPtrInput
	// Remote data backup switch, off - disable remote backup, on - enable remote backup.
	RemoteBackupSave pulumi.StringPtrInput
	// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave is on, the RemoteBinlogSave parameter can be set to on.
	RemoteBinlogSave pulumi.StringPtrInput
	// User settings off-site backup region list.
	RemoteRegions pulumi.StringArrayInput
}

func (RemoteBackupConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteBackupConfigState)(nil)).Elem()
}

type remoteBackupConfigArgs struct {
	// Remote backup retention time, in days.
	ExpireDays int `pulumi:"expireDays"`
	// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
	InstanceId string `pulumi:"instanceId"`
	// Remote data backup switch, off - disable remote backup, on - enable remote backup.
	RemoteBackupSave string `pulumi:"remoteBackupSave"`
	// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave is on, the RemoteBinlogSave parameter can be set to on.
	RemoteBinlogSave string `pulumi:"remoteBinlogSave"`
	// User settings off-site backup region list.
	RemoteRegions []string `pulumi:"remoteRegions"`
}

// The set of arguments for constructing a RemoteBackupConfig resource.
type RemoteBackupConfigArgs struct {
	// Remote backup retention time, in days.
	ExpireDays pulumi.IntInput
	// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
	InstanceId pulumi.StringInput
	// Remote data backup switch, off - disable remote backup, on - enable remote backup.
	RemoteBackupSave pulumi.StringInput
	// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave is on, the RemoteBinlogSave parameter can be set to on.
	RemoteBinlogSave pulumi.StringInput
	// User settings off-site backup region list.
	RemoteRegions pulumi.StringArrayInput
}

func (RemoteBackupConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*remoteBackupConfigArgs)(nil)).Elem()
}

type RemoteBackupConfigInput interface {
	pulumi.Input

	ToRemoteBackupConfigOutput() RemoteBackupConfigOutput
	ToRemoteBackupConfigOutputWithContext(ctx context.Context) RemoteBackupConfigOutput
}

func (*RemoteBackupConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteBackupConfig)(nil)).Elem()
}

func (i *RemoteBackupConfig) ToRemoteBackupConfigOutput() RemoteBackupConfigOutput {
	return i.ToRemoteBackupConfigOutputWithContext(context.Background())
}

func (i *RemoteBackupConfig) ToRemoteBackupConfigOutputWithContext(ctx context.Context) RemoteBackupConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteBackupConfigOutput)
}

// RemoteBackupConfigArrayInput is an input type that accepts RemoteBackupConfigArray and RemoteBackupConfigArrayOutput values.
// You can construct a concrete instance of `RemoteBackupConfigArrayInput` via:
//
//	RemoteBackupConfigArray{ RemoteBackupConfigArgs{...} }
type RemoteBackupConfigArrayInput interface {
	pulumi.Input

	ToRemoteBackupConfigArrayOutput() RemoteBackupConfigArrayOutput
	ToRemoteBackupConfigArrayOutputWithContext(context.Context) RemoteBackupConfigArrayOutput
}

type RemoteBackupConfigArray []RemoteBackupConfigInput

func (RemoteBackupConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteBackupConfig)(nil)).Elem()
}

func (i RemoteBackupConfigArray) ToRemoteBackupConfigArrayOutput() RemoteBackupConfigArrayOutput {
	return i.ToRemoteBackupConfigArrayOutputWithContext(context.Background())
}

func (i RemoteBackupConfigArray) ToRemoteBackupConfigArrayOutputWithContext(ctx context.Context) RemoteBackupConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteBackupConfigArrayOutput)
}

// RemoteBackupConfigMapInput is an input type that accepts RemoteBackupConfigMap and RemoteBackupConfigMapOutput values.
// You can construct a concrete instance of `RemoteBackupConfigMapInput` via:
//
//	RemoteBackupConfigMap{ "key": RemoteBackupConfigArgs{...} }
type RemoteBackupConfigMapInput interface {
	pulumi.Input

	ToRemoteBackupConfigMapOutput() RemoteBackupConfigMapOutput
	ToRemoteBackupConfigMapOutputWithContext(context.Context) RemoteBackupConfigMapOutput
}

type RemoteBackupConfigMap map[string]RemoteBackupConfigInput

func (RemoteBackupConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteBackupConfig)(nil)).Elem()
}

func (i RemoteBackupConfigMap) ToRemoteBackupConfigMapOutput() RemoteBackupConfigMapOutput {
	return i.ToRemoteBackupConfigMapOutputWithContext(context.Background())
}

func (i RemoteBackupConfigMap) ToRemoteBackupConfigMapOutputWithContext(ctx context.Context) RemoteBackupConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RemoteBackupConfigMapOutput)
}

type RemoteBackupConfigOutput struct{ *pulumi.OutputState }

func (RemoteBackupConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RemoteBackupConfig)(nil)).Elem()
}

func (o RemoteBackupConfigOutput) ToRemoteBackupConfigOutput() RemoteBackupConfigOutput {
	return o
}

func (o RemoteBackupConfigOutput) ToRemoteBackupConfigOutputWithContext(ctx context.Context) RemoteBackupConfigOutput {
	return o
}

// Remote backup retention time, in days.
func (o RemoteBackupConfigOutput) ExpireDays() pulumi.IntOutput {
	return o.ApplyT(func(v *RemoteBackupConfig) pulumi.IntOutput { return v.ExpireDays }).(pulumi.IntOutput)
}

// Instance ID, in the format: cdb-c1nl9rpv. Same instance ID as displayed in the ApsaraDB for Console page.
func (o RemoteBackupConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteBackupConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Remote data backup switch, off - disable remote backup, on - enable remote backup.
func (o RemoteBackupConfigOutput) RemoteBackupSave() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteBackupConfig) pulumi.StringOutput { return v.RemoteBackupSave }).(pulumi.StringOutput)
}

// Off-site log backup switch, off - off off-site backup, on-on off-site backup, only when the parameter RemoteBackupSave is on, the RemoteBinlogSave parameter can be set to on.
func (o RemoteBackupConfigOutput) RemoteBinlogSave() pulumi.StringOutput {
	return o.ApplyT(func(v *RemoteBackupConfig) pulumi.StringOutput { return v.RemoteBinlogSave }).(pulumi.StringOutput)
}

// User settings off-site backup region list.
func (o RemoteBackupConfigOutput) RemoteRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RemoteBackupConfig) pulumi.StringArrayOutput { return v.RemoteRegions }).(pulumi.StringArrayOutput)
}

type RemoteBackupConfigArrayOutput struct{ *pulumi.OutputState }

func (RemoteBackupConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RemoteBackupConfig)(nil)).Elem()
}

func (o RemoteBackupConfigArrayOutput) ToRemoteBackupConfigArrayOutput() RemoteBackupConfigArrayOutput {
	return o
}

func (o RemoteBackupConfigArrayOutput) ToRemoteBackupConfigArrayOutputWithContext(ctx context.Context) RemoteBackupConfigArrayOutput {
	return o
}

func (o RemoteBackupConfigArrayOutput) Index(i pulumi.IntInput) RemoteBackupConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RemoteBackupConfig {
		return vs[0].([]*RemoteBackupConfig)[vs[1].(int)]
	}).(RemoteBackupConfigOutput)
}

type RemoteBackupConfigMapOutput struct{ *pulumi.OutputState }

func (RemoteBackupConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RemoteBackupConfig)(nil)).Elem()
}

func (o RemoteBackupConfigMapOutput) ToRemoteBackupConfigMapOutput() RemoteBackupConfigMapOutput {
	return o
}

func (o RemoteBackupConfigMapOutput) ToRemoteBackupConfigMapOutputWithContext(ctx context.Context) RemoteBackupConfigMapOutput {
	return o
}

func (o RemoteBackupConfigMapOutput) MapIndex(k pulumi.StringInput) RemoteBackupConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RemoteBackupConfig {
		return vs[0].(map[string]*RemoteBackupConfig)[vs[1].(string)]
	}).(RemoteBackupConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteBackupConfigInput)(nil)).Elem(), &RemoteBackupConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteBackupConfigArrayInput)(nil)).Elem(), RemoteBackupConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RemoteBackupConfigMapInput)(nil)).Elem(), RemoteBackupConfigMap{})
	pulumi.RegisterOutputType(RemoteBackupConfigOutput{})
	pulumi.RegisterOutputType(RemoteBackupConfigArrayOutput{})
	pulumi.RegisterOutputType(RemoteBackupConfigMapOutput{})
}
