// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql roGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.NewRoGroup(ctx, "example", &Mysql.RoGroupArgs{
//				InstanceId:      pulumi.String("cdb-e8i766hx"),
//				IsBalanceRoLoad: pulumi.Int(1),
//				RoGroupId:       pulumi.String("cdbrg-f49t0gnj"),
//				RoGroupInfo: &mysql.RoGroupRoGroupInfoArgs{
//					MinRoInGroup:         pulumi.Int(1),
//					ReplicationDelayTime: pulumi.Int(1),
//					RoGroupName:          pulumi.String("keep-ro"),
//					RoMaxDelayTime:       pulumi.Int(1),
//					RoOfflineDelay:       pulumi.Int(1),
//					WeightMode:           pulumi.String("custom"),
//				},
//				RoWeightValues: mysql.RoGroupRoWeightValueArray{
//					&mysql.RoGroupRoWeightValueArgs{
//						InstanceId: pulumi.String("cdbro-f49t0gnj"),
//						Weight:     pulumi.Int(10),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RoGroup struct {
	pulumi.CustomResourceState

	// Instance ID, in the format: cdbro-3i70uj0k.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether to rebalance the load of RO instances in the RO group. Supported values include: 1 - rebalance load; 0 - do not rebalance load. The default value is 0. Note that when it is set to rebalance the load, the RO instance in the RO group will have a momentary disconnection of the database connection, please ensure that the application can reconnect to the database.
	IsBalanceRoLoad pulumi.IntPtrOutput `pulumi:"isBalanceRoLoad"`
	// The ID of the RO group.
	RoGroupId pulumi.StringOutput `pulumi:"roGroupId"`
	// Details of the RO group.
	RoGroupInfo RoGroupRoGroupInfoPtrOutput `pulumi:"roGroupInfo"`
	// The weight of the instance within the RO group. If the weight mode of the RO group is changed to user-defined mode (custom), this parameter must be set, and the weight value of each RO instance needs to be set.
	RoWeightValues RoGroupRoWeightValueArrayOutput `pulumi:"roWeightValues"`
}

// NewRoGroup registers a new resource with the given unique name, arguments, and options.
func NewRoGroup(ctx *pulumi.Context,
	name string, args *RoGroupArgs, opts ...pulumi.ResourceOption) (*RoGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RoGroupId == nil {
		return nil, errors.New("invalid value for required argument 'RoGroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RoGroup
	err := ctx.RegisterResource("tencentcloud:Mysql/roGroup:RoGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoGroup gets an existing RoGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoGroupState, opts ...pulumi.ResourceOption) (*RoGroup, error) {
	var resource RoGroup
	err := ctx.ReadResource("tencentcloud:Mysql/roGroup:RoGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoGroup resources.
type roGroupState struct {
	// Instance ID, in the format: cdbro-3i70uj0k.
	InstanceId *string `pulumi:"instanceId"`
	// Whether to rebalance the load of RO instances in the RO group. Supported values include: 1 - rebalance load; 0 - do not rebalance load. The default value is 0. Note that when it is set to rebalance the load, the RO instance in the RO group will have a momentary disconnection of the database connection, please ensure that the application can reconnect to the database.
	IsBalanceRoLoad *int `pulumi:"isBalanceRoLoad"`
	// The ID of the RO group.
	RoGroupId *string `pulumi:"roGroupId"`
	// Details of the RO group.
	RoGroupInfo *RoGroupRoGroupInfo `pulumi:"roGroupInfo"`
	// The weight of the instance within the RO group. If the weight mode of the RO group is changed to user-defined mode (custom), this parameter must be set, and the weight value of each RO instance needs to be set.
	RoWeightValues []RoGroupRoWeightValue `pulumi:"roWeightValues"`
}

type RoGroupState struct {
	// Instance ID, in the format: cdbro-3i70uj0k.
	InstanceId pulumi.StringPtrInput
	// Whether to rebalance the load of RO instances in the RO group. Supported values include: 1 - rebalance load; 0 - do not rebalance load. The default value is 0. Note that when it is set to rebalance the load, the RO instance in the RO group will have a momentary disconnection of the database connection, please ensure that the application can reconnect to the database.
	IsBalanceRoLoad pulumi.IntPtrInput
	// The ID of the RO group.
	RoGroupId pulumi.StringPtrInput
	// Details of the RO group.
	RoGroupInfo RoGroupRoGroupInfoPtrInput
	// The weight of the instance within the RO group. If the weight mode of the RO group is changed to user-defined mode (custom), this parameter must be set, and the weight value of each RO instance needs to be set.
	RoWeightValues RoGroupRoWeightValueArrayInput
}

func (RoGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*roGroupState)(nil)).Elem()
}

type roGroupArgs struct {
	// Instance ID, in the format: cdbro-3i70uj0k.
	InstanceId string `pulumi:"instanceId"`
	// Whether to rebalance the load of RO instances in the RO group. Supported values include: 1 - rebalance load; 0 - do not rebalance load. The default value is 0. Note that when it is set to rebalance the load, the RO instance in the RO group will have a momentary disconnection of the database connection, please ensure that the application can reconnect to the database.
	IsBalanceRoLoad *int `pulumi:"isBalanceRoLoad"`
	// The ID of the RO group.
	RoGroupId string `pulumi:"roGroupId"`
	// Details of the RO group.
	RoGroupInfo *RoGroupRoGroupInfo `pulumi:"roGroupInfo"`
	// The weight of the instance within the RO group. If the weight mode of the RO group is changed to user-defined mode (custom), this parameter must be set, and the weight value of each RO instance needs to be set.
	RoWeightValues []RoGroupRoWeightValue `pulumi:"roWeightValues"`
}

// The set of arguments for constructing a RoGroup resource.
type RoGroupArgs struct {
	// Instance ID, in the format: cdbro-3i70uj0k.
	InstanceId pulumi.StringInput
	// Whether to rebalance the load of RO instances in the RO group. Supported values include: 1 - rebalance load; 0 - do not rebalance load. The default value is 0. Note that when it is set to rebalance the load, the RO instance in the RO group will have a momentary disconnection of the database connection, please ensure that the application can reconnect to the database.
	IsBalanceRoLoad pulumi.IntPtrInput
	// The ID of the RO group.
	RoGroupId pulumi.StringInput
	// Details of the RO group.
	RoGroupInfo RoGroupRoGroupInfoPtrInput
	// The weight of the instance within the RO group. If the weight mode of the RO group is changed to user-defined mode (custom), this parameter must be set, and the weight value of each RO instance needs to be set.
	RoWeightValues RoGroupRoWeightValueArrayInput
}

func (RoGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roGroupArgs)(nil)).Elem()
}

type RoGroupInput interface {
	pulumi.Input

	ToRoGroupOutput() RoGroupOutput
	ToRoGroupOutputWithContext(ctx context.Context) RoGroupOutput
}

func (*RoGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RoGroup)(nil)).Elem()
}

func (i *RoGroup) ToRoGroupOutput() RoGroupOutput {
	return i.ToRoGroupOutputWithContext(context.Background())
}

func (i *RoGroup) ToRoGroupOutputWithContext(ctx context.Context) RoGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoGroupOutput)
}

// RoGroupArrayInput is an input type that accepts RoGroupArray and RoGroupArrayOutput values.
// You can construct a concrete instance of `RoGroupArrayInput` via:
//
//	RoGroupArray{ RoGroupArgs{...} }
type RoGroupArrayInput interface {
	pulumi.Input

	ToRoGroupArrayOutput() RoGroupArrayOutput
	ToRoGroupArrayOutputWithContext(context.Context) RoGroupArrayOutput
}

type RoGroupArray []RoGroupInput

func (RoGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoGroup)(nil)).Elem()
}

func (i RoGroupArray) ToRoGroupArrayOutput() RoGroupArrayOutput {
	return i.ToRoGroupArrayOutputWithContext(context.Background())
}

func (i RoGroupArray) ToRoGroupArrayOutputWithContext(ctx context.Context) RoGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoGroupArrayOutput)
}

// RoGroupMapInput is an input type that accepts RoGroupMap and RoGroupMapOutput values.
// You can construct a concrete instance of `RoGroupMapInput` via:
//
//	RoGroupMap{ "key": RoGroupArgs{...} }
type RoGroupMapInput interface {
	pulumi.Input

	ToRoGroupMapOutput() RoGroupMapOutput
	ToRoGroupMapOutputWithContext(context.Context) RoGroupMapOutput
}

type RoGroupMap map[string]RoGroupInput

func (RoGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoGroup)(nil)).Elem()
}

func (i RoGroupMap) ToRoGroupMapOutput() RoGroupMapOutput {
	return i.ToRoGroupMapOutputWithContext(context.Background())
}

func (i RoGroupMap) ToRoGroupMapOutputWithContext(ctx context.Context) RoGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoGroupMapOutput)
}

type RoGroupOutput struct{ *pulumi.OutputState }

func (RoGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoGroup)(nil)).Elem()
}

func (o RoGroupOutput) ToRoGroupOutput() RoGroupOutput {
	return o
}

func (o RoGroupOutput) ToRoGroupOutputWithContext(ctx context.Context) RoGroupOutput {
	return o
}

// Instance ID, in the format: cdbro-3i70uj0k.
func (o RoGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Whether to rebalance the load of RO instances in the RO group. Supported values include: 1 - rebalance load; 0 - do not rebalance load. The default value is 0. Note that when it is set to rebalance the load, the RO instance in the RO group will have a momentary disconnection of the database connection, please ensure that the application can reconnect to the database.
func (o RoGroupOutput) IsBalanceRoLoad() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RoGroup) pulumi.IntPtrOutput { return v.IsBalanceRoLoad }).(pulumi.IntPtrOutput)
}

// The ID of the RO group.
func (o RoGroupOutput) RoGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoGroup) pulumi.StringOutput { return v.RoGroupId }).(pulumi.StringOutput)
}

// Details of the RO group.
func (o RoGroupOutput) RoGroupInfo() RoGroupRoGroupInfoPtrOutput {
	return o.ApplyT(func(v *RoGroup) RoGroupRoGroupInfoPtrOutput { return v.RoGroupInfo }).(RoGroupRoGroupInfoPtrOutput)
}

// The weight of the instance within the RO group. If the weight mode of the RO group is changed to user-defined mode (custom), this parameter must be set, and the weight value of each RO instance needs to be set.
func (o RoGroupOutput) RoWeightValues() RoGroupRoWeightValueArrayOutput {
	return o.ApplyT(func(v *RoGroup) RoGroupRoWeightValueArrayOutput { return v.RoWeightValues }).(RoGroupRoWeightValueArrayOutput)
}

type RoGroupArrayOutput struct{ *pulumi.OutputState }

func (RoGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoGroup)(nil)).Elem()
}

func (o RoGroupArrayOutput) ToRoGroupArrayOutput() RoGroupArrayOutput {
	return o
}

func (o RoGroupArrayOutput) ToRoGroupArrayOutputWithContext(ctx context.Context) RoGroupArrayOutput {
	return o
}

func (o RoGroupArrayOutput) Index(i pulumi.IntInput) RoGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoGroup {
		return vs[0].([]*RoGroup)[vs[1].(int)]
	}).(RoGroupOutput)
}

type RoGroupMapOutput struct{ *pulumi.OutputState }

func (RoGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoGroup)(nil)).Elem()
}

func (o RoGroupMapOutput) ToRoGroupMapOutput() RoGroupMapOutput {
	return o
}

func (o RoGroupMapOutput) ToRoGroupMapOutputWithContext(ctx context.Context) RoGroupMapOutput {
	return o
}

func (o RoGroupMapOutput) MapIndex(k pulumi.StringInput) RoGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoGroup {
		return vs[0].(map[string]*RoGroup)[vs[1].(string)]
	}).(RoGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoGroupInput)(nil)).Elem(), &RoGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoGroupArrayInput)(nil)).Elem(), RoGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoGroupMapInput)(nil)).Elem(), RoGroupMap{})
	pulumi.RegisterOutputType(RoGroupOutput{})
	pulumi.RegisterOutputType(RoGroupArrayOutput{})
	pulumi.RegisterOutputType(RoGroupMapOutput{})
}
