// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DbImportJobOperation struct {
	pulumi.CustomResourceState

	// The request ID of the asynchronous task.
	AsyncRequestId pulumi.StringOutput `pulumi:"asyncRequestId"`
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	CosUrl pulumi.StringPtrOutput `pulumi:"cosUrl"`
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	DbName pulumi.StringPtrOutput `pulumi:"dbName"`
	// file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
	FileName pulumi.StringPtrOutput `pulumi:"fileName"`
	// The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
	// page.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The password of the user account of the cloud database instance.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The username of the cloud database.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewDbImportJobOperation registers a new resource with the given unique name, arguments, and options.
func NewDbImportJobOperation(ctx *pulumi.Context,
	name string, args *DbImportJobOperationArgs, opts ...pulumi.ResourceOption) (*DbImportJobOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DbImportJobOperation
	err := ctx.RegisterResource("tencentcloud:Mysql/dbImportJobOperation:DbImportJobOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDbImportJobOperation gets an existing DbImportJobOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDbImportJobOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DbImportJobOperationState, opts ...pulumi.ResourceOption) (*DbImportJobOperation, error) {
	var resource DbImportJobOperation
	err := ctx.ReadResource("tencentcloud:Mysql/dbImportJobOperation:DbImportJobOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DbImportJobOperation resources.
type dbImportJobOperationState struct {
	// The request ID of the asynchronous task.
	AsyncRequestId *string `pulumi:"asyncRequestId"`
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	CosUrl *string `pulumi:"cosUrl"`
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	DbName *string `pulumi:"dbName"`
	// file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
	FileName *string `pulumi:"fileName"`
	// The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
	// page.
	InstanceId *string `pulumi:"instanceId"`
	// The password of the user account of the cloud database instance.
	Password *string `pulumi:"password"`
	// The username of the cloud database.
	User *string `pulumi:"user"`
}

type DbImportJobOperationState struct {
	// The request ID of the asynchronous task.
	AsyncRequestId pulumi.StringPtrInput
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	CosUrl pulumi.StringPtrInput
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	DbName pulumi.StringPtrInput
	// file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
	FileName pulumi.StringPtrInput
	// The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
	// page.
	InstanceId pulumi.StringPtrInput
	// The password of the user account of the cloud database instance.
	Password pulumi.StringPtrInput
	// The username of the cloud database.
	User pulumi.StringPtrInput
}

func (DbImportJobOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dbImportJobOperationState)(nil)).Elem()
}

type dbImportJobOperationArgs struct {
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	CosUrl *string `pulumi:"cosUrl"`
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	DbName *string `pulumi:"dbName"`
	// file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
	FileName *string `pulumi:"fileName"`
	// The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
	// page.
	InstanceId string `pulumi:"instanceId"`
	// The password of the user account of the cloud database instance.
	Password *string `pulumi:"password"`
	// The username of the cloud database.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a DbImportJobOperation resource.
type DbImportJobOperationArgs struct {
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	CosUrl pulumi.StringPtrInput
	// The name of the imported target database, if it is not passed, it means that no database is specified.
	DbName pulumi.StringPtrInput
	// file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
	FileName pulumi.StringPtrInput
	// The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
	// page.
	InstanceId pulumi.StringInput
	// The password of the user account of the cloud database instance.
	Password pulumi.StringPtrInput
	// The username of the cloud database.
	User pulumi.StringInput
}

func (DbImportJobOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dbImportJobOperationArgs)(nil)).Elem()
}

type DbImportJobOperationInput interface {
	pulumi.Input

	ToDbImportJobOperationOutput() DbImportJobOperationOutput
	ToDbImportJobOperationOutputWithContext(ctx context.Context) DbImportJobOperationOutput
}

func (*DbImportJobOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**DbImportJobOperation)(nil)).Elem()
}

func (i *DbImportJobOperation) ToDbImportJobOperationOutput() DbImportJobOperationOutput {
	return i.ToDbImportJobOperationOutputWithContext(context.Background())
}

func (i *DbImportJobOperation) ToDbImportJobOperationOutputWithContext(ctx context.Context) DbImportJobOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbImportJobOperationOutput)
}

// DbImportJobOperationArrayInput is an input type that accepts DbImportJobOperationArray and DbImportJobOperationArrayOutput values.
// You can construct a concrete instance of `DbImportJobOperationArrayInput` via:
//
//	DbImportJobOperationArray{ DbImportJobOperationArgs{...} }
type DbImportJobOperationArrayInput interface {
	pulumi.Input

	ToDbImportJobOperationArrayOutput() DbImportJobOperationArrayOutput
	ToDbImportJobOperationArrayOutputWithContext(context.Context) DbImportJobOperationArrayOutput
}

type DbImportJobOperationArray []DbImportJobOperationInput

func (DbImportJobOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbImportJobOperation)(nil)).Elem()
}

func (i DbImportJobOperationArray) ToDbImportJobOperationArrayOutput() DbImportJobOperationArrayOutput {
	return i.ToDbImportJobOperationArrayOutputWithContext(context.Background())
}

func (i DbImportJobOperationArray) ToDbImportJobOperationArrayOutputWithContext(ctx context.Context) DbImportJobOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbImportJobOperationArrayOutput)
}

// DbImportJobOperationMapInput is an input type that accepts DbImportJobOperationMap and DbImportJobOperationMapOutput values.
// You can construct a concrete instance of `DbImportJobOperationMapInput` via:
//
//	DbImportJobOperationMap{ "key": DbImportJobOperationArgs{...} }
type DbImportJobOperationMapInput interface {
	pulumi.Input

	ToDbImportJobOperationMapOutput() DbImportJobOperationMapOutput
	ToDbImportJobOperationMapOutputWithContext(context.Context) DbImportJobOperationMapOutput
}

type DbImportJobOperationMap map[string]DbImportJobOperationInput

func (DbImportJobOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbImportJobOperation)(nil)).Elem()
}

func (i DbImportJobOperationMap) ToDbImportJobOperationMapOutput() DbImportJobOperationMapOutput {
	return i.ToDbImportJobOperationMapOutputWithContext(context.Background())
}

func (i DbImportJobOperationMap) ToDbImportJobOperationMapOutputWithContext(ctx context.Context) DbImportJobOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DbImportJobOperationMapOutput)
}

type DbImportJobOperationOutput struct{ *pulumi.OutputState }

func (DbImportJobOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DbImportJobOperation)(nil)).Elem()
}

func (o DbImportJobOperationOutput) ToDbImportJobOperationOutput() DbImportJobOperationOutput {
	return o
}

func (o DbImportJobOperationOutput) ToDbImportJobOperationOutputWithContext(ctx context.Context) DbImportJobOperationOutput {
	return o
}

// The request ID of the asynchronous task.
func (o DbImportJobOperationOutput) AsyncRequestId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringOutput { return v.AsyncRequestId }).(pulumi.StringOutput)
}

// The name of the imported target database, if it is not passed, it means that no database is specified.
func (o DbImportJobOperationOutput) CosUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringPtrOutput { return v.CosUrl }).(pulumi.StringPtrOutput)
}

// The name of the imported target database, if it is not passed, it means that no database is specified.
func (o DbImportJobOperationOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringPtrOutput { return v.DbName }).(pulumi.StringPtrOutput)
}

// file name. This file refers to the file that the user has uploaded to Tencent Cloud, and only .sql files are supported.
func (o DbImportJobOperationOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringPtrOutput { return v.FileName }).(pulumi.StringPtrOutput)
}

// The instance ID, in the format: cdb-c1nl9rpv, is the same as the instance ID displayed on the cloud database console
// page.
func (o DbImportJobOperationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The password of the user account of the cloud database instance.
func (o DbImportJobOperationOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The username of the cloud database.
func (o DbImportJobOperationOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *DbImportJobOperation) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type DbImportJobOperationArrayOutput struct{ *pulumi.OutputState }

func (DbImportJobOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DbImportJobOperation)(nil)).Elem()
}

func (o DbImportJobOperationArrayOutput) ToDbImportJobOperationArrayOutput() DbImportJobOperationArrayOutput {
	return o
}

func (o DbImportJobOperationArrayOutput) ToDbImportJobOperationArrayOutputWithContext(ctx context.Context) DbImportJobOperationArrayOutput {
	return o
}

func (o DbImportJobOperationArrayOutput) Index(i pulumi.IntInput) DbImportJobOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DbImportJobOperation {
		return vs[0].([]*DbImportJobOperation)[vs[1].(int)]
	}).(DbImportJobOperationOutput)
}

type DbImportJobOperationMapOutput struct{ *pulumi.OutputState }

func (DbImportJobOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DbImportJobOperation)(nil)).Elem()
}

func (o DbImportJobOperationMapOutput) ToDbImportJobOperationMapOutput() DbImportJobOperationMapOutput {
	return o
}

func (o DbImportJobOperationMapOutput) ToDbImportJobOperationMapOutputWithContext(ctx context.Context) DbImportJobOperationMapOutput {
	return o
}

func (o DbImportJobOperationMapOutput) MapIndex(k pulumi.StringInput) DbImportJobOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DbImportJobOperation {
		return vs[0].(map[string]*DbImportJobOperation)[vs[1].(string)]
	}).(DbImportJobOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DbImportJobOperationInput)(nil)).Elem(), &DbImportJobOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbImportJobOperationArrayInput)(nil)).Elem(), DbImportJobOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DbImportJobOperationMapInput)(nil)).Elem(), DbImportJobOperationMap{})
	pulumi.RegisterOutputType(DbImportJobOperationOutput{})
	pulumi.RegisterOutputType(DbImportJobOperationArrayOutput{})
	pulumi.RegisterOutputType(DbImportJobOperationMapOutput{})
}
