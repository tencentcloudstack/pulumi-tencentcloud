// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql rollback
type Rollback struct {
	pulumi.CustomResourceState

	// The database information to be archived, indicating that the entire database is archived.
	Databases RollbackDatabaseArrayOutput `pulumi:"databases"`
	// Cloud database instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
	RollbackTime pulumi.StringOutput `pulumi:"rollbackTime"`
	// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
	Strategy pulumi.StringOutput `pulumi:"strategy"`
	// The database table information to be rolled back, indicating that the file is rolled back by table.
	Tables RollbackTableArrayOutput `pulumi:"tables"`
}

// NewRollback registers a new resource with the given unique name, arguments, and options.
func NewRollback(ctx *pulumi.Context,
	name string, args *RollbackArgs, opts ...pulumi.ResourceOption) (*Rollback, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RollbackTime == nil {
		return nil, errors.New("invalid value for required argument 'RollbackTime'")
	}
	if args.Strategy == nil {
		return nil, errors.New("invalid value for required argument 'Strategy'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Rollback
	err := ctx.RegisterResource("tencentcloud:Mysql/rollback:Rollback", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRollback gets an existing Rollback resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRollback(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RollbackState, opts ...pulumi.ResourceOption) (*Rollback, error) {
	var resource Rollback
	err := ctx.ReadResource("tencentcloud:Mysql/rollback:Rollback", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rollback resources.
type rollbackState struct {
	// The database information to be archived, indicating that the entire database is archived.
	Databases []RollbackDatabase `pulumi:"databases"`
	// Cloud database instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
	RollbackTime *string `pulumi:"rollbackTime"`
	// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
	Strategy *string `pulumi:"strategy"`
	// The database table information to be rolled back, indicating that the file is rolled back by table.
	Tables []RollbackTable `pulumi:"tables"`
}

type RollbackState struct {
	// The database information to be archived, indicating that the entire database is archived.
	Databases RollbackDatabaseArrayInput
	// Cloud database instance ID.
	InstanceId pulumi.StringPtrInput
	// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
	RollbackTime pulumi.StringPtrInput
	// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
	Strategy pulumi.StringPtrInput
	// The database table information to be rolled back, indicating that the file is rolled back by table.
	Tables RollbackTableArrayInput
}

func (RollbackState) ElementType() reflect.Type {
	return reflect.TypeOf((*rollbackState)(nil)).Elem()
}

type rollbackArgs struct {
	// The database information to be archived, indicating that the entire database is archived.
	Databases []RollbackDatabase `pulumi:"databases"`
	// Cloud database instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
	RollbackTime string `pulumi:"rollbackTime"`
	// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
	Strategy string `pulumi:"strategy"`
	// The database table information to be rolled back, indicating that the file is rolled back by table.
	Tables []RollbackTable `pulumi:"tables"`
}

// The set of arguments for constructing a Rollback resource.
type RollbackArgs struct {
	// The database information to be archived, indicating that the entire database is archived.
	Databases RollbackDatabaseArrayInput
	// Cloud database instance ID.
	InstanceId pulumi.StringInput
	// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
	RollbackTime pulumi.StringInput
	// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
	Strategy pulumi.StringInput
	// The database table information to be rolled back, indicating that the file is rolled back by table.
	Tables RollbackTableArrayInput
}

func (RollbackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rollbackArgs)(nil)).Elem()
}

type RollbackInput interface {
	pulumi.Input

	ToRollbackOutput() RollbackOutput
	ToRollbackOutputWithContext(ctx context.Context) RollbackOutput
}

func (*Rollback) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollback)(nil)).Elem()
}

func (i *Rollback) ToRollbackOutput() RollbackOutput {
	return i.ToRollbackOutputWithContext(context.Background())
}

func (i *Rollback) ToRollbackOutputWithContext(ctx context.Context) RollbackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackOutput)
}

// RollbackArrayInput is an input type that accepts RollbackArray and RollbackArrayOutput values.
// You can construct a concrete instance of `RollbackArrayInput` via:
//
//	RollbackArray{ RollbackArgs{...} }
type RollbackArrayInput interface {
	pulumi.Input

	ToRollbackArrayOutput() RollbackArrayOutput
	ToRollbackArrayOutputWithContext(context.Context) RollbackArrayOutput
}

type RollbackArray []RollbackInput

func (RollbackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rollback)(nil)).Elem()
}

func (i RollbackArray) ToRollbackArrayOutput() RollbackArrayOutput {
	return i.ToRollbackArrayOutputWithContext(context.Background())
}

func (i RollbackArray) ToRollbackArrayOutputWithContext(ctx context.Context) RollbackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackArrayOutput)
}

// RollbackMapInput is an input type that accepts RollbackMap and RollbackMapOutput values.
// You can construct a concrete instance of `RollbackMapInput` via:
//
//	RollbackMap{ "key": RollbackArgs{...} }
type RollbackMapInput interface {
	pulumi.Input

	ToRollbackMapOutput() RollbackMapOutput
	ToRollbackMapOutputWithContext(context.Context) RollbackMapOutput
}

type RollbackMap map[string]RollbackInput

func (RollbackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rollback)(nil)).Elem()
}

func (i RollbackMap) ToRollbackMapOutput() RollbackMapOutput {
	return i.ToRollbackMapOutputWithContext(context.Background())
}

func (i RollbackMap) ToRollbackMapOutputWithContext(ctx context.Context) RollbackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollbackMapOutput)
}

type RollbackOutput struct{ *pulumi.OutputState }

func (RollbackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rollback)(nil)).Elem()
}

func (o RollbackOutput) ToRollbackOutput() RollbackOutput {
	return o
}

func (o RollbackOutput) ToRollbackOutputWithContext(ctx context.Context) RollbackOutput {
	return o
}

// The database information to be archived, indicating that the entire database is archived.
func (o RollbackOutput) Databases() RollbackDatabaseArrayOutput {
	return o.ApplyT(func(v *Rollback) RollbackDatabaseArrayOutput { return v.Databases }).(RollbackDatabaseArrayOutput)
}

// Cloud database instance ID.
func (o RollbackOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollback) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Database rollback time, the time format is: yyyy-mm-dd hh:mm:ss.
func (o RollbackOutput) RollbackTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollback) pulumi.StringOutput { return v.RollbackTime }).(pulumi.StringOutput)
}

// Rollback strategy. Available values are: table, db, full; the default value is full. table- Extremely fast rollback mode, only import the backup and binlog of the selected table level, if there is a cross-table operation, and the associated table is not selected at the same time, the rollback will fail. In this mode, the parameter Databases must be empty; db- Quick mode, only import the backup and binlog of the selected library level, if there is a cross-database operation, and the associated library is not selected at the same time, the rollback will fail; full- normal rollback mode, the backup and binlog of the entire instance will be imported, at a slower rate.
func (o RollbackOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Rollback) pulumi.StringOutput { return v.Strategy }).(pulumi.StringOutput)
}

// The database table information to be rolled back, indicating that the file is rolled back by table.
func (o RollbackOutput) Tables() RollbackTableArrayOutput {
	return o.ApplyT(func(v *Rollback) RollbackTableArrayOutput { return v.Tables }).(RollbackTableArrayOutput)
}

type RollbackArrayOutput struct{ *pulumi.OutputState }

func (RollbackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rollback)(nil)).Elem()
}

func (o RollbackArrayOutput) ToRollbackArrayOutput() RollbackArrayOutput {
	return o
}

func (o RollbackArrayOutput) ToRollbackArrayOutputWithContext(ctx context.Context) RollbackArrayOutput {
	return o
}

func (o RollbackArrayOutput) Index(i pulumi.IntInput) RollbackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rollback {
		return vs[0].([]*Rollback)[vs[1].(int)]
	}).(RollbackOutput)
}

type RollbackMapOutput struct{ *pulumi.OutputState }

func (RollbackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rollback)(nil)).Elem()
}

func (o RollbackMapOutput) ToRollbackMapOutput() RollbackMapOutput {
	return o
}

func (o RollbackMapOutput) ToRollbackMapOutputWithContext(ctx context.Context) RollbackMapOutput {
	return o
}

func (o RollbackMapOutput) MapIndex(k pulumi.StringInput) RollbackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rollback {
		return vs[0].(map[string]*Rollback)[vs[1].(string)]
	}).(RollbackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackInput)(nil)).Elem(), &Rollback{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackArrayInput)(nil)).Elem(), RollbackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollbackMapInput)(nil)).Elem(), RollbackMap{})
	pulumi.RegisterOutputType(RollbackOutput{})
	pulumi.RegisterOutputType(RollbackArrayOutput{})
	pulumi.RegisterOutputType(RollbackMapOutput{})
}
