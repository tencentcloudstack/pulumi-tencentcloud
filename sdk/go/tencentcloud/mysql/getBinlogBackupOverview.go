// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of mysql binlogBackupOverview
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.GetBinlogBackupOverview(ctx, &mysql.GetBinlogBackupOverviewArgs{
//				Product: "mysql",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBinlogBackupOverview(ctx *pulumi.Context, args *GetBinlogBackupOverviewArgs, opts ...pulumi.InvokeOption) (*GetBinlogBackupOverviewResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetBinlogBackupOverviewResult
	err := ctx.Invoke("tencentcloud:Mysql/getBinlogBackupOverview:getBinlogBackupOverview", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBinlogBackupOverview.
type GetBinlogBackupOverviewArgs struct {
	// The type of cloud database product to be queried, currently only supports `mysql`.
	Product string `pulumi:"product"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getBinlogBackupOverview.
type GetBinlogBackupOverviewResult struct {
	// The number of archived log backups.
	BinlogArchiveCount int `pulumi:"binlogArchiveCount"`
	// Archived log backup capacity (in bytes).
	BinlogArchiveVolume int `pulumi:"binlogArchiveVolume"`
	// The total number of log backups, including remote log backups.
	BinlogBackupCount int `pulumi:"binlogBackupCount"`
	// Total log backup capacity, including off-site log backup (unit is byte).
	BinlogBackupVolume int `pulumi:"binlogBackupVolume"`
	// The number of standard storage log backups.
	BinlogStandbyCount int `pulumi:"binlogStandbyCount"`
	// Standard storage log backup capacity (in bytes).
	BinlogStandbyVolume int `pulumi:"binlogStandbyVolume"`
	// The provider-assigned unique ID for this managed resource.
	Id      string `pulumi:"id"`
	Product string `pulumi:"product"`
	// The number of remote log backups.
	RemoteBinlogCount int `pulumi:"remoteBinlogCount"`
	// Remote log backup capacity (in bytes).
	RemoteBinlogVolume int     `pulumi:"remoteBinlogVolume"`
	ResultOutputFile   *string `pulumi:"resultOutputFile"`
}

func GetBinlogBackupOverviewOutput(ctx *pulumi.Context, args GetBinlogBackupOverviewOutputArgs, opts ...pulumi.InvokeOption) GetBinlogBackupOverviewResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBinlogBackupOverviewResult, error) {
			args := v.(GetBinlogBackupOverviewArgs)
			r, err := GetBinlogBackupOverview(ctx, &args, opts...)
			var s GetBinlogBackupOverviewResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBinlogBackupOverviewResultOutput)
}

// A collection of arguments for invoking getBinlogBackupOverview.
type GetBinlogBackupOverviewOutputArgs struct {
	// The type of cloud database product to be queried, currently only supports `mysql`.
	Product pulumi.StringInput `pulumi:"product"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetBinlogBackupOverviewOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBinlogBackupOverviewArgs)(nil)).Elem()
}

// A collection of values returned by getBinlogBackupOverview.
type GetBinlogBackupOverviewResultOutput struct{ *pulumi.OutputState }

func (GetBinlogBackupOverviewResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBinlogBackupOverviewResult)(nil)).Elem()
}

func (o GetBinlogBackupOverviewResultOutput) ToGetBinlogBackupOverviewResultOutput() GetBinlogBackupOverviewResultOutput {
	return o
}

func (o GetBinlogBackupOverviewResultOutput) ToGetBinlogBackupOverviewResultOutputWithContext(ctx context.Context) GetBinlogBackupOverviewResultOutput {
	return o
}

// The number of archived log backups.
func (o GetBinlogBackupOverviewResultOutput) BinlogArchiveCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.BinlogArchiveCount }).(pulumi.IntOutput)
}

// Archived log backup capacity (in bytes).
func (o GetBinlogBackupOverviewResultOutput) BinlogArchiveVolume() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.BinlogArchiveVolume }).(pulumi.IntOutput)
}

// The total number of log backups, including remote log backups.
func (o GetBinlogBackupOverviewResultOutput) BinlogBackupCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.BinlogBackupCount }).(pulumi.IntOutput)
}

// Total log backup capacity, including off-site log backup (unit is byte).
func (o GetBinlogBackupOverviewResultOutput) BinlogBackupVolume() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.BinlogBackupVolume }).(pulumi.IntOutput)
}

// The number of standard storage log backups.
func (o GetBinlogBackupOverviewResultOutput) BinlogStandbyCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.BinlogStandbyCount }).(pulumi.IntOutput)
}

// Standard storage log backup capacity (in bytes).
func (o GetBinlogBackupOverviewResultOutput) BinlogStandbyVolume() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.BinlogStandbyVolume }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBinlogBackupOverviewResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBinlogBackupOverviewResultOutput) Product() pulumi.StringOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) string { return v.Product }).(pulumi.StringOutput)
}

// The number of remote log backups.
func (o GetBinlogBackupOverviewResultOutput) RemoteBinlogCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.RemoteBinlogCount }).(pulumi.IntOutput)
}

// Remote log backup capacity (in bytes).
func (o GetBinlogBackupOverviewResultOutput) RemoteBinlogVolume() pulumi.IntOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) int { return v.RemoteBinlogVolume }).(pulumi.IntOutput)
}

func (o GetBinlogBackupOverviewResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBinlogBackupOverviewResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBinlogBackupOverviewResultOutput{})
}
