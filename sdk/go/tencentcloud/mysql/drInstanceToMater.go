// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql drInstanceToMater
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "cdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(0),
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.AnyMap{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewDrInstanceToMater(ctx, "exampleDrInstanceToMater", &Mysql.DrInstanceToMaterArgs{
//				InstanceId: exampleInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mysql dr_instance_to_mater can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mysql/drInstanceToMater:DrInstanceToMater dr_instance_to_mater dr_instance_to_mater_id
//
// ```
type DrInstanceToMater struct {
	pulumi.CustomResourceState

	// Disaster recovery instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed in the TencentDB console.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewDrInstanceToMater registers a new resource with the given unique name, arguments, and options.
func NewDrInstanceToMater(ctx *pulumi.Context,
	name string, args *DrInstanceToMaterArgs, opts ...pulumi.ResourceOption) (*DrInstanceToMater, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DrInstanceToMater
	err := ctx.RegisterResource("tencentcloud:Mysql/drInstanceToMater:DrInstanceToMater", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDrInstanceToMater gets an existing DrInstanceToMater resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDrInstanceToMater(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DrInstanceToMaterState, opts ...pulumi.ResourceOption) (*DrInstanceToMater, error) {
	var resource DrInstanceToMater
	err := ctx.ReadResource("tencentcloud:Mysql/drInstanceToMater:DrInstanceToMater", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DrInstanceToMater resources.
type drInstanceToMaterState struct {
	// Disaster recovery instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed in the TencentDB console.
	InstanceId *string `pulumi:"instanceId"`
}

type DrInstanceToMaterState struct {
	// Disaster recovery instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed in the TencentDB console.
	InstanceId pulumi.StringPtrInput
}

func (DrInstanceToMaterState) ElementType() reflect.Type {
	return reflect.TypeOf((*drInstanceToMaterState)(nil)).Elem()
}

type drInstanceToMaterArgs struct {
	// Disaster recovery instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed in the TencentDB console.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a DrInstanceToMater resource.
type DrInstanceToMaterArgs struct {
	// Disaster recovery instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed in the TencentDB console.
	InstanceId pulumi.StringInput
}

func (DrInstanceToMaterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*drInstanceToMaterArgs)(nil)).Elem()
}

type DrInstanceToMaterInput interface {
	pulumi.Input

	ToDrInstanceToMaterOutput() DrInstanceToMaterOutput
	ToDrInstanceToMaterOutputWithContext(ctx context.Context) DrInstanceToMaterOutput
}

func (*DrInstanceToMater) ElementType() reflect.Type {
	return reflect.TypeOf((**DrInstanceToMater)(nil)).Elem()
}

func (i *DrInstanceToMater) ToDrInstanceToMaterOutput() DrInstanceToMaterOutput {
	return i.ToDrInstanceToMaterOutputWithContext(context.Background())
}

func (i *DrInstanceToMater) ToDrInstanceToMaterOutputWithContext(ctx context.Context) DrInstanceToMaterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrInstanceToMaterOutput)
}

// DrInstanceToMaterArrayInput is an input type that accepts DrInstanceToMaterArray and DrInstanceToMaterArrayOutput values.
// You can construct a concrete instance of `DrInstanceToMaterArrayInput` via:
//
//	DrInstanceToMaterArray{ DrInstanceToMaterArgs{...} }
type DrInstanceToMaterArrayInput interface {
	pulumi.Input

	ToDrInstanceToMaterArrayOutput() DrInstanceToMaterArrayOutput
	ToDrInstanceToMaterArrayOutputWithContext(context.Context) DrInstanceToMaterArrayOutput
}

type DrInstanceToMaterArray []DrInstanceToMaterInput

func (DrInstanceToMaterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DrInstanceToMater)(nil)).Elem()
}

func (i DrInstanceToMaterArray) ToDrInstanceToMaterArrayOutput() DrInstanceToMaterArrayOutput {
	return i.ToDrInstanceToMaterArrayOutputWithContext(context.Background())
}

func (i DrInstanceToMaterArray) ToDrInstanceToMaterArrayOutputWithContext(ctx context.Context) DrInstanceToMaterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrInstanceToMaterArrayOutput)
}

// DrInstanceToMaterMapInput is an input type that accepts DrInstanceToMaterMap and DrInstanceToMaterMapOutput values.
// You can construct a concrete instance of `DrInstanceToMaterMapInput` via:
//
//	DrInstanceToMaterMap{ "key": DrInstanceToMaterArgs{...} }
type DrInstanceToMaterMapInput interface {
	pulumi.Input

	ToDrInstanceToMaterMapOutput() DrInstanceToMaterMapOutput
	ToDrInstanceToMaterMapOutputWithContext(context.Context) DrInstanceToMaterMapOutput
}

type DrInstanceToMaterMap map[string]DrInstanceToMaterInput

func (DrInstanceToMaterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DrInstanceToMater)(nil)).Elem()
}

func (i DrInstanceToMaterMap) ToDrInstanceToMaterMapOutput() DrInstanceToMaterMapOutput {
	return i.ToDrInstanceToMaterMapOutputWithContext(context.Background())
}

func (i DrInstanceToMaterMap) ToDrInstanceToMaterMapOutputWithContext(ctx context.Context) DrInstanceToMaterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DrInstanceToMaterMapOutput)
}

type DrInstanceToMaterOutput struct{ *pulumi.OutputState }

func (DrInstanceToMaterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DrInstanceToMater)(nil)).Elem()
}

func (o DrInstanceToMaterOutput) ToDrInstanceToMaterOutput() DrInstanceToMaterOutput {
	return o
}

func (o DrInstanceToMaterOutput) ToDrInstanceToMaterOutputWithContext(ctx context.Context) DrInstanceToMaterOutput {
	return o
}

// Disaster recovery instance ID in the format of cdb-c1nl9rpv. It is the same as the instance ID displayed in the TencentDB console.
func (o DrInstanceToMaterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DrInstanceToMater) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type DrInstanceToMaterArrayOutput struct{ *pulumi.OutputState }

func (DrInstanceToMaterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DrInstanceToMater)(nil)).Elem()
}

func (o DrInstanceToMaterArrayOutput) ToDrInstanceToMaterArrayOutput() DrInstanceToMaterArrayOutput {
	return o
}

func (o DrInstanceToMaterArrayOutput) ToDrInstanceToMaterArrayOutputWithContext(ctx context.Context) DrInstanceToMaterArrayOutput {
	return o
}

func (o DrInstanceToMaterArrayOutput) Index(i pulumi.IntInput) DrInstanceToMaterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DrInstanceToMater {
		return vs[0].([]*DrInstanceToMater)[vs[1].(int)]
	}).(DrInstanceToMaterOutput)
}

type DrInstanceToMaterMapOutput struct{ *pulumi.OutputState }

func (DrInstanceToMaterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DrInstanceToMater)(nil)).Elem()
}

func (o DrInstanceToMaterMapOutput) ToDrInstanceToMaterMapOutput() DrInstanceToMaterMapOutput {
	return o
}

func (o DrInstanceToMaterMapOutput) ToDrInstanceToMaterMapOutputWithContext(ctx context.Context) DrInstanceToMaterMapOutput {
	return o
}

func (o DrInstanceToMaterMapOutput) MapIndex(k pulumi.StringInput) DrInstanceToMaterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DrInstanceToMater {
		return vs[0].(map[string]*DrInstanceToMater)[vs[1].(string)]
	}).(DrInstanceToMaterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DrInstanceToMaterInput)(nil)).Elem(), &DrInstanceToMater{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrInstanceToMaterArrayInput)(nil)).Elem(), DrInstanceToMaterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DrInstanceToMaterMapInput)(nil)).Elem(), DrInstanceToMaterMap{})
	pulumi.RegisterOutputType(DrInstanceToMaterOutput{})
	pulumi.RegisterOutputType(DrInstanceToMaterArrayOutput{})
	pulumi.RegisterOutputType(DrInstanceToMaterMapOutput{})
}
