// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql param template
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "cdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(0),
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.AnyMap{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewParamTemplate(ctx, "exampleParamTemplate", &Mysql.ParamTemplateArgs{
//				Description:   pulumi.String("desc."),
//				EngineVersion: pulumi.String("8.0"),
//				ParamLists: mysql.ParamTemplateParamListArray{
//					&mysql.ParamTemplateParamListArgs{
//						CurrentValue: pulumi.String("1"),
//						Name:         pulumi.String("auto_increment_increment"),
//					},
//					&mysql.ParamTemplateParamListArgs{
//						CurrentValue: pulumi.String("1"),
//						Name:         pulumi.String("auto_increment_offset"),
//					},
//					&mysql.ParamTemplateParamListArgs{
//						CurrentValue: pulumi.String("ON"),
//						Name:         pulumi.String("automatic_sp_privileges"),
//					},
//				},
//				TemplateType: pulumi.String("HIGH_STABILITY"),
//				EngineType:   pulumi.String("InnoDB"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mysql param template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mysql/paramTemplate:ParamTemplate param_template template_id
//
// ```
type ParamTemplate struct {
	pulumi.CustomResourceState

	// The description of parameter template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
	EngineType pulumi.StringPtrOutput `pulumi:"engineType"`
	// The version of MySQL.
	EngineVersion pulumi.StringPtrOutput `pulumi:"engineVersion"`
	// The name of parameter template.
	Name pulumi.StringOutput `pulumi:"name"`
	// parameter list.
	ParamLists ParamTemplateParamListArrayOutput `pulumi:"paramLists"`
	// The ID of source parameter template.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
	// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
	TemplateType pulumi.StringPtrOutput `pulumi:"templateType"`
}

// NewParamTemplate registers a new resource with the given unique name, arguments, and options.
func NewParamTemplate(ctx *pulumi.Context,
	name string, args *ParamTemplateArgs, opts ...pulumi.ResourceOption) (*ParamTemplate, error) {
	if args == nil {
		args = &ParamTemplateArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ParamTemplate
	err := ctx.RegisterResource("tencentcloud:Mysql/paramTemplate:ParamTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParamTemplate gets an existing ParamTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParamTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParamTemplateState, opts ...pulumi.ResourceOption) (*ParamTemplate, error) {
	var resource ParamTemplate
	err := ctx.ReadResource("tencentcloud:Mysql/paramTemplate:ParamTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ParamTemplate resources.
type paramTemplateState struct {
	// The description of parameter template.
	Description *string `pulumi:"description"`
	// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
	EngineType *string `pulumi:"engineType"`
	// The version of MySQL.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of parameter template.
	Name *string `pulumi:"name"`
	// parameter list.
	ParamLists []ParamTemplateParamList `pulumi:"paramLists"`
	// The ID of source parameter template.
	TemplateId *int `pulumi:"templateId"`
	// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
	TemplateType *string `pulumi:"templateType"`
}

type ParamTemplateState struct {
	// The description of parameter template.
	Description pulumi.StringPtrInput
	// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
	EngineType pulumi.StringPtrInput
	// The version of MySQL.
	EngineVersion pulumi.StringPtrInput
	// The name of parameter template.
	Name pulumi.StringPtrInput
	// parameter list.
	ParamLists ParamTemplateParamListArrayInput
	// The ID of source parameter template.
	TemplateId pulumi.IntPtrInput
	// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
	TemplateType pulumi.StringPtrInput
}

func (ParamTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*paramTemplateState)(nil)).Elem()
}

type paramTemplateArgs struct {
	// The description of parameter template.
	Description *string `pulumi:"description"`
	// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
	EngineType *string `pulumi:"engineType"`
	// The version of MySQL.
	EngineVersion *string `pulumi:"engineVersion"`
	// The name of parameter template.
	Name *string `pulumi:"name"`
	// parameter list.
	ParamLists []ParamTemplateParamList `pulumi:"paramLists"`
	// The ID of source parameter template.
	TemplateId *int `pulumi:"templateId"`
	// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
	TemplateType *string `pulumi:"templateType"`
}

// The set of arguments for constructing a ParamTemplate resource.
type ParamTemplateArgs struct {
	// The description of parameter template.
	Description pulumi.StringPtrInput
	// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
	EngineType pulumi.StringPtrInput
	// The version of MySQL.
	EngineVersion pulumi.StringPtrInput
	// The name of parameter template.
	Name pulumi.StringPtrInput
	// parameter list.
	ParamLists ParamTemplateParamListArrayInput
	// The ID of source parameter template.
	TemplateId pulumi.IntPtrInput
	// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
	TemplateType pulumi.StringPtrInput
}

func (ParamTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*paramTemplateArgs)(nil)).Elem()
}

type ParamTemplateInput interface {
	pulumi.Input

	ToParamTemplateOutput() ParamTemplateOutput
	ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput
}

func (*ParamTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamTemplate)(nil)).Elem()
}

func (i *ParamTemplate) ToParamTemplateOutput() ParamTemplateOutput {
	return i.ToParamTemplateOutputWithContext(context.Background())
}

func (i *ParamTemplate) ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateOutput)
}

// ParamTemplateArrayInput is an input type that accepts ParamTemplateArray and ParamTemplateArrayOutput values.
// You can construct a concrete instance of `ParamTemplateArrayInput` via:
//
//	ParamTemplateArray{ ParamTemplateArgs{...} }
type ParamTemplateArrayInput interface {
	pulumi.Input

	ToParamTemplateArrayOutput() ParamTemplateArrayOutput
	ToParamTemplateArrayOutputWithContext(context.Context) ParamTemplateArrayOutput
}

type ParamTemplateArray []ParamTemplateInput

func (ParamTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ParamTemplate)(nil)).Elem()
}

func (i ParamTemplateArray) ToParamTemplateArrayOutput() ParamTemplateArrayOutput {
	return i.ToParamTemplateArrayOutputWithContext(context.Background())
}

func (i ParamTemplateArray) ToParamTemplateArrayOutputWithContext(ctx context.Context) ParamTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateArrayOutput)
}

// ParamTemplateMapInput is an input type that accepts ParamTemplateMap and ParamTemplateMapOutput values.
// You can construct a concrete instance of `ParamTemplateMapInput` via:
//
//	ParamTemplateMap{ "key": ParamTemplateArgs{...} }
type ParamTemplateMapInput interface {
	pulumi.Input

	ToParamTemplateMapOutput() ParamTemplateMapOutput
	ToParamTemplateMapOutputWithContext(context.Context) ParamTemplateMapOutput
}

type ParamTemplateMap map[string]ParamTemplateInput

func (ParamTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ParamTemplate)(nil)).Elem()
}

func (i ParamTemplateMap) ToParamTemplateMapOutput() ParamTemplateMapOutput {
	return i.ToParamTemplateMapOutputWithContext(context.Background())
}

func (i ParamTemplateMap) ToParamTemplateMapOutputWithContext(ctx context.Context) ParamTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateMapOutput)
}

type ParamTemplateOutput struct{ *pulumi.OutputState }

func (ParamTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateOutput) ToParamTemplateOutput() ParamTemplateOutput {
	return o
}

func (o ParamTemplateOutput) ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput {
	return o
}

// The description of parameter template.
func (o ParamTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The engine type of instance, optional value is InnoDB or RocksDB, default to InnoDB.
func (o ParamTemplateOutput) EngineType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.EngineType }).(pulumi.StringPtrOutput)
}

// The version of MySQL.
func (o ParamTemplateOutput) EngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.EngineVersion }).(pulumi.StringPtrOutput)
}

// The name of parameter template.
func (o ParamTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// parameter list.
func (o ParamTemplateOutput) ParamLists() ParamTemplateParamListArrayOutput {
	return o.ApplyT(func(v *ParamTemplate) ParamTemplateParamListArrayOutput { return v.ParamLists }).(ParamTemplateParamListArrayOutput)
}

// The ID of source parameter template.
func (o ParamTemplateOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

// The default type of parameter template, supported value is HIGH_STABILITY or HIGH_PERFORMANCE.
func (o ParamTemplateOutput) TemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.TemplateType }).(pulumi.StringPtrOutput)
}

type ParamTemplateArrayOutput struct{ *pulumi.OutputState }

func (ParamTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateArrayOutput) ToParamTemplateArrayOutput() ParamTemplateArrayOutput {
	return o
}

func (o ParamTemplateArrayOutput) ToParamTemplateArrayOutputWithContext(ctx context.Context) ParamTemplateArrayOutput {
	return o
}

func (o ParamTemplateArrayOutput) Index(i pulumi.IntInput) ParamTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ParamTemplate {
		return vs[0].([]*ParamTemplate)[vs[1].(int)]
	}).(ParamTemplateOutput)
}

type ParamTemplateMapOutput struct{ *pulumi.OutputState }

func (ParamTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateMapOutput) ToParamTemplateMapOutput() ParamTemplateMapOutput {
	return o
}

func (o ParamTemplateMapOutput) ToParamTemplateMapOutputWithContext(ctx context.Context) ParamTemplateMapOutput {
	return o
}

func (o ParamTemplateMapOutput) MapIndex(k pulumi.StringInput) ParamTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ParamTemplate {
		return vs[0].(map[string]*ParamTemplate)[vs[1].(string)]
	}).(ParamTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateInput)(nil)).Elem(), &ParamTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateArrayInput)(nil)).Elem(), ParamTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateMapInput)(nil)).Elem(), ParamTemplateMap{})
	pulumi.RegisterOutputType(ParamTemplateOutput{})
	pulumi.RegisterOutputType(ParamTemplateArrayOutput{})
	pulumi.RegisterOutputType(ParamTemplateMapOutput{})
}
