// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql deployGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.NewDeployGroup(ctx, "example", &Mysql.DeployGroupArgs{
//				DeployGroupName: pulumi.String("tf-example"),
//				Description:     pulumi.String("desc."),
//				DevClasses: pulumi.StringArray{
//					pulumi.String("TS85"),
//				},
//				LimitNum: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mysql deploy_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Mysql/deployGroup:DeployGroup deploy_group deploy_group_id
//
// ```
type DeployGroup struct {
	pulumi.CustomResourceState

	// The name of deploy group. the maximum length cannot exceed 60 characters.
	DeployGroupName pulumi.StringOutput `pulumi:"deployGroupName"`
	// The description of deploy group. the maximum length cannot exceed 200 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The device class of deploy group. optional value is SH12+SH02, TS85, etc.
	DevClasses pulumi.StringArrayOutput `pulumi:"devClasses"`
	// The limit on the number of instances on the same physical machine in deploy group affinity policy 1.
	LimitNum pulumi.IntPtrOutput `pulumi:"limitNum"`
}

// NewDeployGroup registers a new resource with the given unique name, arguments, and options.
func NewDeployGroup(ctx *pulumi.Context,
	name string, args *DeployGroupArgs, opts ...pulumi.ResourceOption) (*DeployGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeployGroupName == nil {
		return nil, errors.New("invalid value for required argument 'DeployGroupName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeployGroup
	err := ctx.RegisterResource("tencentcloud:Mysql/deployGroup:DeployGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployGroup gets an existing DeployGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeployGroupState, opts ...pulumi.ResourceOption) (*DeployGroup, error) {
	var resource DeployGroup
	err := ctx.ReadResource("tencentcloud:Mysql/deployGroup:DeployGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeployGroup resources.
type deployGroupState struct {
	// The name of deploy group. the maximum length cannot exceed 60 characters.
	DeployGroupName *string `pulumi:"deployGroupName"`
	// The description of deploy group. the maximum length cannot exceed 200 characters.
	Description *string `pulumi:"description"`
	// The device class of deploy group. optional value is SH12+SH02, TS85, etc.
	DevClasses []string `pulumi:"devClasses"`
	// The limit on the number of instances on the same physical machine in deploy group affinity policy 1.
	LimitNum *int `pulumi:"limitNum"`
}

type DeployGroupState struct {
	// The name of deploy group. the maximum length cannot exceed 60 characters.
	DeployGroupName pulumi.StringPtrInput
	// The description of deploy group. the maximum length cannot exceed 200 characters.
	Description pulumi.StringPtrInput
	// The device class of deploy group. optional value is SH12+SH02, TS85, etc.
	DevClasses pulumi.StringArrayInput
	// The limit on the number of instances on the same physical machine in deploy group affinity policy 1.
	LimitNum pulumi.IntPtrInput
}

func (DeployGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*deployGroupState)(nil)).Elem()
}

type deployGroupArgs struct {
	// The name of deploy group. the maximum length cannot exceed 60 characters.
	DeployGroupName string `pulumi:"deployGroupName"`
	// The description of deploy group. the maximum length cannot exceed 200 characters.
	Description *string `pulumi:"description"`
	// The device class of deploy group. optional value is SH12+SH02, TS85, etc.
	DevClasses []string `pulumi:"devClasses"`
	// The limit on the number of instances on the same physical machine in deploy group affinity policy 1.
	LimitNum *int `pulumi:"limitNum"`
}

// The set of arguments for constructing a DeployGroup resource.
type DeployGroupArgs struct {
	// The name of deploy group. the maximum length cannot exceed 60 characters.
	DeployGroupName pulumi.StringInput
	// The description of deploy group. the maximum length cannot exceed 200 characters.
	Description pulumi.StringPtrInput
	// The device class of deploy group. optional value is SH12+SH02, TS85, etc.
	DevClasses pulumi.StringArrayInput
	// The limit on the number of instances on the same physical machine in deploy group affinity policy 1.
	LimitNum pulumi.IntPtrInput
}

func (DeployGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deployGroupArgs)(nil)).Elem()
}

type DeployGroupInput interface {
	pulumi.Input

	ToDeployGroupOutput() DeployGroupOutput
	ToDeployGroupOutputWithContext(ctx context.Context) DeployGroupOutput
}

func (*DeployGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployGroup)(nil)).Elem()
}

func (i *DeployGroup) ToDeployGroupOutput() DeployGroupOutput {
	return i.ToDeployGroupOutputWithContext(context.Background())
}

func (i *DeployGroup) ToDeployGroupOutputWithContext(ctx context.Context) DeployGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployGroupOutput)
}

// DeployGroupArrayInput is an input type that accepts DeployGroupArray and DeployGroupArrayOutput values.
// You can construct a concrete instance of `DeployGroupArrayInput` via:
//
//	DeployGroupArray{ DeployGroupArgs{...} }
type DeployGroupArrayInput interface {
	pulumi.Input

	ToDeployGroupArrayOutput() DeployGroupArrayOutput
	ToDeployGroupArrayOutputWithContext(context.Context) DeployGroupArrayOutput
}

type DeployGroupArray []DeployGroupInput

func (DeployGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployGroup)(nil)).Elem()
}

func (i DeployGroupArray) ToDeployGroupArrayOutput() DeployGroupArrayOutput {
	return i.ToDeployGroupArrayOutputWithContext(context.Background())
}

func (i DeployGroupArray) ToDeployGroupArrayOutputWithContext(ctx context.Context) DeployGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployGroupArrayOutput)
}

// DeployGroupMapInput is an input type that accepts DeployGroupMap and DeployGroupMapOutput values.
// You can construct a concrete instance of `DeployGroupMapInput` via:
//
//	DeployGroupMap{ "key": DeployGroupArgs{...} }
type DeployGroupMapInput interface {
	pulumi.Input

	ToDeployGroupMapOutput() DeployGroupMapOutput
	ToDeployGroupMapOutputWithContext(context.Context) DeployGroupMapOutput
}

type DeployGroupMap map[string]DeployGroupInput

func (DeployGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployGroup)(nil)).Elem()
}

func (i DeployGroupMap) ToDeployGroupMapOutput() DeployGroupMapOutput {
	return i.ToDeployGroupMapOutputWithContext(context.Background())
}

func (i DeployGroupMap) ToDeployGroupMapOutputWithContext(ctx context.Context) DeployGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployGroupMapOutput)
}

type DeployGroupOutput struct{ *pulumi.OutputState }

func (DeployGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployGroup)(nil)).Elem()
}

func (o DeployGroupOutput) ToDeployGroupOutput() DeployGroupOutput {
	return o
}

func (o DeployGroupOutput) ToDeployGroupOutputWithContext(ctx context.Context) DeployGroupOutput {
	return o
}

// The name of deploy group. the maximum length cannot exceed 60 characters.
func (o DeployGroupOutput) DeployGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployGroup) pulumi.StringOutput { return v.DeployGroupName }).(pulumi.StringOutput)
}

// The description of deploy group. the maximum length cannot exceed 200 characters.
func (o DeployGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeployGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The device class of deploy group. optional value is SH12+SH02, TS85, etc.
func (o DeployGroupOutput) DevClasses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DeployGroup) pulumi.StringArrayOutput { return v.DevClasses }).(pulumi.StringArrayOutput)
}

// The limit on the number of instances on the same physical machine in deploy group affinity policy 1.
func (o DeployGroupOutput) LimitNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DeployGroup) pulumi.IntPtrOutput { return v.LimitNum }).(pulumi.IntPtrOutput)
}

type DeployGroupArrayOutput struct{ *pulumi.OutputState }

func (DeployGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployGroup)(nil)).Elem()
}

func (o DeployGroupArrayOutput) ToDeployGroupArrayOutput() DeployGroupArrayOutput {
	return o
}

func (o DeployGroupArrayOutput) ToDeployGroupArrayOutputWithContext(ctx context.Context) DeployGroupArrayOutput {
	return o
}

func (o DeployGroupArrayOutput) Index(i pulumi.IntInput) DeployGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeployGroup {
		return vs[0].([]*DeployGroup)[vs[1].(int)]
	}).(DeployGroupOutput)
}

type DeployGroupMapOutput struct{ *pulumi.OutputState }

func (DeployGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployGroup)(nil)).Elem()
}

func (o DeployGroupMapOutput) ToDeployGroupMapOutput() DeployGroupMapOutput {
	return o
}

func (o DeployGroupMapOutput) ToDeployGroupMapOutputWithContext(ctx context.Context) DeployGroupMapOutput {
	return o
}

func (o DeployGroupMapOutput) MapIndex(k pulumi.StringInput) DeployGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeployGroup {
		return vs[0].(map[string]*DeployGroup)[vs[1].(string)]
	}).(DeployGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeployGroupInput)(nil)).Elem(), &DeployGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployGroupArrayInput)(nil)).Elem(), DeployGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployGroupMapInput)(nil)).Elem(), DeployGroupMap{})
	pulumi.RegisterOutputType(DeployGroupOutput{})
	pulumi.RegisterOutputType(DeployGroupArrayOutput{})
	pulumi.RegisterOutputType(DeployGroupMapOutput{})
}
