// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql proxy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "cdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(1),
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				FirstSlaveZone:   pulumi.String(zones.Zones[1].Name),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.AnyMap{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewProxy(ctx, "exampleProxy", &Mysql.ProxyArgs{
//				InstanceId:   exampleInstance.ID(),
//				UniqVpcId:    vpc.ID(),
//				UniqSubnetId: subnet.ID(),
//				ProxyNodeCustoms: mysql.ProxyProxyNodeCustomArray{
//					&mysql.ProxyProxyNodeCustomArgs{
//						NodeCount: pulumi.Int(1),
//						Cpu:       pulumi.Int(2),
//						Mem:       pulumi.Int(4000),
//						Region:    pulumi.String("ap-guangzhou"),
//						Zone:      pulumi.String("ap-guangzhou-3"),
//					},
//				},
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Desc:                pulumi.String("desc."),
//				ConnectionPoolLimit: pulumi.Int(2),
//				Vip:                 pulumi.String("10.0.0.120"),
//				Vport:               pulumi.Int(3306),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Proxy struct {
	pulumi.CustomResourceState

	// Connection Pool Threshold.
	ConnectionPoolLimit pulumi.IntPtrOutput `pulumi:"connectionPoolLimit"`
	// Describe.
	Desc pulumi.StringPtrOutput `pulumi:"desc"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Proxy address id.
	ProxyAddressId pulumi.StringOutput `pulumi:"proxyAddressId"`
	// Proxy group id.
	ProxyGroupId pulumi.StringOutput `pulumi:"proxyGroupId"`
	// Node specification configuration.
	ProxyNodeCustoms ProxyProxyNodeCustomArrayOutput `pulumi:"proxyNodeCustoms"`
	// The current version of the database agent. No need to fill in when creating.
	ProxyVersion pulumi.StringOutput `pulumi:"proxyVersion"`
	// Security group.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// Subnet id.
	UniqSubnetId pulumi.StringOutput `pulumi:"uniqSubnetId"`
	// Vpc id.
	UniqVpcId pulumi.StringOutput `pulumi:"uniqVpcId"`
	// Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
	UpgradeTime pulumi.StringPtrOutput `pulumi:"upgradeTime"`
	// IP address.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// Port.
	Vport pulumi.IntOutput `pulumi:"vport"`
}

// NewProxy registers a new resource with the given unique name, arguments, and options.
func NewProxy(ctx *pulumi.Context,
	name string, args *ProxyArgs, opts ...pulumi.ResourceOption) (*Proxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ProxyNodeCustoms == nil {
		return nil, errors.New("invalid value for required argument 'ProxyNodeCustoms'")
	}
	if args.UniqSubnetId == nil {
		return nil, errors.New("invalid value for required argument 'UniqSubnetId'")
	}
	if args.UniqVpcId == nil {
		return nil, errors.New("invalid value for required argument 'UniqVpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Proxy
	err := ctx.RegisterResource("tencentcloud:Mysql/proxy:Proxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxy gets an existing Proxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyState, opts ...pulumi.ResourceOption) (*Proxy, error) {
	var resource Proxy
	err := ctx.ReadResource("tencentcloud:Mysql/proxy:Proxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Proxy resources.
type proxyState struct {
	// Connection Pool Threshold.
	ConnectionPoolLimit *int `pulumi:"connectionPoolLimit"`
	// Describe.
	Desc *string `pulumi:"desc"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
	// Proxy address id.
	ProxyAddressId *string `pulumi:"proxyAddressId"`
	// Proxy group id.
	ProxyGroupId *string `pulumi:"proxyGroupId"`
	// Node specification configuration.
	ProxyNodeCustoms []ProxyProxyNodeCustom `pulumi:"proxyNodeCustoms"`
	// The current version of the database agent. No need to fill in when creating.
	ProxyVersion *string `pulumi:"proxyVersion"`
	// Security group.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet id.
	UniqSubnetId *string `pulumi:"uniqSubnetId"`
	// Vpc id.
	UniqVpcId *string `pulumi:"uniqVpcId"`
	// Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
	UpgradeTime *string `pulumi:"upgradeTime"`
	// IP address.
	Vip *string `pulumi:"vip"`
	// Port.
	Vport *int `pulumi:"vport"`
}

type ProxyState struct {
	// Connection Pool Threshold.
	ConnectionPoolLimit pulumi.IntPtrInput
	// Describe.
	Desc pulumi.StringPtrInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
	// Proxy address id.
	ProxyAddressId pulumi.StringPtrInput
	// Proxy group id.
	ProxyGroupId pulumi.StringPtrInput
	// Node specification configuration.
	ProxyNodeCustoms ProxyProxyNodeCustomArrayInput
	// The current version of the database agent. No need to fill in when creating.
	ProxyVersion pulumi.StringPtrInput
	// Security group.
	SecurityGroups pulumi.StringArrayInput
	// Subnet id.
	UniqSubnetId pulumi.StringPtrInput
	// Vpc id.
	UniqVpcId pulumi.StringPtrInput
	// Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
	UpgradeTime pulumi.StringPtrInput
	// IP address.
	Vip pulumi.StringPtrInput
	// Port.
	Vport pulumi.IntPtrInput
}

func (ProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyState)(nil)).Elem()
}

type proxyArgs struct {
	// Connection Pool Threshold.
	ConnectionPoolLimit *int `pulumi:"connectionPoolLimit"`
	// Describe.
	Desc *string `pulumi:"desc"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
	// Node specification configuration.
	ProxyNodeCustoms []ProxyProxyNodeCustom `pulumi:"proxyNodeCustoms"`
	// The current version of the database agent. No need to fill in when creating.
	ProxyVersion *string `pulumi:"proxyVersion"`
	// Security group.
	SecurityGroups []string `pulumi:"securityGroups"`
	// Subnet id.
	UniqSubnetId string `pulumi:"uniqSubnetId"`
	// Vpc id.
	UniqVpcId string `pulumi:"uniqVpcId"`
	// Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
	UpgradeTime *string `pulumi:"upgradeTime"`
	// IP address.
	Vip *string `pulumi:"vip"`
	// Port.
	Vport *int `pulumi:"vport"`
}

// The set of arguments for constructing a Proxy resource.
type ProxyArgs struct {
	// Connection Pool Threshold.
	ConnectionPoolLimit pulumi.IntPtrInput
	// Describe.
	Desc pulumi.StringPtrInput
	// Instance id.
	InstanceId pulumi.StringInput
	// Node specification configuration.
	ProxyNodeCustoms ProxyProxyNodeCustomArrayInput
	// The current version of the database agent. No need to fill in when creating.
	ProxyVersion pulumi.StringPtrInput
	// Security group.
	SecurityGroups pulumi.StringArrayInput
	// Subnet id.
	UniqSubnetId pulumi.StringInput
	// Vpc id.
	UniqVpcId pulumi.StringInput
	// Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
	UpgradeTime pulumi.StringPtrInput
	// IP address.
	Vip pulumi.StringPtrInput
	// Port.
	Vport pulumi.IntPtrInput
}

func (ProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyArgs)(nil)).Elem()
}

type ProxyInput interface {
	pulumi.Input

	ToProxyOutput() ProxyOutput
	ToProxyOutputWithContext(ctx context.Context) ProxyOutput
}

func (*Proxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Proxy)(nil)).Elem()
}

func (i *Proxy) ToProxyOutput() ProxyOutput {
	return i.ToProxyOutputWithContext(context.Background())
}

func (i *Proxy) ToProxyOutputWithContext(ctx context.Context) ProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyOutput)
}

// ProxyArrayInput is an input type that accepts ProxyArray and ProxyArrayOutput values.
// You can construct a concrete instance of `ProxyArrayInput` via:
//
//	ProxyArray{ ProxyArgs{...} }
type ProxyArrayInput interface {
	pulumi.Input

	ToProxyArrayOutput() ProxyArrayOutput
	ToProxyArrayOutputWithContext(context.Context) ProxyArrayOutput
}

type ProxyArray []ProxyInput

func (ProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proxy)(nil)).Elem()
}

func (i ProxyArray) ToProxyArrayOutput() ProxyArrayOutput {
	return i.ToProxyArrayOutputWithContext(context.Background())
}

func (i ProxyArray) ToProxyArrayOutputWithContext(ctx context.Context) ProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyArrayOutput)
}

// ProxyMapInput is an input type that accepts ProxyMap and ProxyMapOutput values.
// You can construct a concrete instance of `ProxyMapInput` via:
//
//	ProxyMap{ "key": ProxyArgs{...} }
type ProxyMapInput interface {
	pulumi.Input

	ToProxyMapOutput() ProxyMapOutput
	ToProxyMapOutputWithContext(context.Context) ProxyMapOutput
}

type ProxyMap map[string]ProxyInput

func (ProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proxy)(nil)).Elem()
}

func (i ProxyMap) ToProxyMapOutput() ProxyMapOutput {
	return i.ToProxyMapOutputWithContext(context.Background())
}

func (i ProxyMap) ToProxyMapOutputWithContext(ctx context.Context) ProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyMapOutput)
}

type ProxyOutput struct{ *pulumi.OutputState }

func (ProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Proxy)(nil)).Elem()
}

func (o ProxyOutput) ToProxyOutput() ProxyOutput {
	return o
}

func (o ProxyOutput) ToProxyOutputWithContext(ctx context.Context) ProxyOutput {
	return o
}

// Connection Pool Threshold.
func (o ProxyOutput) ConnectionPoolLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntPtrOutput { return v.ConnectionPoolLimit }).(pulumi.IntPtrOutput)
}

// Describe.
func (o ProxyOutput) Desc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringPtrOutput { return v.Desc }).(pulumi.StringPtrOutput)
}

// Instance id.
func (o ProxyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Proxy address id.
func (o ProxyOutput) ProxyAddressId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.ProxyAddressId }).(pulumi.StringOutput)
}

// Proxy group id.
func (o ProxyOutput) ProxyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.ProxyGroupId }).(pulumi.StringOutput)
}

// Node specification configuration.
func (o ProxyOutput) ProxyNodeCustoms() ProxyProxyNodeCustomArrayOutput {
	return o.ApplyT(func(v *Proxy) ProxyProxyNodeCustomArrayOutput { return v.ProxyNodeCustoms }).(ProxyProxyNodeCustomArrayOutput)
}

// The current version of the database agent. No need to fill in when creating.
func (o ProxyOutput) ProxyVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.ProxyVersion }).(pulumi.StringOutput)
}

// Security group.
func (o ProxyOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// Subnet id.
func (o ProxyOutput) UniqSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.UniqSubnetId }).(pulumi.StringOutput)
}

// Vpc id.
func (o ProxyOutput) UniqVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.UniqVpcId }).(pulumi.StringOutput)
}

// Upgrade time: nowTime (upgrade completed) timeWindow (instance maintenance time), Required when modifying the agent version, No need to fill in when creating.
func (o ProxyOutput) UpgradeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringPtrOutput { return v.UpgradeTime }).(pulumi.StringPtrOutput)
}

// IP address.
func (o ProxyOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// Port.
func (o ProxyOutput) Vport() pulumi.IntOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntOutput { return v.Vport }).(pulumi.IntOutput)
}

type ProxyArrayOutput struct{ *pulumi.OutputState }

func (ProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proxy)(nil)).Elem()
}

func (o ProxyArrayOutput) ToProxyArrayOutput() ProxyArrayOutput {
	return o
}

func (o ProxyArrayOutput) ToProxyArrayOutputWithContext(ctx context.Context) ProxyArrayOutput {
	return o
}

func (o ProxyArrayOutput) Index(i pulumi.IntInput) ProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Proxy {
		return vs[0].([]*Proxy)[vs[1].(int)]
	}).(ProxyOutput)
}

type ProxyMapOutput struct{ *pulumi.OutputState }

func (ProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proxy)(nil)).Elem()
}

func (o ProxyMapOutput) ToProxyMapOutput() ProxyMapOutput {
	return o
}

func (o ProxyMapOutput) ToProxyMapOutputWithContext(ctx context.Context) ProxyMapOutput {
	return o
}

func (o ProxyMapOutput) MapIndex(k pulumi.StringInput) ProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Proxy {
		return vs[0].(map[string]*Proxy)[vs[1].(string)]
	}).(ProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyInput)(nil)).Elem(), &Proxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyArrayInput)(nil)).Elem(), ProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyMapInput)(nil)).Elem(), ProxyMap{})
	pulumi.RegisterOutputType(ProxyOutput{})
	pulumi.RegisterOutputType(ProxyArrayOutput{})
	pulumi.RegisterOutputType(ProxyMapOutput{})
}
