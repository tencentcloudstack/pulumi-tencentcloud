// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a mysql roStartReplication
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "cdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(1),
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				FirstSlaveZone:   pulumi.String(zones.Zones[1].Name),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.AnyMap{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleProxy, err := Mysql.NewProxy(ctx, "exampleProxy", &Mysql.ProxyArgs{
//				InstanceId:   exampleInstance.ID(),
//				UniqVpcId:    vpc.ID(),
//				UniqSubnetId: subnet.ID(),
//				ProxyNodeCustoms: mysql.ProxyProxyNodeCustomArray{
//					&mysql.ProxyProxyNodeCustomArgs{
//						NodeCount: pulumi.Int(1),
//						Cpu:       pulumi.Int(2),
//						Mem:       pulumi.Int(4000),
//						Region:    pulumi.String("ap-guangzhou"),
//						Zone:      pulumi.String("ap-guangzhou-3"),
//					},
//				},
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Desc:                pulumi.String("desc."),
//				ConnectionPoolLimit: pulumi.Int(2),
//				Vip:                 pulumi.String("10.0.0.120"),
//				Vport:               pulumi.Int(3306),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewRoStartReplication(ctx, "exampleRoStartReplication", &Mysql.RoStartReplicationArgs{
//				InstanceId: exampleProxy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RoStartReplication struct {
	pulumi.CustomResourceState

	// Read-Only instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewRoStartReplication registers a new resource with the given unique name, arguments, and options.
func NewRoStartReplication(ctx *pulumi.Context,
	name string, args *RoStartReplicationArgs, opts ...pulumi.ResourceOption) (*RoStartReplication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RoStartReplication
	err := ctx.RegisterResource("tencentcloud:Mysql/roStartReplication:RoStartReplication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoStartReplication gets an existing RoStartReplication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoStartReplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoStartReplicationState, opts ...pulumi.ResourceOption) (*RoStartReplication, error) {
	var resource RoStartReplication
	err := ctx.ReadResource("tencentcloud:Mysql/roStartReplication:RoStartReplication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoStartReplication resources.
type roStartReplicationState struct {
	// Read-Only instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type RoStartReplicationState struct {
	// Read-Only instance ID.
	InstanceId pulumi.StringPtrInput
}

func (RoStartReplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*roStartReplicationState)(nil)).Elem()
}

type roStartReplicationArgs struct {
	// Read-Only instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RoStartReplication resource.
type RoStartReplicationArgs struct {
	// Read-Only instance ID.
	InstanceId pulumi.StringInput
}

func (RoStartReplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roStartReplicationArgs)(nil)).Elem()
}

type RoStartReplicationInput interface {
	pulumi.Input

	ToRoStartReplicationOutput() RoStartReplicationOutput
	ToRoStartReplicationOutputWithContext(ctx context.Context) RoStartReplicationOutput
}

func (*RoStartReplication) ElementType() reflect.Type {
	return reflect.TypeOf((**RoStartReplication)(nil)).Elem()
}

func (i *RoStartReplication) ToRoStartReplicationOutput() RoStartReplicationOutput {
	return i.ToRoStartReplicationOutputWithContext(context.Background())
}

func (i *RoStartReplication) ToRoStartReplicationOutputWithContext(ctx context.Context) RoStartReplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoStartReplicationOutput)
}

// RoStartReplicationArrayInput is an input type that accepts RoStartReplicationArray and RoStartReplicationArrayOutput values.
// You can construct a concrete instance of `RoStartReplicationArrayInput` via:
//
//	RoStartReplicationArray{ RoStartReplicationArgs{...} }
type RoStartReplicationArrayInput interface {
	pulumi.Input

	ToRoStartReplicationArrayOutput() RoStartReplicationArrayOutput
	ToRoStartReplicationArrayOutputWithContext(context.Context) RoStartReplicationArrayOutput
}

type RoStartReplicationArray []RoStartReplicationInput

func (RoStartReplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoStartReplication)(nil)).Elem()
}

func (i RoStartReplicationArray) ToRoStartReplicationArrayOutput() RoStartReplicationArrayOutput {
	return i.ToRoStartReplicationArrayOutputWithContext(context.Background())
}

func (i RoStartReplicationArray) ToRoStartReplicationArrayOutputWithContext(ctx context.Context) RoStartReplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoStartReplicationArrayOutput)
}

// RoStartReplicationMapInput is an input type that accepts RoStartReplicationMap and RoStartReplicationMapOutput values.
// You can construct a concrete instance of `RoStartReplicationMapInput` via:
//
//	RoStartReplicationMap{ "key": RoStartReplicationArgs{...} }
type RoStartReplicationMapInput interface {
	pulumi.Input

	ToRoStartReplicationMapOutput() RoStartReplicationMapOutput
	ToRoStartReplicationMapOutputWithContext(context.Context) RoStartReplicationMapOutput
}

type RoStartReplicationMap map[string]RoStartReplicationInput

func (RoStartReplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoStartReplication)(nil)).Elem()
}

func (i RoStartReplicationMap) ToRoStartReplicationMapOutput() RoStartReplicationMapOutput {
	return i.ToRoStartReplicationMapOutputWithContext(context.Background())
}

func (i RoStartReplicationMap) ToRoStartReplicationMapOutputWithContext(ctx context.Context) RoStartReplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoStartReplicationMapOutput)
}

type RoStartReplicationOutput struct{ *pulumi.OutputState }

func (RoStartReplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoStartReplication)(nil)).Elem()
}

func (o RoStartReplicationOutput) ToRoStartReplicationOutput() RoStartReplicationOutput {
	return o
}

func (o RoStartReplicationOutput) ToRoStartReplicationOutputWithContext(ctx context.Context) RoStartReplicationOutput {
	return o
}

// Read-Only instance ID.
func (o RoStartReplicationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoStartReplication) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type RoStartReplicationArrayOutput struct{ *pulumi.OutputState }

func (RoStartReplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoStartReplication)(nil)).Elem()
}

func (o RoStartReplicationArrayOutput) ToRoStartReplicationArrayOutput() RoStartReplicationArrayOutput {
	return o
}

func (o RoStartReplicationArrayOutput) ToRoStartReplicationArrayOutputWithContext(ctx context.Context) RoStartReplicationArrayOutput {
	return o
}

func (o RoStartReplicationArrayOutput) Index(i pulumi.IntInput) RoStartReplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoStartReplication {
		return vs[0].([]*RoStartReplication)[vs[1].(int)]
	}).(RoStartReplicationOutput)
}

type RoStartReplicationMapOutput struct{ *pulumi.OutputState }

func (RoStartReplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoStartReplication)(nil)).Elem()
}

func (o RoStartReplicationMapOutput) ToRoStartReplicationMapOutput() RoStartReplicationMapOutput {
	return o
}

func (o RoStartReplicationMapOutput) ToRoStartReplicationMapOutputWithContext(ctx context.Context) RoStartReplicationMapOutput {
	return o
}

func (o RoStartReplicationMapOutput) MapIndex(k pulumi.StringInput) RoStartReplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoStartReplication {
		return vs[0].(map[string]*RoStartReplication)[vs[1].(string)]
	}).(RoStartReplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoStartReplicationInput)(nil)).Elem(), &RoStartReplication{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoStartReplicationArrayInput)(nil)).Elem(), RoStartReplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoStartReplicationMapInput)(nil)).Elem(), RoStartReplicationMap{})
	pulumi.RegisterOutputType(RoStartReplicationOutput{})
	pulumi.RegisterOutputType(RoStartReplicationArrayOutput{})
	pulumi.RegisterOutputType(RoStartReplicationMapOutput{})
}
