// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a mysql log to cls
//
// > **NOTE:** The CLS resource bound to resource `Mysql.ClsLogAttachment` needs to be manually deleted.
//
// ## Example Usage
//
// ### Create Error Log to ClS
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String("ap-guangzhou-6"),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			// create mysql instance
//			exampleInstance, err := Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(0),
//				AvailabilityZone: pulumi.String("ap-guangzhou-6"),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.Map{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.Map{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// attachment cls log
//			_, err = Mysql.NewClsLogAttachment(ctx, "exampleClsLogAttachment", &Mysql.ClsLogAttachmentArgs{
//				InstanceId:     exampleInstance.ID(),
//				LogType:        pulumi.String("error"),
//				CreateLogSet:   pulumi.Bool(true),
//				CreateLogTopic: pulumi.Bool(true),
//				LogSet:         pulumi.String("tf_log_set"),
//				LogTopic:       pulumi.String("tf_log_topic"),
//				Period:         pulumi.Int(30),
//				CreateIndex:    pulumi.Bool(true),
//				ClsRegion:      pulumi.String("ap-guangzhou"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create Slow Log to ClS
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Mysql.NewClsLogAttachment(ctx, "example", &Mysql.ClsLogAttachmentArgs{
//				InstanceId: pulumi.Any(tencentcloud_mysql_instance.Example.Id),
//				LogType:    pulumi.String("slowlog"),
//				LogSet:     pulumi.String("50d499a8-c4c0-4442-aa04-e8aa8a02437d"),
//				LogTopic:   pulumi.String("140d4d39-4307-45a8-9655-290f679b063d"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type ClsLogAttachment struct {
	pulumi.CustomResourceState

	// Cls region.
	ClsRegion pulumi.StringOutput `pulumi:"clsRegion"`
	// Whether to create index.
	CreateIndex pulumi.BoolPtrOutput `pulumi:"createIndex"`
	// Whether to create log set.
	CreateLogSet pulumi.BoolPtrOutput `pulumi:"createLogSet"`
	// Whether to create log topic.
	CreateLogTopic pulumi.BoolPtrOutput `pulumi:"createLogTopic"`
	// The id of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// If `createLogSet` is `true`, use log set name, Else use log set Id.
	LogSet pulumi.StringOutput `pulumi:"logSet"`
	// Log set Id.
	LogSetId pulumi.StringOutput `pulumi:"logSetId"`
	// If `createLogTopic` is `true`, use log topic name, Else use log topic Id.
	LogTopic pulumi.StringOutput `pulumi:"logTopic"`
	// Log topic Id.
	LogTopicId pulumi.StringOutput `pulumi:"logTopicId"`
	// Log type. Support `error` or `slowlog`.
	LogType pulumi.StringOutput `pulumi:"logType"`
	// The validity period of the log theme is 30 days by default when not filled in.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// Log Status.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewClsLogAttachment registers a new resource with the given unique name, arguments, and options.
func NewClsLogAttachment(ctx *pulumi.Context,
	name string, args *ClsLogAttachmentArgs, opts ...pulumi.ResourceOption) (*ClsLogAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.LogSet == nil {
		return nil, errors.New("invalid value for required argument 'LogSet'")
	}
	if args.LogTopic == nil {
		return nil, errors.New("invalid value for required argument 'LogTopic'")
	}
	if args.LogType == nil {
		return nil, errors.New("invalid value for required argument 'LogType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClsLogAttachment
	err := ctx.RegisterResource("tencentcloud:Mysql/clsLogAttachment:ClsLogAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClsLogAttachment gets an existing ClsLogAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClsLogAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClsLogAttachmentState, opts ...pulumi.ResourceOption) (*ClsLogAttachment, error) {
	var resource ClsLogAttachment
	err := ctx.ReadResource("tencentcloud:Mysql/clsLogAttachment:ClsLogAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClsLogAttachment resources.
type clsLogAttachmentState struct {
	// Cls region.
	ClsRegion *string `pulumi:"clsRegion"`
	// Whether to create index.
	CreateIndex *bool `pulumi:"createIndex"`
	// Whether to create log set.
	CreateLogSet *bool `pulumi:"createLogSet"`
	// Whether to create log topic.
	CreateLogTopic *bool `pulumi:"createLogTopic"`
	// The id of instance.
	InstanceId *string `pulumi:"instanceId"`
	// If `createLogSet` is `true`, use log set name, Else use log set Id.
	LogSet *string `pulumi:"logSet"`
	// Log set Id.
	LogSetId *string `pulumi:"logSetId"`
	// If `createLogTopic` is `true`, use log topic name, Else use log topic Id.
	LogTopic *string `pulumi:"logTopic"`
	// Log topic Id.
	LogTopicId *string `pulumi:"logTopicId"`
	// Log type. Support `error` or `slowlog`.
	LogType *string `pulumi:"logType"`
	// The validity period of the log theme is 30 days by default when not filled in.
	Period *int `pulumi:"period"`
	// Log Status.
	Status *string `pulumi:"status"`
}

type ClsLogAttachmentState struct {
	// Cls region.
	ClsRegion pulumi.StringPtrInput
	// Whether to create index.
	CreateIndex pulumi.BoolPtrInput
	// Whether to create log set.
	CreateLogSet pulumi.BoolPtrInput
	// Whether to create log topic.
	CreateLogTopic pulumi.BoolPtrInput
	// The id of instance.
	InstanceId pulumi.StringPtrInput
	// If `createLogSet` is `true`, use log set name, Else use log set Id.
	LogSet pulumi.StringPtrInput
	// Log set Id.
	LogSetId pulumi.StringPtrInput
	// If `createLogTopic` is `true`, use log topic name, Else use log topic Id.
	LogTopic pulumi.StringPtrInput
	// Log topic Id.
	LogTopicId pulumi.StringPtrInput
	// Log type. Support `error` or `slowlog`.
	LogType pulumi.StringPtrInput
	// The validity period of the log theme is 30 days by default when not filled in.
	Period pulumi.IntPtrInput
	// Log Status.
	Status pulumi.StringPtrInput
}

func (ClsLogAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*clsLogAttachmentState)(nil)).Elem()
}

type clsLogAttachmentArgs struct {
	// Cls region.
	ClsRegion *string `pulumi:"clsRegion"`
	// Whether to create index.
	CreateIndex *bool `pulumi:"createIndex"`
	// Whether to create log set.
	CreateLogSet *bool `pulumi:"createLogSet"`
	// Whether to create log topic.
	CreateLogTopic *bool `pulumi:"createLogTopic"`
	// The id of instance.
	InstanceId string `pulumi:"instanceId"`
	// If `createLogSet` is `true`, use log set name, Else use log set Id.
	LogSet string `pulumi:"logSet"`
	// If `createLogTopic` is `true`, use log topic name, Else use log topic Id.
	LogTopic string `pulumi:"logTopic"`
	// Log type. Support `error` or `slowlog`.
	LogType string `pulumi:"logType"`
	// The validity period of the log theme is 30 days by default when not filled in.
	Period *int `pulumi:"period"`
}

// The set of arguments for constructing a ClsLogAttachment resource.
type ClsLogAttachmentArgs struct {
	// Cls region.
	ClsRegion pulumi.StringPtrInput
	// Whether to create index.
	CreateIndex pulumi.BoolPtrInput
	// Whether to create log set.
	CreateLogSet pulumi.BoolPtrInput
	// Whether to create log topic.
	CreateLogTopic pulumi.BoolPtrInput
	// The id of instance.
	InstanceId pulumi.StringInput
	// If `createLogSet` is `true`, use log set name, Else use log set Id.
	LogSet pulumi.StringInput
	// If `createLogTopic` is `true`, use log topic name, Else use log topic Id.
	LogTopic pulumi.StringInput
	// Log type. Support `error` or `slowlog`.
	LogType pulumi.StringInput
	// The validity period of the log theme is 30 days by default when not filled in.
	Period pulumi.IntPtrInput
}

func (ClsLogAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clsLogAttachmentArgs)(nil)).Elem()
}

type ClsLogAttachmentInput interface {
	pulumi.Input

	ToClsLogAttachmentOutput() ClsLogAttachmentOutput
	ToClsLogAttachmentOutputWithContext(ctx context.Context) ClsLogAttachmentOutput
}

func (*ClsLogAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ClsLogAttachment)(nil)).Elem()
}

func (i *ClsLogAttachment) ToClsLogAttachmentOutput() ClsLogAttachmentOutput {
	return i.ToClsLogAttachmentOutputWithContext(context.Background())
}

func (i *ClsLogAttachment) ToClsLogAttachmentOutputWithContext(ctx context.Context) ClsLogAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClsLogAttachmentOutput)
}

// ClsLogAttachmentArrayInput is an input type that accepts ClsLogAttachmentArray and ClsLogAttachmentArrayOutput values.
// You can construct a concrete instance of `ClsLogAttachmentArrayInput` via:
//
//	ClsLogAttachmentArray{ ClsLogAttachmentArgs{...} }
type ClsLogAttachmentArrayInput interface {
	pulumi.Input

	ToClsLogAttachmentArrayOutput() ClsLogAttachmentArrayOutput
	ToClsLogAttachmentArrayOutputWithContext(context.Context) ClsLogAttachmentArrayOutput
}

type ClsLogAttachmentArray []ClsLogAttachmentInput

func (ClsLogAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClsLogAttachment)(nil)).Elem()
}

func (i ClsLogAttachmentArray) ToClsLogAttachmentArrayOutput() ClsLogAttachmentArrayOutput {
	return i.ToClsLogAttachmentArrayOutputWithContext(context.Background())
}

func (i ClsLogAttachmentArray) ToClsLogAttachmentArrayOutputWithContext(ctx context.Context) ClsLogAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClsLogAttachmentArrayOutput)
}

// ClsLogAttachmentMapInput is an input type that accepts ClsLogAttachmentMap and ClsLogAttachmentMapOutput values.
// You can construct a concrete instance of `ClsLogAttachmentMapInput` via:
//
//	ClsLogAttachmentMap{ "key": ClsLogAttachmentArgs{...} }
type ClsLogAttachmentMapInput interface {
	pulumi.Input

	ToClsLogAttachmentMapOutput() ClsLogAttachmentMapOutput
	ToClsLogAttachmentMapOutputWithContext(context.Context) ClsLogAttachmentMapOutput
}

type ClsLogAttachmentMap map[string]ClsLogAttachmentInput

func (ClsLogAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClsLogAttachment)(nil)).Elem()
}

func (i ClsLogAttachmentMap) ToClsLogAttachmentMapOutput() ClsLogAttachmentMapOutput {
	return i.ToClsLogAttachmentMapOutputWithContext(context.Background())
}

func (i ClsLogAttachmentMap) ToClsLogAttachmentMapOutputWithContext(ctx context.Context) ClsLogAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClsLogAttachmentMapOutput)
}

type ClsLogAttachmentOutput struct{ *pulumi.OutputState }

func (ClsLogAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClsLogAttachment)(nil)).Elem()
}

func (o ClsLogAttachmentOutput) ToClsLogAttachmentOutput() ClsLogAttachmentOutput {
	return o
}

func (o ClsLogAttachmentOutput) ToClsLogAttachmentOutputWithContext(ctx context.Context) ClsLogAttachmentOutput {
	return o
}

// Cls region.
func (o ClsLogAttachmentOutput) ClsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.ClsRegion }).(pulumi.StringOutput)
}

// Whether to create index.
func (o ClsLogAttachmentOutput) CreateIndex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.BoolPtrOutput { return v.CreateIndex }).(pulumi.BoolPtrOutput)
}

// Whether to create log set.
func (o ClsLogAttachmentOutput) CreateLogSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.BoolPtrOutput { return v.CreateLogSet }).(pulumi.BoolPtrOutput)
}

// Whether to create log topic.
func (o ClsLogAttachmentOutput) CreateLogTopic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.BoolPtrOutput { return v.CreateLogTopic }).(pulumi.BoolPtrOutput)
}

// The id of instance.
func (o ClsLogAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// If `createLogSet` is `true`, use log set name, Else use log set Id.
func (o ClsLogAttachmentOutput) LogSet() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.LogSet }).(pulumi.StringOutput)
}

// Log set Id.
func (o ClsLogAttachmentOutput) LogSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.LogSetId }).(pulumi.StringOutput)
}

// If `createLogTopic` is `true`, use log topic name, Else use log topic Id.
func (o ClsLogAttachmentOutput) LogTopic() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.LogTopic }).(pulumi.StringOutput)
}

// Log topic Id.
func (o ClsLogAttachmentOutput) LogTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.LogTopicId }).(pulumi.StringOutput)
}

// Log type. Support `error` or `slowlog`.
func (o ClsLogAttachmentOutput) LogType() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.LogType }).(pulumi.StringOutput)
}

// The validity period of the log theme is 30 days by default when not filled in.
func (o ClsLogAttachmentOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// Log Status.
func (o ClsLogAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ClsLogAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ClsLogAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ClsLogAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClsLogAttachment)(nil)).Elem()
}

func (o ClsLogAttachmentArrayOutput) ToClsLogAttachmentArrayOutput() ClsLogAttachmentArrayOutput {
	return o
}

func (o ClsLogAttachmentArrayOutput) ToClsLogAttachmentArrayOutputWithContext(ctx context.Context) ClsLogAttachmentArrayOutput {
	return o
}

func (o ClsLogAttachmentArrayOutput) Index(i pulumi.IntInput) ClsLogAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClsLogAttachment {
		return vs[0].([]*ClsLogAttachment)[vs[1].(int)]
	}).(ClsLogAttachmentOutput)
}

type ClsLogAttachmentMapOutput struct{ *pulumi.OutputState }

func (ClsLogAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClsLogAttachment)(nil)).Elem()
}

func (o ClsLogAttachmentMapOutput) ToClsLogAttachmentMapOutput() ClsLogAttachmentMapOutput {
	return o
}

func (o ClsLogAttachmentMapOutput) ToClsLogAttachmentMapOutputWithContext(ctx context.Context) ClsLogAttachmentMapOutput {
	return o
}

func (o ClsLogAttachmentMapOutput) MapIndex(k pulumi.StringInput) ClsLogAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClsLogAttachment {
		return vs[0].(map[string]*ClsLogAttachment)[vs[1].(string)]
	}).(ClsLogAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClsLogAttachmentInput)(nil)).Elem(), &ClsLogAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClsLogAttachmentArrayInput)(nil)).Elem(), ClsLogAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClsLogAttachmentMapInput)(nil)).Elem(), ClsLogAttachmentMap{})
	pulumi.RegisterOutputType(ClsLogAttachmentOutput{})
	pulumi.RegisterOutputType(ClsLogAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ClsLogAttachmentMapOutput{})
}
