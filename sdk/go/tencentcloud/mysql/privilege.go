// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mysql

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a mysql account privilege resource to grant different access privilege to different database. A database can be granted by multiple account.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Availability"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Mysql"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zones, err := Availability.GetZonesByProduct(ctx, &availability.GetZonesByProductArgs{
//				Product: "cdb",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			securityGroup, err := Security.NewGroup(ctx, "securityGroup", &Security.GroupArgs{
//				Description: pulumi.String("mysql test"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInstance, err := Mysql.NewInstance(ctx, "exampleInstance", &Mysql.InstanceArgs{
//				InternetService:  pulumi.Int(1),
//				EngineVersion:    pulumi.String("5.7"),
//				ChargeType:       pulumi.String("POSTPAID"),
//				RootPassword:     pulumi.String("PassWord123"),
//				SlaveDeployMode:  pulumi.Int(0),
//				AvailabilityZone: pulumi.String(zones.Zones[0].Name),
//				SlaveSyncMode:    pulumi.Int(1),
//				InstanceName:     pulumi.String("tf-example-mysql"),
//				MemSize:          pulumi.Int(4000),
//				VolumeSize:       pulumi.Int(200),
//				VpcId:            vpc.ID(),
//				SubnetId:         subnet.ID(),
//				IntranetPort:     pulumi.Int(3306),
//				SecurityGroups: pulumi.StringArray{
//					securityGroup.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"name": pulumi.Any("test"),
//				},
//				Parameters: pulumi.AnyMap{
//					"character_set_server": pulumi.Any("utf8"),
//					"max_connections":      pulumi.Any("1000"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := Mysql.NewAccount(ctx, "exampleAccount", &Mysql.AccountArgs{
//				MysqlId:            exampleInstance.ID(),
//				Password:           pulumi.String("Qwer@234"),
//				Description:        pulumi.String("desc."),
//				MaxUserConnections: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Mysql.NewPrivilege(ctx, "examplePrivilege", &Mysql.PrivilegeArgs{
//				MysqlId:     exampleInstance.ID(),
//				AccountName: exampleAccount.Name,
//				Globals: pulumi.StringArray{
//					pulumi.String("TRIGGER"),
//				},
//				Databases: mysql.PrivilegeDatabaseArray{
//					&mysql.PrivilegeDatabaseArgs{
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//							pulumi.String("INSERT"),
//							pulumi.String("UPDATE"),
//							pulumi.String("DELETE"),
//							pulumi.String("CREATE"),
//						},
//						DatabaseName: pulumi.String("sys"),
//					},
//					&mysql.PrivilegeDatabaseArgs{
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//						},
//						DatabaseName: pulumi.String("performance_schema"),
//					},
//				},
//				Tables: mysql.PrivilegeTableArray{
//					&mysql.PrivilegeTableArgs{
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//							pulumi.String("INSERT"),
//							pulumi.String("UPDATE"),
//							pulumi.String("DELETE"),
//							pulumi.String("CREATE"),
//						},
//						DatabaseName: pulumi.String("mysql"),
//						TableName:    pulumi.String("slow_log"),
//					},
//					&mysql.PrivilegeTableArgs{
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//							pulumi.String("INSERT"),
//							pulumi.String("UPDATE"),
//						},
//						DatabaseName: pulumi.String("mysql"),
//						TableName:    pulumi.String("user"),
//					},
//				},
//				Columns: mysql.PrivilegeColumnArray{
//					&mysql.PrivilegeColumnArgs{
//						Privileges: pulumi.StringArray{
//							pulumi.String("SELECT"),
//							pulumi.String("INSERT"),
//							pulumi.String("UPDATE"),
//							pulumi.String("REFERENCES"),
//						},
//						DatabaseName: pulumi.String("mysql"),
//						TableName:    pulumi.String("user"),
//						ColumnName:   pulumi.String("host"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Privilege struct {
	pulumi.CustomResourceState

	// Account host, default is `%`.
	AccountHost pulumi.StringPtrOutput `pulumi:"accountHost"`
	// Account name.the forbidden value is:root,mysql.sys,tencentroot.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Column privileges list.
	Columns PrivilegeColumnArrayOutput `pulumi:"columns"`
	// Database privileges list.
	Databases PrivilegeDatabaseArrayOutput `pulumi:"databases"`
	// Global privileges. available values for Privileges:ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE USER,CREATE VIEW,DELETE,DROP,EVENT,EXECUTE,INDEX,INSERT,LOCK TABLES,PROCESS,REFERENCES,RELOAD,REPLICATION CLIENT,REPLICATION SLAVE,SELECT,SHOW DATABASES,SHOW VIEW,TRIGGER,UPDATE.
	Globals pulumi.StringArrayOutput `pulumi:"globals"`
	// Instance ID.
	MysqlId pulumi.StringOutput `pulumi:"mysqlId"`
	// Table privileges list.
	Tables PrivilegeTableArrayOutput `pulumi:"tables"`
}

// NewPrivilege registers a new resource with the given unique name, arguments, and options.
func NewPrivilege(ctx *pulumi.Context,
	name string, args *PrivilegeArgs, opts ...pulumi.ResourceOption) (*Privilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.Globals == nil {
		return nil, errors.New("invalid value for required argument 'Globals'")
	}
	if args.MysqlId == nil {
		return nil, errors.New("invalid value for required argument 'MysqlId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Privilege
	err := ctx.RegisterResource("tencentcloud:Mysql/privilege:Privilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivilege gets an existing Privilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivilegeState, opts ...pulumi.ResourceOption) (*Privilege, error) {
	var resource Privilege
	err := ctx.ReadResource("tencentcloud:Mysql/privilege:Privilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Privilege resources.
type privilegeState struct {
	// Account host, default is `%`.
	AccountHost *string `pulumi:"accountHost"`
	// Account name.the forbidden value is:root,mysql.sys,tencentroot.
	AccountName *string `pulumi:"accountName"`
	// Column privileges list.
	Columns []PrivilegeColumn `pulumi:"columns"`
	// Database privileges list.
	Databases []PrivilegeDatabase `pulumi:"databases"`
	// Global privileges. available values for Privileges:ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE USER,CREATE VIEW,DELETE,DROP,EVENT,EXECUTE,INDEX,INSERT,LOCK TABLES,PROCESS,REFERENCES,RELOAD,REPLICATION CLIENT,REPLICATION SLAVE,SELECT,SHOW DATABASES,SHOW VIEW,TRIGGER,UPDATE.
	Globals []string `pulumi:"globals"`
	// Instance ID.
	MysqlId *string `pulumi:"mysqlId"`
	// Table privileges list.
	Tables []PrivilegeTable `pulumi:"tables"`
}

type PrivilegeState struct {
	// Account host, default is `%`.
	AccountHost pulumi.StringPtrInput
	// Account name.the forbidden value is:root,mysql.sys,tencentroot.
	AccountName pulumi.StringPtrInput
	// Column privileges list.
	Columns PrivilegeColumnArrayInput
	// Database privileges list.
	Databases PrivilegeDatabaseArrayInput
	// Global privileges. available values for Privileges:ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE USER,CREATE VIEW,DELETE,DROP,EVENT,EXECUTE,INDEX,INSERT,LOCK TABLES,PROCESS,REFERENCES,RELOAD,REPLICATION CLIENT,REPLICATION SLAVE,SELECT,SHOW DATABASES,SHOW VIEW,TRIGGER,UPDATE.
	Globals pulumi.StringArrayInput
	// Instance ID.
	MysqlId pulumi.StringPtrInput
	// Table privileges list.
	Tables PrivilegeTableArrayInput
}

func (PrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeState)(nil)).Elem()
}

type privilegeArgs struct {
	// Account host, default is `%`.
	AccountHost *string `pulumi:"accountHost"`
	// Account name.the forbidden value is:root,mysql.sys,tencentroot.
	AccountName string `pulumi:"accountName"`
	// Column privileges list.
	Columns []PrivilegeColumn `pulumi:"columns"`
	// Database privileges list.
	Databases []PrivilegeDatabase `pulumi:"databases"`
	// Global privileges. available values for Privileges:ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE USER,CREATE VIEW,DELETE,DROP,EVENT,EXECUTE,INDEX,INSERT,LOCK TABLES,PROCESS,REFERENCES,RELOAD,REPLICATION CLIENT,REPLICATION SLAVE,SELECT,SHOW DATABASES,SHOW VIEW,TRIGGER,UPDATE.
	Globals []string `pulumi:"globals"`
	// Instance ID.
	MysqlId string `pulumi:"mysqlId"`
	// Table privileges list.
	Tables []PrivilegeTable `pulumi:"tables"`
}

// The set of arguments for constructing a Privilege resource.
type PrivilegeArgs struct {
	// Account host, default is `%`.
	AccountHost pulumi.StringPtrInput
	// Account name.the forbidden value is:root,mysql.sys,tencentroot.
	AccountName pulumi.StringInput
	// Column privileges list.
	Columns PrivilegeColumnArrayInput
	// Database privileges list.
	Databases PrivilegeDatabaseArrayInput
	// Global privileges. available values for Privileges:ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE USER,CREATE VIEW,DELETE,DROP,EVENT,EXECUTE,INDEX,INSERT,LOCK TABLES,PROCESS,REFERENCES,RELOAD,REPLICATION CLIENT,REPLICATION SLAVE,SELECT,SHOW DATABASES,SHOW VIEW,TRIGGER,UPDATE.
	Globals pulumi.StringArrayInput
	// Instance ID.
	MysqlId pulumi.StringInput
	// Table privileges list.
	Tables PrivilegeTableArrayInput
}

func (PrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privilegeArgs)(nil)).Elem()
}

type PrivilegeInput interface {
	pulumi.Input

	ToPrivilegeOutput() PrivilegeOutput
	ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput
}

func (*Privilege) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil)).Elem()
}

func (i *Privilege) ToPrivilegeOutput() PrivilegeOutput {
	return i.ToPrivilegeOutputWithContext(context.Background())
}

func (i *Privilege) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeOutput)
}

// PrivilegeArrayInput is an input type that accepts PrivilegeArray and PrivilegeArrayOutput values.
// You can construct a concrete instance of `PrivilegeArrayInput` via:
//
//	PrivilegeArray{ PrivilegeArgs{...} }
type PrivilegeArrayInput interface {
	pulumi.Input

	ToPrivilegeArrayOutput() PrivilegeArrayOutput
	ToPrivilegeArrayOutputWithContext(context.Context) PrivilegeArrayOutput
}

type PrivilegeArray []PrivilegeInput

func (PrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Privilege)(nil)).Elem()
}

func (i PrivilegeArray) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return i.ToPrivilegeArrayOutputWithContext(context.Background())
}

func (i PrivilegeArray) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeArrayOutput)
}

// PrivilegeMapInput is an input type that accepts PrivilegeMap and PrivilegeMapOutput values.
// You can construct a concrete instance of `PrivilegeMapInput` via:
//
//	PrivilegeMap{ "key": PrivilegeArgs{...} }
type PrivilegeMapInput interface {
	pulumi.Input

	ToPrivilegeMapOutput() PrivilegeMapOutput
	ToPrivilegeMapOutputWithContext(context.Context) PrivilegeMapOutput
}

type PrivilegeMap map[string]PrivilegeInput

func (PrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Privilege)(nil)).Elem()
}

func (i PrivilegeMap) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return i.ToPrivilegeMapOutputWithContext(context.Background())
}

func (i PrivilegeMap) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivilegeMapOutput)
}

type PrivilegeOutput struct{ *pulumi.OutputState }

func (PrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Privilege)(nil)).Elem()
}

func (o PrivilegeOutput) ToPrivilegeOutput() PrivilegeOutput {
	return o
}

func (o PrivilegeOutput) ToPrivilegeOutputWithContext(ctx context.Context) PrivilegeOutput {
	return o
}

// Account host, default is `%`.
func (o PrivilegeOutput) AccountHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringPtrOutput { return v.AccountHost }).(pulumi.StringPtrOutput)
}

// Account name.the forbidden value is:root,mysql.sys,tencentroot.
func (o PrivilegeOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Column privileges list.
func (o PrivilegeOutput) Columns() PrivilegeColumnArrayOutput {
	return o.ApplyT(func(v *Privilege) PrivilegeColumnArrayOutput { return v.Columns }).(PrivilegeColumnArrayOutput)
}

// Database privileges list.
func (o PrivilegeOutput) Databases() PrivilegeDatabaseArrayOutput {
	return o.ApplyT(func(v *Privilege) PrivilegeDatabaseArrayOutput { return v.Databases }).(PrivilegeDatabaseArrayOutput)
}

// Global privileges. available values for Privileges:ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES,CREATE USER,CREATE VIEW,DELETE,DROP,EVENT,EXECUTE,INDEX,INSERT,LOCK TABLES,PROCESS,REFERENCES,RELOAD,REPLICATION CLIENT,REPLICATION SLAVE,SELECT,SHOW DATABASES,SHOW VIEW,TRIGGER,UPDATE.
func (o PrivilegeOutput) Globals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringArrayOutput { return v.Globals }).(pulumi.StringArrayOutput)
}

// Instance ID.
func (o PrivilegeOutput) MysqlId() pulumi.StringOutput {
	return o.ApplyT(func(v *Privilege) pulumi.StringOutput { return v.MysqlId }).(pulumi.StringOutput)
}

// Table privileges list.
func (o PrivilegeOutput) Tables() PrivilegeTableArrayOutput {
	return o.ApplyT(func(v *Privilege) PrivilegeTableArrayOutput { return v.Tables }).(PrivilegeTableArrayOutput)
}

type PrivilegeArrayOutput struct{ *pulumi.OutputState }

func (PrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Privilege)(nil)).Elem()
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutput() PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) ToPrivilegeArrayOutputWithContext(ctx context.Context) PrivilegeArrayOutput {
	return o
}

func (o PrivilegeArrayOutput) Index(i pulumi.IntInput) PrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Privilege {
		return vs[0].([]*Privilege)[vs[1].(int)]
	}).(PrivilegeOutput)
}

type PrivilegeMapOutput struct{ *pulumi.OutputState }

func (PrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Privilege)(nil)).Elem()
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutput() PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) ToPrivilegeMapOutputWithContext(ctx context.Context) PrivilegeMapOutput {
	return o
}

func (o PrivilegeMapOutput) MapIndex(k pulumi.StringInput) PrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Privilege {
		return vs[0].(map[string]*Privilege)[vs[1].(string)]
	}).(PrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeInput)(nil)).Elem(), &Privilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeArrayInput)(nil)).Elem(), PrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivilegeMapInput)(nil)).Elem(), PrivilegeMap{})
	pulumi.RegisterOutputType(PrivilegeOutput{})
	pulumi.RegisterOutputType(PrivilegeArrayOutput{})
	pulumi.RegisterOutputType(PrivilegeMapOutput{})
}
