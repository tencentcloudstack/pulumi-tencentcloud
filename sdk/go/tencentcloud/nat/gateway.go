// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a NAT gateway.
//
// > **NOTE:** If `natProductVersion` is `1`, `maxConcurrent` valid values is `1000000`, `3000000`, `10000000`.
//
// > **NOTE:** If set `stockPublicIpAddressesBandwidthOut`, do not set the `internetMaxBandwidthOut` parameter of resource `Eip.Instance` at the same time, otherwise conflicts may occur.
//
// ## Example Usage
//
// ### Create a traditional NAT gateway.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Eip"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Nat"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			eipExample1, err := Eip.NewInstance(ctx, "eipExample1", nil)
//			if err != nil {
//				return err
//			}
//			eipExample2, err := Eip.NewInstance(ctx, "eipExample2", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Nat.NewGateway(ctx, "example", &Nat.GatewayArgs{
//				VpcId:             vpc.ID(),
//				NatProductVersion: pulumi.Int(1),
//				Bandwidth:         pulumi.Int(100),
//				MaxConcurrent:     pulumi.Int(1000000),
//				AssignedEipSets: pulumi.StringArray{
//					eipExample1.PublicIp,
//					eipExample2.PublicIp,
//				},
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create a standard NAT gateway.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Eip"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Nat"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			eipExample1, err := Eip.NewInstance(ctx, "eipExample1", nil)
//			if err != nil {
//				return err
//			}
//			eipExample2, err := Eip.NewInstance(ctx, "eipExample2", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Nat.NewGateway(ctx, "example", &Nat.GatewayArgs{
//				VpcId:             vpc.ID(),
//				NatProductVersion: pulumi.Int(2),
//				AssignedEipSets: pulumi.StringArray{
//					eipExample1.PublicIp,
//					eipExample2.PublicIp,
//				},
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Or set stock public ip addresses bandwidth out
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Eip"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Nat"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			eipExample1, err := Eip.NewInstance(ctx, "eipExample1", nil)
//			if err != nil {
//				return err
//			}
//			eipExample2, err := Eip.NewInstance(ctx, "eipExample2", nil)
//			if err != nil {
//				return err
//			}
//			_, err = Nat.NewGateway(ctx, "example", &Nat.GatewayArgs{
//				VpcId:                              vpc.ID(),
//				NatProductVersion:                  pulumi.Int(2),
//				StockPublicIpAddressesBandwidthOut: pulumi.Int(100),
//				AssignedEipSets: pulumi.StringArray{
//					eipExample1.PublicIp,
//					eipExample2.PublicIp,
//				},
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// NAT gateway can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Nat/gateway:Gateway example nat-1asg3t63
// ```
type Gateway struct {
	pulumi.CustomResourceState

	// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
	AssignedEipSets pulumi.StringArrayOutput `pulumi:"assignedEipSets"`
	// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// Create time of the NAT gateway.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
	MaxConcurrent pulumi.IntOutput `pulumi:"maxConcurrent"`
	// Name of the NAT gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// 1: traditional NAT, 2: standard NAT, default value is 1.
	NatProductVersion pulumi.IntOutput `pulumi:"natProductVersion"`
	// The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
	StockPublicIpAddressesBandwidthOut pulumi.IntOutput `pulumi:"stockPublicIpAddressesBandwidthOut"`
	// Subnet of NAT.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The available tags within this NAT gateway.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// ID of the vpc.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The availability zone, such as `ap-guangzhou-3`.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssignedEipSets == nil {
		return nil, errors.New("invalid value for required argument 'AssignedEipSets'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("tencentcloud:Nat/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("tencentcloud:Nat/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
	AssignedEipSets []string `pulumi:"assignedEipSets"`
	// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
	Bandwidth *int `pulumi:"bandwidth"`
	// Create time of the NAT gateway.
	CreatedTime *string `pulumi:"createdTime"`
	// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
	MaxConcurrent *int `pulumi:"maxConcurrent"`
	// Name of the NAT gateway.
	Name *string `pulumi:"name"`
	// 1: traditional NAT, 2: standard NAT, default value is 1.
	NatProductVersion *int `pulumi:"natProductVersion"`
	// The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
	StockPublicIpAddressesBandwidthOut *int `pulumi:"stockPublicIpAddressesBandwidthOut"`
	// Subnet of NAT.
	SubnetId *string `pulumi:"subnetId"`
	// The available tags within this NAT gateway.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the vpc.
	VpcId *string `pulumi:"vpcId"`
	// The availability zone, such as `ap-guangzhou-3`.
	Zone *string `pulumi:"zone"`
}

type GatewayState struct {
	// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
	AssignedEipSets pulumi.StringArrayInput
	// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
	Bandwidth pulumi.IntPtrInput
	// Create time of the NAT gateway.
	CreatedTime pulumi.StringPtrInput
	// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
	MaxConcurrent pulumi.IntPtrInput
	// Name of the NAT gateway.
	Name pulumi.StringPtrInput
	// 1: traditional NAT, 2: standard NAT, default value is 1.
	NatProductVersion pulumi.IntPtrInput
	// The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
	StockPublicIpAddressesBandwidthOut pulumi.IntPtrInput
	// Subnet of NAT.
	SubnetId pulumi.StringPtrInput
	// The available tags within this NAT gateway.
	Tags pulumi.MapInput
	// ID of the vpc.
	VpcId pulumi.StringPtrInput
	// The availability zone, such as `ap-guangzhou-3`.
	Zone pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
	AssignedEipSets []string `pulumi:"assignedEipSets"`
	// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
	Bandwidth *int `pulumi:"bandwidth"`
	// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
	MaxConcurrent *int `pulumi:"maxConcurrent"`
	// Name of the NAT gateway.
	Name *string `pulumi:"name"`
	// 1: traditional NAT, 2: standard NAT, default value is 1.
	NatProductVersion *int `pulumi:"natProductVersion"`
	// The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
	StockPublicIpAddressesBandwidthOut *int `pulumi:"stockPublicIpAddressesBandwidthOut"`
	// Subnet of NAT.
	SubnetId *string `pulumi:"subnetId"`
	// The available tags within this NAT gateway.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the vpc.
	VpcId string `pulumi:"vpcId"`
	// The availability zone, such as `ap-guangzhou-3`.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
	AssignedEipSets pulumi.StringArrayInput
	// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
	Bandwidth pulumi.IntPtrInput
	// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
	MaxConcurrent pulumi.IntPtrInput
	// Name of the NAT gateway.
	Name pulumi.StringPtrInput
	// 1: traditional NAT, 2: standard NAT, default value is 1.
	NatProductVersion pulumi.IntPtrInput
	// The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
	StockPublicIpAddressesBandwidthOut pulumi.IntPtrInput
	// Subnet of NAT.
	SubnetId pulumi.StringPtrInput
	// The available tags within this NAT gateway.
	Tags pulumi.MapInput
	// ID of the vpc.
	VpcId pulumi.StringInput
	// The availability zone, such as `ap-guangzhou-3`.
	Zone pulumi.StringPtrInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// EIP IP address set bound to the gateway. The value of at least 1 and at most 10.
func (o GatewayOutput) AssignedEipSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringArrayOutput { return v.AssignedEipSets }).(pulumi.StringArrayOutput)
}

// The maximum public network output bandwidth of NAT gateway (unit: Mbps). Valid values: `20`, `50`, `100`, `200`, `500`, `1000`, `2000`, `5000`. Default is `100`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `5000`.
func (o GatewayOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// Create time of the NAT gateway.
func (o GatewayOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// The upper limit of concurrent connection of NAT gateway. Valid values: `1000000`, `3000000`, `10000000`. Default is `1000000`. When the value of parameter `natProductVersion` is 2, which is the standard NAT type, this parameter does not need to be filled in and defaults to `2000000`.
func (o GatewayOutput) MaxConcurrent() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.MaxConcurrent }).(pulumi.IntOutput)
}

// Name of the NAT gateway.
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 1: traditional NAT, 2: standard NAT, default value is 1.
func (o GatewayOutput) NatProductVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.NatProductVersion }).(pulumi.IntOutput)
}

// The elastic public IP bandwidth value (unit: Mbps) for binding NAT gateway. When this parameter is not filled in, it defaults to the bandwidth value of the elastic public IP, and for some users, it defaults to the bandwidth limit of the elastic public IP of that user type.
func (o GatewayOutput) StockPublicIpAddressesBandwidthOut() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.StockPublicIpAddressesBandwidthOut }).(pulumi.IntOutput)
}

// Subnet of NAT.
func (o GatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The available tags within this NAT gateway.
func (o GatewayOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// ID of the vpc.
func (o GatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The availability zone, such as `ap-guangzhou-3`.
func (o GatewayOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}
