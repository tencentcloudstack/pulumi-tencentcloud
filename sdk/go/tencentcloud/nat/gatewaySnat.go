// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a NAT Gateway SNat rule.
//
// ## Import
//
// VPN gateway route can be imported using the id, the id format must be '{nat_gateway_id}#{resource_id}', resource_id range `subnet_id`, `instance_id`, e.g. SUBNET SNat
//
// ```sh
//
//	$ pulumi import tencentcloud:Nat/gatewaySnat:GatewaySnat my_snat nat-r4ip1cwt#subnet-2ap74y35
//
// ```
//
//	NETWORKINTERFACT SNat
//
// ```sh
//
//	$ pulumi import tencentcloud:Nat/gatewaySnat:GatewaySnat my_snat nat-r4ip1cwt#ins-da412f5a
//
// ```
type GatewaySnat struct {
	pulumi.CustomResourceState

	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Instance ID, required when `resourceType` is NETWORKINTERFACE.
	InstanceId pulumi.StringPtrOutput `pulumi:"instanceId"`
	// Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
	InstancePrivateIpAddr pulumi.StringPtrOutput `pulumi:"instancePrivateIpAddr"`
	// NAT gateway ID.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// Elastic IP address pool.
	PublicIpAddrs pulumi.StringArrayOutput `pulumi:"publicIpAddrs"`
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// SNAT rule ID.
	SnatId pulumi.StringOutput `pulumi:"snatId"`
	// The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
	SubnetCidrBlock pulumi.StringPtrOutput `pulumi:"subnetCidrBlock"`
	// Subnet instance ID, required when `resourceType` is SUBNET.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
}

// NewGatewaySnat registers a new resource with the given unique name, arguments, and options.
func NewGatewaySnat(ctx *pulumi.Context,
	name string, args *GatewaySnatArgs, opts ...pulumi.ResourceOption) (*GatewaySnat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.PublicIpAddrs == nil {
		return nil, errors.New("invalid value for required argument 'PublicIpAddrs'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GatewaySnat
	err := ctx.RegisterResource("tencentcloud:Nat/gatewaySnat:GatewaySnat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewaySnat gets an existing GatewaySnat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewaySnat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewaySnatState, opts ...pulumi.ResourceOption) (*GatewaySnat, error) {
	var resource GatewaySnat
	err := ctx.ReadResource("tencentcloud:Nat/gatewaySnat:GatewaySnat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewaySnat resources.
type gatewaySnatState struct {
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Description.
	Description *string `pulumi:"description"`
	// Instance ID, required when `resourceType` is NETWORKINTERFACE.
	InstanceId *string `pulumi:"instanceId"`
	// Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
	InstancePrivateIpAddr *string `pulumi:"instancePrivateIpAddr"`
	// NAT gateway ID.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// Elastic IP address pool.
	PublicIpAddrs []string `pulumi:"publicIpAddrs"`
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType *string `pulumi:"resourceType"`
	// SNAT rule ID.
	SnatId *string `pulumi:"snatId"`
	// The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
	SubnetCidrBlock *string `pulumi:"subnetCidrBlock"`
	// Subnet instance ID, required when `resourceType` is SUBNET.
	SubnetId *string `pulumi:"subnetId"`
}

type GatewaySnatState struct {
	// Create time.
	CreateTime pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Instance ID, required when `resourceType` is NETWORKINTERFACE.
	InstanceId pulumi.StringPtrInput
	// Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
	InstancePrivateIpAddr pulumi.StringPtrInput
	// NAT gateway ID.
	NatGatewayId pulumi.StringPtrInput
	// Elastic IP address pool.
	PublicIpAddrs pulumi.StringArrayInput
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType pulumi.StringPtrInput
	// SNAT rule ID.
	SnatId pulumi.StringPtrInput
	// The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
	SubnetCidrBlock pulumi.StringPtrInput
	// Subnet instance ID, required when `resourceType` is SUBNET.
	SubnetId pulumi.StringPtrInput
}

func (GatewaySnatState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewaySnatState)(nil)).Elem()
}

type gatewaySnatArgs struct {
	// Description.
	Description string `pulumi:"description"`
	// Instance ID, required when `resourceType` is NETWORKINTERFACE.
	InstanceId *string `pulumi:"instanceId"`
	// Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
	InstancePrivateIpAddr *string `pulumi:"instancePrivateIpAddr"`
	// NAT gateway ID.
	NatGatewayId string `pulumi:"natGatewayId"`
	// Elastic IP address pool.
	PublicIpAddrs []string `pulumi:"publicIpAddrs"`
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType string `pulumi:"resourceType"`
	// The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
	SubnetCidrBlock *string `pulumi:"subnetCidrBlock"`
	// Subnet instance ID, required when `resourceType` is SUBNET.
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a GatewaySnat resource.
type GatewaySnatArgs struct {
	// Description.
	Description pulumi.StringInput
	// Instance ID, required when `resourceType` is NETWORKINTERFACE.
	InstanceId pulumi.StringPtrInput
	// Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
	InstancePrivateIpAddr pulumi.StringPtrInput
	// NAT gateway ID.
	NatGatewayId pulumi.StringInput
	// Elastic IP address pool.
	PublicIpAddrs pulumi.StringArrayInput
	// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
	ResourceType pulumi.StringInput
	// The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
	SubnetCidrBlock pulumi.StringPtrInput
	// Subnet instance ID, required when `resourceType` is SUBNET.
	SubnetId pulumi.StringPtrInput
}

func (GatewaySnatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewaySnatArgs)(nil)).Elem()
}

type GatewaySnatInput interface {
	pulumi.Input

	ToGatewaySnatOutput() GatewaySnatOutput
	ToGatewaySnatOutputWithContext(ctx context.Context) GatewaySnatOutput
}

func (*GatewaySnat) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySnat)(nil)).Elem()
}

func (i *GatewaySnat) ToGatewaySnatOutput() GatewaySnatOutput {
	return i.ToGatewaySnatOutputWithContext(context.Background())
}

func (i *GatewaySnat) ToGatewaySnatOutputWithContext(ctx context.Context) GatewaySnatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySnatOutput)
}

// GatewaySnatArrayInput is an input type that accepts GatewaySnatArray and GatewaySnatArrayOutput values.
// You can construct a concrete instance of `GatewaySnatArrayInput` via:
//
//	GatewaySnatArray{ GatewaySnatArgs{...} }
type GatewaySnatArrayInput interface {
	pulumi.Input

	ToGatewaySnatArrayOutput() GatewaySnatArrayOutput
	ToGatewaySnatArrayOutputWithContext(context.Context) GatewaySnatArrayOutput
}

type GatewaySnatArray []GatewaySnatInput

func (GatewaySnatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewaySnat)(nil)).Elem()
}

func (i GatewaySnatArray) ToGatewaySnatArrayOutput() GatewaySnatArrayOutput {
	return i.ToGatewaySnatArrayOutputWithContext(context.Background())
}

func (i GatewaySnatArray) ToGatewaySnatArrayOutputWithContext(ctx context.Context) GatewaySnatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySnatArrayOutput)
}

// GatewaySnatMapInput is an input type that accepts GatewaySnatMap and GatewaySnatMapOutput values.
// You can construct a concrete instance of `GatewaySnatMapInput` via:
//
//	GatewaySnatMap{ "key": GatewaySnatArgs{...} }
type GatewaySnatMapInput interface {
	pulumi.Input

	ToGatewaySnatMapOutput() GatewaySnatMapOutput
	ToGatewaySnatMapOutputWithContext(context.Context) GatewaySnatMapOutput
}

type GatewaySnatMap map[string]GatewaySnatInput

func (GatewaySnatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewaySnat)(nil)).Elem()
}

func (i GatewaySnatMap) ToGatewaySnatMapOutput() GatewaySnatMapOutput {
	return i.ToGatewaySnatMapOutputWithContext(context.Background())
}

func (i GatewaySnatMap) ToGatewaySnatMapOutputWithContext(ctx context.Context) GatewaySnatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySnatMapOutput)
}

type GatewaySnatOutput struct{ *pulumi.OutputState }

func (GatewaySnatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySnat)(nil)).Elem()
}

func (o GatewaySnatOutput) ToGatewaySnatOutput() GatewaySnatOutput {
	return o
}

func (o GatewaySnatOutput) ToGatewaySnatOutputWithContext(ctx context.Context) GatewaySnatOutput {
	return o
}

// Create time.
func (o GatewaySnatOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description.
func (o GatewaySnatOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Instance ID, required when `resourceType` is NETWORKINTERFACE.
func (o GatewaySnatOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringPtrOutput { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Private IPs of the instance's primary ENI, required when `resourceType` is NETWORKINTERFACE.
func (o GatewaySnatOutput) InstancePrivateIpAddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringPtrOutput { return v.InstancePrivateIpAddr }).(pulumi.StringPtrOutput)
}

// NAT gateway ID.
func (o GatewaySnatOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// Elastic IP address pool.
func (o GatewaySnatOutput) PublicIpAddrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringArrayOutput { return v.PublicIpAddrs }).(pulumi.StringArrayOutput)
}

// Resource type. Valid values: SUBNET, NETWORKINTERFACE.
func (o GatewaySnatOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// SNAT rule ID.
func (o GatewaySnatOutput) SnatId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringOutput { return v.SnatId }).(pulumi.StringOutput)
}

// The IPv4 CIDR of the subnet, required when `resourceType` is SUBNET.
func (o GatewaySnatOutput) SubnetCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringPtrOutput { return v.SubnetCidrBlock }).(pulumi.StringPtrOutput)
}

// Subnet instance ID, required when `resourceType` is SUBNET.
func (o GatewaySnatOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySnat) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type GatewaySnatArrayOutput struct{ *pulumi.OutputState }

func (GatewaySnatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewaySnat)(nil)).Elem()
}

func (o GatewaySnatArrayOutput) ToGatewaySnatArrayOutput() GatewaySnatArrayOutput {
	return o
}

func (o GatewaySnatArrayOutput) ToGatewaySnatArrayOutputWithContext(ctx context.Context) GatewaySnatArrayOutput {
	return o
}

func (o GatewaySnatArrayOutput) Index(i pulumi.IntInput) GatewaySnatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewaySnat {
		return vs[0].([]*GatewaySnat)[vs[1].(int)]
	}).(GatewaySnatOutput)
}

type GatewaySnatMapOutput struct{ *pulumi.OutputState }

func (GatewaySnatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewaySnat)(nil)).Elem()
}

func (o GatewaySnatMapOutput) ToGatewaySnatMapOutput() GatewaySnatMapOutput {
	return o
}

func (o GatewaySnatMapOutput) ToGatewaySnatMapOutputWithContext(ctx context.Context) GatewaySnatMapOutput {
	return o
}

func (o GatewaySnatMapOutput) MapIndex(k pulumi.StringInput) GatewaySnatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewaySnat {
		return vs[0].(map[string]*GatewaySnat)[vs[1].(string)]
	}).(GatewaySnatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySnatInput)(nil)).Elem(), &GatewaySnat{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySnatArrayInput)(nil)).Elem(), GatewaySnatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySnatMapInput)(nil)).Elem(), GatewaySnatMap{})
	pulumi.RegisterOutputType(GatewaySnatOutput{})
	pulumi.RegisterOutputType(GatewaySnatArrayOutput{})
	pulumi.RegisterOutputType(GatewaySnatMapOutput{})
}
