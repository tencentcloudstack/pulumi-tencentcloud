// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a tcss image registry
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcss.NewImageRegistry(ctx, "example", &Tcss.ImageRegistryArgs{
//				ConnDetectConfigs: tcss.ImageRegistryConnDetectConfigArray{
//					&tcss.ImageRegistryConnDetectConfigArgs{
//						Quuid: pulumi.String("backend"),
//						Uuid:  pulumi.String("backend"),
//					},
//				},
//				NeedScan:        pulumi.Bool(true),
//				NetType:         pulumi.String("public"),
//				Password:        pulumi.String("Password@demo"),
//				RegistryRegion:  pulumi.String("default"),
//				RegistryType:    pulumi.String("harbor"),
//				RegistryVersion: pulumi.String("V1"),
//				Url:             pulumi.String("https://example.com"),
//				Username:        pulumi.String("root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type ImageRegistry struct {
	pulumi.CustomResourceState

	// Connectivity detection configuration.
	ConnDetectConfigs ImageRegistryConnDetectConfigArrayOutput `pulumi:"connDetectConfigs"`
	// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
	Insecure pulumi.IntPtrOutput `pulumi:"insecure"`
	// Repository name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether to scan the latest image.
	NeedScan pulumi.BoolPtrOutput `pulumi:"needScan"`
	// Network type, which can be `public` (public network).
	NetType pulumi.StringOutput `pulumi:"netType"`
	// Password.
	Password pulumi.StringOutput `pulumi:"password"`
	// Region. Default value: `default`.
	RegistryRegion pulumi.StringPtrOutput `pulumi:"registryRegion"`
	// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
	RegistryType pulumi.StringOutput `pulumi:"registryType"`
	// Repository version.
	RegistryVersion pulumi.StringPtrOutput `pulumi:"registryVersion"`
	// Speed limit.
	SpeedLimit pulumi.IntPtrOutput `pulumi:"speedLimit"`
	// Sync status.
	SyncStatus pulumi.StringOutput `pulumi:"syncStatus"`
	// Repository URL.
	Url pulumi.StringOutput `pulumi:"url"`
	// Username.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewImageRegistry registers a new resource with the given unique name, arguments, and options.
func NewImageRegistry(ctx *pulumi.Context,
	name string, args *ImageRegistryArgs, opts ...pulumi.ResourceOption) (*ImageRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetType == nil {
		return nil, errors.New("invalid value for required argument 'NetType'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.RegistryType == nil {
		return nil, errors.New("invalid value for required argument 'RegistryType'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImageRegistry
	err := ctx.RegisterResource("tencentcloud:Tcss/imageRegistry:ImageRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageRegistry gets an existing ImageRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageRegistryState, opts ...pulumi.ResourceOption) (*ImageRegistry, error) {
	var resource ImageRegistry
	err := ctx.ReadResource("tencentcloud:Tcss/imageRegistry:ImageRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageRegistry resources.
type imageRegistryState struct {
	// Connectivity detection configuration.
	ConnDetectConfigs []ImageRegistryConnDetectConfig `pulumi:"connDetectConfigs"`
	// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
	Insecure *int `pulumi:"insecure"`
	// Repository name.
	Name *string `pulumi:"name"`
	// Whether to scan the latest image.
	NeedScan *bool `pulumi:"needScan"`
	// Network type, which can be `public` (public network).
	NetType *string `pulumi:"netType"`
	// Password.
	Password *string `pulumi:"password"`
	// Region. Default value: `default`.
	RegistryRegion *string `pulumi:"registryRegion"`
	// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
	RegistryType *string `pulumi:"registryType"`
	// Repository version.
	RegistryVersion *string `pulumi:"registryVersion"`
	// Speed limit.
	SpeedLimit *int `pulumi:"speedLimit"`
	// Sync status.
	SyncStatus *string `pulumi:"syncStatus"`
	// Repository URL.
	Url *string `pulumi:"url"`
	// Username.
	Username *string `pulumi:"username"`
}

type ImageRegistryState struct {
	// Connectivity detection configuration.
	ConnDetectConfigs ImageRegistryConnDetectConfigArrayInput
	// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
	Insecure pulumi.IntPtrInput
	// Repository name.
	Name pulumi.StringPtrInput
	// Whether to scan the latest image.
	NeedScan pulumi.BoolPtrInput
	// Network type, which can be `public` (public network).
	NetType pulumi.StringPtrInput
	// Password.
	Password pulumi.StringPtrInput
	// Region. Default value: `default`.
	RegistryRegion pulumi.StringPtrInput
	// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
	RegistryType pulumi.StringPtrInput
	// Repository version.
	RegistryVersion pulumi.StringPtrInput
	// Speed limit.
	SpeedLimit pulumi.IntPtrInput
	// Sync status.
	SyncStatus pulumi.StringPtrInput
	// Repository URL.
	Url pulumi.StringPtrInput
	// Username.
	Username pulumi.StringPtrInput
}

func (ImageRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRegistryState)(nil)).Elem()
}

type imageRegistryArgs struct {
	// Connectivity detection configuration.
	ConnDetectConfigs []ImageRegistryConnDetectConfig `pulumi:"connDetectConfigs"`
	// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
	Insecure *int `pulumi:"insecure"`
	// Repository name.
	Name *string `pulumi:"name"`
	// Whether to scan the latest image.
	NeedScan *bool `pulumi:"needScan"`
	// Network type, which can be `public` (public network).
	NetType string `pulumi:"netType"`
	// Password.
	Password string `pulumi:"password"`
	// Region. Default value: `default`.
	RegistryRegion *string `pulumi:"registryRegion"`
	// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
	RegistryType string `pulumi:"registryType"`
	// Repository version.
	RegistryVersion *string `pulumi:"registryVersion"`
	// Speed limit.
	SpeedLimit *int `pulumi:"speedLimit"`
	// Repository URL.
	Url string `pulumi:"url"`
	// Username.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ImageRegistry resource.
type ImageRegistryArgs struct {
	// Connectivity detection configuration.
	ConnDetectConfigs ImageRegistryConnDetectConfigArrayInput
	// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
	Insecure pulumi.IntPtrInput
	// Repository name.
	Name pulumi.StringPtrInput
	// Whether to scan the latest image.
	NeedScan pulumi.BoolPtrInput
	// Network type, which can be `public` (public network).
	NetType pulumi.StringInput
	// Password.
	Password pulumi.StringInput
	// Region. Default value: `default`.
	RegistryRegion pulumi.StringPtrInput
	// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
	RegistryType pulumi.StringInput
	// Repository version.
	RegistryVersion pulumi.StringPtrInput
	// Speed limit.
	SpeedLimit pulumi.IntPtrInput
	// Repository URL.
	Url pulumi.StringInput
	// Username.
	Username pulumi.StringInput
}

func (ImageRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageRegistryArgs)(nil)).Elem()
}

type ImageRegistryInput interface {
	pulumi.Input

	ToImageRegistryOutput() ImageRegistryOutput
	ToImageRegistryOutputWithContext(ctx context.Context) ImageRegistryOutput
}

func (*ImageRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistry)(nil)).Elem()
}

func (i *ImageRegistry) ToImageRegistryOutput() ImageRegistryOutput {
	return i.ToImageRegistryOutputWithContext(context.Background())
}

func (i *ImageRegistry) ToImageRegistryOutputWithContext(ctx context.Context) ImageRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryOutput)
}

// ImageRegistryArrayInput is an input type that accepts ImageRegistryArray and ImageRegistryArrayOutput values.
// You can construct a concrete instance of `ImageRegistryArrayInput` via:
//
//	ImageRegistryArray{ ImageRegistryArgs{...} }
type ImageRegistryArrayInput interface {
	pulumi.Input

	ToImageRegistryArrayOutput() ImageRegistryArrayOutput
	ToImageRegistryArrayOutputWithContext(context.Context) ImageRegistryArrayOutput
}

type ImageRegistryArray []ImageRegistryInput

func (ImageRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRegistry)(nil)).Elem()
}

func (i ImageRegistryArray) ToImageRegistryArrayOutput() ImageRegistryArrayOutput {
	return i.ToImageRegistryArrayOutputWithContext(context.Background())
}

func (i ImageRegistryArray) ToImageRegistryArrayOutputWithContext(ctx context.Context) ImageRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryArrayOutput)
}

// ImageRegistryMapInput is an input type that accepts ImageRegistryMap and ImageRegistryMapOutput values.
// You can construct a concrete instance of `ImageRegistryMapInput` via:
//
//	ImageRegistryMap{ "key": ImageRegistryArgs{...} }
type ImageRegistryMapInput interface {
	pulumi.Input

	ToImageRegistryMapOutput() ImageRegistryMapOutput
	ToImageRegistryMapOutputWithContext(context.Context) ImageRegistryMapOutput
}

type ImageRegistryMap map[string]ImageRegistryInput

func (ImageRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRegistry)(nil)).Elem()
}

func (i ImageRegistryMap) ToImageRegistryMapOutput() ImageRegistryMapOutput {
	return i.ToImageRegistryMapOutputWithContext(context.Background())
}

func (i ImageRegistryMap) ToImageRegistryMapOutputWithContext(ctx context.Context) ImageRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageRegistryMapOutput)
}

type ImageRegistryOutput struct{ *pulumi.OutputState }

func (ImageRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageRegistry)(nil)).Elem()
}

func (o ImageRegistryOutput) ToImageRegistryOutput() ImageRegistryOutput {
	return o
}

func (o ImageRegistryOutput) ToImageRegistryOutputWithContext(ctx context.Context) ImageRegistryOutput {
	return o
}

// Connectivity detection configuration.
func (o ImageRegistryOutput) ConnDetectConfigs() ImageRegistryConnDetectConfigArrayOutput {
	return o.ApplyT(func(v *ImageRegistry) ImageRegistryConnDetectConfigArrayOutput { return v.ConnDetectConfigs }).(ImageRegistryConnDetectConfigArrayOutput)
}

// Valid values: `0` (secure mode with certificate verification, which is the default value); `1` (unsecure mode that skips certificate verification).
func (o ImageRegistryOutput) Insecure() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.IntPtrOutput { return v.Insecure }).(pulumi.IntPtrOutput)
}

// Repository name.
func (o ImageRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether to scan the latest image.
func (o ImageRegistryOutput) NeedScan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.BoolPtrOutput { return v.NeedScan }).(pulumi.BoolPtrOutput)
}

// Network type, which can be `public` (public network).
func (o ImageRegistryOutput) NetType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.NetType }).(pulumi.StringOutput)
}

// Password.
func (o ImageRegistryOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Region. Default value: `default`.
func (o ImageRegistryOutput) RegistryRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringPtrOutput { return v.RegistryRegion }).(pulumi.StringPtrOutput)
}

// Repository type, which can be `harbor`. Valid values: harbor, quay, jfrog, aws, azure, other-tcr.
func (o ImageRegistryOutput) RegistryType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.RegistryType }).(pulumi.StringOutput)
}

// Repository version.
func (o ImageRegistryOutput) RegistryVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringPtrOutput { return v.RegistryVersion }).(pulumi.StringPtrOutput)
}

// Speed limit.
func (o ImageRegistryOutput) SpeedLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.IntPtrOutput { return v.SpeedLimit }).(pulumi.IntPtrOutput)
}

// Sync status.
func (o ImageRegistryOutput) SyncStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.SyncStatus }).(pulumi.StringOutput)
}

// Repository URL.
func (o ImageRegistryOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Username.
func (o ImageRegistryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageRegistry) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ImageRegistryArrayOutput struct{ *pulumi.OutputState }

func (ImageRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageRegistry)(nil)).Elem()
}

func (o ImageRegistryArrayOutput) ToImageRegistryArrayOutput() ImageRegistryArrayOutput {
	return o
}

func (o ImageRegistryArrayOutput) ToImageRegistryArrayOutputWithContext(ctx context.Context) ImageRegistryArrayOutput {
	return o
}

func (o ImageRegistryArrayOutput) Index(i pulumi.IntInput) ImageRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageRegistry {
		return vs[0].([]*ImageRegistry)[vs[1].(int)]
	}).(ImageRegistryOutput)
}

type ImageRegistryMapOutput struct{ *pulumi.OutputState }

func (ImageRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageRegistry)(nil)).Elem()
}

func (o ImageRegistryMapOutput) ToImageRegistryMapOutput() ImageRegistryMapOutput {
	return o
}

func (o ImageRegistryMapOutput) ToImageRegistryMapOutputWithContext(ctx context.Context) ImageRegistryMapOutput {
	return o
}

func (o ImageRegistryMapOutput) MapIndex(k pulumi.StringInput) ImageRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageRegistry {
		return vs[0].(map[string]*ImageRegistry)[vs[1].(string)]
	}).(ImageRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRegistryInput)(nil)).Elem(), &ImageRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRegistryArrayInput)(nil)).Elem(), ImageRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageRegistryMapInput)(nil)).Elem(), ImageRegistryMap{})
	pulumi.RegisterOutputType(ImageRegistryOutput{})
	pulumi.RegisterOutputType(ImageRegistryArrayOutput{})
	pulumi.RegisterOutputType(ImageRegistryMapOutput{})
}
