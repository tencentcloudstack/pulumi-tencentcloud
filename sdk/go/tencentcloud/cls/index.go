// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cls index.
//
// ## Import
//
// cls cos index can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cls/index:Index index 0937e56f-4008-49d2-ad2d-69c52a9f11cc
//
// ```
type Index struct {
	pulumi.CustomResourceState

	// Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
	IncludeInternalFields pulumi.BoolPtrOutput `pulumi:"includeInternalFields"`
	// Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
	MetadataFlag pulumi.IntPtrOutput `pulumi:"metadataFlag"`
	// Index rule.
	Rule IndexRuleOutput `pulumi:"rule"`
	// Whether to take effect. Default value: true.
	Status pulumi.BoolOutput `pulumi:"status"`
	// Log topic ID.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("tencentcloud:Cls/index:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("tencentcloud:Cls/index:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
	// Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
	IncludeInternalFields *bool `pulumi:"includeInternalFields"`
	// Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
	MetadataFlag *int `pulumi:"metadataFlag"`
	// Index rule.
	Rule *IndexRule `pulumi:"rule"`
	// Whether to take effect. Default value: true.
	Status *bool `pulumi:"status"`
	// Log topic ID.
	TopicId *string `pulumi:"topicId"`
}

type IndexState struct {
	// Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
	IncludeInternalFields pulumi.BoolPtrInput
	// Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
	MetadataFlag pulumi.IntPtrInput
	// Index rule.
	Rule IndexRulePtrInput
	// Whether to take effect. Default value: true.
	Status pulumi.BoolPtrInput
	// Log topic ID.
	TopicId pulumi.StringPtrInput
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
	IncludeInternalFields *bool `pulumi:"includeInternalFields"`
	// Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
	MetadataFlag *int `pulumi:"metadataFlag"`
	// Index rule.
	Rule *IndexRule `pulumi:"rule"`
	// Whether to take effect. Default value: true.
	Status *bool `pulumi:"status"`
	// Log topic ID.
	TopicId string `pulumi:"topicId"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
	IncludeInternalFields pulumi.BoolPtrInput
	// Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
	MetadataFlag pulumi.IntPtrInput
	// Index rule.
	Rule IndexRulePtrInput
	// Whether to take effect. Default value: true.
	Status pulumi.BoolPtrInput
	// Log topic ID.
	TopicId pulumi.StringInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//	IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//	IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// Internal field marker of full-text index. Default value: false. Valid value: false: excluding internal fields; true: including internal fields.
func (o IndexOutput) IncludeInternalFields() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolPtrOutput { return v.IncludeInternalFields }).(pulumi.BoolPtrOutput)
}

// Metadata flag. Default value: 0. Valid value: 0: full-text index (including the metadata field with key-value index enabled); 1: full-text index (including all metadata fields); 2: full-text index (excluding metadata fields)..
func (o IndexOutput) MetadataFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Index) pulumi.IntPtrOutput { return v.MetadataFlag }).(pulumi.IntPtrOutput)
}

// Index rule.
func (o IndexOutput) Rule() IndexRuleOutput {
	return o.ApplyT(func(v *Index) IndexRuleOutput { return v.Rule }).(IndexRuleOutput)
}

// Whether to take effect. Default value: true.
func (o IndexOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v *Index) pulumi.BoolOutput { return v.Status }).(pulumi.BoolOutput)
}

// Log topic ID.
func (o IndexOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
