// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cls alarmNotice
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cls.NewAlarmNotice(ctx, "alarmNotice", &Cls.AlarmNoticeArgs{
//				NoticeReceivers: cls.AlarmNoticeNoticeReceiverArray{
//					&cls.AlarmNoticeNoticeReceiverArgs{
//						EndTime: pulumi.String("23:59:59"),
//						Index:   pulumi.Int(0),
//						ReceiverChannels: pulumi.StringArray{
//							pulumi.String("Sms"),
//						},
//						ReceiverIds: pulumi.IntArray{
//							pulumi.Int(13478043),
//							pulumi.Int(15972111),
//						},
//						ReceiverType: pulumi.String("Uin"),
//						StartTime:    pulumi.String("00:00:00"),
//					},
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//				Type: pulumi.String("All"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cls alarm_notice can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cls/alarmNotice:AlarmNotice alarm_notice alarm_notice_id
//
// ```
type AlarmNotice struct {
	pulumi.CustomResourceState

	// alarm notice name.
	Name pulumi.StringOutput `pulumi:"name"`
	// notice receivers.
	NoticeReceivers AlarmNoticeNoticeReceiverArrayOutput `pulumi:"noticeReceivers"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// notice type.
	Type pulumi.StringOutput `pulumi:"type"`
	// callback info.
	WebCallbacks AlarmNoticeWebCallbackArrayOutput `pulumi:"webCallbacks"`
}

// NewAlarmNotice registers a new resource with the given unique name, arguments, and options.
func NewAlarmNotice(ctx *pulumi.Context,
	name string, args *AlarmNoticeArgs, opts ...pulumi.ResourceOption) (*AlarmNotice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AlarmNotice
	err := ctx.RegisterResource("tencentcloud:Cls/alarmNotice:AlarmNotice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarmNotice gets an existing AlarmNotice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarmNotice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmNoticeState, opts ...pulumi.ResourceOption) (*AlarmNotice, error) {
	var resource AlarmNotice
	err := ctx.ReadResource("tencentcloud:Cls/alarmNotice:AlarmNotice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlarmNotice resources.
type alarmNoticeState struct {
	// alarm notice name.
	Name *string `pulumi:"name"`
	// notice receivers.
	NoticeReceivers []AlarmNoticeNoticeReceiver `pulumi:"noticeReceivers"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// notice type.
	Type *string `pulumi:"type"`
	// callback info.
	WebCallbacks []AlarmNoticeWebCallback `pulumi:"webCallbacks"`
}

type AlarmNoticeState struct {
	// alarm notice name.
	Name pulumi.StringPtrInput
	// notice receivers.
	NoticeReceivers AlarmNoticeNoticeReceiverArrayInput
	// Tag description list.
	Tags pulumi.MapInput
	// notice type.
	Type pulumi.StringPtrInput
	// callback info.
	WebCallbacks AlarmNoticeWebCallbackArrayInput
}

func (AlarmNoticeState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmNoticeState)(nil)).Elem()
}

type alarmNoticeArgs struct {
	// alarm notice name.
	Name *string `pulumi:"name"`
	// notice receivers.
	NoticeReceivers []AlarmNoticeNoticeReceiver `pulumi:"noticeReceivers"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// notice type.
	Type string `pulumi:"type"`
	// callback info.
	WebCallbacks []AlarmNoticeWebCallback `pulumi:"webCallbacks"`
}

// The set of arguments for constructing a AlarmNotice resource.
type AlarmNoticeArgs struct {
	// alarm notice name.
	Name pulumi.StringPtrInput
	// notice receivers.
	NoticeReceivers AlarmNoticeNoticeReceiverArrayInput
	// Tag description list.
	Tags pulumi.MapInput
	// notice type.
	Type pulumi.StringInput
	// callback info.
	WebCallbacks AlarmNoticeWebCallbackArrayInput
}

func (AlarmNoticeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmNoticeArgs)(nil)).Elem()
}

type AlarmNoticeInput interface {
	pulumi.Input

	ToAlarmNoticeOutput() AlarmNoticeOutput
	ToAlarmNoticeOutputWithContext(ctx context.Context) AlarmNoticeOutput
}

func (*AlarmNotice) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmNotice)(nil)).Elem()
}

func (i *AlarmNotice) ToAlarmNoticeOutput() AlarmNoticeOutput {
	return i.ToAlarmNoticeOutputWithContext(context.Background())
}

func (i *AlarmNotice) ToAlarmNoticeOutputWithContext(ctx context.Context) AlarmNoticeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmNoticeOutput)
}

// AlarmNoticeArrayInput is an input type that accepts AlarmNoticeArray and AlarmNoticeArrayOutput values.
// You can construct a concrete instance of `AlarmNoticeArrayInput` via:
//
//	AlarmNoticeArray{ AlarmNoticeArgs{...} }
type AlarmNoticeArrayInput interface {
	pulumi.Input

	ToAlarmNoticeArrayOutput() AlarmNoticeArrayOutput
	ToAlarmNoticeArrayOutputWithContext(context.Context) AlarmNoticeArrayOutput
}

type AlarmNoticeArray []AlarmNoticeInput

func (AlarmNoticeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmNotice)(nil)).Elem()
}

func (i AlarmNoticeArray) ToAlarmNoticeArrayOutput() AlarmNoticeArrayOutput {
	return i.ToAlarmNoticeArrayOutputWithContext(context.Background())
}

func (i AlarmNoticeArray) ToAlarmNoticeArrayOutputWithContext(ctx context.Context) AlarmNoticeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmNoticeArrayOutput)
}

// AlarmNoticeMapInput is an input type that accepts AlarmNoticeMap and AlarmNoticeMapOutput values.
// You can construct a concrete instance of `AlarmNoticeMapInput` via:
//
//	AlarmNoticeMap{ "key": AlarmNoticeArgs{...} }
type AlarmNoticeMapInput interface {
	pulumi.Input

	ToAlarmNoticeMapOutput() AlarmNoticeMapOutput
	ToAlarmNoticeMapOutputWithContext(context.Context) AlarmNoticeMapOutput
}

type AlarmNoticeMap map[string]AlarmNoticeInput

func (AlarmNoticeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmNotice)(nil)).Elem()
}

func (i AlarmNoticeMap) ToAlarmNoticeMapOutput() AlarmNoticeMapOutput {
	return i.ToAlarmNoticeMapOutputWithContext(context.Background())
}

func (i AlarmNoticeMap) ToAlarmNoticeMapOutputWithContext(ctx context.Context) AlarmNoticeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmNoticeMapOutput)
}

type AlarmNoticeOutput struct{ *pulumi.OutputState }

func (AlarmNoticeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmNotice)(nil)).Elem()
}

func (o AlarmNoticeOutput) ToAlarmNoticeOutput() AlarmNoticeOutput {
	return o
}

func (o AlarmNoticeOutput) ToAlarmNoticeOutputWithContext(ctx context.Context) AlarmNoticeOutput {
	return o
}

// alarm notice name.
func (o AlarmNoticeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmNotice) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// notice receivers.
func (o AlarmNoticeOutput) NoticeReceivers() AlarmNoticeNoticeReceiverArrayOutput {
	return o.ApplyT(func(v *AlarmNotice) AlarmNoticeNoticeReceiverArrayOutput { return v.NoticeReceivers }).(AlarmNoticeNoticeReceiverArrayOutput)
}

// Tag description list.
func (o AlarmNoticeOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *AlarmNotice) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// notice type.
func (o AlarmNoticeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmNotice) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// callback info.
func (o AlarmNoticeOutput) WebCallbacks() AlarmNoticeWebCallbackArrayOutput {
	return o.ApplyT(func(v *AlarmNotice) AlarmNoticeWebCallbackArrayOutput { return v.WebCallbacks }).(AlarmNoticeWebCallbackArrayOutput)
}

type AlarmNoticeArrayOutput struct{ *pulumi.OutputState }

func (AlarmNoticeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmNotice)(nil)).Elem()
}

func (o AlarmNoticeArrayOutput) ToAlarmNoticeArrayOutput() AlarmNoticeArrayOutput {
	return o
}

func (o AlarmNoticeArrayOutput) ToAlarmNoticeArrayOutputWithContext(ctx context.Context) AlarmNoticeArrayOutput {
	return o
}

func (o AlarmNoticeArrayOutput) Index(i pulumi.IntInput) AlarmNoticeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlarmNotice {
		return vs[0].([]*AlarmNotice)[vs[1].(int)]
	}).(AlarmNoticeOutput)
}

type AlarmNoticeMapOutput struct{ *pulumi.OutputState }

func (AlarmNoticeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmNotice)(nil)).Elem()
}

func (o AlarmNoticeMapOutput) ToAlarmNoticeMapOutput() AlarmNoticeMapOutput {
	return o
}

func (o AlarmNoticeMapOutput) ToAlarmNoticeMapOutputWithContext(ctx context.Context) AlarmNoticeMapOutput {
	return o
}

func (o AlarmNoticeMapOutput) MapIndex(k pulumi.StringInput) AlarmNoticeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlarmNotice {
		return vs[0].(map[string]*AlarmNotice)[vs[1].(string)]
	}).(AlarmNoticeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmNoticeInput)(nil)).Elem(), &AlarmNotice{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmNoticeArrayInput)(nil)).Elem(), AlarmNoticeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmNoticeMapInput)(nil)).Elem(), AlarmNoticeMap{})
	pulumi.RegisterOutputType(AlarmNoticeOutput{})
	pulumi.RegisterOutputType(AlarmNoticeArrayOutput{})
	pulumi.RegisterOutputType(AlarmNoticeMapOutput{})
}
