// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a cls notice content
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cls.NewNoticeContent(ctx, "example", &Cls.NoticeContentArgs{
//				NoticeContents: &cls.NoticeContentNoticeContentsArgs{
//					RecoveryContent: &cls.NoticeContentNoticeContentsRecoveryContentArgs{
//						Content: pulumi.String("This is content."),
//						Headers: pulumi.StringArray{
//							pulumi.String("Content-Type:application/json"),
//						},
//						Title: pulumi.String("title"),
//					},
//					TriggerContent: &cls.NoticeContentNoticeContentsTriggerContentArgs{
//						Content: pulumi.String("This is content."),
//						Headers: pulumi.StringArray{
//							pulumi.String("Content-Type:application/json"),
//						},
//						Title: pulumi.String("title"),
//					},
//					Type: pulumi.String("Email"),
//				},
//				Type: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// cls notice content can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Cls/noticeContent:NoticeContent example noticetemplate-b417f32a-bdf9-46c5-933e-28c23cd7a6b7
// ```
type NoticeContent struct {
	pulumi.CustomResourceState

	// Notice content name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Template detailed configuration.
	NoticeContents NoticeContentNoticeContentsPtrOutput `pulumi:"noticeContents"`
	// Template content language. 0: Chinese 1: English.
	Type pulumi.IntPtrOutput `pulumi:"type"`
}

// NewNoticeContent registers a new resource with the given unique name, arguments, and options.
func NewNoticeContent(ctx *pulumi.Context,
	name string, args *NoticeContentArgs, opts ...pulumi.ResourceOption) (*NoticeContent, error) {
	if args == nil {
		args = &NoticeContentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NoticeContent
	err := ctx.RegisterResource("tencentcloud:Cls/noticeContent:NoticeContent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNoticeContent gets an existing NoticeContent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNoticeContent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NoticeContentState, opts ...pulumi.ResourceOption) (*NoticeContent, error) {
	var resource NoticeContent
	err := ctx.ReadResource("tencentcloud:Cls/noticeContent:NoticeContent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NoticeContent resources.
type noticeContentState struct {
	// Notice content name.
	Name *string `pulumi:"name"`
	// Template detailed configuration.
	NoticeContents *NoticeContentNoticeContents `pulumi:"noticeContents"`
	// Template content language. 0: Chinese 1: English.
	Type *int `pulumi:"type"`
}

type NoticeContentState struct {
	// Notice content name.
	Name pulumi.StringPtrInput
	// Template detailed configuration.
	NoticeContents NoticeContentNoticeContentsPtrInput
	// Template content language. 0: Chinese 1: English.
	Type pulumi.IntPtrInput
}

func (NoticeContentState) ElementType() reflect.Type {
	return reflect.TypeOf((*noticeContentState)(nil)).Elem()
}

type noticeContentArgs struct {
	// Notice content name.
	Name *string `pulumi:"name"`
	// Template detailed configuration.
	NoticeContents *NoticeContentNoticeContents `pulumi:"noticeContents"`
	// Template content language. 0: Chinese 1: English.
	Type *int `pulumi:"type"`
}

// The set of arguments for constructing a NoticeContent resource.
type NoticeContentArgs struct {
	// Notice content name.
	Name pulumi.StringPtrInput
	// Template detailed configuration.
	NoticeContents NoticeContentNoticeContentsPtrInput
	// Template content language. 0: Chinese 1: English.
	Type pulumi.IntPtrInput
}

func (NoticeContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*noticeContentArgs)(nil)).Elem()
}

type NoticeContentInput interface {
	pulumi.Input

	ToNoticeContentOutput() NoticeContentOutput
	ToNoticeContentOutputWithContext(ctx context.Context) NoticeContentOutput
}

func (*NoticeContent) ElementType() reflect.Type {
	return reflect.TypeOf((**NoticeContent)(nil)).Elem()
}

func (i *NoticeContent) ToNoticeContentOutput() NoticeContentOutput {
	return i.ToNoticeContentOutputWithContext(context.Background())
}

func (i *NoticeContent) ToNoticeContentOutputWithContext(ctx context.Context) NoticeContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoticeContentOutput)
}

// NoticeContentArrayInput is an input type that accepts NoticeContentArray and NoticeContentArrayOutput values.
// You can construct a concrete instance of `NoticeContentArrayInput` via:
//
//	NoticeContentArray{ NoticeContentArgs{...} }
type NoticeContentArrayInput interface {
	pulumi.Input

	ToNoticeContentArrayOutput() NoticeContentArrayOutput
	ToNoticeContentArrayOutputWithContext(context.Context) NoticeContentArrayOutput
}

type NoticeContentArray []NoticeContentInput

func (NoticeContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NoticeContent)(nil)).Elem()
}

func (i NoticeContentArray) ToNoticeContentArrayOutput() NoticeContentArrayOutput {
	return i.ToNoticeContentArrayOutputWithContext(context.Background())
}

func (i NoticeContentArray) ToNoticeContentArrayOutputWithContext(ctx context.Context) NoticeContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoticeContentArrayOutput)
}

// NoticeContentMapInput is an input type that accepts NoticeContentMap and NoticeContentMapOutput values.
// You can construct a concrete instance of `NoticeContentMapInput` via:
//
//	NoticeContentMap{ "key": NoticeContentArgs{...} }
type NoticeContentMapInput interface {
	pulumi.Input

	ToNoticeContentMapOutput() NoticeContentMapOutput
	ToNoticeContentMapOutputWithContext(context.Context) NoticeContentMapOutput
}

type NoticeContentMap map[string]NoticeContentInput

func (NoticeContentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NoticeContent)(nil)).Elem()
}

func (i NoticeContentMap) ToNoticeContentMapOutput() NoticeContentMapOutput {
	return i.ToNoticeContentMapOutputWithContext(context.Background())
}

func (i NoticeContentMap) ToNoticeContentMapOutputWithContext(ctx context.Context) NoticeContentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NoticeContentMapOutput)
}

type NoticeContentOutput struct{ *pulumi.OutputState }

func (NoticeContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NoticeContent)(nil)).Elem()
}

func (o NoticeContentOutput) ToNoticeContentOutput() NoticeContentOutput {
	return o
}

func (o NoticeContentOutput) ToNoticeContentOutputWithContext(ctx context.Context) NoticeContentOutput {
	return o
}

// Notice content name.
func (o NoticeContentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NoticeContent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Template detailed configuration.
func (o NoticeContentOutput) NoticeContents() NoticeContentNoticeContentsPtrOutput {
	return o.ApplyT(func(v *NoticeContent) NoticeContentNoticeContentsPtrOutput { return v.NoticeContents }).(NoticeContentNoticeContentsPtrOutput)
}

// Template content language. 0: Chinese 1: English.
func (o NoticeContentOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NoticeContent) pulumi.IntPtrOutput { return v.Type }).(pulumi.IntPtrOutput)
}

type NoticeContentArrayOutput struct{ *pulumi.OutputState }

func (NoticeContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NoticeContent)(nil)).Elem()
}

func (o NoticeContentArrayOutput) ToNoticeContentArrayOutput() NoticeContentArrayOutput {
	return o
}

func (o NoticeContentArrayOutput) ToNoticeContentArrayOutputWithContext(ctx context.Context) NoticeContentArrayOutput {
	return o
}

func (o NoticeContentArrayOutput) Index(i pulumi.IntInput) NoticeContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NoticeContent {
		return vs[0].([]*NoticeContent)[vs[1].(int)]
	}).(NoticeContentOutput)
}

type NoticeContentMapOutput struct{ *pulumi.OutputState }

func (NoticeContentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NoticeContent)(nil)).Elem()
}

func (o NoticeContentMapOutput) ToNoticeContentMapOutput() NoticeContentMapOutput {
	return o
}

func (o NoticeContentMapOutput) ToNoticeContentMapOutputWithContext(ctx context.Context) NoticeContentMapOutput {
	return o
}

func (o NoticeContentMapOutput) MapIndex(k pulumi.StringInput) NoticeContentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NoticeContent {
		return vs[0].(map[string]*NoticeContent)[vs[1].(string)]
	}).(NoticeContentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NoticeContentInput)(nil)).Elem(), &NoticeContent{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoticeContentArrayInput)(nil)).Elem(), NoticeContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NoticeContentMapInput)(nil)).Elem(), NoticeContentMap{})
	pulumi.RegisterOutputType(NoticeContentOutput{})
	pulumi.RegisterOutputType(NoticeContentArrayOutput{})
	pulumi.RegisterOutputType(NoticeContentMapOutput{})
}
