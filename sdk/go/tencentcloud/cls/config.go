// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cls config
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cls.NewConfig(ctx, "config", &Cls.ConfigArgs{
//				ExcludePaths: cls.ConfigExcludePathArray{
//					&cls.ConfigExcludePathArgs{
//						Type:  pulumi.String("Path"),
//						Value: pulumi.String("/data"),
//					},
//					&cls.ConfigExcludePathArgs{
//						Type:  pulumi.String("File"),
//						Value: pulumi.String("/file"),
//					},
//				},
//				ExtractRule: &cls.ConfigExtractRuleArgs{
//					Backtracking: -1,
//					FilterKeyRegexes: cls.ConfigExtractRuleFilterKeyRegexArray{
//						&cls.ConfigExtractRuleFilterKeyRegexArgs{
//							Key:   pulumi.String("key1"),
//							Regex: pulumi.String("value1"),
//						},
//						&cls.ConfigExtractRuleFilterKeyRegexArgs{
//							Key:   pulumi.String("key2"),
//							Regex: pulumi.String("value2"),
//						},
//					},
//					UnMatchLogKey:       pulumi.String("config"),
//					UnMatchUpLoadSwitch: pulumi.Bool(true),
//				},
//				LogType: pulumi.String("json_log"),
//				Output:  pulumi.String("4d07fba0-b93e-4e0b-9a7f-d58542560bbb"),
//				Path:    pulumi.String("/var/log/kubernetes"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cls config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cls/config:Config config config_id
//
// ```
type Config struct {
	pulumi.CustomResourceState

	// Collection path blocklist.
	ExcludePaths ConfigExcludePathArrayOutput `pulumi:"excludePaths"`
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule ConfigExtractRuleOutput `pulumi:"extractRule"`
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType pulumi.StringPtrOutput `pulumi:"logType"`
	// Collection configuration name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Log topic ID (TopicId) of collection configuration.
	Output pulumi.StringPtrOutput `pulumi:"output"`
	// Log collection path containing the filename.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule pulumi.StringPtrOutput `pulumi:"userDefineRule"`
}

// NewConfig registers a new resource with the given unique name, arguments, and options.
func NewConfig(ctx *pulumi.Context,
	name string, args *ConfigArgs, opts ...pulumi.ResourceOption) (*Config, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExtractRule == nil {
		return nil, errors.New("invalid value for required argument 'ExtractRule'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Config
	err := ctx.RegisterResource("tencentcloud:Cls/config:Config", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfig gets an existing Config resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigState, opts ...pulumi.ResourceOption) (*Config, error) {
	var resource Config
	err := ctx.ReadResource("tencentcloud:Cls/config:Config", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Config resources.
type configState struct {
	// Collection path blocklist.
	ExcludePaths []ConfigExcludePath `pulumi:"excludePaths"`
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule *ConfigExtractRule `pulumi:"extractRule"`
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType *string `pulumi:"logType"`
	// Collection configuration name.
	Name *string `pulumi:"name"`
	// Log topic ID (TopicId) of collection configuration.
	Output *string `pulumi:"output"`
	// Log collection path containing the filename.
	Path *string `pulumi:"path"`
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule *string `pulumi:"userDefineRule"`
}

type ConfigState struct {
	// Collection path blocklist.
	ExcludePaths ConfigExcludePathArrayInput
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule ConfigExtractRulePtrInput
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType pulumi.StringPtrInput
	// Collection configuration name.
	Name pulumi.StringPtrInput
	// Log topic ID (TopicId) of collection configuration.
	Output pulumi.StringPtrInput
	// Log collection path containing the filename.
	Path pulumi.StringPtrInput
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule pulumi.StringPtrInput
}

func (ConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*configState)(nil)).Elem()
}

type configArgs struct {
	// Collection path blocklist.
	ExcludePaths []ConfigExcludePath `pulumi:"excludePaths"`
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule ConfigExtractRule `pulumi:"extractRule"`
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType *string `pulumi:"logType"`
	// Collection configuration name.
	Name *string `pulumi:"name"`
	// Log topic ID (TopicId) of collection configuration.
	Output *string `pulumi:"output"`
	// Log collection path containing the filename.
	Path *string `pulumi:"path"`
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule *string `pulumi:"userDefineRule"`
}

// The set of arguments for constructing a Config resource.
type ConfigArgs struct {
	// Collection path blocklist.
	ExcludePaths ConfigExcludePathArrayInput
	// Extraction rule. If ExtractRule is set, LogType must be set.
	ExtractRule ConfigExtractRuleInput
	// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
	LogType pulumi.StringPtrInput
	// Collection configuration name.
	Name pulumi.StringPtrInput
	// Log topic ID (TopicId) of collection configuration.
	Output pulumi.StringPtrInput
	// Log collection path containing the filename.
	Path pulumi.StringPtrInput
	// Custom collection rule, which is a serialized JSON string.
	UserDefineRule pulumi.StringPtrInput
}

func (ConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configArgs)(nil)).Elem()
}

type ConfigInput interface {
	pulumi.Input

	ToConfigOutput() ConfigOutput
	ToConfigOutputWithContext(ctx context.Context) ConfigOutput
}

func (*Config) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (i *Config) ToConfigOutput() ConfigOutput {
	return i.ToConfigOutputWithContext(context.Background())
}

func (i *Config) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigOutput)
}

// ConfigArrayInput is an input type that accepts ConfigArray and ConfigArrayOutput values.
// You can construct a concrete instance of `ConfigArrayInput` via:
//
//	ConfigArray{ ConfigArgs{...} }
type ConfigArrayInput interface {
	pulumi.Input

	ToConfigArrayOutput() ConfigArrayOutput
	ToConfigArrayOutputWithContext(context.Context) ConfigArrayOutput
}

type ConfigArray []ConfigInput

func (ConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Config)(nil)).Elem()
}

func (i ConfigArray) ToConfigArrayOutput() ConfigArrayOutput {
	return i.ToConfigArrayOutputWithContext(context.Background())
}

func (i ConfigArray) ToConfigArrayOutputWithContext(ctx context.Context) ConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigArrayOutput)
}

// ConfigMapInput is an input type that accepts ConfigMap and ConfigMapOutput values.
// You can construct a concrete instance of `ConfigMapInput` via:
//
//	ConfigMap{ "key": ConfigArgs{...} }
type ConfigMapInput interface {
	pulumi.Input

	ToConfigMapOutput() ConfigMapOutput
	ToConfigMapOutputWithContext(context.Context) ConfigMapOutput
}

type ConfigMap map[string]ConfigInput

func (ConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Config)(nil)).Elem()
}

func (i ConfigMap) ToConfigMapOutput() ConfigMapOutput {
	return i.ToConfigMapOutputWithContext(context.Background())
}

func (i ConfigMap) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigMapOutput)
}

type ConfigOutput struct{ *pulumi.OutputState }

func (ConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Config)(nil)).Elem()
}

func (o ConfigOutput) ToConfigOutput() ConfigOutput {
	return o
}

func (o ConfigOutput) ToConfigOutputWithContext(ctx context.Context) ConfigOutput {
	return o
}

// Collection path blocklist.
func (o ConfigOutput) ExcludePaths() ConfigExcludePathArrayOutput {
	return o.ApplyT(func(v *Config) ConfigExcludePathArrayOutput { return v.ExcludePaths }).(ConfigExcludePathArrayOutput)
}

// Extraction rule. If ExtractRule is set, LogType must be set.
func (o ConfigOutput) ExtractRule() ConfigExtractRuleOutput {
	return o.ApplyT(func(v *Config) ConfigExtractRuleOutput { return v.ExtractRule }).(ConfigExtractRuleOutput)
}

// Type of the log to be collected. Valid values: json_log: log in JSON format; delimiter_log: log in delimited format; minimalist_log: minimalist log; multiline_log: log in multi-line format; fullregex_log: log in full regex format. Default value: minimalist_log.
func (o ConfigOutput) LogType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Config) pulumi.StringPtrOutput { return v.LogType }).(pulumi.StringPtrOutput)
}

// Collection configuration name.
func (o ConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Config) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Log topic ID (TopicId) of collection configuration.
func (o ConfigOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Config) pulumi.StringPtrOutput { return v.Output }).(pulumi.StringPtrOutput)
}

// Log collection path containing the filename.
func (o ConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Config) pulumi.StringPtrOutput { return v.Path }).(pulumi.StringPtrOutput)
}

// Custom collection rule, which is a serialized JSON string.
func (o ConfigOutput) UserDefineRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Config) pulumi.StringPtrOutput { return v.UserDefineRule }).(pulumi.StringPtrOutput)
}

type ConfigArrayOutput struct{ *pulumi.OutputState }

func (ConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Config)(nil)).Elem()
}

func (o ConfigArrayOutput) ToConfigArrayOutput() ConfigArrayOutput {
	return o
}

func (o ConfigArrayOutput) ToConfigArrayOutputWithContext(ctx context.Context) ConfigArrayOutput {
	return o
}

func (o ConfigArrayOutput) Index(i pulumi.IntInput) ConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Config {
		return vs[0].([]*Config)[vs[1].(int)]
	}).(ConfigOutput)
}

type ConfigMapOutput struct{ *pulumi.OutputState }

func (ConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Config)(nil)).Elem()
}

func (o ConfigMapOutput) ToConfigMapOutput() ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) ToConfigMapOutputWithContext(ctx context.Context) ConfigMapOutput {
	return o
}

func (o ConfigMapOutput) MapIndex(k pulumi.StringInput) ConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Config {
		return vs[0].(map[string]*Config)[vs[1].(string)]
	}).(ConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigInput)(nil)).Elem(), &Config{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigArrayInput)(nil)).Elem(), ConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigMapInput)(nil)).Elem(), ConfigMap{})
	pulumi.RegisterOutputType(ConfigOutput{})
	pulumi.RegisterOutputType(ConfigArrayOutput{})
	pulumi.RegisterOutputType(ConfigMapOutput{})
}
