// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cls logset
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cls.NewLogset(ctx, "logset", &Cls.LogsetArgs{
//				LogsetName: pulumi.String("demo"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cls logset can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cls/logset:Logset logset logset_id
//
// ```
type Logset struct {
	pulumi.CustomResourceState

	// Creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Logset name, which must be unique.
	LogsetName pulumi.StringOutput `pulumi:"logsetName"`
	// If assumerUin is not empty, it indicates the service provider who creates the logset.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Number of log topics in logset.
	TopicCount pulumi.IntOutput `pulumi:"topicCount"`
}

// NewLogset registers a new resource with the given unique name, arguments, and options.
func NewLogset(ctx *pulumi.Context,
	name string, args *LogsetArgs, opts ...pulumi.ResourceOption) (*Logset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogsetName == nil {
		return nil, errors.New("invalid value for required argument 'LogsetName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Logset
	err := ctx.RegisterResource("tencentcloud:Cls/logset:Logset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogset gets an existing Logset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsetState, opts ...pulumi.ResourceOption) (*Logset, error) {
	var resource Logset
	err := ctx.ReadResource("tencentcloud:Cls/logset:Logset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logset resources.
type logsetState struct {
	// Creation time.
	CreateTime *string `pulumi:"createTime"`
	// Logset name, which must be unique.
	LogsetName *string `pulumi:"logsetName"`
	// If assumerUin is not empty, it indicates the service provider who creates the logset.
	RoleName *string `pulumi:"roleName"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Number of log topics in logset.
	TopicCount *int `pulumi:"topicCount"`
}

type LogsetState struct {
	// Creation time.
	CreateTime pulumi.StringPtrInput
	// Logset name, which must be unique.
	LogsetName pulumi.StringPtrInput
	// If assumerUin is not empty, it indicates the service provider who creates the logset.
	RoleName pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// Number of log topics in logset.
	TopicCount pulumi.IntPtrInput
}

func (LogsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsetState)(nil)).Elem()
}

type logsetArgs struct {
	// Logset name, which must be unique.
	LogsetName string `pulumi:"logsetName"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Logset resource.
type LogsetArgs struct {
	// Logset name, which must be unique.
	LogsetName pulumi.StringInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (LogsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsetArgs)(nil)).Elem()
}

type LogsetInput interface {
	pulumi.Input

	ToLogsetOutput() LogsetOutput
	ToLogsetOutputWithContext(ctx context.Context) LogsetOutput
}

func (*Logset) ElementType() reflect.Type {
	return reflect.TypeOf((**Logset)(nil)).Elem()
}

func (i *Logset) ToLogsetOutput() LogsetOutput {
	return i.ToLogsetOutputWithContext(context.Background())
}

func (i *Logset) ToLogsetOutputWithContext(ctx context.Context) LogsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsetOutput)
}

// LogsetArrayInput is an input type that accepts LogsetArray and LogsetArrayOutput values.
// You can construct a concrete instance of `LogsetArrayInput` via:
//
//	LogsetArray{ LogsetArgs{...} }
type LogsetArrayInput interface {
	pulumi.Input

	ToLogsetArrayOutput() LogsetArrayOutput
	ToLogsetArrayOutputWithContext(context.Context) LogsetArrayOutput
}

type LogsetArray []LogsetInput

func (LogsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logset)(nil)).Elem()
}

func (i LogsetArray) ToLogsetArrayOutput() LogsetArrayOutput {
	return i.ToLogsetArrayOutputWithContext(context.Background())
}

func (i LogsetArray) ToLogsetArrayOutputWithContext(ctx context.Context) LogsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsetArrayOutput)
}

// LogsetMapInput is an input type that accepts LogsetMap and LogsetMapOutput values.
// You can construct a concrete instance of `LogsetMapInput` via:
//
//	LogsetMap{ "key": LogsetArgs{...} }
type LogsetMapInput interface {
	pulumi.Input

	ToLogsetMapOutput() LogsetMapOutput
	ToLogsetMapOutputWithContext(context.Context) LogsetMapOutput
}

type LogsetMap map[string]LogsetInput

func (LogsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logset)(nil)).Elem()
}

func (i LogsetMap) ToLogsetMapOutput() LogsetMapOutput {
	return i.ToLogsetMapOutputWithContext(context.Background())
}

func (i LogsetMap) ToLogsetMapOutputWithContext(ctx context.Context) LogsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsetMapOutput)
}

type LogsetOutput struct{ *pulumi.OutputState }

func (LogsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logset)(nil)).Elem()
}

func (o LogsetOutput) ToLogsetOutput() LogsetOutput {
	return o
}

func (o LogsetOutput) ToLogsetOutputWithContext(ctx context.Context) LogsetOutput {
	return o
}

// Creation time.
func (o LogsetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Logset) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Logset name, which must be unique.
func (o LogsetOutput) LogsetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logset) pulumi.StringOutput { return v.LogsetName }).(pulumi.StringOutput)
}

// If assumerUin is not empty, it indicates the service provider who creates the logset.
func (o LogsetOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *Logset) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// Tag description list.
func (o LogsetOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Logset) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Number of log topics in logset.
func (o LogsetOutput) TopicCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Logset) pulumi.IntOutput { return v.TopicCount }).(pulumi.IntOutput)
}

type LogsetArrayOutput struct{ *pulumi.OutputState }

func (LogsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logset)(nil)).Elem()
}

func (o LogsetArrayOutput) ToLogsetArrayOutput() LogsetArrayOutput {
	return o
}

func (o LogsetArrayOutput) ToLogsetArrayOutputWithContext(ctx context.Context) LogsetArrayOutput {
	return o
}

func (o LogsetArrayOutput) Index(i pulumi.IntInput) LogsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logset {
		return vs[0].([]*Logset)[vs[1].(int)]
	}).(LogsetOutput)
}

type LogsetMapOutput struct{ *pulumi.OutputState }

func (LogsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logset)(nil)).Elem()
}

func (o LogsetMapOutput) ToLogsetMapOutput() LogsetMapOutput {
	return o
}

func (o LogsetMapOutput) ToLogsetMapOutputWithContext(ctx context.Context) LogsetMapOutput {
	return o
}

func (o LogsetMapOutput) MapIndex(k pulumi.StringInput) LogsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logset {
		return vs[0].(map[string]*Logset)[vs[1].(string)]
	}).(LogsetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogsetInput)(nil)).Elem(), &Logset{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsetArrayInput)(nil)).Elem(), LogsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsetMapInput)(nil)).Elem(), LogsetMap{})
	pulumi.RegisterOutputType(LogsetOutput{})
	pulumi.RegisterOutputType(LogsetArrayOutput{})
	pulumi.RegisterOutputType(LogsetMapOutput{})
}
