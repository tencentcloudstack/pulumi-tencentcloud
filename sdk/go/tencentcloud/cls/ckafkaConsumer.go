// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cls

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cls ckafkaConsumer
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cls.NewCkafkaConsumer(ctx, "ckafkaConsumer", &Cls.CkafkaConsumerArgs{
//				Ckafka: &cls.CkafkaConsumerCkafkaArgs{
//					InstanceId:   pulumi.String("ckafka-qzoeaqx8"),
//					InstanceName: pulumi.String("ckafka-instance"),
//					TopicId:      pulumi.String("topic-c6tm4kpm"),
//					TopicName:    pulumi.String("name"),
//					Vip:          pulumi.String("172.16.112.23"),
//					Vport:        pulumi.String("9092"),
//				},
//				Compression: pulumi.Int(1),
//				Content: &cls.CkafkaConsumerContentArgs{
//					EnableTag: pulumi.Bool(true),
//					MetaFields: pulumi.StringArray{
//						pulumi.String("__FILENAME__"),
//						pulumi.String("__HOSTNAME__"),
//						pulumi.String("__PKGID__"),
//						pulumi.String("__SOURCE__"),
//						pulumi.String("__TIMESTAMP__"),
//					},
//					TagJsonNotTiled:   pulumi.Bool(true),
//					TimestampAccuracy: pulumi.Int(2),
//				},
//				NeedContent: pulumi.Bool(true),
//				TopicId:     pulumi.String("7e34a3a7-635e-4da8-9005-88106c1fde69"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cls ckafka_consumer can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer ckafka_consumer topic_id
//
// ```
type CkafkaConsumer struct {
	pulumi.CustomResourceState

	// ckafka info.
	Ckafka CkafkaConsumerCkafkaPtrOutput `pulumi:"ckafka"`
	// compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
	Compression pulumi.IntPtrOutput `pulumi:"compression"`
	// metadata information.
	Content CkafkaConsumerContentPtrOutput `pulumi:"content"`
	// whether to deliver the metadata information of the log.
	NeedContent pulumi.BoolPtrOutput `pulumi:"needContent"`
	// topic id.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewCkafkaConsumer registers a new resource with the given unique name, arguments, and options.
func NewCkafkaConsumer(ctx *pulumi.Context,
	name string, args *CkafkaConsumerArgs, opts ...pulumi.ResourceOption) (*CkafkaConsumer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CkafkaConsumer
	err := ctx.RegisterResource("tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCkafkaConsumer gets an existing CkafkaConsumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCkafkaConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CkafkaConsumerState, opts ...pulumi.ResourceOption) (*CkafkaConsumer, error) {
	var resource CkafkaConsumer
	err := ctx.ReadResource("tencentcloud:Cls/ckafkaConsumer:CkafkaConsumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CkafkaConsumer resources.
type ckafkaConsumerState struct {
	// ckafka info.
	Ckafka *CkafkaConsumerCkafka `pulumi:"ckafka"`
	// compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
	Compression *int `pulumi:"compression"`
	// metadata information.
	Content *CkafkaConsumerContent `pulumi:"content"`
	// whether to deliver the metadata information of the log.
	NeedContent *bool `pulumi:"needContent"`
	// topic id.
	TopicId *string `pulumi:"topicId"`
}

type CkafkaConsumerState struct {
	// ckafka info.
	Ckafka CkafkaConsumerCkafkaPtrInput
	// compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
	Compression pulumi.IntPtrInput
	// metadata information.
	Content CkafkaConsumerContentPtrInput
	// whether to deliver the metadata information of the log.
	NeedContent pulumi.BoolPtrInput
	// topic id.
	TopicId pulumi.StringPtrInput
}

func (CkafkaConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*ckafkaConsumerState)(nil)).Elem()
}

type ckafkaConsumerArgs struct {
	// ckafka info.
	Ckafka *CkafkaConsumerCkafka `pulumi:"ckafka"`
	// compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
	Compression *int `pulumi:"compression"`
	// metadata information.
	Content *CkafkaConsumerContent `pulumi:"content"`
	// whether to deliver the metadata information of the log.
	NeedContent *bool `pulumi:"needContent"`
	// topic id.
	TopicId string `pulumi:"topicId"`
}

// The set of arguments for constructing a CkafkaConsumer resource.
type CkafkaConsumerArgs struct {
	// ckafka info.
	Ckafka CkafkaConsumerCkafkaPtrInput
	// compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
	Compression pulumi.IntPtrInput
	// metadata information.
	Content CkafkaConsumerContentPtrInput
	// whether to deliver the metadata information of the log.
	NeedContent pulumi.BoolPtrInput
	// topic id.
	TopicId pulumi.StringInput
}

func (CkafkaConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ckafkaConsumerArgs)(nil)).Elem()
}

type CkafkaConsumerInput interface {
	pulumi.Input

	ToCkafkaConsumerOutput() CkafkaConsumerOutput
	ToCkafkaConsumerOutputWithContext(ctx context.Context) CkafkaConsumerOutput
}

func (*CkafkaConsumer) ElementType() reflect.Type {
	return reflect.TypeOf((**CkafkaConsumer)(nil)).Elem()
}

func (i *CkafkaConsumer) ToCkafkaConsumerOutput() CkafkaConsumerOutput {
	return i.ToCkafkaConsumerOutputWithContext(context.Background())
}

func (i *CkafkaConsumer) ToCkafkaConsumerOutputWithContext(ctx context.Context) CkafkaConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CkafkaConsumerOutput)
}

// CkafkaConsumerArrayInput is an input type that accepts CkafkaConsumerArray and CkafkaConsumerArrayOutput values.
// You can construct a concrete instance of `CkafkaConsumerArrayInput` via:
//
//	CkafkaConsumerArray{ CkafkaConsumerArgs{...} }
type CkafkaConsumerArrayInput interface {
	pulumi.Input

	ToCkafkaConsumerArrayOutput() CkafkaConsumerArrayOutput
	ToCkafkaConsumerArrayOutputWithContext(context.Context) CkafkaConsumerArrayOutput
}

type CkafkaConsumerArray []CkafkaConsumerInput

func (CkafkaConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CkafkaConsumer)(nil)).Elem()
}

func (i CkafkaConsumerArray) ToCkafkaConsumerArrayOutput() CkafkaConsumerArrayOutput {
	return i.ToCkafkaConsumerArrayOutputWithContext(context.Background())
}

func (i CkafkaConsumerArray) ToCkafkaConsumerArrayOutputWithContext(ctx context.Context) CkafkaConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CkafkaConsumerArrayOutput)
}

// CkafkaConsumerMapInput is an input type that accepts CkafkaConsumerMap and CkafkaConsumerMapOutput values.
// You can construct a concrete instance of `CkafkaConsumerMapInput` via:
//
//	CkafkaConsumerMap{ "key": CkafkaConsumerArgs{...} }
type CkafkaConsumerMapInput interface {
	pulumi.Input

	ToCkafkaConsumerMapOutput() CkafkaConsumerMapOutput
	ToCkafkaConsumerMapOutputWithContext(context.Context) CkafkaConsumerMapOutput
}

type CkafkaConsumerMap map[string]CkafkaConsumerInput

func (CkafkaConsumerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CkafkaConsumer)(nil)).Elem()
}

func (i CkafkaConsumerMap) ToCkafkaConsumerMapOutput() CkafkaConsumerMapOutput {
	return i.ToCkafkaConsumerMapOutputWithContext(context.Background())
}

func (i CkafkaConsumerMap) ToCkafkaConsumerMapOutputWithContext(ctx context.Context) CkafkaConsumerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CkafkaConsumerMapOutput)
}

type CkafkaConsumerOutput struct{ *pulumi.OutputState }

func (CkafkaConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CkafkaConsumer)(nil)).Elem()
}

func (o CkafkaConsumerOutput) ToCkafkaConsumerOutput() CkafkaConsumerOutput {
	return o
}

func (o CkafkaConsumerOutput) ToCkafkaConsumerOutputWithContext(ctx context.Context) CkafkaConsumerOutput {
	return o
}

// ckafka info.
func (o CkafkaConsumerOutput) Ckafka() CkafkaConsumerCkafkaPtrOutput {
	return o.ApplyT(func(v *CkafkaConsumer) CkafkaConsumerCkafkaPtrOutput { return v.Ckafka }).(CkafkaConsumerCkafkaPtrOutput)
}

// compression method. 0 for NONE, 2 for SNAPPY, 3 for LZ4.
func (o CkafkaConsumerOutput) Compression() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CkafkaConsumer) pulumi.IntPtrOutput { return v.Compression }).(pulumi.IntPtrOutput)
}

// metadata information.
func (o CkafkaConsumerOutput) Content() CkafkaConsumerContentPtrOutput {
	return o.ApplyT(func(v *CkafkaConsumer) CkafkaConsumerContentPtrOutput { return v.Content }).(CkafkaConsumerContentPtrOutput)
}

// whether to deliver the metadata information of the log.
func (o CkafkaConsumerOutput) NeedContent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CkafkaConsumer) pulumi.BoolPtrOutput { return v.NeedContent }).(pulumi.BoolPtrOutput)
}

// topic id.
func (o CkafkaConsumerOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *CkafkaConsumer) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

type CkafkaConsumerArrayOutput struct{ *pulumi.OutputState }

func (CkafkaConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CkafkaConsumer)(nil)).Elem()
}

func (o CkafkaConsumerArrayOutput) ToCkafkaConsumerArrayOutput() CkafkaConsumerArrayOutput {
	return o
}

func (o CkafkaConsumerArrayOutput) ToCkafkaConsumerArrayOutputWithContext(ctx context.Context) CkafkaConsumerArrayOutput {
	return o
}

func (o CkafkaConsumerArrayOutput) Index(i pulumi.IntInput) CkafkaConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CkafkaConsumer {
		return vs[0].([]*CkafkaConsumer)[vs[1].(int)]
	}).(CkafkaConsumerOutput)
}

type CkafkaConsumerMapOutput struct{ *pulumi.OutputState }

func (CkafkaConsumerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CkafkaConsumer)(nil)).Elem()
}

func (o CkafkaConsumerMapOutput) ToCkafkaConsumerMapOutput() CkafkaConsumerMapOutput {
	return o
}

func (o CkafkaConsumerMapOutput) ToCkafkaConsumerMapOutputWithContext(ctx context.Context) CkafkaConsumerMapOutput {
	return o
}

func (o CkafkaConsumerMapOutput) MapIndex(k pulumi.StringInput) CkafkaConsumerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CkafkaConsumer {
		return vs[0].(map[string]*CkafkaConsumer)[vs[1].(string)]
	}).(CkafkaConsumerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CkafkaConsumerInput)(nil)).Elem(), &CkafkaConsumer{})
	pulumi.RegisterInputType(reflect.TypeOf((*CkafkaConsumerArrayInput)(nil)).Elem(), CkafkaConsumerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CkafkaConsumerMapInput)(nil)).Elem(), CkafkaConsumerMap{})
	pulumi.RegisterOutputType(CkafkaConsumerOutput{})
	pulumi.RegisterOutputType(CkafkaConsumerArrayOutput{})
	pulumi.RegisterOutputType(CkafkaConsumerMapOutput{})
}
