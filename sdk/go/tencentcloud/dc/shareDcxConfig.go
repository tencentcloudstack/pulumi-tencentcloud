// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dc shareDcxConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dc.NewShareDcxConfig(ctx, "shareDcxConfig", &Dc.ShareDcxConfigArgs{
//				DirectConnectTunnelId: pulumi.String("dcx-4z49tnws"),
//				Enable:                pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dc share_dcx_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dc/shareDcxConfig:ShareDcxConfig share_dcx_config dcx_id
//
// ```
type ShareDcxConfig struct {
	pulumi.CustomResourceState

	// the direct connect owner accept or reject the apply of direct connect tunnel.
	DirectConnectTunnelId pulumi.StringOutput `pulumi:"directConnectTunnelId"`
	// if accept or reject direct connect tunnel.
	Enable pulumi.BoolOutput `pulumi:"enable"`
}

// NewShareDcxConfig registers a new resource with the given unique name, arguments, and options.
func NewShareDcxConfig(ctx *pulumi.Context,
	name string, args *ShareDcxConfigArgs, opts ...pulumi.ResourceOption) (*ShareDcxConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectConnectTunnelId == nil {
		return nil, errors.New("invalid value for required argument 'DirectConnectTunnelId'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ShareDcxConfig
	err := ctx.RegisterResource("tencentcloud:Dc/shareDcxConfig:ShareDcxConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShareDcxConfig gets an existing ShareDcxConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShareDcxConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShareDcxConfigState, opts ...pulumi.ResourceOption) (*ShareDcxConfig, error) {
	var resource ShareDcxConfig
	err := ctx.ReadResource("tencentcloud:Dc/shareDcxConfig:ShareDcxConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ShareDcxConfig resources.
type shareDcxConfigState struct {
	// the direct connect owner accept or reject the apply of direct connect tunnel.
	DirectConnectTunnelId *string `pulumi:"directConnectTunnelId"`
	// if accept or reject direct connect tunnel.
	Enable *bool `pulumi:"enable"`
}

type ShareDcxConfigState struct {
	// the direct connect owner accept or reject the apply of direct connect tunnel.
	DirectConnectTunnelId pulumi.StringPtrInput
	// if accept or reject direct connect tunnel.
	Enable pulumi.BoolPtrInput
}

func (ShareDcxConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*shareDcxConfigState)(nil)).Elem()
}

type shareDcxConfigArgs struct {
	// the direct connect owner accept or reject the apply of direct connect tunnel.
	DirectConnectTunnelId string `pulumi:"directConnectTunnelId"`
	// if accept or reject direct connect tunnel.
	Enable bool `pulumi:"enable"`
}

// The set of arguments for constructing a ShareDcxConfig resource.
type ShareDcxConfigArgs struct {
	// the direct connect owner accept or reject the apply of direct connect tunnel.
	DirectConnectTunnelId pulumi.StringInput
	// if accept or reject direct connect tunnel.
	Enable pulumi.BoolInput
}

func (ShareDcxConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shareDcxConfigArgs)(nil)).Elem()
}

type ShareDcxConfigInput interface {
	pulumi.Input

	ToShareDcxConfigOutput() ShareDcxConfigOutput
	ToShareDcxConfigOutputWithContext(ctx context.Context) ShareDcxConfigOutput
}

func (*ShareDcxConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareDcxConfig)(nil)).Elem()
}

func (i *ShareDcxConfig) ToShareDcxConfigOutput() ShareDcxConfigOutput {
	return i.ToShareDcxConfigOutputWithContext(context.Background())
}

func (i *ShareDcxConfig) ToShareDcxConfigOutputWithContext(ctx context.Context) ShareDcxConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareDcxConfigOutput)
}

// ShareDcxConfigArrayInput is an input type that accepts ShareDcxConfigArray and ShareDcxConfigArrayOutput values.
// You can construct a concrete instance of `ShareDcxConfigArrayInput` via:
//
//	ShareDcxConfigArray{ ShareDcxConfigArgs{...} }
type ShareDcxConfigArrayInput interface {
	pulumi.Input

	ToShareDcxConfigArrayOutput() ShareDcxConfigArrayOutput
	ToShareDcxConfigArrayOutputWithContext(context.Context) ShareDcxConfigArrayOutput
}

type ShareDcxConfigArray []ShareDcxConfigInput

func (ShareDcxConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShareDcxConfig)(nil)).Elem()
}

func (i ShareDcxConfigArray) ToShareDcxConfigArrayOutput() ShareDcxConfigArrayOutput {
	return i.ToShareDcxConfigArrayOutputWithContext(context.Background())
}

func (i ShareDcxConfigArray) ToShareDcxConfigArrayOutputWithContext(ctx context.Context) ShareDcxConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareDcxConfigArrayOutput)
}

// ShareDcxConfigMapInput is an input type that accepts ShareDcxConfigMap and ShareDcxConfigMapOutput values.
// You can construct a concrete instance of `ShareDcxConfigMapInput` via:
//
//	ShareDcxConfigMap{ "key": ShareDcxConfigArgs{...} }
type ShareDcxConfigMapInput interface {
	pulumi.Input

	ToShareDcxConfigMapOutput() ShareDcxConfigMapOutput
	ToShareDcxConfigMapOutputWithContext(context.Context) ShareDcxConfigMapOutput
}

type ShareDcxConfigMap map[string]ShareDcxConfigInput

func (ShareDcxConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShareDcxConfig)(nil)).Elem()
}

func (i ShareDcxConfigMap) ToShareDcxConfigMapOutput() ShareDcxConfigMapOutput {
	return i.ToShareDcxConfigMapOutputWithContext(context.Background())
}

func (i ShareDcxConfigMap) ToShareDcxConfigMapOutputWithContext(ctx context.Context) ShareDcxConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShareDcxConfigMapOutput)
}

type ShareDcxConfigOutput struct{ *pulumi.OutputState }

func (ShareDcxConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShareDcxConfig)(nil)).Elem()
}

func (o ShareDcxConfigOutput) ToShareDcxConfigOutput() ShareDcxConfigOutput {
	return o
}

func (o ShareDcxConfigOutput) ToShareDcxConfigOutputWithContext(ctx context.Context) ShareDcxConfigOutput {
	return o
}

// the direct connect owner accept or reject the apply of direct connect tunnel.
func (o ShareDcxConfigOutput) DirectConnectTunnelId() pulumi.StringOutput {
	return o.ApplyT(func(v *ShareDcxConfig) pulumi.StringOutput { return v.DirectConnectTunnelId }).(pulumi.StringOutput)
}

// if accept or reject direct connect tunnel.
func (o ShareDcxConfigOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ShareDcxConfig) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

type ShareDcxConfigArrayOutput struct{ *pulumi.OutputState }

func (ShareDcxConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ShareDcxConfig)(nil)).Elem()
}

func (o ShareDcxConfigArrayOutput) ToShareDcxConfigArrayOutput() ShareDcxConfigArrayOutput {
	return o
}

func (o ShareDcxConfigArrayOutput) ToShareDcxConfigArrayOutputWithContext(ctx context.Context) ShareDcxConfigArrayOutput {
	return o
}

func (o ShareDcxConfigArrayOutput) Index(i pulumi.IntInput) ShareDcxConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ShareDcxConfig {
		return vs[0].([]*ShareDcxConfig)[vs[1].(int)]
	}).(ShareDcxConfigOutput)
}

type ShareDcxConfigMapOutput struct{ *pulumi.OutputState }

func (ShareDcxConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ShareDcxConfig)(nil)).Elem()
}

func (o ShareDcxConfigMapOutput) ToShareDcxConfigMapOutput() ShareDcxConfigMapOutput {
	return o
}

func (o ShareDcxConfigMapOutput) ToShareDcxConfigMapOutputWithContext(ctx context.Context) ShareDcxConfigMapOutput {
	return o
}

func (o ShareDcxConfigMapOutput) MapIndex(k pulumi.StringInput) ShareDcxConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ShareDcxConfig {
		return vs[0].(map[string]*ShareDcxConfig)[vs[1].(string)]
	}).(ShareDcxConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShareDcxConfigInput)(nil)).Elem(), &ShareDcxConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareDcxConfigArrayInput)(nil)).Elem(), ShareDcxConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShareDcxConfigMapInput)(nil)).Elem(), ShareDcxConfigMap{})
	pulumi.RegisterOutputType(ShareDcxConfigOutput{})
	pulumi.RegisterOutputType(ShareDcxConfigArrayOutput{})
	pulumi.RegisterOutputType(ShareDcxConfigMapOutput{})
}
