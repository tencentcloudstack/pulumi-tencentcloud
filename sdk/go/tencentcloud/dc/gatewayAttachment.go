// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dcGatewayAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dc.NewGatewayAttachment(ctx, "dcGatewayAttachment", &Dc.GatewayAttachmentArgs{
//				DirectConnectGatewayId: pulumi.String("dcg-dmbhf7jf"),
//				NatGatewayId:           pulumi.String("nat-7kanjc6y"),
//				VpcId:                  pulumi.String("vpc-4h9v4mo3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dc_gateway_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dc/gatewayAttachment:GatewayAttachment dc_gateway_attachment vpcId#dcgId#ngId
//
// ```
type GatewayAttachment struct {
	pulumi.CustomResourceState

	// DirectConnectGatewayId.
	DirectConnectGatewayId pulumi.StringOutput `pulumi:"directConnectGatewayId"`
	// NatGatewayId.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// vpc id.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewGatewayAttachment registers a new resource with the given unique name, arguments, and options.
func NewGatewayAttachment(ctx *pulumi.Context,
	name string, args *GatewayAttachmentArgs, opts ...pulumi.ResourceOption) (*GatewayAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectConnectGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'DirectConnectGatewayId'")
	}
	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GatewayAttachment
	err := ctx.RegisterResource("tencentcloud:Dc/gatewayAttachment:GatewayAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayAttachment gets an existing GatewayAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayAttachmentState, opts ...pulumi.ResourceOption) (*GatewayAttachment, error) {
	var resource GatewayAttachment
	err := ctx.ReadResource("tencentcloud:Dc/gatewayAttachment:GatewayAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayAttachment resources.
type gatewayAttachmentState struct {
	// DirectConnectGatewayId.
	DirectConnectGatewayId *string `pulumi:"directConnectGatewayId"`
	// NatGatewayId.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// vpc id.
	VpcId *string `pulumi:"vpcId"`
}

type GatewayAttachmentState struct {
	// DirectConnectGatewayId.
	DirectConnectGatewayId pulumi.StringPtrInput
	// NatGatewayId.
	NatGatewayId pulumi.StringPtrInput
	// vpc id.
	VpcId pulumi.StringPtrInput
}

func (GatewayAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAttachmentState)(nil)).Elem()
}

type gatewayAttachmentArgs struct {
	// DirectConnectGatewayId.
	DirectConnectGatewayId string `pulumi:"directConnectGatewayId"`
	// NatGatewayId.
	NatGatewayId string `pulumi:"natGatewayId"`
	// vpc id.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a GatewayAttachment resource.
type GatewayAttachmentArgs struct {
	// DirectConnectGatewayId.
	DirectConnectGatewayId pulumi.StringInput
	// NatGatewayId.
	NatGatewayId pulumi.StringInput
	// vpc id.
	VpcId pulumi.StringInput
}

func (GatewayAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAttachmentArgs)(nil)).Elem()
}

type GatewayAttachmentInput interface {
	pulumi.Input

	ToGatewayAttachmentOutput() GatewayAttachmentOutput
	ToGatewayAttachmentOutputWithContext(ctx context.Context) GatewayAttachmentOutput
}

func (*GatewayAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAttachment)(nil)).Elem()
}

func (i *GatewayAttachment) ToGatewayAttachmentOutput() GatewayAttachmentOutput {
	return i.ToGatewayAttachmentOutputWithContext(context.Background())
}

func (i *GatewayAttachment) ToGatewayAttachmentOutputWithContext(ctx context.Context) GatewayAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAttachmentOutput)
}

// GatewayAttachmentArrayInput is an input type that accepts GatewayAttachmentArray and GatewayAttachmentArrayOutput values.
// You can construct a concrete instance of `GatewayAttachmentArrayInput` via:
//
//	GatewayAttachmentArray{ GatewayAttachmentArgs{...} }
type GatewayAttachmentArrayInput interface {
	pulumi.Input

	ToGatewayAttachmentArrayOutput() GatewayAttachmentArrayOutput
	ToGatewayAttachmentArrayOutputWithContext(context.Context) GatewayAttachmentArrayOutput
}

type GatewayAttachmentArray []GatewayAttachmentInput

func (GatewayAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAttachment)(nil)).Elem()
}

func (i GatewayAttachmentArray) ToGatewayAttachmentArrayOutput() GatewayAttachmentArrayOutput {
	return i.ToGatewayAttachmentArrayOutputWithContext(context.Background())
}

func (i GatewayAttachmentArray) ToGatewayAttachmentArrayOutputWithContext(ctx context.Context) GatewayAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAttachmentArrayOutput)
}

// GatewayAttachmentMapInput is an input type that accepts GatewayAttachmentMap and GatewayAttachmentMapOutput values.
// You can construct a concrete instance of `GatewayAttachmentMapInput` via:
//
//	GatewayAttachmentMap{ "key": GatewayAttachmentArgs{...} }
type GatewayAttachmentMapInput interface {
	pulumi.Input

	ToGatewayAttachmentMapOutput() GatewayAttachmentMapOutput
	ToGatewayAttachmentMapOutputWithContext(context.Context) GatewayAttachmentMapOutput
}

type GatewayAttachmentMap map[string]GatewayAttachmentInput

func (GatewayAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAttachment)(nil)).Elem()
}

func (i GatewayAttachmentMap) ToGatewayAttachmentMapOutput() GatewayAttachmentMapOutput {
	return i.ToGatewayAttachmentMapOutputWithContext(context.Background())
}

func (i GatewayAttachmentMap) ToGatewayAttachmentMapOutputWithContext(ctx context.Context) GatewayAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAttachmentMapOutput)
}

type GatewayAttachmentOutput struct{ *pulumi.OutputState }

func (GatewayAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAttachment)(nil)).Elem()
}

func (o GatewayAttachmentOutput) ToGatewayAttachmentOutput() GatewayAttachmentOutput {
	return o
}

func (o GatewayAttachmentOutput) ToGatewayAttachmentOutputWithContext(ctx context.Context) GatewayAttachmentOutput {
	return o
}

// DirectConnectGatewayId.
func (o GatewayAttachmentOutput) DirectConnectGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAttachment) pulumi.StringOutput { return v.DirectConnectGatewayId }).(pulumi.StringOutput)
}

// NatGatewayId.
func (o GatewayAttachmentOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAttachment) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// vpc id.
func (o GatewayAttachmentOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAttachment) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type GatewayAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GatewayAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAttachment)(nil)).Elem()
}

func (o GatewayAttachmentArrayOutput) ToGatewayAttachmentArrayOutput() GatewayAttachmentArrayOutput {
	return o
}

func (o GatewayAttachmentArrayOutput) ToGatewayAttachmentArrayOutputWithContext(ctx context.Context) GatewayAttachmentArrayOutput {
	return o
}

func (o GatewayAttachmentArrayOutput) Index(i pulumi.IntInput) GatewayAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayAttachment {
		return vs[0].([]*GatewayAttachment)[vs[1].(int)]
	}).(GatewayAttachmentOutput)
}

type GatewayAttachmentMapOutput struct{ *pulumi.OutputState }

func (GatewayAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAttachment)(nil)).Elem()
}

func (o GatewayAttachmentMapOutput) ToGatewayAttachmentMapOutput() GatewayAttachmentMapOutput {
	return o
}

func (o GatewayAttachmentMapOutput) ToGatewayAttachmentMapOutputWithContext(ctx context.Context) GatewayAttachmentMapOutput {
	return o
}

func (o GatewayAttachmentMapOutput) MapIndex(k pulumi.StringInput) GatewayAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayAttachment {
		return vs[0].(map[string]*GatewayAttachment)[vs[1].(string)]
	}).(GatewayAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAttachmentInput)(nil)).Elem(), &GatewayAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAttachmentArrayInput)(nil)).Elem(), GatewayAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAttachmentMapInput)(nil)).Elem(), GatewayAttachmentMap{})
	pulumi.RegisterOutputType(GatewayAttachmentOutput{})
	pulumi.RegisterOutputType(GatewayAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GatewayAttachmentMapOutput{})
}
