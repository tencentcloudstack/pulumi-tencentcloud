// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package security

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of security groups.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Security.GetGroups(ctx, &security.GetGroupsArgs{
//				SecurityGroupId: pulumi.StringRef(tencentcloud_security_group.Sglab.Id),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetGroups(ctx *pulumi.Context, args *GetGroupsArgs, opts ...pulumi.InvokeOption) (*GetGroupsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetGroupsResult
	err := ctx.Invoke("tencentcloud:Security/getGroups:getGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroups.
type GetGroupsArgs struct {
	// Name of the security group to be queried. Conflict with `securityGroupId`.
	Name *string `pulumi:"name"`
	// Project ID of the security group to be queried. Conflict with `securityGroupId`.
	ProjectId *int `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the security group to be queried. Conflict with `name` and `projectId`.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Tags of the security group to be queried. Conflict with `securityGroupId`.
	Tags map[string]interface{} `pulumi:"tags"`
}

// A collection of values returned by getGroups.
type GetGroupsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the security group.
	Name *string `pulumi:"name"`
	// Project ID of the security group.
	ProjectId        *int    `pulumi:"projectId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the security group.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// Information list of security group.
	SecurityGroups []GetGroupsSecurityGroup `pulumi:"securityGroups"`
	// Tags of the security group.
	Tags map[string]interface{} `pulumi:"tags"`
}

func GetGroupsOutput(ctx *pulumi.Context, args GetGroupsOutputArgs, opts ...pulumi.InvokeOption) GetGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGroupsResult, error) {
			args := v.(GetGroupsArgs)
			r, err := GetGroups(ctx, &args, opts...)
			var s GetGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetGroupsResultOutput)
}

// A collection of arguments for invoking getGroups.
type GetGroupsOutputArgs struct {
	// Name of the security group to be queried. Conflict with `securityGroupId`.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Project ID of the security group to be queried. Conflict with `securityGroupId`.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// ID of the security group to be queried. Conflict with `name` and `projectId`.
	SecurityGroupId pulumi.StringPtrInput `pulumi:"securityGroupId"`
	// Tags of the security group to be queried. Conflict with `securityGroupId`.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (GetGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getGroups.
type GetGroupsResultOutput struct{ *pulumi.OutputState }

func (GetGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsResult)(nil)).Elem()
}

func (o GetGroupsResultOutput) ToGetGroupsResultOutput() GetGroupsResultOutput {
	return o
}

func (o GetGroupsResultOutput) ToGetGroupsResultOutputWithContext(ctx context.Context) GetGroupsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the security group.
func (o GetGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Project ID of the security group.
func (o GetGroupsResultOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetGroupsResult) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

func (o GetGroupsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// ID of the security group.
func (o GetGroupsResultOutput) SecurityGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupsResult) *string { return v.SecurityGroupId }).(pulumi.StringPtrOutput)
}

// Information list of security group.
func (o GetGroupsResultOutput) SecurityGroups() GetGroupsSecurityGroupArrayOutput {
	return o.ApplyT(func(v GetGroupsResult) []GetGroupsSecurityGroup { return v.SecurityGroups }).(GetGroupsSecurityGroupArrayOutput)
}

// Tags of the security group.
func (o GetGroupsResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetGroupsResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupsResultOutput{})
}
