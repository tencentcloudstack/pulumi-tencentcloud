// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfw edgeFirewallSwitch
//
// ## Example Usage
// ### If not set subnetId
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEdgeFwSwitches, err := Cfw.GetEdgeFwSwitches(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cfw.NewEdgeFirewallSwitch(ctx, "exampleEdgeFirewallSwitch", &Cfw.EdgeFirewallSwitchArgs{
//				PublicIp:   pulumi.String(exampleEdgeFwSwitches.Datas[0].PublicIp),
//				SwitchMode: pulumi.Int(1),
//				Enable:     pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### If set subnet id
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleEdgeFwSwitches, err := Cfw.GetEdgeFwSwitches(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cfw.NewEdgeFirewallSwitch(ctx, "exampleEdgeFirewallSwitch", &Cfw.EdgeFirewallSwitchArgs{
//				PublicIp:   pulumi.String(exampleEdgeFwSwitches.Datas[0].PublicIp),
//				SubnetId:   pulumi.String("subnet-id"),
//				SwitchMode: pulumi.Int(1),
//				Enable:     pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EdgeFirewallSwitch struct {
	pulumi.CustomResourceState

	// Switch, 0: off, 1: on.
	Enable pulumi.IntOutput `pulumi:"enable"`
	// Public Ip.
	PublicIp pulumi.StringOutput `pulumi:"publicIp"`
	// The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switchMode` is 1 and `enable` is 1, this field is required.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// 0: bypass; 1: serial.
	SwitchMode pulumi.IntOutput `pulumi:"switchMode"`
}

// NewEdgeFirewallSwitch registers a new resource with the given unique name, arguments, and options.
func NewEdgeFirewallSwitch(ctx *pulumi.Context,
	name string, args *EdgeFirewallSwitchArgs, opts ...pulumi.ResourceOption) (*EdgeFirewallSwitch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.PublicIp == nil {
		return nil, errors.New("invalid value for required argument 'PublicIp'")
	}
	if args.SwitchMode == nil {
		return nil, errors.New("invalid value for required argument 'SwitchMode'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EdgeFirewallSwitch
	err := ctx.RegisterResource("tencentcloud:Cfw/edgeFirewallSwitch:EdgeFirewallSwitch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeFirewallSwitch gets an existing EdgeFirewallSwitch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeFirewallSwitch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeFirewallSwitchState, opts ...pulumi.ResourceOption) (*EdgeFirewallSwitch, error) {
	var resource EdgeFirewallSwitch
	err := ctx.ReadResource("tencentcloud:Cfw/edgeFirewallSwitch:EdgeFirewallSwitch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeFirewallSwitch resources.
type edgeFirewallSwitchState struct {
	// Switch, 0: off, 1: on.
	Enable *int `pulumi:"enable"`
	// Public Ip.
	PublicIp *string `pulumi:"publicIp"`
	// The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switchMode` is 1 and `enable` is 1, this field is required.
	SubnetId *string `pulumi:"subnetId"`
	// 0: bypass; 1: serial.
	SwitchMode *int `pulumi:"switchMode"`
}

type EdgeFirewallSwitchState struct {
	// Switch, 0: off, 1: on.
	Enable pulumi.IntPtrInput
	// Public Ip.
	PublicIp pulumi.StringPtrInput
	// The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switchMode` is 1 and `enable` is 1, this field is required.
	SubnetId pulumi.StringPtrInput
	// 0: bypass; 1: serial.
	SwitchMode pulumi.IntPtrInput
}

func (EdgeFirewallSwitchState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeFirewallSwitchState)(nil)).Elem()
}

type edgeFirewallSwitchArgs struct {
	// Switch, 0: off, 1: on.
	Enable int `pulumi:"enable"`
	// Public Ip.
	PublicIp string `pulumi:"publicIp"`
	// The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switchMode` is 1 and `enable` is 1, this field is required.
	SubnetId *string `pulumi:"subnetId"`
	// 0: bypass; 1: serial.
	SwitchMode int `pulumi:"switchMode"`
}

// The set of arguments for constructing a EdgeFirewallSwitch resource.
type EdgeFirewallSwitchArgs struct {
	// Switch, 0: off, 1: on.
	Enable pulumi.IntInput
	// Public Ip.
	PublicIp pulumi.StringInput
	// The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switchMode` is 1 and `enable` is 1, this field is required.
	SubnetId pulumi.StringPtrInput
	// 0: bypass; 1: serial.
	SwitchMode pulumi.IntInput
}

func (EdgeFirewallSwitchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeFirewallSwitchArgs)(nil)).Elem()
}

type EdgeFirewallSwitchInput interface {
	pulumi.Input

	ToEdgeFirewallSwitchOutput() EdgeFirewallSwitchOutput
	ToEdgeFirewallSwitchOutputWithContext(ctx context.Context) EdgeFirewallSwitchOutput
}

func (*EdgeFirewallSwitch) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeFirewallSwitch)(nil)).Elem()
}

func (i *EdgeFirewallSwitch) ToEdgeFirewallSwitchOutput() EdgeFirewallSwitchOutput {
	return i.ToEdgeFirewallSwitchOutputWithContext(context.Background())
}

func (i *EdgeFirewallSwitch) ToEdgeFirewallSwitchOutputWithContext(ctx context.Context) EdgeFirewallSwitchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeFirewallSwitchOutput)
}

// EdgeFirewallSwitchArrayInput is an input type that accepts EdgeFirewallSwitchArray and EdgeFirewallSwitchArrayOutput values.
// You can construct a concrete instance of `EdgeFirewallSwitchArrayInput` via:
//
//	EdgeFirewallSwitchArray{ EdgeFirewallSwitchArgs{...} }
type EdgeFirewallSwitchArrayInput interface {
	pulumi.Input

	ToEdgeFirewallSwitchArrayOutput() EdgeFirewallSwitchArrayOutput
	ToEdgeFirewallSwitchArrayOutputWithContext(context.Context) EdgeFirewallSwitchArrayOutput
}

type EdgeFirewallSwitchArray []EdgeFirewallSwitchInput

func (EdgeFirewallSwitchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeFirewallSwitch)(nil)).Elem()
}

func (i EdgeFirewallSwitchArray) ToEdgeFirewallSwitchArrayOutput() EdgeFirewallSwitchArrayOutput {
	return i.ToEdgeFirewallSwitchArrayOutputWithContext(context.Background())
}

func (i EdgeFirewallSwitchArray) ToEdgeFirewallSwitchArrayOutputWithContext(ctx context.Context) EdgeFirewallSwitchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeFirewallSwitchArrayOutput)
}

// EdgeFirewallSwitchMapInput is an input type that accepts EdgeFirewallSwitchMap and EdgeFirewallSwitchMapOutput values.
// You can construct a concrete instance of `EdgeFirewallSwitchMapInput` via:
//
//	EdgeFirewallSwitchMap{ "key": EdgeFirewallSwitchArgs{...} }
type EdgeFirewallSwitchMapInput interface {
	pulumi.Input

	ToEdgeFirewallSwitchMapOutput() EdgeFirewallSwitchMapOutput
	ToEdgeFirewallSwitchMapOutputWithContext(context.Context) EdgeFirewallSwitchMapOutput
}

type EdgeFirewallSwitchMap map[string]EdgeFirewallSwitchInput

func (EdgeFirewallSwitchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeFirewallSwitch)(nil)).Elem()
}

func (i EdgeFirewallSwitchMap) ToEdgeFirewallSwitchMapOutput() EdgeFirewallSwitchMapOutput {
	return i.ToEdgeFirewallSwitchMapOutputWithContext(context.Background())
}

func (i EdgeFirewallSwitchMap) ToEdgeFirewallSwitchMapOutputWithContext(ctx context.Context) EdgeFirewallSwitchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeFirewallSwitchMapOutput)
}

type EdgeFirewallSwitchOutput struct{ *pulumi.OutputState }

func (EdgeFirewallSwitchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeFirewallSwitch)(nil)).Elem()
}

func (o EdgeFirewallSwitchOutput) ToEdgeFirewallSwitchOutput() EdgeFirewallSwitchOutput {
	return o
}

func (o EdgeFirewallSwitchOutput) ToEdgeFirewallSwitchOutputWithContext(ctx context.Context) EdgeFirewallSwitchOutput {
	return o
}

// Switch, 0: off, 1: on.
func (o EdgeFirewallSwitchOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeFirewallSwitch) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// Public Ip.
func (o EdgeFirewallSwitchOutput) PublicIp() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeFirewallSwitch) pulumi.StringOutput { return v.PublicIp }).(pulumi.StringOutput)
}

// The first EIP switch in the vpc is turned on, and you need to specify a subnet to create a private connection. If `switchMode` is 1 and `enable` is 1, this field is required.
func (o EdgeFirewallSwitchOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EdgeFirewallSwitch) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// 0: bypass; 1: serial.
func (o EdgeFirewallSwitchOutput) SwitchMode() pulumi.IntOutput {
	return o.ApplyT(func(v *EdgeFirewallSwitch) pulumi.IntOutput { return v.SwitchMode }).(pulumi.IntOutput)
}

type EdgeFirewallSwitchArrayOutput struct{ *pulumi.OutputState }

func (EdgeFirewallSwitchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeFirewallSwitch)(nil)).Elem()
}

func (o EdgeFirewallSwitchArrayOutput) ToEdgeFirewallSwitchArrayOutput() EdgeFirewallSwitchArrayOutput {
	return o
}

func (o EdgeFirewallSwitchArrayOutput) ToEdgeFirewallSwitchArrayOutputWithContext(ctx context.Context) EdgeFirewallSwitchArrayOutput {
	return o
}

func (o EdgeFirewallSwitchArrayOutput) Index(i pulumi.IntInput) EdgeFirewallSwitchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeFirewallSwitch {
		return vs[0].([]*EdgeFirewallSwitch)[vs[1].(int)]
	}).(EdgeFirewallSwitchOutput)
}

type EdgeFirewallSwitchMapOutput struct{ *pulumi.OutputState }

func (EdgeFirewallSwitchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeFirewallSwitch)(nil)).Elem()
}

func (o EdgeFirewallSwitchMapOutput) ToEdgeFirewallSwitchMapOutput() EdgeFirewallSwitchMapOutput {
	return o
}

func (o EdgeFirewallSwitchMapOutput) ToEdgeFirewallSwitchMapOutputWithContext(ctx context.Context) EdgeFirewallSwitchMapOutput {
	return o
}

func (o EdgeFirewallSwitchMapOutput) MapIndex(k pulumi.StringInput) EdgeFirewallSwitchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeFirewallSwitch {
		return vs[0].(map[string]*EdgeFirewallSwitch)[vs[1].(string)]
	}).(EdgeFirewallSwitchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeFirewallSwitchInput)(nil)).Elem(), &EdgeFirewallSwitch{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeFirewallSwitchArrayInput)(nil)).Elem(), EdgeFirewallSwitchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeFirewallSwitchMapInput)(nil)).Elem(), EdgeFirewallSwitchMap{})
	pulumi.RegisterOutputType(EdgeFirewallSwitchOutput{})
	pulumi.RegisterOutputType(EdgeFirewallSwitchArrayOutput{})
	pulumi.RegisterOutputType(EdgeFirewallSwitchMapOutput{})
}
