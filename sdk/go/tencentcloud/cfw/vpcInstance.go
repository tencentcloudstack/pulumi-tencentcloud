// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfw vpcInstance
//
// ## Example Usage
// ### If mode is 0
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewVpcInstance(ctx, "example", &Cfw.VpcInstanceArgs{
//				FwVpcCidr:  pulumi.String("auto"),
//				Mode:       pulumi.Int(0),
//				SwitchMode: pulumi.Int(1),
//				VpcFwInstances: cfw.VpcInstanceVpcFwInstanceArray{
//					&cfw.VpcInstanceVpcFwInstanceArgs{
//						FwDeploy: &cfw.VpcInstanceVpcFwInstanceFwDeployArgs{
//							CrossAZone:   pulumi.Int(1),
//							DeployRegion: pulumi.String("ap-guangzhou"),
//							Width:        pulumi.Int(1024),
//							ZoneSet: []string{
//								"ap-guangzhou-6",
//								"ap-guangzhou-7",
//							},
//						},
//						Name: pulumi.String("fw_ins_example"),
//						VpcIds: pulumi.StringArray{
//							pulumi.String("vpc-291vnoeu"),
//							pulumi.String("vpc-39ixq9ci"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### If mode is 1
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewVpcInstance(ctx, "example", &Cfw.VpcInstanceArgs{
//				CcnId:      pulumi.String("ccn-peihfqo7"),
//				FwVpcCidr:  pulumi.String("auto"),
//				Mode:       pulumi.Int(1),
//				SwitchMode: pulumi.Int(1),
//				VpcFwInstances: cfw.VpcInstanceVpcFwInstanceArray{
//					&cfw.VpcInstanceVpcFwInstanceArgs{
//						FwDeploy: &cfw.VpcInstanceVpcFwInstanceFwDeployArgs{
//							CrossAZone:   pulumi.Int(0),
//							DeployRegion: pulumi.String("ap-guangzhou"),
//							Width:        pulumi.Int(1024),
//							ZoneSet: []string{
//								"ap-guangzhou-6",
//							},
//						},
//						Name: pulumi.String("fw_ins_example"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cfw vpc_instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cfw/vpcInstance:VpcInstance example cfwg-4ee69507
//
// ```
type VpcInstance struct {
	pulumi.CustomResourceState

	// Cloud networking id, suitable for cloud networking mode.
	CcnId pulumi.StringPtrOutput `pulumi:"ccnId"`
	// auto Automatically select the firewall network segment; 10.10.10.0/24 The firewall network segment entered by the user.
	FwVpcCidr pulumi.StringPtrOutput `pulumi:"fwVpcCidr"`
	// Mode 0: private network mode; 1: CCN cloud networking mode.
	Mode pulumi.IntOutput `pulumi:"mode"`
	// VPC firewall (group) name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Switch mode of firewall instance. 1: Single point intercommunication; 2: Multi-point communication; 4: Custom Routing.
	SwitchMode pulumi.IntOutput `pulumi:"switchMode"`
	// List of firewall instances under firewall (group).
	VpcFwInstances VpcInstanceVpcFwInstanceArrayOutput `pulumi:"vpcFwInstances"`
}

// NewVpcInstance registers a new resource with the given unique name, arguments, and options.
func NewVpcInstance(ctx *pulumi.Context,
	name string, args *VpcInstanceArgs, opts ...pulumi.ResourceOption) (*VpcInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.SwitchMode == nil {
		return nil, errors.New("invalid value for required argument 'SwitchMode'")
	}
	if args.VpcFwInstances == nil {
		return nil, errors.New("invalid value for required argument 'VpcFwInstances'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpcInstance
	err := ctx.RegisterResource("tencentcloud:Cfw/vpcInstance:VpcInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcInstance gets an existing VpcInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcInstanceState, opts ...pulumi.ResourceOption) (*VpcInstance, error) {
	var resource VpcInstance
	err := ctx.ReadResource("tencentcloud:Cfw/vpcInstance:VpcInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcInstance resources.
type vpcInstanceState struct {
	// Cloud networking id, suitable for cloud networking mode.
	CcnId *string `pulumi:"ccnId"`
	// auto Automatically select the firewall network segment; 10.10.10.0/24 The firewall network segment entered by the user.
	FwVpcCidr *string `pulumi:"fwVpcCidr"`
	// Mode 0: private network mode; 1: CCN cloud networking mode.
	Mode *int `pulumi:"mode"`
	// VPC firewall (group) name.
	Name *string `pulumi:"name"`
	// Switch mode of firewall instance. 1: Single point intercommunication; 2: Multi-point communication; 4: Custom Routing.
	SwitchMode *int `pulumi:"switchMode"`
	// List of firewall instances under firewall (group).
	VpcFwInstances []VpcInstanceVpcFwInstance `pulumi:"vpcFwInstances"`
}

type VpcInstanceState struct {
	// Cloud networking id, suitable for cloud networking mode.
	CcnId pulumi.StringPtrInput
	// auto Automatically select the firewall network segment; 10.10.10.0/24 The firewall network segment entered by the user.
	FwVpcCidr pulumi.StringPtrInput
	// Mode 0: private network mode; 1: CCN cloud networking mode.
	Mode pulumi.IntPtrInput
	// VPC firewall (group) name.
	Name pulumi.StringPtrInput
	// Switch mode of firewall instance. 1: Single point intercommunication; 2: Multi-point communication; 4: Custom Routing.
	SwitchMode pulumi.IntPtrInput
	// List of firewall instances under firewall (group).
	VpcFwInstances VpcInstanceVpcFwInstanceArrayInput
}

func (VpcInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcInstanceState)(nil)).Elem()
}

type vpcInstanceArgs struct {
	// Cloud networking id, suitable for cloud networking mode.
	CcnId *string `pulumi:"ccnId"`
	// auto Automatically select the firewall network segment; 10.10.10.0/24 The firewall network segment entered by the user.
	FwVpcCidr *string `pulumi:"fwVpcCidr"`
	// Mode 0: private network mode; 1: CCN cloud networking mode.
	Mode int `pulumi:"mode"`
	// VPC firewall (group) name.
	Name *string `pulumi:"name"`
	// Switch mode of firewall instance. 1: Single point intercommunication; 2: Multi-point communication; 4: Custom Routing.
	SwitchMode int `pulumi:"switchMode"`
	// List of firewall instances under firewall (group).
	VpcFwInstances []VpcInstanceVpcFwInstance `pulumi:"vpcFwInstances"`
}

// The set of arguments for constructing a VpcInstance resource.
type VpcInstanceArgs struct {
	// Cloud networking id, suitable for cloud networking mode.
	CcnId pulumi.StringPtrInput
	// auto Automatically select the firewall network segment; 10.10.10.0/24 The firewall network segment entered by the user.
	FwVpcCidr pulumi.StringPtrInput
	// Mode 0: private network mode; 1: CCN cloud networking mode.
	Mode pulumi.IntInput
	// VPC firewall (group) name.
	Name pulumi.StringPtrInput
	// Switch mode of firewall instance. 1: Single point intercommunication; 2: Multi-point communication; 4: Custom Routing.
	SwitchMode pulumi.IntInput
	// List of firewall instances under firewall (group).
	VpcFwInstances VpcInstanceVpcFwInstanceArrayInput
}

func (VpcInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcInstanceArgs)(nil)).Elem()
}

type VpcInstanceInput interface {
	pulumi.Input

	ToVpcInstanceOutput() VpcInstanceOutput
	ToVpcInstanceOutputWithContext(ctx context.Context) VpcInstanceOutput
}

func (*VpcInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcInstance)(nil)).Elem()
}

func (i *VpcInstance) ToVpcInstanceOutput() VpcInstanceOutput {
	return i.ToVpcInstanceOutputWithContext(context.Background())
}

func (i *VpcInstance) ToVpcInstanceOutputWithContext(ctx context.Context) VpcInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstanceOutput)
}

// VpcInstanceArrayInput is an input type that accepts VpcInstanceArray and VpcInstanceArrayOutput values.
// You can construct a concrete instance of `VpcInstanceArrayInput` via:
//
//	VpcInstanceArray{ VpcInstanceArgs{...} }
type VpcInstanceArrayInput interface {
	pulumi.Input

	ToVpcInstanceArrayOutput() VpcInstanceArrayOutput
	ToVpcInstanceArrayOutputWithContext(context.Context) VpcInstanceArrayOutput
}

type VpcInstanceArray []VpcInstanceInput

func (VpcInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcInstance)(nil)).Elem()
}

func (i VpcInstanceArray) ToVpcInstanceArrayOutput() VpcInstanceArrayOutput {
	return i.ToVpcInstanceArrayOutputWithContext(context.Background())
}

func (i VpcInstanceArray) ToVpcInstanceArrayOutputWithContext(ctx context.Context) VpcInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstanceArrayOutput)
}

// VpcInstanceMapInput is an input type that accepts VpcInstanceMap and VpcInstanceMapOutput values.
// You can construct a concrete instance of `VpcInstanceMapInput` via:
//
//	VpcInstanceMap{ "key": VpcInstanceArgs{...} }
type VpcInstanceMapInput interface {
	pulumi.Input

	ToVpcInstanceMapOutput() VpcInstanceMapOutput
	ToVpcInstanceMapOutputWithContext(context.Context) VpcInstanceMapOutput
}

type VpcInstanceMap map[string]VpcInstanceInput

func (VpcInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcInstance)(nil)).Elem()
}

func (i VpcInstanceMap) ToVpcInstanceMapOutput() VpcInstanceMapOutput {
	return i.ToVpcInstanceMapOutputWithContext(context.Background())
}

func (i VpcInstanceMap) ToVpcInstanceMapOutputWithContext(ctx context.Context) VpcInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcInstanceMapOutput)
}

type VpcInstanceOutput struct{ *pulumi.OutputState }

func (VpcInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcInstance)(nil)).Elem()
}

func (o VpcInstanceOutput) ToVpcInstanceOutput() VpcInstanceOutput {
	return o
}

func (o VpcInstanceOutput) ToVpcInstanceOutputWithContext(ctx context.Context) VpcInstanceOutput {
	return o
}

// Cloud networking id, suitable for cloud networking mode.
func (o VpcInstanceOutput) CcnId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.StringPtrOutput { return v.CcnId }).(pulumi.StringPtrOutput)
}

// auto Automatically select the firewall network segment; 10.10.10.0/24 The firewall network segment entered by the user.
func (o VpcInstanceOutput) FwVpcCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.StringPtrOutput { return v.FwVpcCidr }).(pulumi.StringPtrOutput)
}

// Mode 0: private network mode; 1: CCN cloud networking mode.
func (o VpcInstanceOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.IntOutput { return v.Mode }).(pulumi.IntOutput)
}

// VPC firewall (group) name.
func (o VpcInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Switch mode of firewall instance. 1: Single point intercommunication; 2: Multi-point communication; 4: Custom Routing.
func (o VpcInstanceOutput) SwitchMode() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcInstance) pulumi.IntOutput { return v.SwitchMode }).(pulumi.IntOutput)
}

// List of firewall instances under firewall (group).
func (o VpcInstanceOutput) VpcFwInstances() VpcInstanceVpcFwInstanceArrayOutput {
	return o.ApplyT(func(v *VpcInstance) VpcInstanceVpcFwInstanceArrayOutput { return v.VpcFwInstances }).(VpcInstanceVpcFwInstanceArrayOutput)
}

type VpcInstanceArrayOutput struct{ *pulumi.OutputState }

func (VpcInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcInstance)(nil)).Elem()
}

func (o VpcInstanceArrayOutput) ToVpcInstanceArrayOutput() VpcInstanceArrayOutput {
	return o
}

func (o VpcInstanceArrayOutput) ToVpcInstanceArrayOutputWithContext(ctx context.Context) VpcInstanceArrayOutput {
	return o
}

func (o VpcInstanceArrayOutput) Index(i pulumi.IntInput) VpcInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcInstance {
		return vs[0].([]*VpcInstance)[vs[1].(int)]
	}).(VpcInstanceOutput)
}

type VpcInstanceMapOutput struct{ *pulumi.OutputState }

func (VpcInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcInstance)(nil)).Elem()
}

func (o VpcInstanceMapOutput) ToVpcInstanceMapOutput() VpcInstanceMapOutput {
	return o
}

func (o VpcInstanceMapOutput) ToVpcInstanceMapOutputWithContext(ctx context.Context) VpcInstanceMapOutput {
	return o
}

func (o VpcInstanceMapOutput) MapIndex(k pulumi.StringInput) VpcInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcInstance {
		return vs[0].(map[string]*VpcInstance)[vs[1].(string)]
	}).(VpcInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstanceInput)(nil)).Elem(), &VpcInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstanceArrayInput)(nil)).Elem(), VpcInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInstanceMapInput)(nil)).Elem(), VpcInstanceMap{})
	pulumi.RegisterOutputType(VpcInstanceOutput{})
	pulumi.RegisterOutputType(VpcInstanceArrayOutput{})
	pulumi.RegisterOutputType(VpcInstanceMapOutput{})
}
