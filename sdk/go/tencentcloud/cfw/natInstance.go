// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfw natInstance
//
// ## Example Usage
// ### If mode is 0
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewNatInstance(ctx, "example", &Cfw.NatInstanceArgs{
//				CrossAZone: pulumi.Int(0),
//				Mode:       pulumi.Int(0),
//				NewModeItems: &cfw.NatInstanceNewModeItemsArgs{
//					Eips: pulumi.StringArray{
//						pulumi.String("152.136.168.192"),
//					},
//					VpcLists: pulumi.StringArray{
//						pulumi.String("vpc-5063ta4i"),
//					},
//				},
//				Width: pulumi.Int(20),
//				ZoneSets: pulumi.StringArray{
//					pulumi.String("ap-guangzhou-7"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### If mode is 1
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewNatInstance(ctx, "example", &Cfw.NatInstanceArgs{
//				CrossAZone: pulumi.Int(0),
//				Mode:       pulumi.Int(1),
//				NatGwLists: pulumi.StringArray{
//					pulumi.String("nat-9wwkz1kr"),
//				},
//				Width: pulumi.Int(20),
//				ZoneSets: pulumi.StringArray{
//					pulumi.String("ap-guangzhou-6"),
//					pulumi.String("ap-guangzhou-7"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cfw nat_instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cfw/natInstance:NatInstance example cfwnat-54a21421
//
// ```
type NatInstance struct {
	pulumi.CustomResourceState

	// Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the default is not to use off-site disaster recovery.
	CrossAZone pulumi.IntPtrOutput `pulumi:"crossAZone"`
	// Mode 1: access mode; 0: new mode.
	Mode pulumi.IntOutput `pulumi:"mode"`
	// Firewall instance name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
	NatGwLists pulumi.StringArrayOutput `pulumi:"natGwLists"`
	// New mode passing parameters are added, at least one of newModeItems and natGwList is passed.
	NewModeItems NatInstanceNewModeItemsPtrOutput `pulumi:"newModeItems"`
	// Bandwidth.
	Width pulumi.IntOutput `pulumi:"width"`
	// Zone list.
	ZoneSets pulumi.StringArrayOutput `pulumi:"zoneSets"`
}

// NewNatInstance registers a new resource with the given unique name, arguments, and options.
func NewNatInstance(ctx *pulumi.Context,
	name string, args *NatInstanceArgs, opts ...pulumi.ResourceOption) (*NatInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.Width == nil {
		return nil, errors.New("invalid value for required argument 'Width'")
	}
	if args.ZoneSets == nil {
		return nil, errors.New("invalid value for required argument 'ZoneSets'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NatInstance
	err := ctx.RegisterResource("tencentcloud:Cfw/natInstance:NatInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatInstance gets an existing NatInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatInstanceState, opts ...pulumi.ResourceOption) (*NatInstance, error) {
	var resource NatInstance
	err := ctx.ReadResource("tencentcloud:Cfw/natInstance:NatInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatInstance resources.
type natInstanceState struct {
	// Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the default is not to use off-site disaster recovery.
	CrossAZone *int `pulumi:"crossAZone"`
	// Mode 1: access mode; 0: new mode.
	Mode *int `pulumi:"mode"`
	// Firewall instance name.
	Name *string `pulumi:"name"`
	// A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
	NatGwLists []string `pulumi:"natGwLists"`
	// New mode passing parameters are added, at least one of newModeItems and natGwList is passed.
	NewModeItems *NatInstanceNewModeItems `pulumi:"newModeItems"`
	// Bandwidth.
	Width *int `pulumi:"width"`
	// Zone list.
	ZoneSets []string `pulumi:"zoneSets"`
}

type NatInstanceState struct {
	// Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the default is not to use off-site disaster recovery.
	CrossAZone pulumi.IntPtrInput
	// Mode 1: access mode; 0: new mode.
	Mode pulumi.IntPtrInput
	// Firewall instance name.
	Name pulumi.StringPtrInput
	// A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
	NatGwLists pulumi.StringArrayInput
	// New mode passing parameters are added, at least one of newModeItems and natGwList is passed.
	NewModeItems NatInstanceNewModeItemsPtrInput
	// Bandwidth.
	Width pulumi.IntPtrInput
	// Zone list.
	ZoneSets pulumi.StringArrayInput
}

func (NatInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*natInstanceState)(nil)).Elem()
}

type natInstanceArgs struct {
	// Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the default is not to use off-site disaster recovery.
	CrossAZone *int `pulumi:"crossAZone"`
	// Mode 1: access mode; 0: new mode.
	Mode int `pulumi:"mode"`
	// Firewall instance name.
	Name *string `pulumi:"name"`
	// A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
	NatGwLists []string `pulumi:"natGwLists"`
	// New mode passing parameters are added, at least one of newModeItems and natGwList is passed.
	NewModeItems *NatInstanceNewModeItems `pulumi:"newModeItems"`
	// Bandwidth.
	Width int `pulumi:"width"`
	// Zone list.
	ZoneSets []string `pulumi:"zoneSets"`
}

// The set of arguments for constructing a NatInstance resource.
type NatInstanceArgs struct {
	// Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the default is not to use off-site disaster recovery.
	CrossAZone pulumi.IntPtrInput
	// Mode 1: access mode; 0: new mode.
	Mode pulumi.IntInput
	// Firewall instance name.
	Name pulumi.StringPtrInput
	// A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
	NatGwLists pulumi.StringArrayInput
	// New mode passing parameters are added, at least one of newModeItems and natGwList is passed.
	NewModeItems NatInstanceNewModeItemsPtrInput
	// Bandwidth.
	Width pulumi.IntInput
	// Zone list.
	ZoneSets pulumi.StringArrayInput
}

func (NatInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natInstanceArgs)(nil)).Elem()
}

type NatInstanceInput interface {
	pulumi.Input

	ToNatInstanceOutput() NatInstanceOutput
	ToNatInstanceOutputWithContext(ctx context.Context) NatInstanceOutput
}

func (*NatInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**NatInstance)(nil)).Elem()
}

func (i *NatInstance) ToNatInstanceOutput() NatInstanceOutput {
	return i.ToNatInstanceOutputWithContext(context.Background())
}

func (i *NatInstance) ToNatInstanceOutputWithContext(ctx context.Context) NatInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatInstanceOutput)
}

// NatInstanceArrayInput is an input type that accepts NatInstanceArray and NatInstanceArrayOutput values.
// You can construct a concrete instance of `NatInstanceArrayInput` via:
//
//	NatInstanceArray{ NatInstanceArgs{...} }
type NatInstanceArrayInput interface {
	pulumi.Input

	ToNatInstanceArrayOutput() NatInstanceArrayOutput
	ToNatInstanceArrayOutputWithContext(context.Context) NatInstanceArrayOutput
}

type NatInstanceArray []NatInstanceInput

func (NatInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatInstance)(nil)).Elem()
}

func (i NatInstanceArray) ToNatInstanceArrayOutput() NatInstanceArrayOutput {
	return i.ToNatInstanceArrayOutputWithContext(context.Background())
}

func (i NatInstanceArray) ToNatInstanceArrayOutputWithContext(ctx context.Context) NatInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatInstanceArrayOutput)
}

// NatInstanceMapInput is an input type that accepts NatInstanceMap and NatInstanceMapOutput values.
// You can construct a concrete instance of `NatInstanceMapInput` via:
//
//	NatInstanceMap{ "key": NatInstanceArgs{...} }
type NatInstanceMapInput interface {
	pulumi.Input

	ToNatInstanceMapOutput() NatInstanceMapOutput
	ToNatInstanceMapOutputWithContext(context.Context) NatInstanceMapOutput
}

type NatInstanceMap map[string]NatInstanceInput

func (NatInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatInstance)(nil)).Elem()
}

func (i NatInstanceMap) ToNatInstanceMapOutput() NatInstanceMapOutput {
	return i.ToNatInstanceMapOutputWithContext(context.Background())
}

func (i NatInstanceMap) ToNatInstanceMapOutputWithContext(ctx context.Context) NatInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatInstanceMapOutput)
}

type NatInstanceOutput struct{ *pulumi.OutputState }

func (NatInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatInstance)(nil)).Elem()
}

func (o NatInstanceOutput) ToNatInstanceOutput() NatInstanceOutput {
	return o
}

func (o NatInstanceOutput) ToNatInstanceOutputWithContext(ctx context.Context) NatInstanceOutput {
	return o
}

// Off-site disaster recovery 1: use off-site disaster recovery; 0: do not use off-site disaster recovery; if empty, the default is not to use off-site disaster recovery.
func (o NatInstanceOutput) CrossAZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.IntPtrOutput { return v.CrossAZone }).(pulumi.IntPtrOutput)
}

// Mode 1: access mode; 0: new mode.
func (o NatInstanceOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.IntOutput { return v.Mode }).(pulumi.IntOutput)
}

// Firewall instance name.
func (o NatInstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of nat gateways connected to the access mode, at least one of NewModeItems and NatgwList is passed.
func (o NatInstanceOutput) NatGwLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.StringArrayOutput { return v.NatGwLists }).(pulumi.StringArrayOutput)
}

// New mode passing parameters are added, at least one of newModeItems and natGwList is passed.
func (o NatInstanceOutput) NewModeItems() NatInstanceNewModeItemsPtrOutput {
	return o.ApplyT(func(v *NatInstance) NatInstanceNewModeItemsPtrOutput { return v.NewModeItems }).(NatInstanceNewModeItemsPtrOutput)
}

// Bandwidth.
func (o NatInstanceOutput) Width() pulumi.IntOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.IntOutput { return v.Width }).(pulumi.IntOutput)
}

// Zone list.
func (o NatInstanceOutput) ZoneSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatInstance) pulumi.StringArrayOutput { return v.ZoneSets }).(pulumi.StringArrayOutput)
}

type NatInstanceArrayOutput struct{ *pulumi.OutputState }

func (NatInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatInstance)(nil)).Elem()
}

func (o NatInstanceArrayOutput) ToNatInstanceArrayOutput() NatInstanceArrayOutput {
	return o
}

func (o NatInstanceArrayOutput) ToNatInstanceArrayOutputWithContext(ctx context.Context) NatInstanceArrayOutput {
	return o
}

func (o NatInstanceArrayOutput) Index(i pulumi.IntInput) NatInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatInstance {
		return vs[0].([]*NatInstance)[vs[1].(int)]
	}).(NatInstanceOutput)
}

type NatInstanceMapOutput struct{ *pulumi.OutputState }

func (NatInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatInstance)(nil)).Elem()
}

func (o NatInstanceMapOutput) ToNatInstanceMapOutput() NatInstanceMapOutput {
	return o
}

func (o NatInstanceMapOutput) ToNatInstanceMapOutputWithContext(ctx context.Context) NatInstanceMapOutput {
	return o
}

func (o NatInstanceMapOutput) MapIndex(k pulumi.StringInput) NatInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatInstance {
		return vs[0].(map[string]*NatInstance)[vs[1].(string)]
	}).(NatInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatInstanceInput)(nil)).Elem(), &NatInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatInstanceArrayInput)(nil)).Elem(), NatInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatInstanceMapInput)(nil)).Elem(), NatInstanceMap{})
	pulumi.RegisterOutputType(NatInstanceOutput{})
	pulumi.RegisterOutputType(NatInstanceArrayOutput{})
	pulumi.RegisterOutputType(NatInstanceMapOutput{})
}
