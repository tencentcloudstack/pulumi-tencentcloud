// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfw syncRoute
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewSyncRoute(ctx, "example", &Cfw.SyncRouteArgs{
//				FwType:   pulumi.String("nat"),
//				SyncType: pulumi.String("Route"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type SyncRoute struct {
	pulumi.CustomResourceState

	// Firewall type; nat: nat firewall; ew: inter-vpc firewall.
	FwType pulumi.StringPtrOutput `pulumi:"fwType"`
	// Synchronization operation type: Route, synchronize firewall routing.
	SyncType pulumi.StringOutput `pulumi:"syncType"`
}

// NewSyncRoute registers a new resource with the given unique name, arguments, and options.
func NewSyncRoute(ctx *pulumi.Context,
	name string, args *SyncRouteArgs, opts ...pulumi.ResourceOption) (*SyncRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SyncType == nil {
		return nil, errors.New("invalid value for required argument 'SyncType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SyncRoute
	err := ctx.RegisterResource("tencentcloud:Cfw/syncRoute:SyncRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyncRoute gets an existing SyncRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyncRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyncRouteState, opts ...pulumi.ResourceOption) (*SyncRoute, error) {
	var resource SyncRoute
	err := ctx.ReadResource("tencentcloud:Cfw/syncRoute:SyncRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyncRoute resources.
type syncRouteState struct {
	// Firewall type; nat: nat firewall; ew: inter-vpc firewall.
	FwType *string `pulumi:"fwType"`
	// Synchronization operation type: Route, synchronize firewall routing.
	SyncType *string `pulumi:"syncType"`
}

type SyncRouteState struct {
	// Firewall type; nat: nat firewall; ew: inter-vpc firewall.
	FwType pulumi.StringPtrInput
	// Synchronization operation type: Route, synchronize firewall routing.
	SyncType pulumi.StringPtrInput
}

func (SyncRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*syncRouteState)(nil)).Elem()
}

type syncRouteArgs struct {
	// Firewall type; nat: nat firewall; ew: inter-vpc firewall.
	FwType *string `pulumi:"fwType"`
	// Synchronization operation type: Route, synchronize firewall routing.
	SyncType string `pulumi:"syncType"`
}

// The set of arguments for constructing a SyncRoute resource.
type SyncRouteArgs struct {
	// Firewall type; nat: nat firewall; ew: inter-vpc firewall.
	FwType pulumi.StringPtrInput
	// Synchronization operation type: Route, synchronize firewall routing.
	SyncType pulumi.StringInput
}

func (SyncRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syncRouteArgs)(nil)).Elem()
}

type SyncRouteInput interface {
	pulumi.Input

	ToSyncRouteOutput() SyncRouteOutput
	ToSyncRouteOutputWithContext(ctx context.Context) SyncRouteOutput
}

func (*SyncRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncRoute)(nil)).Elem()
}

func (i *SyncRoute) ToSyncRouteOutput() SyncRouteOutput {
	return i.ToSyncRouteOutputWithContext(context.Background())
}

func (i *SyncRoute) ToSyncRouteOutputWithContext(ctx context.Context) SyncRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncRouteOutput)
}

// SyncRouteArrayInput is an input type that accepts SyncRouteArray and SyncRouteArrayOutput values.
// You can construct a concrete instance of `SyncRouteArrayInput` via:
//
//	SyncRouteArray{ SyncRouteArgs{...} }
type SyncRouteArrayInput interface {
	pulumi.Input

	ToSyncRouteArrayOutput() SyncRouteArrayOutput
	ToSyncRouteArrayOutputWithContext(context.Context) SyncRouteArrayOutput
}

type SyncRouteArray []SyncRouteInput

func (SyncRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncRoute)(nil)).Elem()
}

func (i SyncRouteArray) ToSyncRouteArrayOutput() SyncRouteArrayOutput {
	return i.ToSyncRouteArrayOutputWithContext(context.Background())
}

func (i SyncRouteArray) ToSyncRouteArrayOutputWithContext(ctx context.Context) SyncRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncRouteArrayOutput)
}

// SyncRouteMapInput is an input type that accepts SyncRouteMap and SyncRouteMapOutput values.
// You can construct a concrete instance of `SyncRouteMapInput` via:
//
//	SyncRouteMap{ "key": SyncRouteArgs{...} }
type SyncRouteMapInput interface {
	pulumi.Input

	ToSyncRouteMapOutput() SyncRouteMapOutput
	ToSyncRouteMapOutputWithContext(context.Context) SyncRouteMapOutput
}

type SyncRouteMap map[string]SyncRouteInput

func (SyncRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncRoute)(nil)).Elem()
}

func (i SyncRouteMap) ToSyncRouteMapOutput() SyncRouteMapOutput {
	return i.ToSyncRouteMapOutputWithContext(context.Background())
}

func (i SyncRouteMap) ToSyncRouteMapOutputWithContext(ctx context.Context) SyncRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyncRouteMapOutput)
}

type SyncRouteOutput struct{ *pulumi.OutputState }

func (SyncRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyncRoute)(nil)).Elem()
}

func (o SyncRouteOutput) ToSyncRouteOutput() SyncRouteOutput {
	return o
}

func (o SyncRouteOutput) ToSyncRouteOutputWithContext(ctx context.Context) SyncRouteOutput {
	return o
}

// Firewall type; nat: nat firewall; ew: inter-vpc firewall.
func (o SyncRouteOutput) FwType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyncRoute) pulumi.StringPtrOutput { return v.FwType }).(pulumi.StringPtrOutput)
}

// Synchronization operation type: Route, synchronize firewall routing.
func (o SyncRouteOutput) SyncType() pulumi.StringOutput {
	return o.ApplyT(func(v *SyncRoute) pulumi.StringOutput { return v.SyncType }).(pulumi.StringOutput)
}

type SyncRouteArrayOutput struct{ *pulumi.OutputState }

func (SyncRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyncRoute)(nil)).Elem()
}

func (o SyncRouteArrayOutput) ToSyncRouteArrayOutput() SyncRouteArrayOutput {
	return o
}

func (o SyncRouteArrayOutput) ToSyncRouteArrayOutputWithContext(ctx context.Context) SyncRouteArrayOutput {
	return o
}

func (o SyncRouteArrayOutput) Index(i pulumi.IntInput) SyncRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyncRoute {
		return vs[0].([]*SyncRoute)[vs[1].(int)]
	}).(SyncRouteOutput)
}

type SyncRouteMapOutput struct{ *pulumi.OutputState }

func (SyncRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyncRoute)(nil)).Elem()
}

func (o SyncRouteMapOutput) ToSyncRouteMapOutput() SyncRouteMapOutput {
	return o
}

func (o SyncRouteMapOutput) ToSyncRouteMapOutputWithContext(ctx context.Context) SyncRouteMapOutput {
	return o
}

func (o SyncRouteMapOutput) MapIndex(k pulumi.StringInput) SyncRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyncRoute {
		return vs[0].(map[string]*SyncRoute)[vs[1].(string)]
	}).(SyncRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyncRouteInput)(nil)).Elem(), &SyncRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncRouteArrayInput)(nil)).Elem(), SyncRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyncRouteMapInput)(nil)).Elem(), SyncRouteMap{})
	pulumi.RegisterOutputType(SyncRouteOutput{})
	pulumi.RegisterOutputType(SyncRouteArrayOutput{})
	pulumi.RegisterOutputType(SyncRouteMapOutput{})
}
