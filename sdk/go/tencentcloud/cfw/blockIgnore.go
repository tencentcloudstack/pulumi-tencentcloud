// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cfw

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cfw blockIgnore
//
// > **NOTE:** If create domain rule, `RuleType` not support set 2.
//
// ## Example Usage
// ### If create ip rule
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewBlockIgnore(ctx, "example", &Cfw.BlockIgnoreArgs{
//				Comment:   pulumi.String("remark."),
//				Direction: pulumi.String("0"),
//				EndTime:   pulumi.String("2023-10-01 00:00:00"),
//				Ip:        pulumi.String("1.1.1.1"),
//				RuleType:  pulumi.Int(1),
//				StartTime: pulumi.String("2023-09-01 00:00:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### If create domain rule
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cfw"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cfw.NewBlockIgnore(ctx, "example", &Cfw.BlockIgnoreArgs{
//				Comment:   pulumi.String("remark."),
//				Direction: pulumi.String("1"),
//				Domain:    pulumi.String("domain.com"),
//				EndTime:   pulumi.String("2023-10-01 00:00:00"),
//				RuleType:  pulumi.Int(1),
//				StartTime: pulumi.String("2023-09-01 00:00:00"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cfw block_ignore_list can be imported using the id, e.g. If import ip rule
//
// ```sh
//
//	$ pulumi import tencentcloud:Cfw/blockIgnore:BlockIgnore example 1.1.1.1##0#1
//
// ```
//
//	If import domain rule
//
// ```sh
//
//	$ pulumi import tencentcloud:Cfw/blockIgnore:BlockIgnore example domain.com##0#1
//
// ```
type BlockIgnore struct {
	pulumi.CustomResourceState

	// Remarks information, length cannot exceed 50.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Rule direction, 0 outbound, 1 inbound, 3 intranet.
	Direction pulumi.StringOutput `pulumi:"direction"`
	// Rule domain name, one of IP and Domain is required.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Rule IP address, one of IP and Domain is required.
	Ip pulumi.StringPtrOutput `pulumi:"ip"`
	// Rule type, 1 block, 2 ignore, domain block is not supported.
	RuleType pulumi.IntOutput `pulumi:"ruleType"`
	// Rule start time.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
}

// NewBlockIgnore registers a new resource with the given unique name, arguments, and options.
func NewBlockIgnore(ctx *pulumi.Context,
	name string, args *BlockIgnoreArgs, opts ...pulumi.ResourceOption) (*BlockIgnore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Direction == nil {
		return nil, errors.New("invalid value for required argument 'Direction'")
	}
	if args.EndTime == nil {
		return nil, errors.New("invalid value for required argument 'EndTime'")
	}
	if args.RuleType == nil {
		return nil, errors.New("invalid value for required argument 'RuleType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BlockIgnore
	err := ctx.RegisterResource("tencentcloud:Cfw/blockIgnore:BlockIgnore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockIgnore gets an existing BlockIgnore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockIgnore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockIgnoreState, opts ...pulumi.ResourceOption) (*BlockIgnore, error) {
	var resource BlockIgnore
	err := ctx.ReadResource("tencentcloud:Cfw/blockIgnore:BlockIgnore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockIgnore resources.
type blockIgnoreState struct {
	// Remarks information, length cannot exceed 50.
	Comment *string `pulumi:"comment"`
	// Rule direction, 0 outbound, 1 inbound, 3 intranet.
	Direction *string `pulumi:"direction"`
	// Rule domain name, one of IP and Domain is required.
	Domain *string `pulumi:"domain"`
	// Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
	EndTime *string `pulumi:"endTime"`
	// Rule IP address, one of IP and Domain is required.
	Ip *string `pulumi:"ip"`
	// Rule type, 1 block, 2 ignore, domain block is not supported.
	RuleType *int `pulumi:"ruleType"`
	// Rule start time.
	StartTime *string `pulumi:"startTime"`
}

type BlockIgnoreState struct {
	// Remarks information, length cannot exceed 50.
	Comment pulumi.StringPtrInput
	// Rule direction, 0 outbound, 1 inbound, 3 intranet.
	Direction pulumi.StringPtrInput
	// Rule domain name, one of IP and Domain is required.
	Domain pulumi.StringPtrInput
	// Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
	EndTime pulumi.StringPtrInput
	// Rule IP address, one of IP and Domain is required.
	Ip pulumi.StringPtrInput
	// Rule type, 1 block, 2 ignore, domain block is not supported.
	RuleType pulumi.IntPtrInput
	// Rule start time.
	StartTime pulumi.StringPtrInput
}

func (BlockIgnoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockIgnoreState)(nil)).Elem()
}

type blockIgnoreArgs struct {
	// Remarks information, length cannot exceed 50.
	Comment *string `pulumi:"comment"`
	// Rule direction, 0 outbound, 1 inbound, 3 intranet.
	Direction string `pulumi:"direction"`
	// Rule domain name, one of IP and Domain is required.
	Domain *string `pulumi:"domain"`
	// Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
	EndTime string `pulumi:"endTime"`
	// Rule IP address, one of IP and Domain is required.
	Ip *string `pulumi:"ip"`
	// Rule type, 1 block, 2 ignore, domain block is not supported.
	RuleType int `pulumi:"ruleType"`
	// Rule start time.
	StartTime *string `pulumi:"startTime"`
}

// The set of arguments for constructing a BlockIgnore resource.
type BlockIgnoreArgs struct {
	// Remarks information, length cannot exceed 50.
	Comment pulumi.StringPtrInput
	// Rule direction, 0 outbound, 1 inbound, 3 intranet.
	Direction pulumi.StringInput
	// Rule domain name, one of IP and Domain is required.
	Domain pulumi.StringPtrInput
	// Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
	EndTime pulumi.StringInput
	// Rule IP address, one of IP and Domain is required.
	Ip pulumi.StringPtrInput
	// Rule type, 1 block, 2 ignore, domain block is not supported.
	RuleType pulumi.IntInput
	// Rule start time.
	StartTime pulumi.StringPtrInput
}

func (BlockIgnoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockIgnoreArgs)(nil)).Elem()
}

type BlockIgnoreInput interface {
	pulumi.Input

	ToBlockIgnoreOutput() BlockIgnoreOutput
	ToBlockIgnoreOutputWithContext(ctx context.Context) BlockIgnoreOutput
}

func (*BlockIgnore) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockIgnore)(nil)).Elem()
}

func (i *BlockIgnore) ToBlockIgnoreOutput() BlockIgnoreOutput {
	return i.ToBlockIgnoreOutputWithContext(context.Background())
}

func (i *BlockIgnore) ToBlockIgnoreOutputWithContext(ctx context.Context) BlockIgnoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockIgnoreOutput)
}

// BlockIgnoreArrayInput is an input type that accepts BlockIgnoreArray and BlockIgnoreArrayOutput values.
// You can construct a concrete instance of `BlockIgnoreArrayInput` via:
//
//	BlockIgnoreArray{ BlockIgnoreArgs{...} }
type BlockIgnoreArrayInput interface {
	pulumi.Input

	ToBlockIgnoreArrayOutput() BlockIgnoreArrayOutput
	ToBlockIgnoreArrayOutputWithContext(context.Context) BlockIgnoreArrayOutput
}

type BlockIgnoreArray []BlockIgnoreInput

func (BlockIgnoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockIgnore)(nil)).Elem()
}

func (i BlockIgnoreArray) ToBlockIgnoreArrayOutput() BlockIgnoreArrayOutput {
	return i.ToBlockIgnoreArrayOutputWithContext(context.Background())
}

func (i BlockIgnoreArray) ToBlockIgnoreArrayOutputWithContext(ctx context.Context) BlockIgnoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockIgnoreArrayOutput)
}

// BlockIgnoreMapInput is an input type that accepts BlockIgnoreMap and BlockIgnoreMapOutput values.
// You can construct a concrete instance of `BlockIgnoreMapInput` via:
//
//	BlockIgnoreMap{ "key": BlockIgnoreArgs{...} }
type BlockIgnoreMapInput interface {
	pulumi.Input

	ToBlockIgnoreMapOutput() BlockIgnoreMapOutput
	ToBlockIgnoreMapOutputWithContext(context.Context) BlockIgnoreMapOutput
}

type BlockIgnoreMap map[string]BlockIgnoreInput

func (BlockIgnoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockIgnore)(nil)).Elem()
}

func (i BlockIgnoreMap) ToBlockIgnoreMapOutput() BlockIgnoreMapOutput {
	return i.ToBlockIgnoreMapOutputWithContext(context.Background())
}

func (i BlockIgnoreMap) ToBlockIgnoreMapOutputWithContext(ctx context.Context) BlockIgnoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockIgnoreMapOutput)
}

type BlockIgnoreOutput struct{ *pulumi.OutputState }

func (BlockIgnoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockIgnore)(nil)).Elem()
}

func (o BlockIgnoreOutput) ToBlockIgnoreOutput() BlockIgnoreOutput {
	return o
}

func (o BlockIgnoreOutput) ToBlockIgnoreOutputWithContext(ctx context.Context) BlockIgnoreOutput {
	return o
}

// Remarks information, length cannot exceed 50.
func (o BlockIgnoreOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Rule direction, 0 outbound, 1 inbound, 3 intranet.
func (o BlockIgnoreOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.StringOutput { return v.Direction }).(pulumi.StringOutput)
}

// Rule domain name, one of IP and Domain is required.
func (o BlockIgnoreOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// Rule end time, format: 2006-01-02 15:04:05, must be greater than the current time.
func (o BlockIgnoreOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Rule IP address, one of IP and Domain is required.
func (o BlockIgnoreOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.StringPtrOutput { return v.Ip }).(pulumi.StringPtrOutput)
}

// Rule type, 1 block, 2 ignore, domain block is not supported.
func (o BlockIgnoreOutput) RuleType() pulumi.IntOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.IntOutput { return v.RuleType }).(pulumi.IntOutput)
}

// Rule start time.
func (o BlockIgnoreOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BlockIgnore) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

type BlockIgnoreArrayOutput struct{ *pulumi.OutputState }

func (BlockIgnoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockIgnore)(nil)).Elem()
}

func (o BlockIgnoreArrayOutput) ToBlockIgnoreArrayOutput() BlockIgnoreArrayOutput {
	return o
}

func (o BlockIgnoreArrayOutput) ToBlockIgnoreArrayOutputWithContext(ctx context.Context) BlockIgnoreArrayOutput {
	return o
}

func (o BlockIgnoreArrayOutput) Index(i pulumi.IntInput) BlockIgnoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BlockIgnore {
		return vs[0].([]*BlockIgnore)[vs[1].(int)]
	}).(BlockIgnoreOutput)
}

type BlockIgnoreMapOutput struct{ *pulumi.OutputState }

func (BlockIgnoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockIgnore)(nil)).Elem()
}

func (o BlockIgnoreMapOutput) ToBlockIgnoreMapOutput() BlockIgnoreMapOutput {
	return o
}

func (o BlockIgnoreMapOutput) ToBlockIgnoreMapOutputWithContext(ctx context.Context) BlockIgnoreMapOutput {
	return o
}

func (o BlockIgnoreMapOutput) MapIndex(k pulumi.StringInput) BlockIgnoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BlockIgnore {
		return vs[0].(map[string]*BlockIgnore)[vs[1].(string)]
	}).(BlockIgnoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockIgnoreInput)(nil)).Elem(), &BlockIgnore{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockIgnoreArrayInput)(nil)).Elem(), BlockIgnoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BlockIgnoreMapInput)(nil)).Elem(), BlockIgnoreMap{})
	pulumi.RegisterOutputType(BlockIgnoreOutput{})
	pulumi.RegisterOutputType(BlockIgnoreArrayOutput{})
	pulumi.RegisterOutputType(BlockIgnoreMapOutput{})
}
