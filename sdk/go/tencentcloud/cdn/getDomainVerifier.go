// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to check or create a cdn Domain Verify Record
//
// > **NOTE:**
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cdn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cdn.GetDomainVerifier(ctx, &cdn.GetDomainVerifierArgs{
//				Domain:       "www.examplexxx123.com",
//				AutoVerify:   pulumi.BoolRef(true),
//				FreezeRecord: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_ := data.Tencentcloud_cdn_domain_verifier.Record
//			_ := data.Tencentcloud_cdn_domain_verifier.Record_type
//			return nil
//		})
//	}
//
// ```
func GetDomainVerifier(ctx *pulumi.Context, args *GetDomainVerifierArgs, opts ...pulumi.InvokeOption) (*GetDomainVerifierResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDomainVerifierResult
	err := ctx.Invoke("tencentcloud:Cdn/getDomainVerifier:getDomainVerifier", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomainVerifier.
type GetDomainVerifierArgs struct {
	// Specify whether to keep first create result instead of re-create again.
	AutoVerify *bool `pulumi:"autoVerify"`
	// Specify domain name, e.g. `www.examplexxx123.com`.
	Domain string `pulumi:"domain"`
	// Indicates failed reason of verification.
	FailedReason *string `pulumi:"failedReason"`
	// Specify whether the verification record needs to be freeze instead of refresh every 8 hours, this used for domain verification.
	FreezeRecord *bool `pulumi:"freezeRecord"`
	// Used for save result json.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Specify verify type, values: `dns` (default), `file`.
	VerifyType *string `pulumi:"verifyType"`
}

// A collection of values returned by getDomainVerifier.
type GetDomainVerifierResult struct {
	AutoVerify   *bool   `pulumi:"autoVerify"`
	Domain       string  `pulumi:"domain"`
	FailedReason *string `pulumi:"failedReason"`
	// List of file verified domains.
	FileVerifyDomains []string `pulumi:"fileVerifyDomains"`
	// Name of file verifications.
	FileVerifyName string `pulumi:"fileVerifyName"`
	// File verify URL guidance.
	FileVerifyUrl string `pulumi:"fileVerifyUrl"`
	FreezeRecord  *bool  `pulumi:"freezeRecord"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Resolution record value.
	Record string `pulumi:"record"`
	// Type of resolution.
	RecordType       string  `pulumi:"recordType"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Sub-domain resolution.
	SubDomain string `pulumi:"subDomain"`
	// Verify result.
	VerifyResult bool    `pulumi:"verifyResult"`
	VerifyType   *string `pulumi:"verifyType"`
}

func GetDomainVerifierOutput(ctx *pulumi.Context, args GetDomainVerifierOutputArgs, opts ...pulumi.InvokeOption) GetDomainVerifierResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDomainVerifierResult, error) {
			args := v.(GetDomainVerifierArgs)
			r, err := GetDomainVerifier(ctx, &args, opts...)
			var s GetDomainVerifierResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDomainVerifierResultOutput)
}

// A collection of arguments for invoking getDomainVerifier.
type GetDomainVerifierOutputArgs struct {
	// Specify whether to keep first create result instead of re-create again.
	AutoVerify pulumi.BoolPtrInput `pulumi:"autoVerify"`
	// Specify domain name, e.g. `www.examplexxx123.com`.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Indicates failed reason of verification.
	FailedReason pulumi.StringPtrInput `pulumi:"failedReason"`
	// Specify whether the verification record needs to be freeze instead of refresh every 8 hours, this used for domain verification.
	FreezeRecord pulumi.BoolPtrInput `pulumi:"freezeRecord"`
	// Used for save result json.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Specify verify type, values: `dns` (default), `file`.
	VerifyType pulumi.StringPtrInput `pulumi:"verifyType"`
}

func (GetDomainVerifierOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainVerifierArgs)(nil)).Elem()
}

// A collection of values returned by getDomainVerifier.
type GetDomainVerifierResultOutput struct{ *pulumi.OutputState }

func (GetDomainVerifierResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainVerifierResult)(nil)).Elem()
}

func (o GetDomainVerifierResultOutput) ToGetDomainVerifierResultOutput() GetDomainVerifierResultOutput {
	return o
}

func (o GetDomainVerifierResultOutput) ToGetDomainVerifierResultOutputWithContext(ctx context.Context) GetDomainVerifierResultOutput {
	return o
}

func (o GetDomainVerifierResultOutput) AutoVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) *bool { return v.AutoVerify }).(pulumi.BoolPtrOutput)
}

func (o GetDomainVerifierResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetDomainVerifierResultOutput) FailedReason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) *string { return v.FailedReason }).(pulumi.StringPtrOutput)
}

// List of file verified domains.
func (o GetDomainVerifierResultOutput) FileVerifyDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) []string { return v.FileVerifyDomains }).(pulumi.StringArrayOutput)
}

// Name of file verifications.
func (o GetDomainVerifierResultOutput) FileVerifyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.FileVerifyName }).(pulumi.StringOutput)
}

// File verify URL guidance.
func (o GetDomainVerifierResultOutput) FileVerifyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.FileVerifyUrl }).(pulumi.StringOutput)
}

func (o GetDomainVerifierResultOutput) FreezeRecord() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) *bool { return v.FreezeRecord }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDomainVerifierResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.Id }).(pulumi.StringOutput)
}

// Resolution record value.
func (o GetDomainVerifierResultOutput) Record() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.Record }).(pulumi.StringOutput)
}

// Type of resolution.
func (o GetDomainVerifierResultOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.RecordType }).(pulumi.StringOutput)
}

func (o GetDomainVerifierResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Sub-domain resolution.
func (o GetDomainVerifierResultOutput) SubDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) string { return v.SubDomain }).(pulumi.StringOutput)
}

// Verify result.
func (o GetDomainVerifierResultOutput) VerifyResult() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) bool { return v.VerifyResult }).(pulumi.BoolOutput)
}

func (o GetDomainVerifierResultOutput) VerifyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDomainVerifierResult) *string { return v.VerifyType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDomainVerifierResultOutput{})
}
