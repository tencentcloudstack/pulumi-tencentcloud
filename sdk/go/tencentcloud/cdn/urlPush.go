// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cdn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to invoke a Url Push request.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cdn.NewUrlPush(ctx, "foo", &Cdn.UrlPushArgs{
//				Urls: pulumi.StringArray{
//					pulumi.String("https://www.example.com/b"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### argument to request new push task with same urls
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cdn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cdn.NewUrlPush(ctx, "foo", &Cdn.UrlPushArgs{
//				Redo: pulumi.Int(1),
//				Urls: pulumi.StringArray{
//					pulumi.String("https://www.example.com/a"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UrlPush struct {
	pulumi.CustomResourceState

	// Specify push area. NOTE: only push same area cache contents.
	Area pulumi.StringPtrOutput `pulumi:"area"`
	// Layer to push.
	Layer pulumi.StringPtrOutput `pulumi:"layer"`
	// Whether to recursive parse m3u8 files.
	ParseM3u8 pulumi.BoolPtrOutput `pulumi:"parseM3u8"`
	// logs of latest push task.
	PushHistories UrlPushPushHistoryArrayOutput `pulumi:"pushHistories"`
	// Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
	Redo pulumi.IntPtrOutput `pulumi:"redo"`
	// Push task id.
	TaskId pulumi.StringOutput `pulumi:"taskId"`
	// List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
	Urls pulumi.StringArrayOutput `pulumi:"urls"`
	// Specify `User-Agent` HTTP header, default: `TencentCdn`.
	UserAgent pulumi.StringPtrOutput `pulumi:"userAgent"`
}

// NewUrlPush registers a new resource with the given unique name, arguments, and options.
func NewUrlPush(ctx *pulumi.Context,
	name string, args *UrlPushArgs, opts ...pulumi.ResourceOption) (*UrlPush, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Urls == nil {
		return nil, errors.New("invalid value for required argument 'Urls'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UrlPush
	err := ctx.RegisterResource("tencentcloud:Cdn/urlPush:UrlPush", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUrlPush gets an existing UrlPush resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUrlPush(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UrlPushState, opts ...pulumi.ResourceOption) (*UrlPush, error) {
	var resource UrlPush
	err := ctx.ReadResource("tencentcloud:Cdn/urlPush:UrlPush", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UrlPush resources.
type urlPushState struct {
	// Specify push area. NOTE: only push same area cache contents.
	Area *string `pulumi:"area"`
	// Layer to push.
	Layer *string `pulumi:"layer"`
	// Whether to recursive parse m3u8 files.
	ParseM3u8 *bool `pulumi:"parseM3u8"`
	// logs of latest push task.
	PushHistories []UrlPushPushHistory `pulumi:"pushHistories"`
	// Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
	Redo *int `pulumi:"redo"`
	// Push task id.
	TaskId *string `pulumi:"taskId"`
	// List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
	Urls []string `pulumi:"urls"`
	// Specify `User-Agent` HTTP header, default: `TencentCdn`.
	UserAgent *string `pulumi:"userAgent"`
}

type UrlPushState struct {
	// Specify push area. NOTE: only push same area cache contents.
	Area pulumi.StringPtrInput
	// Layer to push.
	Layer pulumi.StringPtrInput
	// Whether to recursive parse m3u8 files.
	ParseM3u8 pulumi.BoolPtrInput
	// logs of latest push task.
	PushHistories UrlPushPushHistoryArrayInput
	// Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
	Redo pulumi.IntPtrInput
	// Push task id.
	TaskId pulumi.StringPtrInput
	// List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
	Urls pulumi.StringArrayInput
	// Specify `User-Agent` HTTP header, default: `TencentCdn`.
	UserAgent pulumi.StringPtrInput
}

func (UrlPushState) ElementType() reflect.Type {
	return reflect.TypeOf((*urlPushState)(nil)).Elem()
}

type urlPushArgs struct {
	// Specify push area. NOTE: only push same area cache contents.
	Area *string `pulumi:"area"`
	// Layer to push.
	Layer *string `pulumi:"layer"`
	// Whether to recursive parse m3u8 files.
	ParseM3u8 *bool `pulumi:"parseM3u8"`
	// Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
	Redo *int `pulumi:"redo"`
	// List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
	Urls []string `pulumi:"urls"`
	// Specify `User-Agent` HTTP header, default: `TencentCdn`.
	UserAgent *string `pulumi:"userAgent"`
}

// The set of arguments for constructing a UrlPush resource.
type UrlPushArgs struct {
	// Specify push area. NOTE: only push same area cache contents.
	Area pulumi.StringPtrInput
	// Layer to push.
	Layer pulumi.StringPtrInput
	// Whether to recursive parse m3u8 files.
	ParseM3u8 pulumi.BoolPtrInput
	// Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
	Redo pulumi.IntPtrInput
	// List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
	Urls pulumi.StringArrayInput
	// Specify `User-Agent` HTTP header, default: `TencentCdn`.
	UserAgent pulumi.StringPtrInput
}

func (UrlPushArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*urlPushArgs)(nil)).Elem()
}

type UrlPushInput interface {
	pulumi.Input

	ToUrlPushOutput() UrlPushOutput
	ToUrlPushOutputWithContext(ctx context.Context) UrlPushOutput
}

func (*UrlPush) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlPush)(nil)).Elem()
}

func (i *UrlPush) ToUrlPushOutput() UrlPushOutput {
	return i.ToUrlPushOutputWithContext(context.Background())
}

func (i *UrlPush) ToUrlPushOutputWithContext(ctx context.Context) UrlPushOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlPushOutput)
}

// UrlPushArrayInput is an input type that accepts UrlPushArray and UrlPushArrayOutput values.
// You can construct a concrete instance of `UrlPushArrayInput` via:
//
//	UrlPushArray{ UrlPushArgs{...} }
type UrlPushArrayInput interface {
	pulumi.Input

	ToUrlPushArrayOutput() UrlPushArrayOutput
	ToUrlPushArrayOutputWithContext(context.Context) UrlPushArrayOutput
}

type UrlPushArray []UrlPushInput

func (UrlPushArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlPush)(nil)).Elem()
}

func (i UrlPushArray) ToUrlPushArrayOutput() UrlPushArrayOutput {
	return i.ToUrlPushArrayOutputWithContext(context.Background())
}

func (i UrlPushArray) ToUrlPushArrayOutputWithContext(ctx context.Context) UrlPushArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlPushArrayOutput)
}

// UrlPushMapInput is an input type that accepts UrlPushMap and UrlPushMapOutput values.
// You can construct a concrete instance of `UrlPushMapInput` via:
//
//	UrlPushMap{ "key": UrlPushArgs{...} }
type UrlPushMapInput interface {
	pulumi.Input

	ToUrlPushMapOutput() UrlPushMapOutput
	ToUrlPushMapOutputWithContext(context.Context) UrlPushMapOutput
}

type UrlPushMap map[string]UrlPushInput

func (UrlPushMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlPush)(nil)).Elem()
}

func (i UrlPushMap) ToUrlPushMapOutput() UrlPushMapOutput {
	return i.ToUrlPushMapOutputWithContext(context.Background())
}

func (i UrlPushMap) ToUrlPushMapOutputWithContext(ctx context.Context) UrlPushMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UrlPushMapOutput)
}

type UrlPushOutput struct{ *pulumi.OutputState }

func (UrlPushOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UrlPush)(nil)).Elem()
}

func (o UrlPushOutput) ToUrlPushOutput() UrlPushOutput {
	return o
}

func (o UrlPushOutput) ToUrlPushOutputWithContext(ctx context.Context) UrlPushOutput {
	return o
}

// Specify push area. NOTE: only push same area cache contents.
func (o UrlPushOutput) Area() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.StringPtrOutput { return v.Area }).(pulumi.StringPtrOutput)
}

// Layer to push.
func (o UrlPushOutput) Layer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.StringPtrOutput { return v.Layer }).(pulumi.StringPtrOutput)
}

// Whether to recursive parse m3u8 files.
func (o UrlPushOutput) ParseM3u8() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.BoolPtrOutput { return v.ParseM3u8 }).(pulumi.BoolPtrOutput)
}

// logs of latest push task.
func (o UrlPushOutput) PushHistories() UrlPushPushHistoryArrayOutput {
	return o.ApplyT(func(v *UrlPush) UrlPushPushHistoryArrayOutput { return v.PushHistories }).(UrlPushPushHistoryArrayOutput)
}

// Change to push again. NOTE: this argument only works while resource update, if set to `0` or null will not be triggered.
func (o UrlPushOutput) Redo() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.IntPtrOutput { return v.Redo }).(pulumi.IntPtrOutput)
}

// Push task id.
func (o UrlPushOutput) TaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.StringOutput { return v.TaskId }).(pulumi.StringOutput)
}

// List of url to push. NOTE: urls need include protocol prefix `http://` or `https://`.
func (o UrlPushOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.StringArrayOutput { return v.Urls }).(pulumi.StringArrayOutput)
}

// Specify `User-Agent` HTTP header, default: `TencentCdn`.
func (o UrlPushOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UrlPush) pulumi.StringPtrOutput { return v.UserAgent }).(pulumi.StringPtrOutput)
}

type UrlPushArrayOutput struct{ *pulumi.OutputState }

func (UrlPushArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UrlPush)(nil)).Elem()
}

func (o UrlPushArrayOutput) ToUrlPushArrayOutput() UrlPushArrayOutput {
	return o
}

func (o UrlPushArrayOutput) ToUrlPushArrayOutputWithContext(ctx context.Context) UrlPushArrayOutput {
	return o
}

func (o UrlPushArrayOutput) Index(i pulumi.IntInput) UrlPushOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UrlPush {
		return vs[0].([]*UrlPush)[vs[1].(int)]
	}).(UrlPushOutput)
}

type UrlPushMapOutput struct{ *pulumi.OutputState }

func (UrlPushMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UrlPush)(nil)).Elem()
}

func (o UrlPushMapOutput) ToUrlPushMapOutput() UrlPushMapOutput {
	return o
}

func (o UrlPushMapOutput) ToUrlPushMapOutputWithContext(ctx context.Context) UrlPushMapOutput {
	return o
}

func (o UrlPushMapOutput) MapIndex(k pulumi.StringInput) UrlPushOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UrlPush {
		return vs[0].(map[string]*UrlPush)[vs[1].(string)]
	}).(UrlPushOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UrlPushInput)(nil)).Elem(), &UrlPush{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlPushArrayInput)(nil)).Elem(), UrlPushArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UrlPushMapInput)(nil)).Elem(), UrlPushMap{})
	pulumi.RegisterOutputType(UrlPushOutput{})
	pulumi.RegisterOutputType(UrlPushArrayOutput{})
	pulumi.RegisterOutputType(UrlPushMapOutput{})
}
