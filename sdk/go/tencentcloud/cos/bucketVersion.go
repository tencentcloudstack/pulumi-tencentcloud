// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cos bucketVersion
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cos.NewBucketVersion(ctx, "bucketVersion", &Cos.BucketVersionArgs{
//				Bucket: pulumi.String("mycos-1258798060"),
//				Status: pulumi.String("Enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cos bucket_version can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cos/bucketVersion:BucketVersion bucket_version bucket_id
//
// ```
type BucketVersion struct {
	pulumi.CustomResourceState

	// Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewBucketVersion registers a new resource with the given unique name, arguments, and options.
func NewBucketVersion(ctx *pulumi.Context,
	name string, args *BucketVersionArgs, opts ...pulumi.ResourceOption) (*BucketVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BucketVersion
	err := ctx.RegisterResource("tencentcloud:Cos/bucketVersion:BucketVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketVersion gets an existing BucketVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketVersionState, opts ...pulumi.ResourceOption) (*BucketVersion, error) {
	var resource BucketVersion
	err := ctx.ReadResource("tencentcloud:Cos/bucketVersion:BucketVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketVersion resources.
type bucketVersionState struct {
	// Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket *string `pulumi:"bucket"`
	// Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
	Status *string `pulumi:"status"`
}

type BucketVersionState struct {
	// Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringPtrInput
	// Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
	Status pulumi.StringPtrInput
}

func (BucketVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketVersionState)(nil)).Elem()
}

type bucketVersionArgs struct {
	// Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket string `pulumi:"bucket"`
	// Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a BucketVersion resource.
type BucketVersionArgs struct {
	// Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringInput
	// Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
	Status pulumi.StringInput
}

func (BucketVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketVersionArgs)(nil)).Elem()
}

type BucketVersionInput interface {
	pulumi.Input

	ToBucketVersionOutput() BucketVersionOutput
	ToBucketVersionOutputWithContext(ctx context.Context) BucketVersionOutput
}

func (*BucketVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketVersion)(nil)).Elem()
}

func (i *BucketVersion) ToBucketVersionOutput() BucketVersionOutput {
	return i.ToBucketVersionOutputWithContext(context.Background())
}

func (i *BucketVersion) ToBucketVersionOutputWithContext(ctx context.Context) BucketVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersionOutput)
}

// BucketVersionArrayInput is an input type that accepts BucketVersionArray and BucketVersionArrayOutput values.
// You can construct a concrete instance of `BucketVersionArrayInput` via:
//
//	BucketVersionArray{ BucketVersionArgs{...} }
type BucketVersionArrayInput interface {
	pulumi.Input

	ToBucketVersionArrayOutput() BucketVersionArrayOutput
	ToBucketVersionArrayOutputWithContext(context.Context) BucketVersionArrayOutput
}

type BucketVersionArray []BucketVersionInput

func (BucketVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketVersion)(nil)).Elem()
}

func (i BucketVersionArray) ToBucketVersionArrayOutput() BucketVersionArrayOutput {
	return i.ToBucketVersionArrayOutputWithContext(context.Background())
}

func (i BucketVersionArray) ToBucketVersionArrayOutputWithContext(ctx context.Context) BucketVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersionArrayOutput)
}

// BucketVersionMapInput is an input type that accepts BucketVersionMap and BucketVersionMapOutput values.
// You can construct a concrete instance of `BucketVersionMapInput` via:
//
//	BucketVersionMap{ "key": BucketVersionArgs{...} }
type BucketVersionMapInput interface {
	pulumi.Input

	ToBucketVersionMapOutput() BucketVersionMapOutput
	ToBucketVersionMapOutputWithContext(context.Context) BucketVersionMapOutput
}

type BucketVersionMap map[string]BucketVersionInput

func (BucketVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketVersion)(nil)).Elem()
}

func (i BucketVersionMap) ToBucketVersionMapOutput() BucketVersionMapOutput {
	return i.ToBucketVersionMapOutputWithContext(context.Background())
}

func (i BucketVersionMap) ToBucketVersionMapOutputWithContext(ctx context.Context) BucketVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketVersionMapOutput)
}

type BucketVersionOutput struct{ *pulumi.OutputState }

func (BucketVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketVersion)(nil)).Elem()
}

func (o BucketVersionOutput) ToBucketVersionOutput() BucketVersionOutput {
	return o
}

func (o BucketVersionOutput) ToBucketVersionOutputWithContext(ctx context.Context) BucketVersionOutput {
	return o
}

// Bucket format should be [custom name]-[appid], for example `mycos-1258798060`.
func (o BucketVersionOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketVersion) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Whether to enable versioning. Valid values: `Suspended`, `Enabled`.
func (o BucketVersionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketVersion) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type BucketVersionArrayOutput struct{ *pulumi.OutputState }

func (BucketVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketVersion)(nil)).Elem()
}

func (o BucketVersionArrayOutput) ToBucketVersionArrayOutput() BucketVersionArrayOutput {
	return o
}

func (o BucketVersionArrayOutput) ToBucketVersionArrayOutputWithContext(ctx context.Context) BucketVersionArrayOutput {
	return o
}

func (o BucketVersionArrayOutput) Index(i pulumi.IntInput) BucketVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketVersion {
		return vs[0].([]*BucketVersion)[vs[1].(int)]
	}).(BucketVersionOutput)
}

type BucketVersionMapOutput struct{ *pulumi.OutputState }

func (BucketVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketVersion)(nil)).Elem()
}

func (o BucketVersionMapOutput) ToBucketVersionMapOutput() BucketVersionMapOutput {
	return o
}

func (o BucketVersionMapOutput) ToBucketVersionMapOutputWithContext(ctx context.Context) BucketVersionMapOutput {
	return o
}

func (o BucketVersionMapOutput) MapIndex(k pulumi.StringInput) BucketVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketVersion {
		return vs[0].(map[string]*BucketVersion)[vs[1].(string)]
	}).(BucketVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersionInput)(nil)).Elem(), &BucketVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersionArrayInput)(nil)).Elem(), BucketVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketVersionMapInput)(nil)).Elem(), BucketVersionMap{})
	pulumi.RegisterOutputType(BucketVersionOutput{})
	pulumi.RegisterOutputType(BucketVersionArrayOutput{})
	pulumi.RegisterOutputType(BucketVersionMapOutput{})
}
