// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query the COS bucket multipart uploads.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cos.GetBucketMultipartUploads(ctx, &cos.GetBucketMultipartUploadsArgs{
//				Bucket: "xxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBucketMultipartUploads(ctx *pulumi.Context, args *GetBucketMultipartUploadsArgs, opts ...pulumi.InvokeOption) (*GetBucketMultipartUploadsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetBucketMultipartUploadsResult
	err := ctx.Invoke("tencentcloud:Cos/getBucketMultipartUploads:getBucketMultipartUploads", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBucketMultipartUploads.
type GetBucketMultipartUploadsArgs struct {
	// Bucket.
	Bucket string `pulumi:"bucket"`
	// The delimiter is a symbol, and the Object name contains the Object between the specified prefix and the first occurrence of delimiter characters as a set of elements: common prefix. If there is no prefix, start from the beginning of the path.
	Delimiter *string `pulumi:"delimiter"`
	// Specifies the encoding format of the return value. Legal value: url.
	EncodingType *string `pulumi:"encodingType"`
	// The returned Object key must be prefixed with Prefix. Note that when using the prefix query, the returned key still contains Prefix.
	Prefix *string `pulumi:"prefix"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getBucketMultipartUploads.
type GetBucketMultipartUploadsResult struct {
	Bucket       string  `pulumi:"bucket"`
	Delimiter    *string `pulumi:"delimiter"`
	EncodingType *string `pulumi:"encodingType"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	Prefix           *string `pulumi:"prefix"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Information for each Upload.
	Uploads []GetBucketMultipartUploadsUpload `pulumi:"uploads"`
}

func GetBucketMultipartUploadsOutput(ctx *pulumi.Context, args GetBucketMultipartUploadsOutputArgs, opts ...pulumi.InvokeOption) GetBucketMultipartUploadsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBucketMultipartUploadsResult, error) {
			args := v.(GetBucketMultipartUploadsArgs)
			r, err := GetBucketMultipartUploads(ctx, &args, opts...)
			var s GetBucketMultipartUploadsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBucketMultipartUploadsResultOutput)
}

// A collection of arguments for invoking getBucketMultipartUploads.
type GetBucketMultipartUploadsOutputArgs struct {
	// Bucket.
	Bucket pulumi.StringInput `pulumi:"bucket"`
	// The delimiter is a symbol, and the Object name contains the Object between the specified prefix and the first occurrence of delimiter characters as a set of elements: common prefix. If there is no prefix, start from the beginning of the path.
	Delimiter pulumi.StringPtrInput `pulumi:"delimiter"`
	// Specifies the encoding format of the return value. Legal value: url.
	EncodingType pulumi.StringPtrInput `pulumi:"encodingType"`
	// The returned Object key must be prefixed with Prefix. Note that when using the prefix query, the returned key still contains Prefix.
	Prefix pulumi.StringPtrInput `pulumi:"prefix"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetBucketMultipartUploadsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBucketMultipartUploadsArgs)(nil)).Elem()
}

// A collection of values returned by getBucketMultipartUploads.
type GetBucketMultipartUploadsResultOutput struct{ *pulumi.OutputState }

func (GetBucketMultipartUploadsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBucketMultipartUploadsResult)(nil)).Elem()
}

func (o GetBucketMultipartUploadsResultOutput) ToGetBucketMultipartUploadsResultOutput() GetBucketMultipartUploadsResultOutput {
	return o
}

func (o GetBucketMultipartUploadsResultOutput) ToGetBucketMultipartUploadsResultOutputWithContext(ctx context.Context) GetBucketMultipartUploadsResultOutput {
	return o
}

func (o GetBucketMultipartUploadsResultOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o GetBucketMultipartUploadsResultOutput) Delimiter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) *string { return v.Delimiter }).(pulumi.StringPtrOutput)
}

func (o GetBucketMultipartUploadsResultOutput) EncodingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) *string { return v.EncodingType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBucketMultipartUploadsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBucketMultipartUploadsResultOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o GetBucketMultipartUploadsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Information for each Upload.
func (o GetBucketMultipartUploadsResultOutput) Uploads() GetBucketMultipartUploadsUploadArrayOutput {
	return o.ApplyT(func(v GetBucketMultipartUploadsResult) []GetBucketMultipartUploadsUpload { return v.Uploads }).(GetBucketMultipartUploadsUploadArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBucketMultipartUploadsResultOutput{})
}
