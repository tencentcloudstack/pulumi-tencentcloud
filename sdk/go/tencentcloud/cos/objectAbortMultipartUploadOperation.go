// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to abort multipart upload
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cos.NewObjectAbortMultipartUploadOperation(ctx, "abortMultipartUpload", &Cos.ObjectAbortMultipartUploadOperationArgs{
//				Bucket:   pulumi.String("keep-test-xxxxxx"),
//				Key:      pulumi.String("object"),
//				UploadId: pulumi.String("xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ObjectAbortMultipartUploadOperation struct {
	pulumi.CustomResourceState

	// Bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Object key.
	Key pulumi.StringOutput `pulumi:"key"`
	// Multipart uploaded id.
	UploadId pulumi.StringOutput `pulumi:"uploadId"`
}

// NewObjectAbortMultipartUploadOperation registers a new resource with the given unique name, arguments, and options.
func NewObjectAbortMultipartUploadOperation(ctx *pulumi.Context,
	name string, args *ObjectAbortMultipartUploadOperationArgs, opts ...pulumi.ResourceOption) (*ObjectAbortMultipartUploadOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.UploadId == nil {
		return nil, errors.New("invalid value for required argument 'UploadId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ObjectAbortMultipartUploadOperation
	err := ctx.RegisterResource("tencentcloud:Cos/objectAbortMultipartUploadOperation:ObjectAbortMultipartUploadOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetObjectAbortMultipartUploadOperation gets an existing ObjectAbortMultipartUploadOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetObjectAbortMultipartUploadOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ObjectAbortMultipartUploadOperationState, opts ...pulumi.ResourceOption) (*ObjectAbortMultipartUploadOperation, error) {
	var resource ObjectAbortMultipartUploadOperation
	err := ctx.ReadResource("tencentcloud:Cos/objectAbortMultipartUploadOperation:ObjectAbortMultipartUploadOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ObjectAbortMultipartUploadOperation resources.
type objectAbortMultipartUploadOperationState struct {
	// Bucket.
	Bucket *string `pulumi:"bucket"`
	// Object key.
	Key *string `pulumi:"key"`
	// Multipart uploaded id.
	UploadId *string `pulumi:"uploadId"`
}

type ObjectAbortMultipartUploadOperationState struct {
	// Bucket.
	Bucket pulumi.StringPtrInput
	// Object key.
	Key pulumi.StringPtrInput
	// Multipart uploaded id.
	UploadId pulumi.StringPtrInput
}

func (ObjectAbortMultipartUploadOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*objectAbortMultipartUploadOperationState)(nil)).Elem()
}

type objectAbortMultipartUploadOperationArgs struct {
	// Bucket.
	Bucket string `pulumi:"bucket"`
	// Object key.
	Key string `pulumi:"key"`
	// Multipart uploaded id.
	UploadId string `pulumi:"uploadId"`
}

// The set of arguments for constructing a ObjectAbortMultipartUploadOperation resource.
type ObjectAbortMultipartUploadOperationArgs struct {
	// Bucket.
	Bucket pulumi.StringInput
	// Object key.
	Key pulumi.StringInput
	// Multipart uploaded id.
	UploadId pulumi.StringInput
}

func (ObjectAbortMultipartUploadOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*objectAbortMultipartUploadOperationArgs)(nil)).Elem()
}

type ObjectAbortMultipartUploadOperationInput interface {
	pulumi.Input

	ToObjectAbortMultipartUploadOperationOutput() ObjectAbortMultipartUploadOperationOutput
	ToObjectAbortMultipartUploadOperationOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationOutput
}

func (*ObjectAbortMultipartUploadOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectAbortMultipartUploadOperation)(nil)).Elem()
}

func (i *ObjectAbortMultipartUploadOperation) ToObjectAbortMultipartUploadOperationOutput() ObjectAbortMultipartUploadOperationOutput {
	return i.ToObjectAbortMultipartUploadOperationOutputWithContext(context.Background())
}

func (i *ObjectAbortMultipartUploadOperation) ToObjectAbortMultipartUploadOperationOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectAbortMultipartUploadOperationOutput)
}

// ObjectAbortMultipartUploadOperationArrayInput is an input type that accepts ObjectAbortMultipartUploadOperationArray and ObjectAbortMultipartUploadOperationArrayOutput values.
// You can construct a concrete instance of `ObjectAbortMultipartUploadOperationArrayInput` via:
//
//	ObjectAbortMultipartUploadOperationArray{ ObjectAbortMultipartUploadOperationArgs{...} }
type ObjectAbortMultipartUploadOperationArrayInput interface {
	pulumi.Input

	ToObjectAbortMultipartUploadOperationArrayOutput() ObjectAbortMultipartUploadOperationArrayOutput
	ToObjectAbortMultipartUploadOperationArrayOutputWithContext(context.Context) ObjectAbortMultipartUploadOperationArrayOutput
}

type ObjectAbortMultipartUploadOperationArray []ObjectAbortMultipartUploadOperationInput

func (ObjectAbortMultipartUploadOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectAbortMultipartUploadOperation)(nil)).Elem()
}

func (i ObjectAbortMultipartUploadOperationArray) ToObjectAbortMultipartUploadOperationArrayOutput() ObjectAbortMultipartUploadOperationArrayOutput {
	return i.ToObjectAbortMultipartUploadOperationArrayOutputWithContext(context.Background())
}

func (i ObjectAbortMultipartUploadOperationArray) ToObjectAbortMultipartUploadOperationArrayOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectAbortMultipartUploadOperationArrayOutput)
}

// ObjectAbortMultipartUploadOperationMapInput is an input type that accepts ObjectAbortMultipartUploadOperationMap and ObjectAbortMultipartUploadOperationMapOutput values.
// You can construct a concrete instance of `ObjectAbortMultipartUploadOperationMapInput` via:
//
//	ObjectAbortMultipartUploadOperationMap{ "key": ObjectAbortMultipartUploadOperationArgs{...} }
type ObjectAbortMultipartUploadOperationMapInput interface {
	pulumi.Input

	ToObjectAbortMultipartUploadOperationMapOutput() ObjectAbortMultipartUploadOperationMapOutput
	ToObjectAbortMultipartUploadOperationMapOutputWithContext(context.Context) ObjectAbortMultipartUploadOperationMapOutput
}

type ObjectAbortMultipartUploadOperationMap map[string]ObjectAbortMultipartUploadOperationInput

func (ObjectAbortMultipartUploadOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectAbortMultipartUploadOperation)(nil)).Elem()
}

func (i ObjectAbortMultipartUploadOperationMap) ToObjectAbortMultipartUploadOperationMapOutput() ObjectAbortMultipartUploadOperationMapOutput {
	return i.ToObjectAbortMultipartUploadOperationMapOutputWithContext(context.Background())
}

func (i ObjectAbortMultipartUploadOperationMap) ToObjectAbortMultipartUploadOperationMapOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectAbortMultipartUploadOperationMapOutput)
}

type ObjectAbortMultipartUploadOperationOutput struct{ *pulumi.OutputState }

func (ObjectAbortMultipartUploadOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ObjectAbortMultipartUploadOperation)(nil)).Elem()
}

func (o ObjectAbortMultipartUploadOperationOutput) ToObjectAbortMultipartUploadOperationOutput() ObjectAbortMultipartUploadOperationOutput {
	return o
}

func (o ObjectAbortMultipartUploadOperationOutput) ToObjectAbortMultipartUploadOperationOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationOutput {
	return o
}

// Bucket.
func (o ObjectAbortMultipartUploadOperationOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectAbortMultipartUploadOperation) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Object key.
func (o ObjectAbortMultipartUploadOperationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectAbortMultipartUploadOperation) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Multipart uploaded id.
func (o ObjectAbortMultipartUploadOperationOutput) UploadId() pulumi.StringOutput {
	return o.ApplyT(func(v *ObjectAbortMultipartUploadOperation) pulumi.StringOutput { return v.UploadId }).(pulumi.StringOutput)
}

type ObjectAbortMultipartUploadOperationArrayOutput struct{ *pulumi.OutputState }

func (ObjectAbortMultipartUploadOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ObjectAbortMultipartUploadOperation)(nil)).Elem()
}

func (o ObjectAbortMultipartUploadOperationArrayOutput) ToObjectAbortMultipartUploadOperationArrayOutput() ObjectAbortMultipartUploadOperationArrayOutput {
	return o
}

func (o ObjectAbortMultipartUploadOperationArrayOutput) ToObjectAbortMultipartUploadOperationArrayOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationArrayOutput {
	return o
}

func (o ObjectAbortMultipartUploadOperationArrayOutput) Index(i pulumi.IntInput) ObjectAbortMultipartUploadOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ObjectAbortMultipartUploadOperation {
		return vs[0].([]*ObjectAbortMultipartUploadOperation)[vs[1].(int)]
	}).(ObjectAbortMultipartUploadOperationOutput)
}

type ObjectAbortMultipartUploadOperationMapOutput struct{ *pulumi.OutputState }

func (ObjectAbortMultipartUploadOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ObjectAbortMultipartUploadOperation)(nil)).Elem()
}

func (o ObjectAbortMultipartUploadOperationMapOutput) ToObjectAbortMultipartUploadOperationMapOutput() ObjectAbortMultipartUploadOperationMapOutput {
	return o
}

func (o ObjectAbortMultipartUploadOperationMapOutput) ToObjectAbortMultipartUploadOperationMapOutputWithContext(ctx context.Context) ObjectAbortMultipartUploadOperationMapOutput {
	return o
}

func (o ObjectAbortMultipartUploadOperationMapOutput) MapIndex(k pulumi.StringInput) ObjectAbortMultipartUploadOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ObjectAbortMultipartUploadOperation {
		return vs[0].(map[string]*ObjectAbortMultipartUploadOperation)[vs[1].(string)]
	}).(ObjectAbortMultipartUploadOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectAbortMultipartUploadOperationInput)(nil)).Elem(), &ObjectAbortMultipartUploadOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectAbortMultipartUploadOperationArrayInput)(nil)).Elem(), ObjectAbortMultipartUploadOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ObjectAbortMultipartUploadOperationMapInput)(nil)).Elem(), ObjectAbortMultipartUploadOperationMap{})
	pulumi.RegisterOutputType(ObjectAbortMultipartUploadOperationOutput{})
	pulumi.RegisterOutputType(ObjectAbortMultipartUploadOperationArrayOutput{})
	pulumi.RegisterOutputType(ObjectAbortMultipartUploadOperationMapOutput{})
}
