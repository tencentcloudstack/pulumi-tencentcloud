// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cos bucket batch.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cos.NewBatch(ctx, "cosBatch", &Cos.BatchArgs{
//				Appid:                pulumi.Int(1308919341),
//				ConfirmationRequired: pulumi.Bool(true),
//				Description:          pulumi.String("cos_batch"),
//				Manifest: &cos.BatchManifestArgs{
//					Location: &cos.BatchManifestLocationArgs{
//						Etag:      pulumi.String("64357de8fd75a3abae2200135a2c9627"),
//						ObjectArn: pulumi.String("qcs::cos:ap-guangzhou:uid/1308919341:keep-test-1308919341/cos_bucket_inventory/1308919341/keep-test/test/20230621/manifest.json"),
//					},
//					Spec: &cos.BatchManifestSpecArgs{
//						Format: pulumi.String("COSInventoryReport_CSV_V1"),
//					},
//				},
//				Operation: &cos.BatchOperationArgs{
//					CosPutObjectCopy: &cos.BatchOperationCosPutObjectCopyArgs{
//						AccessControlDirective: pulumi.String("Copy"),
//						MetadataDirective:      pulumi.String("Copy"),
//						PrefixReplace:          pulumi.Bool(false),
//						StorageClass:           pulumi.String("STANDARD"),
//						TaggingDirective:       pulumi.String("Copy"),
//						TargetResource:         pulumi.String("qcs::cos:ap-guangzhou:uid/1308919341:cos-lock-1308919341"),
//					},
//				},
//				Priority: pulumi.Int(1),
//				Report: &cos.BatchReportArgs{
//					Bucket:      pulumi.String("qcs::cos:ap-guangzhou:uid/1308919341:keep-test-1308919341"),
//					Enabled:     pulumi.String("true"),
//					Format:      pulumi.String("Report_CSV_V1"),
//					ReportScope: pulumi.String("AllTasks"),
//				},
//				RoleArn: pulumi.String("qcs::cam::uin/100022975249:roleName/COSBatch_QCSRole"),
//				Status:  pulumi.String("Cancelled"),
//				Uin:     pulumi.String("100022975249"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cos bucket batch can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cos/batch:Batch cos_batch ${uin}#${appid}#{job_id}
//
// ```
type Batch struct {
	pulumi.CustomResourceState

	// Appid.
	Appid pulumi.IntOutput `pulumi:"appid"`
	// Whether to confirm before performing the task. The default is false.
	ConfirmationRequired pulumi.BoolPtrOutput `pulumi:"confirmationRequired"`
	// Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Job id.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// List of objects to be processed.
	Manifest BatchManifestOutput `pulumi:"manifest"`
	// Select the action to be performed on the objects in the manifest file.
	Operation BatchOperationOutput `pulumi:"operation"`
	// Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Task completion report.
	Report BatchReportOutput `pulumi:"report"`
	// COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
	RoleArn pulumi.StringOutput `pulumi:"roleArn"`
	// Current status of the task.
	// Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	// For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
	Status pulumi.StringOutput `pulumi:"status"`
	// Uin.
	Uin pulumi.StringOutput `pulumi:"uin"`
}

// NewBatch registers a new resource with the given unique name, arguments, and options.
func NewBatch(ctx *pulumi.Context,
	name string, args *BatchArgs, opts ...pulumi.ResourceOption) (*Batch, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Appid == nil {
		return nil, errors.New("invalid value for required argument 'Appid'")
	}
	if args.Manifest == nil {
		return nil, errors.New("invalid value for required argument 'Manifest'")
	}
	if args.Operation == nil {
		return nil, errors.New("invalid value for required argument 'Operation'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.Report == nil {
		return nil, errors.New("invalid value for required argument 'Report'")
	}
	if args.RoleArn == nil {
		return nil, errors.New("invalid value for required argument 'RoleArn'")
	}
	if args.Uin == nil {
		return nil, errors.New("invalid value for required argument 'Uin'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Batch
	err := ctx.RegisterResource("tencentcloud:Cos/batch:Batch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBatch gets an existing Batch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BatchState, opts ...pulumi.ResourceOption) (*Batch, error) {
	var resource Batch
	err := ctx.ReadResource("tencentcloud:Cos/batch:Batch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Batch resources.
type batchState struct {
	// Appid.
	Appid *int `pulumi:"appid"`
	// Whether to confirm before performing the task. The default is false.
	ConfirmationRequired *bool `pulumi:"confirmationRequired"`
	// Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
	Description *string `pulumi:"description"`
	// Job id.
	JobId *string `pulumi:"jobId"`
	// List of objects to be processed.
	Manifest *BatchManifest `pulumi:"manifest"`
	// Select the action to be performed on the objects in the manifest file.
	Operation *BatchOperation `pulumi:"operation"`
	// Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
	Priority *int `pulumi:"priority"`
	// Task completion report.
	Report *BatchReport `pulumi:"report"`
	// COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
	RoleArn *string `pulumi:"roleArn"`
	// Current status of the task.
	// Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	// For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
	Status *string `pulumi:"status"`
	// Uin.
	Uin *string `pulumi:"uin"`
}

type BatchState struct {
	// Appid.
	Appid pulumi.IntPtrInput
	// Whether to confirm before performing the task. The default is false.
	ConfirmationRequired pulumi.BoolPtrInput
	// Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
	Description pulumi.StringPtrInput
	// Job id.
	JobId pulumi.StringPtrInput
	// List of objects to be processed.
	Manifest BatchManifestPtrInput
	// Select the action to be performed on the objects in the manifest file.
	Operation BatchOperationPtrInput
	// Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
	Priority pulumi.IntPtrInput
	// Task completion report.
	Report BatchReportPtrInput
	// COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
	RoleArn pulumi.StringPtrInput
	// Current status of the task.
	// Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	// For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
	Status pulumi.StringPtrInput
	// Uin.
	Uin pulumi.StringPtrInput
}

func (BatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*batchState)(nil)).Elem()
}

type batchArgs struct {
	// Appid.
	Appid int `pulumi:"appid"`
	// Whether to confirm before performing the task. The default is false.
	ConfirmationRequired *bool `pulumi:"confirmationRequired"`
	// Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
	Description *string `pulumi:"description"`
	// List of objects to be processed.
	Manifest BatchManifest `pulumi:"manifest"`
	// Select the action to be performed on the objects in the manifest file.
	Operation BatchOperation `pulumi:"operation"`
	// Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
	Priority int `pulumi:"priority"`
	// Task completion report.
	Report BatchReport `pulumi:"report"`
	// COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
	RoleArn string `pulumi:"roleArn"`
	// Current status of the task.
	// Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	// For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
	Status *string `pulumi:"status"`
	// Uin.
	Uin string `pulumi:"uin"`
}

// The set of arguments for constructing a Batch resource.
type BatchArgs struct {
	// Appid.
	Appid pulumi.IntInput
	// Whether to confirm before performing the task. The default is false.
	ConfirmationRequired pulumi.BoolPtrInput
	// Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
	Description pulumi.StringPtrInput
	// List of objects to be processed.
	Manifest BatchManifestInput
	// Select the action to be performed on the objects in the manifest file.
	Operation BatchOperationInput
	// Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
	Priority pulumi.IntInput
	// Task completion report.
	Report BatchReportInput
	// COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
	RoleArn pulumi.StringInput
	// Current status of the task.
	// Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	// For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
	Status pulumi.StringPtrInput
	// Uin.
	Uin pulumi.StringInput
}

func (BatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*batchArgs)(nil)).Elem()
}

type BatchInput interface {
	pulumi.Input

	ToBatchOutput() BatchOutput
	ToBatchOutputWithContext(ctx context.Context) BatchOutput
}

func (*Batch) ElementType() reflect.Type {
	return reflect.TypeOf((**Batch)(nil)).Elem()
}

func (i *Batch) ToBatchOutput() BatchOutput {
	return i.ToBatchOutputWithContext(context.Background())
}

func (i *Batch) ToBatchOutputWithContext(ctx context.Context) BatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchOutput)
}

// BatchArrayInput is an input type that accepts BatchArray and BatchArrayOutput values.
// You can construct a concrete instance of `BatchArrayInput` via:
//
//	BatchArray{ BatchArgs{...} }
type BatchArrayInput interface {
	pulumi.Input

	ToBatchArrayOutput() BatchArrayOutput
	ToBatchArrayOutputWithContext(context.Context) BatchArrayOutput
}

type BatchArray []BatchInput

func (BatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Batch)(nil)).Elem()
}

func (i BatchArray) ToBatchArrayOutput() BatchArrayOutput {
	return i.ToBatchArrayOutputWithContext(context.Background())
}

func (i BatchArray) ToBatchArrayOutputWithContext(ctx context.Context) BatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchArrayOutput)
}

// BatchMapInput is an input type that accepts BatchMap and BatchMapOutput values.
// You can construct a concrete instance of `BatchMapInput` via:
//
//	BatchMap{ "key": BatchArgs{...} }
type BatchMapInput interface {
	pulumi.Input

	ToBatchMapOutput() BatchMapOutput
	ToBatchMapOutputWithContext(context.Context) BatchMapOutput
}

type BatchMap map[string]BatchInput

func (BatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Batch)(nil)).Elem()
}

func (i BatchMap) ToBatchMapOutput() BatchMapOutput {
	return i.ToBatchMapOutputWithContext(context.Background())
}

func (i BatchMap) ToBatchMapOutputWithContext(ctx context.Context) BatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchMapOutput)
}

type BatchOutput struct{ *pulumi.OutputState }

func (BatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Batch)(nil)).Elem()
}

func (o BatchOutput) ToBatchOutput() BatchOutput {
	return o
}

func (o BatchOutput) ToBatchOutputWithContext(ctx context.Context) BatchOutput {
	return o
}

// Appid.
func (o BatchOutput) Appid() pulumi.IntOutput {
	return o.ApplyT(func(v *Batch) pulumi.IntOutput { return v.Appid }).(pulumi.IntOutput)
}

// Whether to confirm before performing the task. The default is false.
func (o BatchOutput) ConfirmationRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Batch) pulumi.BoolPtrOutput { return v.ConfirmationRequired }).(pulumi.BoolPtrOutput)
}

// Mission description. If you configured this information when you created the task, the content is returned. The description length ranges from 0 to 256 bytes.
func (o BatchOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Batch) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Job id.
func (o BatchOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *Batch) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// List of objects to be processed.
func (o BatchOutput) Manifest() BatchManifestOutput {
	return o.ApplyT(func(v *Batch) BatchManifestOutput { return v.Manifest }).(BatchManifestOutput)
}

// Select the action to be performed on the objects in the manifest file.
func (o BatchOutput) Operation() BatchOperationOutput {
	return o.ApplyT(func(v *Batch) BatchOperationOutput { return v.Operation }).(BatchOperationOutput)
}

// Mission priority. The higher the value, the higher the priority of the task. Priority values range from 0 to 2147483647.
func (o BatchOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *Batch) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Task completion report.
func (o BatchOutput) Report() BatchReportOutput {
	return o.ApplyT(func(v *Batch) BatchReportOutput { return v.Report }).(BatchReportOutput)
}

// COS resource identifier, which is used to identify the role you created. You need this resource identifier to verify your identity.
func (o BatchOutput) RoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *Batch) pulumi.StringOutput { return v.RoleArn }).(pulumi.StringOutput)
}

// Current status of the task.
// Legal parameter values include Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
// For Update status, when you move a task to the Ready state, COS will assume that you have confirmed the task and will perform it. When you move a task to the Cancelled state, COS cancels the task. Optional parameters include: Ready, Cancelled.
func (o BatchOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Batch) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Uin.
func (o BatchOutput) Uin() pulumi.StringOutput {
	return o.ApplyT(func(v *Batch) pulumi.StringOutput { return v.Uin }).(pulumi.StringOutput)
}

type BatchArrayOutput struct{ *pulumi.OutputState }

func (BatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Batch)(nil)).Elem()
}

func (o BatchArrayOutput) ToBatchArrayOutput() BatchArrayOutput {
	return o
}

func (o BatchArrayOutput) ToBatchArrayOutputWithContext(ctx context.Context) BatchArrayOutput {
	return o
}

func (o BatchArrayOutput) Index(i pulumi.IntInput) BatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Batch {
		return vs[0].([]*Batch)[vs[1].(int)]
	}).(BatchOutput)
}

type BatchMapOutput struct{ *pulumi.OutputState }

func (BatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Batch)(nil)).Elem()
}

func (o BatchMapOutput) ToBatchMapOutput() BatchMapOutput {
	return o
}

func (o BatchMapOutput) ToBatchMapOutputWithContext(ctx context.Context) BatchMapOutput {
	return o
}

func (o BatchMapOutput) MapIndex(k pulumi.StringInput) BatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Batch {
		return vs[0].(map[string]*Batch)[vs[1].(string)]
	}).(BatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BatchInput)(nil)).Elem(), &Batch{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchArrayInput)(nil)).Elem(), BatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchMapInput)(nil)).Elem(), BatchMap{})
	pulumi.RegisterOutputType(BatchOutput{})
	pulumi.RegisterOutputType(BatchArrayOutput{})
	pulumi.RegisterOutputType(BatchMapOutput{})
}
