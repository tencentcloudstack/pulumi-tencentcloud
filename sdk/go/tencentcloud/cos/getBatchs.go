// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query the COS batch.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cos.GetBatchs(ctx, &cos.GetBatchsArgs{
//				Appid: "xxxxxx",
//				Uin:   "xxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetBatchs(ctx *pulumi.Context, args *GetBatchsArgs, opts ...pulumi.InvokeOption) (*GetBatchsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetBatchsResult
	err := ctx.Invoke("tencentcloud:Cos/getBatchs:getBatchs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBatchs.
type GetBatchsArgs struct {
	// Appid.
	Appid int `pulumi:"appid"`
	// The task status information you need to query. If you do not specify a task status, COS returns the status of all tasks that have been executed, including those that are in progress. If you specify a task status, COS returns the task in the specified state. Optional task states include: Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	JobStatuses *string `pulumi:"jobStatuses"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Uin.
	Uin string `pulumi:"uin"`
}

// A collection of values returned by getBatchs.
type GetBatchsResult struct {
	Appid int `pulumi:"appid"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	JobStatuses *string `pulumi:"jobStatuses"`
	// Multiple batch processing task information.
	Jobs             []GetBatchsJob `pulumi:"jobs"`
	ResultOutputFile *string        `pulumi:"resultOutputFile"`
	Uin              string         `pulumi:"uin"`
}

func GetBatchsOutput(ctx *pulumi.Context, args GetBatchsOutputArgs, opts ...pulumi.InvokeOption) GetBatchsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBatchsResult, error) {
			args := v.(GetBatchsArgs)
			r, err := GetBatchs(ctx, &args, opts...)
			var s GetBatchsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBatchsResultOutput)
}

// A collection of arguments for invoking getBatchs.
type GetBatchsOutputArgs struct {
	// Appid.
	Appid pulumi.IntInput `pulumi:"appid"`
	// The task status information you need to query. If you do not specify a task status, COS returns the status of all tasks that have been executed, including those that are in progress. If you specify a task status, COS returns the task in the specified state. Optional task states include: Active, Cancelled, Cancelling, Complete, Completing, Failed, Failing, New, Paused, Pausing, Preparing, Ready, Suspended.
	JobStatuses pulumi.StringPtrInput `pulumi:"jobStatuses"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Uin.
	Uin pulumi.StringInput `pulumi:"uin"`
}

func (GetBatchsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBatchsArgs)(nil)).Elem()
}

// A collection of values returned by getBatchs.
type GetBatchsResultOutput struct{ *pulumi.OutputState }

func (GetBatchsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBatchsResult)(nil)).Elem()
}

func (o GetBatchsResultOutput) ToGetBatchsResultOutput() GetBatchsResultOutput {
	return o
}

func (o GetBatchsResultOutput) ToGetBatchsResultOutputWithContext(ctx context.Context) GetBatchsResultOutput {
	return o
}

func (o GetBatchsResultOutput) Appid() pulumi.IntOutput {
	return o.ApplyT(func(v GetBatchsResult) int { return v.Appid }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBatchsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBatchsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetBatchsResultOutput) JobStatuses() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBatchsResult) *string { return v.JobStatuses }).(pulumi.StringPtrOutput)
}

// Multiple batch processing task information.
func (o GetBatchsResultOutput) Jobs() GetBatchsJobArrayOutput {
	return o.ApplyT(func(v GetBatchsResult) []GetBatchsJob { return v.Jobs }).(GetBatchsJobArrayOutput)
}

func (o GetBatchsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBatchsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetBatchsResultOutput) Uin() pulumi.StringOutput {
	return o.ApplyT(func(v GetBatchsResult) string { return v.Uin }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBatchsResultOutput{})
}
