// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ssm rotateProductSecret
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ssm"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ssm.NewRotateProductSecret(ctx, "example", &Ssm.RotateProductSecretArgs{
//				SecretName: pulumi.String("tf_example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RotateProductSecret struct {
	pulumi.CustomResourceState

	// Secret name.
	SecretName pulumi.StringOutput `pulumi:"secretName"`
}

// NewRotateProductSecret registers a new resource with the given unique name, arguments, and options.
func NewRotateProductSecret(ctx *pulumi.Context,
	name string, args *RotateProductSecretArgs, opts ...pulumi.ResourceOption) (*RotateProductSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecretName == nil {
		return nil, errors.New("invalid value for required argument 'SecretName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RotateProductSecret
	err := ctx.RegisterResource("tencentcloud:Ssm/rotateProductSecret:RotateProductSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRotateProductSecret gets an existing RotateProductSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRotateProductSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RotateProductSecretState, opts ...pulumi.ResourceOption) (*RotateProductSecret, error) {
	var resource RotateProductSecret
	err := ctx.ReadResource("tencentcloud:Ssm/rotateProductSecret:RotateProductSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RotateProductSecret resources.
type rotateProductSecretState struct {
	// Secret name.
	SecretName *string `pulumi:"secretName"`
}

type RotateProductSecretState struct {
	// Secret name.
	SecretName pulumi.StringPtrInput
}

func (RotateProductSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*rotateProductSecretState)(nil)).Elem()
}

type rotateProductSecretArgs struct {
	// Secret name.
	SecretName string `pulumi:"secretName"`
}

// The set of arguments for constructing a RotateProductSecret resource.
type RotateProductSecretArgs struct {
	// Secret name.
	SecretName pulumi.StringInput
}

func (RotateProductSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rotateProductSecretArgs)(nil)).Elem()
}

type RotateProductSecretInput interface {
	pulumi.Input

	ToRotateProductSecretOutput() RotateProductSecretOutput
	ToRotateProductSecretOutputWithContext(ctx context.Context) RotateProductSecretOutput
}

func (*RotateProductSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**RotateProductSecret)(nil)).Elem()
}

func (i *RotateProductSecret) ToRotateProductSecretOutput() RotateProductSecretOutput {
	return i.ToRotateProductSecretOutputWithContext(context.Background())
}

func (i *RotateProductSecret) ToRotateProductSecretOutputWithContext(ctx context.Context) RotateProductSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotateProductSecretOutput)
}

// RotateProductSecretArrayInput is an input type that accepts RotateProductSecretArray and RotateProductSecretArrayOutput values.
// You can construct a concrete instance of `RotateProductSecretArrayInput` via:
//
//	RotateProductSecretArray{ RotateProductSecretArgs{...} }
type RotateProductSecretArrayInput interface {
	pulumi.Input

	ToRotateProductSecretArrayOutput() RotateProductSecretArrayOutput
	ToRotateProductSecretArrayOutputWithContext(context.Context) RotateProductSecretArrayOutput
}

type RotateProductSecretArray []RotateProductSecretInput

func (RotateProductSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RotateProductSecret)(nil)).Elem()
}

func (i RotateProductSecretArray) ToRotateProductSecretArrayOutput() RotateProductSecretArrayOutput {
	return i.ToRotateProductSecretArrayOutputWithContext(context.Background())
}

func (i RotateProductSecretArray) ToRotateProductSecretArrayOutputWithContext(ctx context.Context) RotateProductSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotateProductSecretArrayOutput)
}

// RotateProductSecretMapInput is an input type that accepts RotateProductSecretMap and RotateProductSecretMapOutput values.
// You can construct a concrete instance of `RotateProductSecretMapInput` via:
//
//	RotateProductSecretMap{ "key": RotateProductSecretArgs{...} }
type RotateProductSecretMapInput interface {
	pulumi.Input

	ToRotateProductSecretMapOutput() RotateProductSecretMapOutput
	ToRotateProductSecretMapOutputWithContext(context.Context) RotateProductSecretMapOutput
}

type RotateProductSecretMap map[string]RotateProductSecretInput

func (RotateProductSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RotateProductSecret)(nil)).Elem()
}

func (i RotateProductSecretMap) ToRotateProductSecretMapOutput() RotateProductSecretMapOutput {
	return i.ToRotateProductSecretMapOutputWithContext(context.Background())
}

func (i RotateProductSecretMap) ToRotateProductSecretMapOutputWithContext(ctx context.Context) RotateProductSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RotateProductSecretMapOutput)
}

type RotateProductSecretOutput struct{ *pulumi.OutputState }

func (RotateProductSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RotateProductSecret)(nil)).Elem()
}

func (o RotateProductSecretOutput) ToRotateProductSecretOutput() RotateProductSecretOutput {
	return o
}

func (o RotateProductSecretOutput) ToRotateProductSecretOutputWithContext(ctx context.Context) RotateProductSecretOutput {
	return o
}

// Secret name.
func (o RotateProductSecretOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v *RotateProductSecret) pulumi.StringOutput { return v.SecretName }).(pulumi.StringOutput)
}

type RotateProductSecretArrayOutput struct{ *pulumi.OutputState }

func (RotateProductSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RotateProductSecret)(nil)).Elem()
}

func (o RotateProductSecretArrayOutput) ToRotateProductSecretArrayOutput() RotateProductSecretArrayOutput {
	return o
}

func (o RotateProductSecretArrayOutput) ToRotateProductSecretArrayOutputWithContext(ctx context.Context) RotateProductSecretArrayOutput {
	return o
}

func (o RotateProductSecretArrayOutput) Index(i pulumi.IntInput) RotateProductSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RotateProductSecret {
		return vs[0].([]*RotateProductSecret)[vs[1].(int)]
	}).(RotateProductSecretOutput)
}

type RotateProductSecretMapOutput struct{ *pulumi.OutputState }

func (RotateProductSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RotateProductSecret)(nil)).Elem()
}

func (o RotateProductSecretMapOutput) ToRotateProductSecretMapOutput() RotateProductSecretMapOutput {
	return o
}

func (o RotateProductSecretMapOutput) ToRotateProductSecretMapOutputWithContext(ctx context.Context) RotateProductSecretMapOutput {
	return o
}

func (o RotateProductSecretMapOutput) MapIndex(k pulumi.StringInput) RotateProductSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RotateProductSecret {
		return vs[0].(map[string]*RotateProductSecret)[vs[1].(string)]
	}).(RotateProductSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RotateProductSecretInput)(nil)).Elem(), &RotateProductSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotateProductSecretArrayInput)(nil)).Elem(), RotateProductSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RotateProductSecretMapInput)(nil)).Elem(), RotateProductSecretMap{})
	pulumi.RegisterOutputType(RotateProductSecretOutput{})
	pulumi.RegisterOutputType(RotateProductSecretArrayOutput{})
	pulumi.RegisterOutputType(RotateProductSecretMapOutput{})
}
