// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ssm

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ssm rotationDetail
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ssm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ssm"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ssm.GetRotationDetail(ctx, &ssm.GetRotationDetailArgs{
//				SecretName: "tf_example",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRotationDetail(ctx *pulumi.Context, args *GetRotationDetailArgs, opts ...pulumi.InvokeOption) (*GetRotationDetailResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRotationDetailResult
	err := ctx.Invoke("tencentcloud:Ssm/getRotationDetail:getRotationDetail", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRotationDetail.
type GetRotationDetailArgs struct {
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Secret name.
	SecretName string `pulumi:"secretName"`
}

// A collection of values returned by getRotationDetail.
type GetRotationDetailResult struct {
	// Whether to allow rotation.
	EnableRotation bool `pulumi:"enableRotation"`
	// The rotation frequency, in days, defaults to 1 day.
	Frequency int `pulumi:"frequency"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Time of last rotation.
	LatestRotateTime string `pulumi:"latestRotateTime"`
	// The time to start the next rotation.
	NextRotateBeginTime string  `pulumi:"nextRotateBeginTime"`
	ResultOutputFile    *string `pulumi:"resultOutputFile"`
	SecretName          string  `pulumi:"secretName"`
}

func GetRotationDetailOutput(ctx *pulumi.Context, args GetRotationDetailOutputArgs, opts ...pulumi.InvokeOption) GetRotationDetailResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRotationDetailResult, error) {
			args := v.(GetRotationDetailArgs)
			r, err := GetRotationDetail(ctx, &args, opts...)
			var s GetRotationDetailResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRotationDetailResultOutput)
}

// A collection of arguments for invoking getRotationDetail.
type GetRotationDetailOutputArgs struct {
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Secret name.
	SecretName pulumi.StringInput `pulumi:"secretName"`
}

func (GetRotationDetailOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRotationDetailArgs)(nil)).Elem()
}

// A collection of values returned by getRotationDetail.
type GetRotationDetailResultOutput struct{ *pulumi.OutputState }

func (GetRotationDetailResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRotationDetailResult)(nil)).Elem()
}

func (o GetRotationDetailResultOutput) ToGetRotationDetailResultOutput() GetRotationDetailResultOutput {
	return o
}

func (o GetRotationDetailResultOutput) ToGetRotationDetailResultOutputWithContext(ctx context.Context) GetRotationDetailResultOutput {
	return o
}

// Whether to allow rotation.
func (o GetRotationDetailResultOutput) EnableRotation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRotationDetailResult) bool { return v.EnableRotation }).(pulumi.BoolOutput)
}

// The rotation frequency, in days, defaults to 1 day.
func (o GetRotationDetailResultOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetRotationDetailResult) int { return v.Frequency }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRotationDetailResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRotationDetailResult) string { return v.Id }).(pulumi.StringOutput)
}

// Time of last rotation.
func (o GetRotationDetailResultOutput) LatestRotateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRotationDetailResult) string { return v.LatestRotateTime }).(pulumi.StringOutput)
}

// The time to start the next rotation.
func (o GetRotationDetailResultOutput) NextRotateBeginTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRotationDetailResult) string { return v.NextRotateBeginTime }).(pulumi.StringOutput)
}

func (o GetRotationDetailResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRotationDetailResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetRotationDetailResultOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRotationDetailResult) string { return v.SecretName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRotationDetailResultOutput{})
}
