// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provide a resource to create a Private Dns Record.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/PrivateDns"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create private dns zone
//			exampleZone, err := PrivateDns.NewZone(ctx, "exampleZone", &PrivateDns.ZoneArgs{
//				Domain: pulumi.String("domain.com"),
//				Remark: pulumi.String("remark."),
//				VpcSets: privatedns.ZoneVpcSetArray{
//					&privatedns.ZoneVpcSetArgs{
//						Region:    pulumi.String("ap-guangzhou"),
//						UniqVpcId: vpc.ID(),
//					},
//				},
//				DnsForwardStatus:   pulumi.String("DISABLED"),
//				CnameSpeedupStatus: pulumi.String("ENABLED"),
//				Tags: pulumi.Map{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create private dns record
//			_, err = PrivateDns.NewRecord(ctx, "exampleRecord", &PrivateDns.RecordArgs{
//				ZoneId:      exampleZone.ID(),
//				RecordType:  pulumi.String("A"),
//				RecordValue: pulumi.String("192.168.1.2"),
//				SubDomain:   pulumi.String("www"),
//				Ttl:         pulumi.Int(300),
//				Weight:      pulumi.Int(1),
//				Mx:          pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Private Dns Record can be imported, e.g.
//
// ```sh
// $ pulumi import tencentcloud:PrivateDns/record:Record example zone-iza3a33s#1983030
// ```
type Record struct {
	pulumi.CustomResourceState

	// MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
	Mx pulumi.IntPtrOutput `pulumi:"mx"`
	// Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
	RecordType pulumi.StringOutput `pulumi:"recordType"`
	// Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
	RecordValue pulumi.StringOutput `pulumi:"recordValue"`
	// Subdomain, such as `www`, `m`, and `@`.
	SubDomain pulumi.StringOutput `pulumi:"subDomain"`
	// Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// Record weight. Value range: 1~100.
	Weight pulumi.IntPtrOutput `pulumi:"weight"`
	// Private domain ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecordType == nil {
		return nil, errors.New("invalid value for required argument 'RecordType'")
	}
	if args.RecordValue == nil {
		return nil, errors.New("invalid value for required argument 'RecordValue'")
	}
	if args.SubDomain == nil {
		return nil, errors.New("invalid value for required argument 'SubDomain'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("tencentcloud:PrivateDns/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("tencentcloud:PrivateDns/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
	Mx *int `pulumi:"mx"`
	// Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
	RecordType *string `pulumi:"recordType"`
	// Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
	RecordValue *string `pulumi:"recordValue"`
	// Subdomain, such as `www`, `m`, and `@`.
	SubDomain *string `pulumi:"subDomain"`
	// Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
	Ttl *int `pulumi:"ttl"`
	// Record weight. Value range: 1~100.
	Weight *int `pulumi:"weight"`
	// Private domain ID.
	ZoneId *string `pulumi:"zoneId"`
}

type RecordState struct {
	// MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
	Mx pulumi.IntPtrInput
	// Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
	RecordType pulumi.StringPtrInput
	// Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
	RecordValue pulumi.StringPtrInput
	// Subdomain, such as `www`, `m`, and `@`.
	SubDomain pulumi.StringPtrInput
	// Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
	Ttl pulumi.IntPtrInput
	// Record weight. Value range: 1~100.
	Weight pulumi.IntPtrInput
	// Private domain ID.
	ZoneId pulumi.StringPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
	Mx *int `pulumi:"mx"`
	// Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
	RecordType string `pulumi:"recordType"`
	// Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
	RecordValue string `pulumi:"recordValue"`
	// Subdomain, such as `www`, `m`, and `@`.
	SubDomain string `pulumi:"subDomain"`
	// Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
	Ttl *int `pulumi:"ttl"`
	// Record weight. Value range: 1~100.
	Weight *int `pulumi:"weight"`
	// Private domain ID.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
	Mx pulumi.IntPtrInput
	// Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
	RecordType pulumi.StringInput
	// Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
	RecordValue pulumi.StringInput
	// Subdomain, such as `www`, `m`, and `@`.
	SubDomain pulumi.StringInput
	// Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
	Ttl pulumi.IntPtrInput
	// Record weight. Value range: 1~100.
	Weight pulumi.IntPtrInput
	// Private domain ID.
	ZoneId pulumi.StringInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//	RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// MX priority, which is required when the record type is MX. Valid values: 5, 10, 15, 20, 30, 40, 50.
func (o RecordOutput) Mx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Mx }).(pulumi.IntPtrOutput)
}

// Record type. Valid values: `A`, `AAAA`, `CNAME`, `MX`, `TXT`, `PTR`.
func (o RecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordType }).(pulumi.StringOutput)
}

// Record value, such as IP: 192.168.10.2, CNAME: cname.qcloud.com, and MX: mail.qcloud.com.
func (o RecordOutput) RecordValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordValue }).(pulumi.StringOutput)
}

// Subdomain, such as `www`, `m`, and `@`.
func (o RecordOutput) SubDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.SubDomain }).(pulumi.StringOutput)
}

// Record cache time. The smaller the value, the faster the record will take effect. Value range: 1~86400s.
func (o RecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *Record) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// Record weight. Value range: 1~100.
func (o RecordOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Record) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

// Private domain ID.
func (o RecordOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
