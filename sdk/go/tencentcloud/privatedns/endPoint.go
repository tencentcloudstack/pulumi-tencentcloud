// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package privatedns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a privatedns end point
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/PrivateDns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := PrivateDns.NewEndPoint(ctx, "example", &PrivateDns.EndPointArgs{
//				EndPointName:      pulumi.String("tf-example"),
//				EndPointRegion:    pulumi.String("ap-guangzhou"),
//				EndPointServiceId: pulumi.String("vpcsvc-61wcwmar"),
//				IpNum:             pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// private dns end point can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:PrivateDns/endPoint:EndPoint example eid-77a246c867
// ```
type EndPoint struct {
	pulumi.CustomResourceState

	// Endpoint name.
	EndPointName pulumi.StringOutput `pulumi:"endPointName"`
	// Endpoint region, which should be consistent with the region of the endpoint service.
	EndPointRegion pulumi.StringOutput `pulumi:"endPointRegion"`
	// Endpoint service ID (namely, VPC endpoint service ID).
	EndPointServiceId pulumi.StringOutput `pulumi:"endPointServiceId"`
	// Vip list of endpoint.
	EndPointVipSets pulumi.StringArrayOutput `pulumi:"endPointVipSets"`
	// Number of endpoint IP addresses.
	IpNum pulumi.IntOutput `pulumi:"ipNum"`
}

// NewEndPoint registers a new resource with the given unique name, arguments, and options.
func NewEndPoint(ctx *pulumi.Context,
	name string, args *EndPointArgs, opts ...pulumi.ResourceOption) (*EndPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndPointName == nil {
		return nil, errors.New("invalid value for required argument 'EndPointName'")
	}
	if args.EndPointRegion == nil {
		return nil, errors.New("invalid value for required argument 'EndPointRegion'")
	}
	if args.EndPointServiceId == nil {
		return nil, errors.New("invalid value for required argument 'EndPointServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EndPoint
	err := ctx.RegisterResource("tencentcloud:PrivateDns/endPoint:EndPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndPoint gets an existing EndPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndPointState, opts ...pulumi.ResourceOption) (*EndPoint, error) {
	var resource EndPoint
	err := ctx.ReadResource("tencentcloud:PrivateDns/endPoint:EndPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EndPoint resources.
type endPointState struct {
	// Endpoint name.
	EndPointName *string `pulumi:"endPointName"`
	// Endpoint region, which should be consistent with the region of the endpoint service.
	EndPointRegion *string `pulumi:"endPointRegion"`
	// Endpoint service ID (namely, VPC endpoint service ID).
	EndPointServiceId *string `pulumi:"endPointServiceId"`
	// Vip list of endpoint.
	EndPointVipSets []string `pulumi:"endPointVipSets"`
	// Number of endpoint IP addresses.
	IpNum *int `pulumi:"ipNum"`
}

type EndPointState struct {
	// Endpoint name.
	EndPointName pulumi.StringPtrInput
	// Endpoint region, which should be consistent with the region of the endpoint service.
	EndPointRegion pulumi.StringPtrInput
	// Endpoint service ID (namely, VPC endpoint service ID).
	EndPointServiceId pulumi.StringPtrInput
	// Vip list of endpoint.
	EndPointVipSets pulumi.StringArrayInput
	// Number of endpoint IP addresses.
	IpNum pulumi.IntPtrInput
}

func (EndPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endPointState)(nil)).Elem()
}

type endPointArgs struct {
	// Endpoint name.
	EndPointName string `pulumi:"endPointName"`
	// Endpoint region, which should be consistent with the region of the endpoint service.
	EndPointRegion string `pulumi:"endPointRegion"`
	// Endpoint service ID (namely, VPC endpoint service ID).
	EndPointServiceId string `pulumi:"endPointServiceId"`
	// Number of endpoint IP addresses.
	IpNum *int `pulumi:"ipNum"`
}

// The set of arguments for constructing a EndPoint resource.
type EndPointArgs struct {
	// Endpoint name.
	EndPointName pulumi.StringInput
	// Endpoint region, which should be consistent with the region of the endpoint service.
	EndPointRegion pulumi.StringInput
	// Endpoint service ID (namely, VPC endpoint service ID).
	EndPointServiceId pulumi.StringInput
	// Number of endpoint IP addresses.
	IpNum pulumi.IntPtrInput
}

func (EndPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endPointArgs)(nil)).Elem()
}

type EndPointInput interface {
	pulumi.Input

	ToEndPointOutput() EndPointOutput
	ToEndPointOutputWithContext(ctx context.Context) EndPointOutput
}

func (*EndPoint) ElementType() reflect.Type {
	return reflect.TypeOf((**EndPoint)(nil)).Elem()
}

func (i *EndPoint) ToEndPointOutput() EndPointOutput {
	return i.ToEndPointOutputWithContext(context.Background())
}

func (i *EndPoint) ToEndPointOutputWithContext(ctx context.Context) EndPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndPointOutput)
}

// EndPointArrayInput is an input type that accepts EndPointArray and EndPointArrayOutput values.
// You can construct a concrete instance of `EndPointArrayInput` via:
//
//	EndPointArray{ EndPointArgs{...} }
type EndPointArrayInput interface {
	pulumi.Input

	ToEndPointArrayOutput() EndPointArrayOutput
	ToEndPointArrayOutputWithContext(context.Context) EndPointArrayOutput
}

type EndPointArray []EndPointInput

func (EndPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndPoint)(nil)).Elem()
}

func (i EndPointArray) ToEndPointArrayOutput() EndPointArrayOutput {
	return i.ToEndPointArrayOutputWithContext(context.Background())
}

func (i EndPointArray) ToEndPointArrayOutputWithContext(ctx context.Context) EndPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndPointArrayOutput)
}

// EndPointMapInput is an input type that accepts EndPointMap and EndPointMapOutput values.
// You can construct a concrete instance of `EndPointMapInput` via:
//
//	EndPointMap{ "key": EndPointArgs{...} }
type EndPointMapInput interface {
	pulumi.Input

	ToEndPointMapOutput() EndPointMapOutput
	ToEndPointMapOutputWithContext(context.Context) EndPointMapOutput
}

type EndPointMap map[string]EndPointInput

func (EndPointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndPoint)(nil)).Elem()
}

func (i EndPointMap) ToEndPointMapOutput() EndPointMapOutput {
	return i.ToEndPointMapOutputWithContext(context.Background())
}

func (i EndPointMap) ToEndPointMapOutputWithContext(ctx context.Context) EndPointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndPointMapOutput)
}

type EndPointOutput struct{ *pulumi.OutputState }

func (EndPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EndPoint)(nil)).Elem()
}

func (o EndPointOutput) ToEndPointOutput() EndPointOutput {
	return o
}

func (o EndPointOutput) ToEndPointOutputWithContext(ctx context.Context) EndPointOutput {
	return o
}

// Endpoint name.
func (o EndPointOutput) EndPointName() pulumi.StringOutput {
	return o.ApplyT(func(v *EndPoint) pulumi.StringOutput { return v.EndPointName }).(pulumi.StringOutput)
}

// Endpoint region, which should be consistent with the region of the endpoint service.
func (o EndPointOutput) EndPointRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *EndPoint) pulumi.StringOutput { return v.EndPointRegion }).(pulumi.StringOutput)
}

// Endpoint service ID (namely, VPC endpoint service ID).
func (o EndPointOutput) EndPointServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EndPoint) pulumi.StringOutput { return v.EndPointServiceId }).(pulumi.StringOutput)
}

// Vip list of endpoint.
func (o EndPointOutput) EndPointVipSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EndPoint) pulumi.StringArrayOutput { return v.EndPointVipSets }).(pulumi.StringArrayOutput)
}

// Number of endpoint IP addresses.
func (o EndPointOutput) IpNum() pulumi.IntOutput {
	return o.ApplyT(func(v *EndPoint) pulumi.IntOutput { return v.IpNum }).(pulumi.IntOutput)
}

type EndPointArrayOutput struct{ *pulumi.OutputState }

func (EndPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EndPoint)(nil)).Elem()
}

func (o EndPointArrayOutput) ToEndPointArrayOutput() EndPointArrayOutput {
	return o
}

func (o EndPointArrayOutput) ToEndPointArrayOutputWithContext(ctx context.Context) EndPointArrayOutput {
	return o
}

func (o EndPointArrayOutput) Index(i pulumi.IntInput) EndPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EndPoint {
		return vs[0].([]*EndPoint)[vs[1].(int)]
	}).(EndPointOutput)
}

type EndPointMapOutput struct{ *pulumi.OutputState }

func (EndPointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EndPoint)(nil)).Elem()
}

func (o EndPointMapOutput) ToEndPointMapOutput() EndPointMapOutput {
	return o
}

func (o EndPointMapOutput) ToEndPointMapOutputWithContext(ctx context.Context) EndPointMapOutput {
	return o
}

func (o EndPointMapOutput) MapIndex(k pulumi.StringInput) EndPointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EndPoint {
		return vs[0].(map[string]*EndPoint)[vs[1].(string)]
	}).(EndPointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndPointInput)(nil)).Elem(), &EndPoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndPointArrayInput)(nil)).Elem(), EndPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndPointMapInput)(nil)).Elem(), EndPointMap{})
	pulumi.RegisterOutputType(EndPointOutput{})
	pulumi.RegisterOutputType(EndPointArrayOutput{})
	pulumi.RegisterOutputType(EndPointMapOutput{})
}
