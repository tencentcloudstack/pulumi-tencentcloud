// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tke tmpPrometheusConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			defaultInstanceType := "SA1.MEDIUM2"
//			if param := cfg.Get("defaultInstanceType"); param != "" {
//				defaultInstanceType = param
//			}
//			availabilityZoneFirst := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZoneFirst"); param != "" {
//				availabilityZoneFirst = param
//			}
//			availabilityZoneSecond := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZoneSecond"); param != "" {
//				availabilityZoneSecond = param
//			}
//			exampleClusterCidr := "10.31.0.0/16"
//			if param := cfg.Get("exampleClusterCidr"); param != "" {
//				exampleClusterCidr = param
//			}
//			vpcOne, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZoneFirst),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			firstVpcId := vpcOne.InstanceLists[0].VpcId
//			firstSubnetId := vpcOne.InstanceLists[0].SubnetId
//			vpcTwo, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZoneSecond),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_ := vpcTwo.InstanceLists[0].VpcId
//			secondSubnetId := vpcTwo.InstanceLists[0].SubnetId
//			sg, err := Security.NewGroup(ctx, "sg", nil)
//			if err != nil {
//				return err
//			}
//			sgId := sg.ID()
//			_default, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				ImageNameRegex: pulumi.StringRef("Final"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			imageId := _default.ImageId
//			_, err = Security.NewGroupLiteRule(ctx, "sgRule", &Security.GroupLiteRuleArgs{
//				SecurityGroupId: sg.ID(),
//				Ingresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#10.0.0.0/16#ALL#ALL"),
//					pulumi.String("ACCEPT#172.16.0.0/22#ALL#ALL"),
//					pulumi.String("DROP#0.0.0.0/0#ALL#ALL"),
//				},
//				Egresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#172.16.0.0/22#ALL#ALL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example, err := Kubernetes.NewCluster(ctx, "example", &Kubernetes.ClusterArgs{
//				VpcId:                        pulumi.String(firstVpcId),
//				ClusterCidr:                  pulumi.String(exampleClusterCidr),
//				ClusterMaxPodNum:             pulumi.Int(32),
//				ClusterName:                  pulumi.String("tf_example_cluster"),
//				ClusterDesc:                  pulumi.String("example for tke cluster"),
//				ClusterMaxServiceNum:         pulumi.Int(32),
//				ClusterInternet:              pulumi.Bool(false),
//				ClusterInternetSecurityGroup: pulumi.String(sgId),
//				ClusterVersion:               pulumi.String("1.22.5"),
//				ClusterDeployType:            pulumi.String("MANAGED_CLUSTER"),
//				WorkerConfigs: kubernetes.ClusterWorkerConfigArray{
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZoneFirst),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(firstSubnetId),
//						ImgId:                   pulumi.String(imageId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZoneSecond),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(secondSubnetId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						CamRoleName:             pulumi.String("CVM_QcsRole"),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//				},
//				Labels: pulumi.AnyMap{
//					"test1": pulumi.Any("test1"),
//					"test2": pulumi.Any("test2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			zone := "ap-guangzhou"
//			if param := cfg.Get("zone"); param != "" {
//				zone = param
//			}
//			clusterType := "tke"
//			if param := cfg.Get("clusterType"); param != "" {
//				clusterType = param
//			}
//			fooTmpInstance, err := Monitor.NewTmpInstance(ctx, "fooTmpInstance", &Monitor.TmpInstanceArgs{
//				InstanceName:      pulumi.String("tf-tmp-instance"),
//				VpcId:             pulumi.String(firstVpcId),
//				SubnetId:          pulumi.String(firstSubnetId),
//				DataRetentionTime: pulumi.Int(30),
//				Zone:              pulumi.String(availabilityZoneSecond),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Monitor.NewTmpTkeClusterAgent(ctx, "fooTmpTkeClusterAgent", &Monitor.TmpTkeClusterAgentArgs{
//				InstanceId: fooTmpInstance.ID(),
//				Agents: &monitor.TmpTkeClusterAgentAgentsArgs{
//					Region:         pulumi.String(zone),
//					ClusterType:    pulumi.String(clusterType),
//					ClusterId:      example.ID(),
//					EnableExternal: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Monitor.NewTmpTkeConfig(ctx, "fooTmpTkeConfig", &Monitor.TmpTkeConfigArgs{
//				InstanceId:  fooTmpInstance.ID(),
//				ClusterType: pulumi.String(clusterType),
//				ClusterId:   example.ID(),
//				RawJobs: monitor.TmpTkeConfigRawJobArray{
//					&monitor.TmpTkeConfigRawJobArgs{
//						Name:   pulumi.String("raw_jobs_001"),
//						Config: pulumi.String("your config for raw_jobs_001\n"),
//					},
//				},
//				ServiceMonitors: monitor.TmpTkeConfigServiceMonitorArray{
//					&monitor.TmpTkeConfigServiceMonitorArgs{
//						Name:   pulumi.String("kube-system/service-monitor-001"),
//						Config: pulumi.String("apiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: service-monitor-001\n  namespace: kube-system\n"),
//					},
//				},
//				PodMonitors: monitor.TmpTkeConfigPodMonitorArray{
//					&monitor.TmpTkeConfigPodMonitorArgs{
//						Name:   pulumi.String("mynamespace/pod-monitor-001"),
//						Config: pulumi.String("apiVersion: monitoring.coreos.com/v1\nkind: PodMonitor\nmetadata:\n  name: pod-monitor-001\n  namespace: mynamespace\n"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TmpTkeConfig struct {
	pulumi.CustomResourceState

	// ID of cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Type of cluster.
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// Config.
	Config pulumi.StringOutput `pulumi:"config"`
	// ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Configuration of the pod monitors.
	PodMonitors TmpTkeConfigPodMonitorArrayOutput `pulumi:"podMonitors"`
	// Configuration of the native prometheus job.
	RawJobs TmpTkeConfigRawJobArrayOutput `pulumi:"rawJobs"`
	// Configuration of the service monitors.
	ServiceMonitors TmpTkeConfigServiceMonitorArrayOutput `pulumi:"serviceMonitors"`
}

// NewTmpTkeConfig registers a new resource with the given unique name, arguments, and options.
func NewTmpTkeConfig(ctx *pulumi.Context,
	name string, args *TmpTkeConfigArgs, opts ...pulumi.ResourceOption) (*TmpTkeConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TmpTkeConfig
	err := ctx.RegisterResource("tencentcloud:Monitor/tmpTkeConfig:TmpTkeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTmpTkeConfig gets an existing TmpTkeConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTmpTkeConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TmpTkeConfigState, opts ...pulumi.ResourceOption) (*TmpTkeConfig, error) {
	var resource TmpTkeConfig
	err := ctx.ReadResource("tencentcloud:Monitor/tmpTkeConfig:TmpTkeConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TmpTkeConfig resources.
type tmpTkeConfigState struct {
	// ID of cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Type of cluster.
	ClusterType *string `pulumi:"clusterType"`
	// Config.
	Config *string `pulumi:"config"`
	// ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// Configuration of the pod monitors.
	PodMonitors []TmpTkeConfigPodMonitor `pulumi:"podMonitors"`
	// Configuration of the native prometheus job.
	RawJobs []TmpTkeConfigRawJob `pulumi:"rawJobs"`
	// Configuration of the service monitors.
	ServiceMonitors []TmpTkeConfigServiceMonitor `pulumi:"serviceMonitors"`
}

type TmpTkeConfigState struct {
	// ID of cluster.
	ClusterId pulumi.StringPtrInput
	// Type of cluster.
	ClusterType pulumi.StringPtrInput
	// Config.
	Config pulumi.StringPtrInput
	// ID of instance.
	InstanceId pulumi.StringPtrInput
	// Configuration of the pod monitors.
	PodMonitors TmpTkeConfigPodMonitorArrayInput
	// Configuration of the native prometheus job.
	RawJobs TmpTkeConfigRawJobArrayInput
	// Configuration of the service monitors.
	ServiceMonitors TmpTkeConfigServiceMonitorArrayInput
}

func (TmpTkeConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeConfigState)(nil)).Elem()
}

type tmpTkeConfigArgs struct {
	// ID of cluster.
	ClusterId string `pulumi:"clusterId"`
	// Type of cluster.
	ClusterType string `pulumi:"clusterType"`
	// ID of instance.
	InstanceId string `pulumi:"instanceId"`
	// Configuration of the pod monitors.
	PodMonitors []TmpTkeConfigPodMonitor `pulumi:"podMonitors"`
	// Configuration of the native prometheus job.
	RawJobs []TmpTkeConfigRawJob `pulumi:"rawJobs"`
	// Configuration of the service monitors.
	ServiceMonitors []TmpTkeConfigServiceMonitor `pulumi:"serviceMonitors"`
}

// The set of arguments for constructing a TmpTkeConfig resource.
type TmpTkeConfigArgs struct {
	// ID of cluster.
	ClusterId pulumi.StringInput
	// Type of cluster.
	ClusterType pulumi.StringInput
	// ID of instance.
	InstanceId pulumi.StringInput
	// Configuration of the pod monitors.
	PodMonitors TmpTkeConfigPodMonitorArrayInput
	// Configuration of the native prometheus job.
	RawJobs TmpTkeConfigRawJobArrayInput
	// Configuration of the service monitors.
	ServiceMonitors TmpTkeConfigServiceMonitorArrayInput
}

func (TmpTkeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeConfigArgs)(nil)).Elem()
}

type TmpTkeConfigInput interface {
	pulumi.Input

	ToTmpTkeConfigOutput() TmpTkeConfigOutput
	ToTmpTkeConfigOutputWithContext(ctx context.Context) TmpTkeConfigOutput
}

func (*TmpTkeConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeConfig)(nil)).Elem()
}

func (i *TmpTkeConfig) ToTmpTkeConfigOutput() TmpTkeConfigOutput {
	return i.ToTmpTkeConfigOutputWithContext(context.Background())
}

func (i *TmpTkeConfig) ToTmpTkeConfigOutputWithContext(ctx context.Context) TmpTkeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeConfigOutput)
}

// TmpTkeConfigArrayInput is an input type that accepts TmpTkeConfigArray and TmpTkeConfigArrayOutput values.
// You can construct a concrete instance of `TmpTkeConfigArrayInput` via:
//
//	TmpTkeConfigArray{ TmpTkeConfigArgs{...} }
type TmpTkeConfigArrayInput interface {
	pulumi.Input

	ToTmpTkeConfigArrayOutput() TmpTkeConfigArrayOutput
	ToTmpTkeConfigArrayOutputWithContext(context.Context) TmpTkeConfigArrayOutput
}

type TmpTkeConfigArray []TmpTkeConfigInput

func (TmpTkeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeConfig)(nil)).Elem()
}

func (i TmpTkeConfigArray) ToTmpTkeConfigArrayOutput() TmpTkeConfigArrayOutput {
	return i.ToTmpTkeConfigArrayOutputWithContext(context.Background())
}

func (i TmpTkeConfigArray) ToTmpTkeConfigArrayOutputWithContext(ctx context.Context) TmpTkeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeConfigArrayOutput)
}

// TmpTkeConfigMapInput is an input type that accepts TmpTkeConfigMap and TmpTkeConfigMapOutput values.
// You can construct a concrete instance of `TmpTkeConfigMapInput` via:
//
//	TmpTkeConfigMap{ "key": TmpTkeConfigArgs{...} }
type TmpTkeConfigMapInput interface {
	pulumi.Input

	ToTmpTkeConfigMapOutput() TmpTkeConfigMapOutput
	ToTmpTkeConfigMapOutputWithContext(context.Context) TmpTkeConfigMapOutput
}

type TmpTkeConfigMap map[string]TmpTkeConfigInput

func (TmpTkeConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeConfig)(nil)).Elem()
}

func (i TmpTkeConfigMap) ToTmpTkeConfigMapOutput() TmpTkeConfigMapOutput {
	return i.ToTmpTkeConfigMapOutputWithContext(context.Background())
}

func (i TmpTkeConfigMap) ToTmpTkeConfigMapOutputWithContext(ctx context.Context) TmpTkeConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeConfigMapOutput)
}

type TmpTkeConfigOutput struct{ *pulumi.OutputState }

func (TmpTkeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeConfig)(nil)).Elem()
}

func (o TmpTkeConfigOutput) ToTmpTkeConfigOutput() TmpTkeConfigOutput {
	return o
}

func (o TmpTkeConfigOutput) ToTmpTkeConfigOutputWithContext(ctx context.Context) TmpTkeConfigOutput {
	return o
}

// ID of cluster.
func (o TmpTkeConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Type of cluster.
func (o TmpTkeConfigOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeConfig) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// Config.
func (o TmpTkeConfigOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeConfig) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// ID of instance.
func (o TmpTkeConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Configuration of the pod monitors.
func (o TmpTkeConfigOutput) PodMonitors() TmpTkeConfigPodMonitorArrayOutput {
	return o.ApplyT(func(v *TmpTkeConfig) TmpTkeConfigPodMonitorArrayOutput { return v.PodMonitors }).(TmpTkeConfigPodMonitorArrayOutput)
}

// Configuration of the native prometheus job.
func (o TmpTkeConfigOutput) RawJobs() TmpTkeConfigRawJobArrayOutput {
	return o.ApplyT(func(v *TmpTkeConfig) TmpTkeConfigRawJobArrayOutput { return v.RawJobs }).(TmpTkeConfigRawJobArrayOutput)
}

// Configuration of the service monitors.
func (o TmpTkeConfigOutput) ServiceMonitors() TmpTkeConfigServiceMonitorArrayOutput {
	return o.ApplyT(func(v *TmpTkeConfig) TmpTkeConfigServiceMonitorArrayOutput { return v.ServiceMonitors }).(TmpTkeConfigServiceMonitorArrayOutput)
}

type TmpTkeConfigArrayOutput struct{ *pulumi.OutputState }

func (TmpTkeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeConfig)(nil)).Elem()
}

func (o TmpTkeConfigArrayOutput) ToTmpTkeConfigArrayOutput() TmpTkeConfigArrayOutput {
	return o
}

func (o TmpTkeConfigArrayOutput) ToTmpTkeConfigArrayOutputWithContext(ctx context.Context) TmpTkeConfigArrayOutput {
	return o
}

func (o TmpTkeConfigArrayOutput) Index(i pulumi.IntInput) TmpTkeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TmpTkeConfig {
		return vs[0].([]*TmpTkeConfig)[vs[1].(int)]
	}).(TmpTkeConfigOutput)
}

type TmpTkeConfigMapOutput struct{ *pulumi.OutputState }

func (TmpTkeConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeConfig)(nil)).Elem()
}

func (o TmpTkeConfigMapOutput) ToTmpTkeConfigMapOutput() TmpTkeConfigMapOutput {
	return o
}

func (o TmpTkeConfigMapOutput) ToTmpTkeConfigMapOutputWithContext(ctx context.Context) TmpTkeConfigMapOutput {
	return o
}

func (o TmpTkeConfigMapOutput) MapIndex(k pulumi.StringInput) TmpTkeConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TmpTkeConfig {
		return vs[0].(map[string]*TmpTkeConfig)[vs[1].(string)]
	}).(TmpTkeConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeConfigInput)(nil)).Elem(), &TmpTkeConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeConfigArrayInput)(nil)).Elem(), TmpTkeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeConfigMapInput)(nil)).Elem(), TmpTkeConfigMap{})
	pulumi.RegisterOutputType(TmpTkeConfigOutput{})
	pulumi.RegisterOutputType(TmpTkeConfigArrayOutput{})
	pulumi.RegisterOutputType(TmpTkeConfigMapOutput{})
}
