// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a monitor grafanaVersionUpgrade
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.NewGrafanaVersionUpgrade(ctx, "grafanaVersionUpgrade", &Monitor.GrafanaVersionUpgradeArgs{
//				Alias:      pulumi.String("v8.2.7"),
//				InstanceId: pulumi.String("grafana-dp2hnnfa"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// monitor grafana_version_upgrade can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Monitor/grafanaVersionUpgrade:GrafanaVersionUpgrade grafana_version_upgrade instance_id
//
// ```
type GrafanaVersionUpgrade struct {
	pulumi.CustomResourceState

	// Version alias.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Grafana instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewGrafanaVersionUpgrade registers a new resource with the given unique name, arguments, and options.
func NewGrafanaVersionUpgrade(ctx *pulumi.Context,
	name string, args *GrafanaVersionUpgradeArgs, opts ...pulumi.ResourceOption) (*GrafanaVersionUpgrade, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GrafanaVersionUpgrade
	err := ctx.RegisterResource("tencentcloud:Monitor/grafanaVersionUpgrade:GrafanaVersionUpgrade", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaVersionUpgrade gets an existing GrafanaVersionUpgrade resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaVersionUpgrade(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaVersionUpgradeState, opts ...pulumi.ResourceOption) (*GrafanaVersionUpgrade, error) {
	var resource GrafanaVersionUpgrade
	err := ctx.ReadResource("tencentcloud:Monitor/grafanaVersionUpgrade:GrafanaVersionUpgrade", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaVersionUpgrade resources.
type grafanaVersionUpgradeState struct {
	// Version alias.
	Alias *string `pulumi:"alias"`
	// Grafana instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type GrafanaVersionUpgradeState struct {
	// Version alias.
	Alias pulumi.StringPtrInput
	// Grafana instance ID.
	InstanceId pulumi.StringPtrInput
}

func (GrafanaVersionUpgradeState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaVersionUpgradeState)(nil)).Elem()
}

type grafanaVersionUpgradeArgs struct {
	// Version alias.
	Alias string `pulumi:"alias"`
	// Grafana instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a GrafanaVersionUpgrade resource.
type GrafanaVersionUpgradeArgs struct {
	// Version alias.
	Alias pulumi.StringInput
	// Grafana instance ID.
	InstanceId pulumi.StringInput
}

func (GrafanaVersionUpgradeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaVersionUpgradeArgs)(nil)).Elem()
}

type GrafanaVersionUpgradeInput interface {
	pulumi.Input

	ToGrafanaVersionUpgradeOutput() GrafanaVersionUpgradeOutput
	ToGrafanaVersionUpgradeOutputWithContext(ctx context.Context) GrafanaVersionUpgradeOutput
}

func (*GrafanaVersionUpgrade) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaVersionUpgrade)(nil)).Elem()
}

func (i *GrafanaVersionUpgrade) ToGrafanaVersionUpgradeOutput() GrafanaVersionUpgradeOutput {
	return i.ToGrafanaVersionUpgradeOutputWithContext(context.Background())
}

func (i *GrafanaVersionUpgrade) ToGrafanaVersionUpgradeOutputWithContext(ctx context.Context) GrafanaVersionUpgradeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaVersionUpgradeOutput)
}

// GrafanaVersionUpgradeArrayInput is an input type that accepts GrafanaVersionUpgradeArray and GrafanaVersionUpgradeArrayOutput values.
// You can construct a concrete instance of `GrafanaVersionUpgradeArrayInput` via:
//
//	GrafanaVersionUpgradeArray{ GrafanaVersionUpgradeArgs{...} }
type GrafanaVersionUpgradeArrayInput interface {
	pulumi.Input

	ToGrafanaVersionUpgradeArrayOutput() GrafanaVersionUpgradeArrayOutput
	ToGrafanaVersionUpgradeArrayOutputWithContext(context.Context) GrafanaVersionUpgradeArrayOutput
}

type GrafanaVersionUpgradeArray []GrafanaVersionUpgradeInput

func (GrafanaVersionUpgradeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaVersionUpgrade)(nil)).Elem()
}

func (i GrafanaVersionUpgradeArray) ToGrafanaVersionUpgradeArrayOutput() GrafanaVersionUpgradeArrayOutput {
	return i.ToGrafanaVersionUpgradeArrayOutputWithContext(context.Background())
}

func (i GrafanaVersionUpgradeArray) ToGrafanaVersionUpgradeArrayOutputWithContext(ctx context.Context) GrafanaVersionUpgradeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaVersionUpgradeArrayOutput)
}

// GrafanaVersionUpgradeMapInput is an input type that accepts GrafanaVersionUpgradeMap and GrafanaVersionUpgradeMapOutput values.
// You can construct a concrete instance of `GrafanaVersionUpgradeMapInput` via:
//
//	GrafanaVersionUpgradeMap{ "key": GrafanaVersionUpgradeArgs{...} }
type GrafanaVersionUpgradeMapInput interface {
	pulumi.Input

	ToGrafanaVersionUpgradeMapOutput() GrafanaVersionUpgradeMapOutput
	ToGrafanaVersionUpgradeMapOutputWithContext(context.Context) GrafanaVersionUpgradeMapOutput
}

type GrafanaVersionUpgradeMap map[string]GrafanaVersionUpgradeInput

func (GrafanaVersionUpgradeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaVersionUpgrade)(nil)).Elem()
}

func (i GrafanaVersionUpgradeMap) ToGrafanaVersionUpgradeMapOutput() GrafanaVersionUpgradeMapOutput {
	return i.ToGrafanaVersionUpgradeMapOutputWithContext(context.Background())
}

func (i GrafanaVersionUpgradeMap) ToGrafanaVersionUpgradeMapOutputWithContext(ctx context.Context) GrafanaVersionUpgradeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaVersionUpgradeMapOutput)
}

type GrafanaVersionUpgradeOutput struct{ *pulumi.OutputState }

func (GrafanaVersionUpgradeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaVersionUpgrade)(nil)).Elem()
}

func (o GrafanaVersionUpgradeOutput) ToGrafanaVersionUpgradeOutput() GrafanaVersionUpgradeOutput {
	return o
}

func (o GrafanaVersionUpgradeOutput) ToGrafanaVersionUpgradeOutputWithContext(ctx context.Context) GrafanaVersionUpgradeOutput {
	return o
}

// Version alias.
func (o GrafanaVersionUpgradeOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaVersionUpgrade) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Grafana instance ID.
func (o GrafanaVersionUpgradeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaVersionUpgrade) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type GrafanaVersionUpgradeArrayOutput struct{ *pulumi.OutputState }

func (GrafanaVersionUpgradeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaVersionUpgrade)(nil)).Elem()
}

func (o GrafanaVersionUpgradeArrayOutput) ToGrafanaVersionUpgradeArrayOutput() GrafanaVersionUpgradeArrayOutput {
	return o
}

func (o GrafanaVersionUpgradeArrayOutput) ToGrafanaVersionUpgradeArrayOutputWithContext(ctx context.Context) GrafanaVersionUpgradeArrayOutput {
	return o
}

func (o GrafanaVersionUpgradeArrayOutput) Index(i pulumi.IntInput) GrafanaVersionUpgradeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaVersionUpgrade {
		return vs[0].([]*GrafanaVersionUpgrade)[vs[1].(int)]
	}).(GrafanaVersionUpgradeOutput)
}

type GrafanaVersionUpgradeMapOutput struct{ *pulumi.OutputState }

func (GrafanaVersionUpgradeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaVersionUpgrade)(nil)).Elem()
}

func (o GrafanaVersionUpgradeMapOutput) ToGrafanaVersionUpgradeMapOutput() GrafanaVersionUpgradeMapOutput {
	return o
}

func (o GrafanaVersionUpgradeMapOutput) ToGrafanaVersionUpgradeMapOutputWithContext(ctx context.Context) GrafanaVersionUpgradeMapOutput {
	return o
}

func (o GrafanaVersionUpgradeMapOutput) MapIndex(k pulumi.StringInput) GrafanaVersionUpgradeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaVersionUpgrade {
		return vs[0].(map[string]*GrafanaVersionUpgrade)[vs[1].(string)]
	}).(GrafanaVersionUpgradeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaVersionUpgradeInput)(nil)).Elem(), &GrafanaVersionUpgrade{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaVersionUpgradeArrayInput)(nil)).Elem(), GrafanaVersionUpgradeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaVersionUpgradeMapInput)(nil)).Elem(), GrafanaVersionUpgradeMap{})
	pulumi.RegisterOutputType(GrafanaVersionUpgradeOutput{})
	pulumi.RegisterOutputType(GrafanaVersionUpgradeArrayOutput{})
	pulumi.RegisterOutputType(GrafanaVersionUpgradeMapOutput{})
}
