// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a alarm policy resource for monitor.
//
// ## Example Usage
// ### cvmDevice alarm policy
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooAlarmNotice, err := Monitor.NewAlarmNotice(ctx, "fooAlarmNotice", &Monitor.AlarmNoticeArgs{
//				NoticeType:     pulumi.String("ALL"),
//				NoticeLanguage: pulumi.String("zh-CN"),
//				UserNotices: monitor.AlarmNoticeUserNoticeArray{
//					&monitor.AlarmNoticeUserNoticeArgs{
//						ReceiverType: pulumi.String("USER"),
//						StartTime:    pulumi.Int(0),
//						EndTime:      pulumi.Int(1),
//						NoticeWays: pulumi.StringArray{
//							pulumi.String("SMS"),
//							pulumi.String("EMAIL"),
//						},
//						UserIds: pulumi.IntArray{
//							pulumi.Int(10001),
//						},
//						GroupIds: pulumi.IntArray{},
//						PhoneOrders: pulumi.IntArray{
//							pulumi.Int(10001),
//						},
//						PhoneCircleTimes:      pulumi.Int(2),
//						PhoneCircleInterval:   pulumi.Int(50),
//						PhoneInnerInterval:    pulumi.Int(60),
//						NeedPhoneArriveNotice: pulumi.Int(1),
//						PhoneCallType:         pulumi.String("CIRCLE"),
//						Weekdays: pulumi.IntArray{
//							pulumi.Int(1),
//							pulumi.Int(2),
//							pulumi.Int(3),
//							pulumi.Int(4),
//							pulumi.Int(5),
//							pulumi.Int(6),
//							pulumi.Int(7),
//						},
//					},
//				},
//				UrlNotices: monitor.AlarmNoticeUrlNoticeArray{
//					&monitor.AlarmNoticeUrlNoticeArgs{
//						Url:       pulumi.String("https://www.mytest.com/validate"),
//						EndTime:   pulumi.Int(0),
//						StartTime: pulumi.Int(1),
//						Weekdays: pulumi.IntArray{
//							pulumi.Int(1),
//							pulumi.Int(2),
//							pulumi.Int(3),
//							pulumi.Int(4),
//							pulumi.Int(5),
//							pulumi.Int(6),
//							pulumi.Int(7),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Monitor.NewAlarmPolicy(ctx, "fooAlarmPolicy", &Monitor.AlarmPolicyArgs{
//				PolicyName:  pulumi.String("tf-policy"),
//				MonitorType: pulumi.String("MT_QCE"),
//				Enable:      pulumi.Int(1),
//				ProjectId:   pulumi.Int(0),
//				Namespace:   pulumi.String("cvm_device"),
//				Conditions: &monitor.AlarmPolicyConditionsArgs{
//					IsUnionRule: pulumi.Int(1),
//					Rules: monitor.AlarmPolicyConditionsRuleArray{
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							MetricName:      pulumi.String("CpuUsage"),
//							Period:          pulumi.Int(60),
//							Operator:        pulumi.String("ge"),
//							Value:           pulumi.String("89.9"),
//							ContinuePeriod:  pulumi.Int(1),
//							NoticeFrequency: pulumi.Int(3600),
//							IsPowerNotice:   pulumi.Int(0),
//						},
//					},
//				},
//				EventConditions: monitor.AlarmPolicyEventConditionArray{
//					&monitor.AlarmPolicyEventConditionArgs{
//						MetricName: pulumi.String("ping_unreachable"),
//					},
//					&monitor.AlarmPolicyEventConditionArgs{
//						MetricName: pulumi.String("guest_reboot"),
//					},
//				},
//				NoticeIds: pulumi.StringArray{
//					fooAlarmNotice.ID(),
//				},
//				TriggerTasks: monitor.AlarmPolicyTriggerTaskArray{
//					&monitor.AlarmPolicyTriggerTaskArgs{
//						Type:       pulumi.String("AS"),
//						TaskConfig: pulumi.String("{\"Region\":\"ap-guangzhou\",\"Group\":\"asg-0z312312x\",\"Policy\":\"asp-ganig28\"}"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### k8sCluster alarm policy
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal([][]map[string]interface{}{
//				[]map[string]interface{}{
//					map[string]interface{}{
//						"Key":      "region",
//						"Operator": "eq",
//						"Value": []string{
//							"ap-guangzhou",
//						},
//					},
//					map[string]interface{}{
//						"Key":      "tke_cluster_instance_id",
//						"Operator": "in",
//						"Value": []string{
//							"cls-czhtobea",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			tmpJSON1, err := json.Marshal([][]map[string]interface{}{
//				[]map[string]interface{}{
//					map[string]interface{}{
//						"Key":      "region",
//						"Operator": "eq",
//						"Value": []string{
//							"ap-guangzhou",
//						},
//					},
//					map[string]interface{}{
//						"Key":      "tke_cluster_instance_id",
//						"Operator": "in",
//						"Value": []string{
//							"cls-czhtobea",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json1 := string(tmpJSON1)
//			_, err := Monitor.NewAlarmPolicy(ctx, "policy", &Monitor.AlarmPolicyArgs{
//				Enable:      pulumi.Int(1),
//				MonitorType: pulumi.String("MT_QCE"),
//				Namespace:   pulumi.String("k8s_cluster"),
//				NoticeIds: pulumi.StringArray{
//					pulumi.String("notice-l9ziyxw6"),
//				},
//				PolicyName: pulumi.String("TkeClusterNew"),
//				ProjectId:  pulumi.Int(1244035),
//				Conditions: &monitor.AlarmPolicyConditionsArgs{
//					IsUnionRule: pulumi.Int(0),
//					Rules: monitor.AlarmPolicyConditionsRuleArray{
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							ContinuePeriod:  pulumi.Int(3),
//							Description:     pulumi.String("Allocatable Pods"),
//							IsPowerNotice:   pulumi.Int(0),
//							MetricName:      pulumi.String("K8sClusterAllocatablePodsTotal"),
//							NoticeFrequency: pulumi.Int(3600),
//							Operator:        pulumi.String("gt"),
//							Period:          pulumi.Int(60),
//							RuleType:        pulumi.String("STATIC"),
//							Unit:            pulumi.String("Count"),
//							Value:           pulumi.String("10"),
//							Filter: &monitor.AlarmPolicyConditionsRuleFilterArgs{
//								Dimensions: pulumi.String(json0),
//								Type:       pulumi.String("DIMENSION"),
//							},
//						},
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							ContinuePeriod:  pulumi.Int(3),
//							Description:     pulumi.String("Total CPU Cores"),
//							IsPowerNotice:   pulumi.Int(0),
//							MetricName:      pulumi.String("K8sClusterCpuCoreTotal"),
//							NoticeFrequency: pulumi.Int(3600),
//							Operator:        pulumi.String("gt"),
//							Period:          pulumi.Int(60),
//							RuleType:        pulumi.String("STATIC"),
//							Unit:            pulumi.String("Core"),
//							Value:           pulumi.String("2"),
//							Filter: &monitor.AlarmPolicyConditionsRuleFilterArgs{
//								Dimensions: pulumi.String(json1),
//								Type:       pulumi.String("DIMENSION"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### cvmDevice alarm policy binding cvm by tag
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.NewAlarmPolicy(ctx, "policy", &Monitor.AlarmPolicyArgs{
//				Conditions: &monitor.AlarmPolicyConditionsArgs{
//					IsUnionRule: pulumi.Int(0),
//					Rules: monitor.AlarmPolicyConditionsRuleArray{
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							ContinuePeriod:  pulumi.Int(5),
//							Description:     pulumi.String("CPUUtilization"),
//							IsPowerNotice:   pulumi.Int(0),
//							MetricName:      pulumi.String("CpuUsage"),
//							NoticeFrequency: pulumi.Int(7200),
//							Operator:        pulumi.String("gt"),
//							Period:          pulumi.Int(60),
//							RuleType:        pulumi.String("STATIC"),
//							Unit:            pulumi.String("%"),
//							Value:           pulumi.String("95"),
//						},
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							ContinuePeriod:  pulumi.Int(5),
//							Description:     pulumi.String("PublicBandwidthUtilization"),
//							IsPowerNotice:   pulumi.Int(0),
//							MetricName:      pulumi.String("Outratio"),
//							NoticeFrequency: pulumi.Int(7200),
//							Operator:        pulumi.String("gt"),
//							Period:          pulumi.Int(60),
//							RuleType:        pulumi.String("STATIC"),
//							Unit:            pulumi.String("%"),
//							Value:           pulumi.String("95"),
//						},
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							ContinuePeriod:  pulumi.Int(5),
//							Description:     pulumi.String("MemoryUtilization"),
//							IsPowerNotice:   pulumi.Int(0),
//							MetricName:      pulumi.String("MemUsage"),
//							NoticeFrequency: pulumi.Int(7200),
//							Operator:        pulumi.String("gt"),
//							Period:          pulumi.Int(60),
//							RuleType:        pulumi.String("STATIC"),
//							Unit:            pulumi.String("%"),
//							Value:           pulumi.String("95"),
//						},
//						&monitor.AlarmPolicyConditionsRuleArgs{
//							ContinuePeriod:  pulumi.Int(5),
//							Description:     pulumi.String("DiskUtilization"),
//							IsPowerNotice:   pulumi.Int(0),
//							MetricName:      pulumi.String("CvmDiskUsage"),
//							NoticeFrequency: pulumi.Int(7200),
//							Operator:        pulumi.String("gt"),
//							Period:          pulumi.Int(60),
//							RuleType:        pulumi.String("STATIC"),
//							Unit:            pulumi.String("%"),
//							Value:           pulumi.String("95"),
//						},
//					},
//				},
//				Enable: pulumi.Int(1),
//				EventConditions: monitor.AlarmPolicyEventConditionArray{
//					&monitor.AlarmPolicyEventConditionArgs{
//						ContinuePeriod:  pulumi.Int(0),
//						Description:     pulumi.String("DiskReadonly"),
//						IsPowerNotice:   pulumi.Int(0),
//						MetricName:      pulumi.String("disk_readonly"),
//						NoticeFrequency: pulumi.Int(0),
//						Period:          pulumi.Int(0),
//					},
//				},
//				MonitorType: pulumi.String("MT_QCE"),
//				Namespace:   pulumi.String("cvm_device"),
//				NoticeIds: pulumi.StringArray{
//					pulumi.String("notice-l9ziyxw6"),
//				},
//				PolicyName: pulumi.String("policy"),
//				PolicyTags: monitor.AlarmPolicyPolicyTagArray{
//					&monitor.AlarmPolicyPolicyTagArgs{
//						Key:   pulumi.String("test-tag"),
//						Value: pulumi.String("unit-test"),
//					},
//				},
//				ProjectId: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Alarm policy instance can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Monitor/alarmPolicy:AlarmPolicy policy policy-id
//
// ```
type AlarmPolicy struct {
	pulumi.CustomResourceState

	// A list of metric trigger condition.
	Conditions AlarmPolicyConditionsOutput `pulumi:"conditions"`
	// ID of trigger condition template.
	ConditonTemplateId pulumi.IntPtrOutput `pulumi:"conditonTemplateId"`
	// The alarm policy create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether to enable, default is `1`.
	Enable pulumi.IntPtrOutput `pulumi:"enable"`
	// A list of event trigger condition.
	EventConditions AlarmPolicyEventConditionArrayOutput `pulumi:"eventConditions"`
	// Global filters.
	Filter AlarmPolicyFilterPtrOutput `pulumi:"filter"`
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBies pulumi.StringArrayOutput `pulumi:"groupBies"`
	// The type of monitor.
	MonitorType pulumi.StringOutput `pulumi:"monitorType"`
	// The type of alarm.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// List of notification rule IDs.
	NoticeIds pulumi.StringArrayOutput `pulumi:"noticeIds"`
	// The name of policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Policy tag to bind object.
	PolicyTags AlarmPolicyPolicyTagArrayOutput `pulumi:"policyTags"`
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// The remark of policy group.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Triggered task list.
	TriggerTasks AlarmPolicyTriggerTaskArrayOutput `pulumi:"triggerTasks"`
	// The alarm policy update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAlarmPolicy registers a new resource with the given unique name, arguments, and options.
func NewAlarmPolicy(ctx *pulumi.Context,
	name string, args *AlarmPolicyArgs, opts ...pulumi.ResourceOption) (*AlarmPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MonitorType == nil {
		return nil, errors.New("invalid value for required argument 'MonitorType'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AlarmPolicy
	err := ctx.RegisterResource("tencentcloud:Monitor/alarmPolicy:AlarmPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarmPolicy gets an existing AlarmPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarmPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmPolicyState, opts ...pulumi.ResourceOption) (*AlarmPolicy, error) {
	var resource AlarmPolicy
	err := ctx.ReadResource("tencentcloud:Monitor/alarmPolicy:AlarmPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlarmPolicy resources.
type alarmPolicyState struct {
	// A list of metric trigger condition.
	Conditions *AlarmPolicyConditions `pulumi:"conditions"`
	// ID of trigger condition template.
	ConditonTemplateId *int `pulumi:"conditonTemplateId"`
	// The alarm policy create time.
	CreateTime *string `pulumi:"createTime"`
	// Whether to enable, default is `1`.
	Enable *int `pulumi:"enable"`
	// A list of event trigger condition.
	EventConditions []AlarmPolicyEventCondition `pulumi:"eventConditions"`
	// Global filters.
	Filter *AlarmPolicyFilter `pulumi:"filter"`
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBies []string `pulumi:"groupBies"`
	// The type of monitor.
	MonitorType *string `pulumi:"monitorType"`
	// The type of alarm.
	Namespace *string `pulumi:"namespace"`
	// List of notification rule IDs.
	NoticeIds []string `pulumi:"noticeIds"`
	// The name of policy.
	PolicyName *string `pulumi:"policyName"`
	// Policy tag to bind object.
	PolicyTags []AlarmPolicyPolicyTag `pulumi:"policyTags"`
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectId *int `pulumi:"projectId"`
	// The remark of policy group.
	Remark *string `pulumi:"remark"`
	// Triggered task list.
	TriggerTasks []AlarmPolicyTriggerTask `pulumi:"triggerTasks"`
	// The alarm policy update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type AlarmPolicyState struct {
	// A list of metric trigger condition.
	Conditions AlarmPolicyConditionsPtrInput
	// ID of trigger condition template.
	ConditonTemplateId pulumi.IntPtrInput
	// The alarm policy create time.
	CreateTime pulumi.StringPtrInput
	// Whether to enable, default is `1`.
	Enable pulumi.IntPtrInput
	// A list of event trigger condition.
	EventConditions AlarmPolicyEventConditionArrayInput
	// Global filters.
	Filter AlarmPolicyFilterPtrInput
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBies pulumi.StringArrayInput
	// The type of monitor.
	MonitorType pulumi.StringPtrInput
	// The type of alarm.
	Namespace pulumi.StringPtrInput
	// List of notification rule IDs.
	NoticeIds pulumi.StringArrayInput
	// The name of policy.
	PolicyName pulumi.StringPtrInput
	// Policy tag to bind object.
	PolicyTags AlarmPolicyPolicyTagArrayInput
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectId pulumi.IntPtrInput
	// The remark of policy group.
	Remark pulumi.StringPtrInput
	// Triggered task list.
	TriggerTasks AlarmPolicyTriggerTaskArrayInput
	// The alarm policy update time.
	UpdateTime pulumi.StringPtrInput
}

func (AlarmPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmPolicyState)(nil)).Elem()
}

type alarmPolicyArgs struct {
	// A list of metric trigger condition.
	Conditions *AlarmPolicyConditions `pulumi:"conditions"`
	// ID of trigger condition template.
	ConditonTemplateId *int `pulumi:"conditonTemplateId"`
	// Whether to enable, default is `1`.
	Enable *int `pulumi:"enable"`
	// A list of event trigger condition.
	EventConditions []AlarmPolicyEventCondition `pulumi:"eventConditions"`
	// Global filters.
	Filter *AlarmPolicyFilter `pulumi:"filter"`
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBies []string `pulumi:"groupBies"`
	// The type of monitor.
	MonitorType string `pulumi:"monitorType"`
	// The type of alarm.
	Namespace string `pulumi:"namespace"`
	// List of notification rule IDs.
	NoticeIds []string `pulumi:"noticeIds"`
	// The name of policy.
	PolicyName string `pulumi:"policyName"`
	// Policy tag to bind object.
	PolicyTags []AlarmPolicyPolicyTag `pulumi:"policyTags"`
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectId *int `pulumi:"projectId"`
	// The remark of policy group.
	Remark *string `pulumi:"remark"`
	// Triggered task list.
	TriggerTasks []AlarmPolicyTriggerTask `pulumi:"triggerTasks"`
}

// The set of arguments for constructing a AlarmPolicy resource.
type AlarmPolicyArgs struct {
	// A list of metric trigger condition.
	Conditions AlarmPolicyConditionsPtrInput
	// ID of trigger condition template.
	ConditonTemplateId pulumi.IntPtrInput
	// Whether to enable, default is `1`.
	Enable pulumi.IntPtrInput
	// A list of event trigger condition.
	EventConditions AlarmPolicyEventConditionArrayInput
	// Global filters.
	Filter AlarmPolicyFilterPtrInput
	// Aggregate dimension list, specify which dimension keys to use for group by.
	GroupBies pulumi.StringArrayInput
	// The type of monitor.
	MonitorType pulumi.StringInput
	// The type of alarm.
	Namespace pulumi.StringInput
	// List of notification rule IDs.
	NoticeIds pulumi.StringArrayInput
	// The name of policy.
	PolicyName pulumi.StringInput
	// Policy tag to bind object.
	PolicyTags AlarmPolicyPolicyTagArrayInput
	// Project ID. For products with different projects, a value other than -1 must be passed in.
	ProjectId pulumi.IntPtrInput
	// The remark of policy group.
	Remark pulumi.StringPtrInput
	// Triggered task list.
	TriggerTasks AlarmPolicyTriggerTaskArrayInput
}

func (AlarmPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmPolicyArgs)(nil)).Elem()
}

type AlarmPolicyInput interface {
	pulumi.Input

	ToAlarmPolicyOutput() AlarmPolicyOutput
	ToAlarmPolicyOutputWithContext(ctx context.Context) AlarmPolicyOutput
}

func (*AlarmPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmPolicy)(nil)).Elem()
}

func (i *AlarmPolicy) ToAlarmPolicyOutput() AlarmPolicyOutput {
	return i.ToAlarmPolicyOutputWithContext(context.Background())
}

func (i *AlarmPolicy) ToAlarmPolicyOutputWithContext(ctx context.Context) AlarmPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmPolicyOutput)
}

// AlarmPolicyArrayInput is an input type that accepts AlarmPolicyArray and AlarmPolicyArrayOutput values.
// You can construct a concrete instance of `AlarmPolicyArrayInput` via:
//
//	AlarmPolicyArray{ AlarmPolicyArgs{...} }
type AlarmPolicyArrayInput interface {
	pulumi.Input

	ToAlarmPolicyArrayOutput() AlarmPolicyArrayOutput
	ToAlarmPolicyArrayOutputWithContext(context.Context) AlarmPolicyArrayOutput
}

type AlarmPolicyArray []AlarmPolicyInput

func (AlarmPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmPolicy)(nil)).Elem()
}

func (i AlarmPolicyArray) ToAlarmPolicyArrayOutput() AlarmPolicyArrayOutput {
	return i.ToAlarmPolicyArrayOutputWithContext(context.Background())
}

func (i AlarmPolicyArray) ToAlarmPolicyArrayOutputWithContext(ctx context.Context) AlarmPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmPolicyArrayOutput)
}

// AlarmPolicyMapInput is an input type that accepts AlarmPolicyMap and AlarmPolicyMapOutput values.
// You can construct a concrete instance of `AlarmPolicyMapInput` via:
//
//	AlarmPolicyMap{ "key": AlarmPolicyArgs{...} }
type AlarmPolicyMapInput interface {
	pulumi.Input

	ToAlarmPolicyMapOutput() AlarmPolicyMapOutput
	ToAlarmPolicyMapOutputWithContext(context.Context) AlarmPolicyMapOutput
}

type AlarmPolicyMap map[string]AlarmPolicyInput

func (AlarmPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmPolicy)(nil)).Elem()
}

func (i AlarmPolicyMap) ToAlarmPolicyMapOutput() AlarmPolicyMapOutput {
	return i.ToAlarmPolicyMapOutputWithContext(context.Background())
}

func (i AlarmPolicyMap) ToAlarmPolicyMapOutputWithContext(ctx context.Context) AlarmPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmPolicyMapOutput)
}

type AlarmPolicyOutput struct{ *pulumi.OutputState }

func (AlarmPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmPolicy)(nil)).Elem()
}

func (o AlarmPolicyOutput) ToAlarmPolicyOutput() AlarmPolicyOutput {
	return o
}

func (o AlarmPolicyOutput) ToAlarmPolicyOutputWithContext(ctx context.Context) AlarmPolicyOutput {
	return o
}

// A list of metric trigger condition.
func (o AlarmPolicyOutput) Conditions() AlarmPolicyConditionsOutput {
	return o.ApplyT(func(v *AlarmPolicy) AlarmPolicyConditionsOutput { return v.Conditions }).(AlarmPolicyConditionsOutput)
}

// ID of trigger condition template.
func (o AlarmPolicyOutput) ConditonTemplateId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.IntPtrOutput { return v.ConditonTemplateId }).(pulumi.IntPtrOutput)
}

// The alarm policy create time.
func (o AlarmPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether to enable, default is `1`.
func (o AlarmPolicyOutput) Enable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.IntPtrOutput { return v.Enable }).(pulumi.IntPtrOutput)
}

// A list of event trigger condition.
func (o AlarmPolicyOutput) EventConditions() AlarmPolicyEventConditionArrayOutput {
	return o.ApplyT(func(v *AlarmPolicy) AlarmPolicyEventConditionArrayOutput { return v.EventConditions }).(AlarmPolicyEventConditionArrayOutput)
}

// Global filters.
func (o AlarmPolicyOutput) Filter() AlarmPolicyFilterPtrOutput {
	return o.ApplyT(func(v *AlarmPolicy) AlarmPolicyFilterPtrOutput { return v.Filter }).(AlarmPolicyFilterPtrOutput)
}

// Aggregate dimension list, specify which dimension keys to use for group by.
func (o AlarmPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringArrayOutput { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// The type of monitor.
func (o AlarmPolicyOutput) MonitorType() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringOutput { return v.MonitorType }).(pulumi.StringOutput)
}

// The type of alarm.
func (o AlarmPolicyOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// List of notification rule IDs.
func (o AlarmPolicyOutput) NoticeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringArrayOutput { return v.NoticeIds }).(pulumi.StringArrayOutput)
}

// The name of policy.
func (o AlarmPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Policy tag to bind object.
func (o AlarmPolicyOutput) PolicyTags() AlarmPolicyPolicyTagArrayOutput {
	return o.ApplyT(func(v *AlarmPolicy) AlarmPolicyPolicyTagArrayOutput { return v.PolicyTags }).(AlarmPolicyPolicyTagArrayOutput)
}

// Project ID. For products with different projects, a value other than -1 must be passed in.
func (o AlarmPolicyOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// The remark of policy group.
func (o AlarmPolicyOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Triggered task list.
func (o AlarmPolicyOutput) TriggerTasks() AlarmPolicyTriggerTaskArrayOutput {
	return o.ApplyT(func(v *AlarmPolicy) AlarmPolicyTriggerTaskArrayOutput { return v.TriggerTasks }).(AlarmPolicyTriggerTaskArrayOutput)
}

// The alarm policy update time.
func (o AlarmPolicyOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmPolicy) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AlarmPolicyArrayOutput struct{ *pulumi.OutputState }

func (AlarmPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmPolicy)(nil)).Elem()
}

func (o AlarmPolicyArrayOutput) ToAlarmPolicyArrayOutput() AlarmPolicyArrayOutput {
	return o
}

func (o AlarmPolicyArrayOutput) ToAlarmPolicyArrayOutputWithContext(ctx context.Context) AlarmPolicyArrayOutput {
	return o
}

func (o AlarmPolicyArrayOutput) Index(i pulumi.IntInput) AlarmPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlarmPolicy {
		return vs[0].([]*AlarmPolicy)[vs[1].(int)]
	}).(AlarmPolicyOutput)
}

type AlarmPolicyMapOutput struct{ *pulumi.OutputState }

func (AlarmPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmPolicy)(nil)).Elem()
}

func (o AlarmPolicyMapOutput) ToAlarmPolicyMapOutput() AlarmPolicyMapOutput {
	return o
}

func (o AlarmPolicyMapOutput) ToAlarmPolicyMapOutputWithContext(ctx context.Context) AlarmPolicyMapOutput {
	return o
}

func (o AlarmPolicyMapOutput) MapIndex(k pulumi.StringInput) AlarmPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlarmPolicy {
		return vs[0].(map[string]*AlarmPolicy)[vs[1].(string)]
	}).(AlarmPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmPolicyInput)(nil)).Elem(), &AlarmPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmPolicyArrayInput)(nil)).Elem(), AlarmPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmPolicyMapInput)(nil)).Elem(), AlarmPolicyMap{})
	pulumi.RegisterOutputType(AlarmPolicyOutput{})
	pulumi.RegisterOutputType(AlarmPolicyArrayOutput{})
	pulumi.RegisterOutputType(AlarmPolicyMapOutput{})
}
