// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a monitor grafanaIntegration
//
// ## Example Usage
// ### Create a grafan instance and integrate the configuration
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-6"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			foo, err := Monitor.NewGrafanaInstance(ctx, "foo", &Monitor.GrafanaInstanceArgs{
//				InstanceName: pulumi.String("test-grafana"),
//				VpcId:        vpc.ID(),
//				SubnetIds: pulumi.StringArray{
//					subnet.ID(),
//				},
//				GrafanaInitPassword: pulumi.String("1234567890"),
//				EnableInternet:      pulumi.Bool(false),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Monitor.NewGrafanaIntegration(ctx, "grafanaIntegration", &Monitor.GrafanaIntegrationArgs{
//				InstanceId: foo.ID(),
//				Kind:       pulumi.String("tencentcloud-monitor-app"),
//				Content:    pulumi.String("{\"kind\":\"tencentcloud-monitor-app\",\"spec\":{\"dataSourceSpec\":{\"authProvider\":{\"__anyOf\":\"使用密钥\",\"useRole\":true,\"secretId\":\"arunma@tencent.com\",\"secretKey\":\"12345678\"},\"name\":\"uint-test\"},\"grafanaSpec\":{\"organizationIds\":[]}}}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type GrafanaIntegration struct {
	pulumi.CustomResourceState

	// generated json string of given integration json schema.
	Content pulumi.StringOutput `pulumi:"content"`
	// integration desc.
	Description pulumi.StringOutput `pulumi:"description"`
	// grafana instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// integration id.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// integration json schema kind.
	Kind pulumi.StringOutput `pulumi:"kind"`
}

// NewGrafanaIntegration registers a new resource with the given unique name, arguments, and options.
func NewGrafanaIntegration(ctx *pulumi.Context,
	name string, args *GrafanaIntegrationArgs, opts ...pulumi.ResourceOption) (*GrafanaIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GrafanaIntegration
	err := ctx.RegisterResource("tencentcloud:Monitor/grafanaIntegration:GrafanaIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaIntegration gets an existing GrafanaIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaIntegrationState, opts ...pulumi.ResourceOption) (*GrafanaIntegration, error) {
	var resource GrafanaIntegration
	err := ctx.ReadResource("tencentcloud:Monitor/grafanaIntegration:GrafanaIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaIntegration resources.
type grafanaIntegrationState struct {
	// generated json string of given integration json schema.
	Content *string `pulumi:"content"`
	// integration desc.
	Description *string `pulumi:"description"`
	// grafana instance id.
	InstanceId *string `pulumi:"instanceId"`
	// integration id.
	IntegrationId *string `pulumi:"integrationId"`
	// integration json schema kind.
	Kind *string `pulumi:"kind"`
}

type GrafanaIntegrationState struct {
	// generated json string of given integration json schema.
	Content pulumi.StringPtrInput
	// integration desc.
	Description pulumi.StringPtrInput
	// grafana instance id.
	InstanceId pulumi.StringPtrInput
	// integration id.
	IntegrationId pulumi.StringPtrInput
	// integration json schema kind.
	Kind pulumi.StringPtrInput
}

func (GrafanaIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaIntegrationState)(nil)).Elem()
}

type grafanaIntegrationArgs struct {
	// generated json string of given integration json schema.
	Content *string `pulumi:"content"`
	// integration desc.
	Description *string `pulumi:"description"`
	// grafana instance id.
	InstanceId string `pulumi:"instanceId"`
	// integration json schema kind.
	Kind *string `pulumi:"kind"`
}

// The set of arguments for constructing a GrafanaIntegration resource.
type GrafanaIntegrationArgs struct {
	// generated json string of given integration json schema.
	Content pulumi.StringPtrInput
	// integration desc.
	Description pulumi.StringPtrInput
	// grafana instance id.
	InstanceId pulumi.StringInput
	// integration json schema kind.
	Kind pulumi.StringPtrInput
}

func (GrafanaIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaIntegrationArgs)(nil)).Elem()
}

type GrafanaIntegrationInput interface {
	pulumi.Input

	ToGrafanaIntegrationOutput() GrafanaIntegrationOutput
	ToGrafanaIntegrationOutputWithContext(ctx context.Context) GrafanaIntegrationOutput
}

func (*GrafanaIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaIntegration)(nil)).Elem()
}

func (i *GrafanaIntegration) ToGrafanaIntegrationOutput() GrafanaIntegrationOutput {
	return i.ToGrafanaIntegrationOutputWithContext(context.Background())
}

func (i *GrafanaIntegration) ToGrafanaIntegrationOutputWithContext(ctx context.Context) GrafanaIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaIntegrationOutput)
}

// GrafanaIntegrationArrayInput is an input type that accepts GrafanaIntegrationArray and GrafanaIntegrationArrayOutput values.
// You can construct a concrete instance of `GrafanaIntegrationArrayInput` via:
//
//	GrafanaIntegrationArray{ GrafanaIntegrationArgs{...} }
type GrafanaIntegrationArrayInput interface {
	pulumi.Input

	ToGrafanaIntegrationArrayOutput() GrafanaIntegrationArrayOutput
	ToGrafanaIntegrationArrayOutputWithContext(context.Context) GrafanaIntegrationArrayOutput
}

type GrafanaIntegrationArray []GrafanaIntegrationInput

func (GrafanaIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaIntegration)(nil)).Elem()
}

func (i GrafanaIntegrationArray) ToGrafanaIntegrationArrayOutput() GrafanaIntegrationArrayOutput {
	return i.ToGrafanaIntegrationArrayOutputWithContext(context.Background())
}

func (i GrafanaIntegrationArray) ToGrafanaIntegrationArrayOutputWithContext(ctx context.Context) GrafanaIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaIntegrationArrayOutput)
}

// GrafanaIntegrationMapInput is an input type that accepts GrafanaIntegrationMap and GrafanaIntegrationMapOutput values.
// You can construct a concrete instance of `GrafanaIntegrationMapInput` via:
//
//	GrafanaIntegrationMap{ "key": GrafanaIntegrationArgs{...} }
type GrafanaIntegrationMapInput interface {
	pulumi.Input

	ToGrafanaIntegrationMapOutput() GrafanaIntegrationMapOutput
	ToGrafanaIntegrationMapOutputWithContext(context.Context) GrafanaIntegrationMapOutput
}

type GrafanaIntegrationMap map[string]GrafanaIntegrationInput

func (GrafanaIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaIntegration)(nil)).Elem()
}

func (i GrafanaIntegrationMap) ToGrafanaIntegrationMapOutput() GrafanaIntegrationMapOutput {
	return i.ToGrafanaIntegrationMapOutputWithContext(context.Background())
}

func (i GrafanaIntegrationMap) ToGrafanaIntegrationMapOutputWithContext(ctx context.Context) GrafanaIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaIntegrationMapOutput)
}

type GrafanaIntegrationOutput struct{ *pulumi.OutputState }

func (GrafanaIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaIntegration)(nil)).Elem()
}

func (o GrafanaIntegrationOutput) ToGrafanaIntegrationOutput() GrafanaIntegrationOutput {
	return o
}

func (o GrafanaIntegrationOutput) ToGrafanaIntegrationOutputWithContext(ctx context.Context) GrafanaIntegrationOutput {
	return o
}

// generated json string of given integration json schema.
func (o GrafanaIntegrationOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaIntegration) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// integration desc.
func (o GrafanaIntegrationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaIntegration) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// grafana instance id.
func (o GrafanaIntegrationOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaIntegration) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// integration id.
func (o GrafanaIntegrationOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaIntegration) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// integration json schema kind.
func (o GrafanaIntegrationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaIntegration) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

type GrafanaIntegrationArrayOutput struct{ *pulumi.OutputState }

func (GrafanaIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaIntegration)(nil)).Elem()
}

func (o GrafanaIntegrationArrayOutput) ToGrafanaIntegrationArrayOutput() GrafanaIntegrationArrayOutput {
	return o
}

func (o GrafanaIntegrationArrayOutput) ToGrafanaIntegrationArrayOutputWithContext(ctx context.Context) GrafanaIntegrationArrayOutput {
	return o
}

func (o GrafanaIntegrationArrayOutput) Index(i pulumi.IntInput) GrafanaIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaIntegration {
		return vs[0].([]*GrafanaIntegration)[vs[1].(int)]
	}).(GrafanaIntegrationOutput)
}

type GrafanaIntegrationMapOutput struct{ *pulumi.OutputState }

func (GrafanaIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaIntegration)(nil)).Elem()
}

func (o GrafanaIntegrationMapOutput) ToGrafanaIntegrationMapOutput() GrafanaIntegrationMapOutput {
	return o
}

func (o GrafanaIntegrationMapOutput) ToGrafanaIntegrationMapOutputWithContext(ctx context.Context) GrafanaIntegrationMapOutput {
	return o
}

func (o GrafanaIntegrationMapOutput) MapIndex(k pulumi.StringInput) GrafanaIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaIntegration {
		return vs[0].(map[string]*GrafanaIntegration)[vs[1].(string)]
	}).(GrafanaIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaIntegrationInput)(nil)).Elem(), &GrafanaIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaIntegrationArrayInput)(nil)).Elem(), GrafanaIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaIntegrationMapInput)(nil)).Elem(), GrafanaIntegrationMap{})
	pulumi.RegisterOutputType(GrafanaIntegrationOutput{})
	pulumi.RegisterOutputType(GrafanaIntegrationArrayOutput{})
	pulumi.RegisterOutputType(GrafanaIntegrationMapOutput{})
}
