// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a monitor grafanaEnvConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.NewGrafanaEnvConfig(ctx, "grafanaEnvConfig", &Monitor.GrafanaEnvConfigArgs{
//				Envs: pulumi.AnyMap{
//					"aaa": pulumi.Any("ccc"),
//					"bbb": pulumi.Any("ccc"),
//				},
//				InstanceId: pulumi.String("grafana-dp2hnnfa"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// monitor grafana_env_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Monitor/grafanaEnvConfig:GrafanaEnvConfig grafana_env_config instance_id
//
// ```
type GrafanaEnvConfig struct {
	pulumi.CustomResourceState

	// Environment variables.
	Envs pulumi.MapOutput `pulumi:"envs"`
	// Grafana instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewGrafanaEnvConfig registers a new resource with the given unique name, arguments, and options.
func NewGrafanaEnvConfig(ctx *pulumi.Context,
	name string, args *GrafanaEnvConfigArgs, opts ...pulumi.ResourceOption) (*GrafanaEnvConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GrafanaEnvConfig
	err := ctx.RegisterResource("tencentcloud:Monitor/grafanaEnvConfig:GrafanaEnvConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaEnvConfig gets an existing GrafanaEnvConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaEnvConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaEnvConfigState, opts ...pulumi.ResourceOption) (*GrafanaEnvConfig, error) {
	var resource GrafanaEnvConfig
	err := ctx.ReadResource("tencentcloud:Monitor/grafanaEnvConfig:GrafanaEnvConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaEnvConfig resources.
type grafanaEnvConfigState struct {
	// Environment variables.
	Envs map[string]interface{} `pulumi:"envs"`
	// Grafana instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type GrafanaEnvConfigState struct {
	// Environment variables.
	Envs pulumi.MapInput
	// Grafana instance ID.
	InstanceId pulumi.StringPtrInput
}

func (GrafanaEnvConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaEnvConfigState)(nil)).Elem()
}

type grafanaEnvConfigArgs struct {
	// Environment variables.
	Envs map[string]interface{} `pulumi:"envs"`
	// Grafana instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a GrafanaEnvConfig resource.
type GrafanaEnvConfigArgs struct {
	// Environment variables.
	Envs pulumi.MapInput
	// Grafana instance ID.
	InstanceId pulumi.StringInput
}

func (GrafanaEnvConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaEnvConfigArgs)(nil)).Elem()
}

type GrafanaEnvConfigInput interface {
	pulumi.Input

	ToGrafanaEnvConfigOutput() GrafanaEnvConfigOutput
	ToGrafanaEnvConfigOutputWithContext(ctx context.Context) GrafanaEnvConfigOutput
}

func (*GrafanaEnvConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaEnvConfig)(nil)).Elem()
}

func (i *GrafanaEnvConfig) ToGrafanaEnvConfigOutput() GrafanaEnvConfigOutput {
	return i.ToGrafanaEnvConfigOutputWithContext(context.Background())
}

func (i *GrafanaEnvConfig) ToGrafanaEnvConfigOutputWithContext(ctx context.Context) GrafanaEnvConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaEnvConfigOutput)
}

// GrafanaEnvConfigArrayInput is an input type that accepts GrafanaEnvConfigArray and GrafanaEnvConfigArrayOutput values.
// You can construct a concrete instance of `GrafanaEnvConfigArrayInput` via:
//
//	GrafanaEnvConfigArray{ GrafanaEnvConfigArgs{...} }
type GrafanaEnvConfigArrayInput interface {
	pulumi.Input

	ToGrafanaEnvConfigArrayOutput() GrafanaEnvConfigArrayOutput
	ToGrafanaEnvConfigArrayOutputWithContext(context.Context) GrafanaEnvConfigArrayOutput
}

type GrafanaEnvConfigArray []GrafanaEnvConfigInput

func (GrafanaEnvConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaEnvConfig)(nil)).Elem()
}

func (i GrafanaEnvConfigArray) ToGrafanaEnvConfigArrayOutput() GrafanaEnvConfigArrayOutput {
	return i.ToGrafanaEnvConfigArrayOutputWithContext(context.Background())
}

func (i GrafanaEnvConfigArray) ToGrafanaEnvConfigArrayOutputWithContext(ctx context.Context) GrafanaEnvConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaEnvConfigArrayOutput)
}

// GrafanaEnvConfigMapInput is an input type that accepts GrafanaEnvConfigMap and GrafanaEnvConfigMapOutput values.
// You can construct a concrete instance of `GrafanaEnvConfigMapInput` via:
//
//	GrafanaEnvConfigMap{ "key": GrafanaEnvConfigArgs{...} }
type GrafanaEnvConfigMapInput interface {
	pulumi.Input

	ToGrafanaEnvConfigMapOutput() GrafanaEnvConfigMapOutput
	ToGrafanaEnvConfigMapOutputWithContext(context.Context) GrafanaEnvConfigMapOutput
}

type GrafanaEnvConfigMap map[string]GrafanaEnvConfigInput

func (GrafanaEnvConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaEnvConfig)(nil)).Elem()
}

func (i GrafanaEnvConfigMap) ToGrafanaEnvConfigMapOutput() GrafanaEnvConfigMapOutput {
	return i.ToGrafanaEnvConfigMapOutputWithContext(context.Background())
}

func (i GrafanaEnvConfigMap) ToGrafanaEnvConfigMapOutputWithContext(ctx context.Context) GrafanaEnvConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaEnvConfigMapOutput)
}

type GrafanaEnvConfigOutput struct{ *pulumi.OutputState }

func (GrafanaEnvConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaEnvConfig)(nil)).Elem()
}

func (o GrafanaEnvConfigOutput) ToGrafanaEnvConfigOutput() GrafanaEnvConfigOutput {
	return o
}

func (o GrafanaEnvConfigOutput) ToGrafanaEnvConfigOutputWithContext(ctx context.Context) GrafanaEnvConfigOutput {
	return o
}

// Environment variables.
func (o GrafanaEnvConfigOutput) Envs() pulumi.MapOutput {
	return o.ApplyT(func(v *GrafanaEnvConfig) pulumi.MapOutput { return v.Envs }).(pulumi.MapOutput)
}

// Grafana instance ID.
func (o GrafanaEnvConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaEnvConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type GrafanaEnvConfigArrayOutput struct{ *pulumi.OutputState }

func (GrafanaEnvConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaEnvConfig)(nil)).Elem()
}

func (o GrafanaEnvConfigArrayOutput) ToGrafanaEnvConfigArrayOutput() GrafanaEnvConfigArrayOutput {
	return o
}

func (o GrafanaEnvConfigArrayOutput) ToGrafanaEnvConfigArrayOutputWithContext(ctx context.Context) GrafanaEnvConfigArrayOutput {
	return o
}

func (o GrafanaEnvConfigArrayOutput) Index(i pulumi.IntInput) GrafanaEnvConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaEnvConfig {
		return vs[0].([]*GrafanaEnvConfig)[vs[1].(int)]
	}).(GrafanaEnvConfigOutput)
}

type GrafanaEnvConfigMapOutput struct{ *pulumi.OutputState }

func (GrafanaEnvConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaEnvConfig)(nil)).Elem()
}

func (o GrafanaEnvConfigMapOutput) ToGrafanaEnvConfigMapOutput() GrafanaEnvConfigMapOutput {
	return o
}

func (o GrafanaEnvConfigMapOutput) ToGrafanaEnvConfigMapOutputWithContext(ctx context.Context) GrafanaEnvConfigMapOutput {
	return o
}

func (o GrafanaEnvConfigMapOutput) MapIndex(k pulumi.StringInput) GrafanaEnvConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaEnvConfig {
		return vs[0].(map[string]*GrafanaEnvConfig)[vs[1].(string)]
	}).(GrafanaEnvConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaEnvConfigInput)(nil)).Elem(), &GrafanaEnvConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaEnvConfigArrayInput)(nil)).Elem(), GrafanaEnvConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaEnvConfigMapInput)(nil)).Elem(), GrafanaEnvConfigMap{})
	pulumi.RegisterOutputType(GrafanaEnvConfigOutput{})
	pulumi.RegisterOutputType(GrafanaEnvConfigArrayOutput{})
	pulumi.RegisterOutputType(GrafanaEnvConfigMapOutput{})
}
