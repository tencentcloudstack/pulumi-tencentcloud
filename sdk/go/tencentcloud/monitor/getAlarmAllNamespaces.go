// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of monitor alarmAllNamespaces
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.GetAlarmAllNamespaces(ctx, &monitor.GetAlarmAllNamespacesArgs{
//				Ids: []string{
//					"qaap_tunnel_l4_listeners",
//				},
//				Module: "monitor",
//				MonitorTypes: []string{
//					"MT_QCE",
//				},
//				SceneType: "ST_ALARM",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAlarmAllNamespaces(ctx *pulumi.Context, args *GetAlarmAllNamespacesArgs, opts ...pulumi.InvokeOption) (*GetAlarmAllNamespacesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAlarmAllNamespacesResult
	err := ctx.Invoke("tencentcloud:Monitor/getAlarmAllNamespaces:getAlarmAllNamespaces", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlarmAllNamespaces.
type GetAlarmAllNamespacesArgs struct {
	// Filter based on the Id of the namespace without filling in the default query for all.
	Ids []string `pulumi:"ids"`
	// Fixed value, as `monitor`.
	Module string `pulumi:"module"`
	// Filter based on monitoring type, do not fill in default, check all types MT_QCE=cloud product monitoring.
	MonitorTypes []string `pulumi:"monitorTypes"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Currently, only ST_ALARM=alarm type is filtered based on usage scenarios.
	SceneType string `pulumi:"sceneType"`
}

// A collection of values returned by getAlarmAllNamespaces.
type GetAlarmAllNamespacesResult struct {
	// General alarm strategy types (including: application performance monitoring, front-end performance monitoring, cloud dial testing).
	CommonNamespaces []GetAlarmAllNamespacesCommonNamespace `pulumi:"commonNamespaces"`
	// Other alarm strategy types are currently not supported.
	CustomNamespacesNews []GetAlarmAllNamespacesCustomNamespacesNews `pulumi:"customNamespacesNews"`
	// The provider-assigned unique ID for this managed resource.
	Id           string   `pulumi:"id"`
	Ids          []string `pulumi:"ids"`
	Module       string   `pulumi:"module"`
	MonitorTypes []string `pulumi:"monitorTypes"`
	// Types of alarm strategies for cloud products.
	QceNamespacesNews []GetAlarmAllNamespacesQceNamespacesNews `pulumi:"qceNamespacesNews"`
	ResultOutputFile  *string                                  `pulumi:"resultOutputFile"`
	SceneType         string                                   `pulumi:"sceneType"`
}

func GetAlarmAllNamespacesOutput(ctx *pulumi.Context, args GetAlarmAllNamespacesOutputArgs, opts ...pulumi.InvokeOption) GetAlarmAllNamespacesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAlarmAllNamespacesResult, error) {
			args := v.(GetAlarmAllNamespacesArgs)
			r, err := GetAlarmAllNamespaces(ctx, &args, opts...)
			var s GetAlarmAllNamespacesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAlarmAllNamespacesResultOutput)
}

// A collection of arguments for invoking getAlarmAllNamespaces.
type GetAlarmAllNamespacesOutputArgs struct {
	// Filter based on the Id of the namespace without filling in the default query for all.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// Fixed value, as `monitor`.
	Module pulumi.StringInput `pulumi:"module"`
	// Filter based on monitoring type, do not fill in default, check all types MT_QCE=cloud product monitoring.
	MonitorTypes pulumi.StringArrayInput `pulumi:"monitorTypes"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Currently, only ST_ALARM=alarm type is filtered based on usage scenarios.
	SceneType pulumi.StringInput `pulumi:"sceneType"`
}

func (GetAlarmAllNamespacesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmAllNamespacesArgs)(nil)).Elem()
}

// A collection of values returned by getAlarmAllNamespaces.
type GetAlarmAllNamespacesResultOutput struct{ *pulumi.OutputState }

func (GetAlarmAllNamespacesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmAllNamespacesResult)(nil)).Elem()
}

func (o GetAlarmAllNamespacesResultOutput) ToGetAlarmAllNamespacesResultOutput() GetAlarmAllNamespacesResultOutput {
	return o
}

func (o GetAlarmAllNamespacesResultOutput) ToGetAlarmAllNamespacesResultOutputWithContext(ctx context.Context) GetAlarmAllNamespacesResultOutput {
	return o
}

// General alarm strategy types (including: application performance monitoring, front-end performance monitoring, cloud dial testing).
func (o GetAlarmAllNamespacesResultOutput) CommonNamespaces() GetAlarmAllNamespacesCommonNamespaceArrayOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) []GetAlarmAllNamespacesCommonNamespace { return v.CommonNamespaces }).(GetAlarmAllNamespacesCommonNamespaceArrayOutput)
}

// Other alarm strategy types are currently not supported.
func (o GetAlarmAllNamespacesResultOutput) CustomNamespacesNews() GetAlarmAllNamespacesCustomNamespacesNewsArrayOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) []GetAlarmAllNamespacesCustomNamespacesNews {
		return v.CustomNamespacesNews
	}).(GetAlarmAllNamespacesCustomNamespacesNewsArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAlarmAllNamespacesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAlarmAllNamespacesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetAlarmAllNamespacesResultOutput) Module() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) string { return v.Module }).(pulumi.StringOutput)
}

func (o GetAlarmAllNamespacesResultOutput) MonitorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) []string { return v.MonitorTypes }).(pulumi.StringArrayOutput)
}

// Types of alarm strategies for cloud products.
func (o GetAlarmAllNamespacesResultOutput) QceNamespacesNews() GetAlarmAllNamespacesQceNamespacesNewsArrayOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) []GetAlarmAllNamespacesQceNamespacesNews {
		return v.QceNamespacesNews
	}).(GetAlarmAllNamespacesQceNamespacesNewsArrayOutput)
}

func (o GetAlarmAllNamespacesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetAlarmAllNamespacesResultOutput) SceneType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmAllNamespacesResult) string { return v.SceneType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAlarmAllNamespacesResultOutput{})
}
