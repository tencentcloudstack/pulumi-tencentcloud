// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a monitor tmpGrafanaConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			fooGrafanaInstance, err := Monitor.NewGrafanaInstance(ctx, "fooGrafanaInstance", &Monitor.GrafanaInstanceArgs{
//				InstanceName: pulumi.String("tf-grafana"),
//				VpcId:        vpc.ID(),
//				SubnetIds: pulumi.StringArray{
//					subnet.ID(),
//				},
//				GrafanaInitPassword: pulumi.String("1234567890"),
//				EnableInternet:      pulumi.Bool(false),
//				IsDestroy:           pulumi.Bool(true),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"server": map[string]interface{}{
//					"http_port":           8080,
//					"root_url":            "https://cloud-grafana.woa.com/grafana-ffrdnrfa/",
//					"serve_from_sub_path": true,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err = Monitor.NewTmpGrafanaConfig(ctx, "fooTmpGrafanaConfig", &Monitor.TmpGrafanaConfigArgs{
//				Config:     pulumi.String(json0),
//				InstanceId: fooGrafanaInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// monitor tmp_grafana_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Monitor/tmpGrafanaConfig:TmpGrafanaConfig tmp_grafana_config tmp_grafana_config_id
//
// ```
type TmpGrafanaConfig struct {
	pulumi.CustomResourceState

	// JSON encoded string.
	Config pulumi.StringOutput `pulumi:"config"`
	// Instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewTmpGrafanaConfig registers a new resource with the given unique name, arguments, and options.
func NewTmpGrafanaConfig(ctx *pulumi.Context,
	name string, args *TmpGrafanaConfigArgs, opts ...pulumi.ResourceOption) (*TmpGrafanaConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TmpGrafanaConfig
	err := ctx.RegisterResource("tencentcloud:Monitor/tmpGrafanaConfig:TmpGrafanaConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTmpGrafanaConfig gets an existing TmpGrafanaConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTmpGrafanaConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TmpGrafanaConfigState, opts ...pulumi.ResourceOption) (*TmpGrafanaConfig, error) {
	var resource TmpGrafanaConfig
	err := ctx.ReadResource("tencentcloud:Monitor/tmpGrafanaConfig:TmpGrafanaConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TmpGrafanaConfig resources.
type tmpGrafanaConfigState struct {
	// JSON encoded string.
	Config *string `pulumi:"config"`
	// Instance id.
	InstanceId *string `pulumi:"instanceId"`
}

type TmpGrafanaConfigState struct {
	// JSON encoded string.
	Config pulumi.StringPtrInput
	// Instance id.
	InstanceId pulumi.StringPtrInput
}

func (TmpGrafanaConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpGrafanaConfigState)(nil)).Elem()
}

type tmpGrafanaConfigArgs struct {
	// JSON encoded string.
	Config string `pulumi:"config"`
	// Instance id.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a TmpGrafanaConfig resource.
type TmpGrafanaConfigArgs struct {
	// JSON encoded string.
	Config pulumi.StringInput
	// Instance id.
	InstanceId pulumi.StringInput
}

func (TmpGrafanaConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpGrafanaConfigArgs)(nil)).Elem()
}

type TmpGrafanaConfigInput interface {
	pulumi.Input

	ToTmpGrafanaConfigOutput() TmpGrafanaConfigOutput
	ToTmpGrafanaConfigOutputWithContext(ctx context.Context) TmpGrafanaConfigOutput
}

func (*TmpGrafanaConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpGrafanaConfig)(nil)).Elem()
}

func (i *TmpGrafanaConfig) ToTmpGrafanaConfigOutput() TmpGrafanaConfigOutput {
	return i.ToTmpGrafanaConfigOutputWithContext(context.Background())
}

func (i *TmpGrafanaConfig) ToTmpGrafanaConfigOutputWithContext(ctx context.Context) TmpGrafanaConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpGrafanaConfigOutput)
}

// TmpGrafanaConfigArrayInput is an input type that accepts TmpGrafanaConfigArray and TmpGrafanaConfigArrayOutput values.
// You can construct a concrete instance of `TmpGrafanaConfigArrayInput` via:
//
//	TmpGrafanaConfigArray{ TmpGrafanaConfigArgs{...} }
type TmpGrafanaConfigArrayInput interface {
	pulumi.Input

	ToTmpGrafanaConfigArrayOutput() TmpGrafanaConfigArrayOutput
	ToTmpGrafanaConfigArrayOutputWithContext(context.Context) TmpGrafanaConfigArrayOutput
}

type TmpGrafanaConfigArray []TmpGrafanaConfigInput

func (TmpGrafanaConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpGrafanaConfig)(nil)).Elem()
}

func (i TmpGrafanaConfigArray) ToTmpGrafanaConfigArrayOutput() TmpGrafanaConfigArrayOutput {
	return i.ToTmpGrafanaConfigArrayOutputWithContext(context.Background())
}

func (i TmpGrafanaConfigArray) ToTmpGrafanaConfigArrayOutputWithContext(ctx context.Context) TmpGrafanaConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpGrafanaConfigArrayOutput)
}

// TmpGrafanaConfigMapInput is an input type that accepts TmpGrafanaConfigMap and TmpGrafanaConfigMapOutput values.
// You can construct a concrete instance of `TmpGrafanaConfigMapInput` via:
//
//	TmpGrafanaConfigMap{ "key": TmpGrafanaConfigArgs{...} }
type TmpGrafanaConfigMapInput interface {
	pulumi.Input

	ToTmpGrafanaConfigMapOutput() TmpGrafanaConfigMapOutput
	ToTmpGrafanaConfigMapOutputWithContext(context.Context) TmpGrafanaConfigMapOutput
}

type TmpGrafanaConfigMap map[string]TmpGrafanaConfigInput

func (TmpGrafanaConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpGrafanaConfig)(nil)).Elem()
}

func (i TmpGrafanaConfigMap) ToTmpGrafanaConfigMapOutput() TmpGrafanaConfigMapOutput {
	return i.ToTmpGrafanaConfigMapOutputWithContext(context.Background())
}

func (i TmpGrafanaConfigMap) ToTmpGrafanaConfigMapOutputWithContext(ctx context.Context) TmpGrafanaConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpGrafanaConfigMapOutput)
}

type TmpGrafanaConfigOutput struct{ *pulumi.OutputState }

func (TmpGrafanaConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpGrafanaConfig)(nil)).Elem()
}

func (o TmpGrafanaConfigOutput) ToTmpGrafanaConfigOutput() TmpGrafanaConfigOutput {
	return o
}

func (o TmpGrafanaConfigOutput) ToTmpGrafanaConfigOutputWithContext(ctx context.Context) TmpGrafanaConfigOutput {
	return o
}

// JSON encoded string.
func (o TmpGrafanaConfigOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpGrafanaConfig) pulumi.StringOutput { return v.Config }).(pulumi.StringOutput)
}

// Instance id.
func (o TmpGrafanaConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpGrafanaConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type TmpGrafanaConfigArrayOutput struct{ *pulumi.OutputState }

func (TmpGrafanaConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpGrafanaConfig)(nil)).Elem()
}

func (o TmpGrafanaConfigArrayOutput) ToTmpGrafanaConfigArrayOutput() TmpGrafanaConfigArrayOutput {
	return o
}

func (o TmpGrafanaConfigArrayOutput) ToTmpGrafanaConfigArrayOutputWithContext(ctx context.Context) TmpGrafanaConfigArrayOutput {
	return o
}

func (o TmpGrafanaConfigArrayOutput) Index(i pulumi.IntInput) TmpGrafanaConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TmpGrafanaConfig {
		return vs[0].([]*TmpGrafanaConfig)[vs[1].(int)]
	}).(TmpGrafanaConfigOutput)
}

type TmpGrafanaConfigMapOutput struct{ *pulumi.OutputState }

func (TmpGrafanaConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpGrafanaConfig)(nil)).Elem()
}

func (o TmpGrafanaConfigMapOutput) ToTmpGrafanaConfigMapOutput() TmpGrafanaConfigMapOutput {
	return o
}

func (o TmpGrafanaConfigMapOutput) ToTmpGrafanaConfigMapOutputWithContext(ctx context.Context) TmpGrafanaConfigMapOutput {
	return o
}

func (o TmpGrafanaConfigMapOutput) MapIndex(k pulumi.StringInput) TmpGrafanaConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TmpGrafanaConfig {
		return vs[0].(map[string]*TmpGrafanaConfig)[vs[1].(string)]
	}).(TmpGrafanaConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TmpGrafanaConfigInput)(nil)).Elem(), &TmpGrafanaConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpGrafanaConfigArrayInput)(nil)).Elem(), TmpGrafanaConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpGrafanaConfigMapInput)(nil)).Elem(), TmpGrafanaConfigMap{})
	pulumi.RegisterOutputType(TmpGrafanaConfigOutput{})
	pulumi.RegisterOutputType(TmpGrafanaConfigArrayOutput{})
	pulumi.RegisterOutputType(TmpGrafanaConfigMapOutput{})
}
