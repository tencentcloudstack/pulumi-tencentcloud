// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to Interlude notification list.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.GetAlarmNotices(ctx, &monitor.GetAlarmNoticesArgs{
//				GroupIds:     []interface{}{},
//				Name:         pulumi.StringRef(""),
//				NoticeIds:    []interface{}{},
//				Order:        pulumi.StringRef("DESC"),
//				OwnerUid:     pulumi.IntRef(1),
//				ReceiverType: pulumi.StringRef(""),
//				UserIds:      []interface{}{},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAlarmNotices(ctx *pulumi.Context, args *GetAlarmNoticesArgs, opts ...pulumi.InvokeOption) (*GetAlarmNoticesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAlarmNoticesResult
	err := ctx.Invoke("tencentcloud:Monitor/getAlarmNotices:getAlarmNotices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlarmNotices.
type GetAlarmNoticesArgs struct {
	// Receive group list.
	GroupIds []int `pulumi:"groupIds"`
	// Alarm notification template name Used for fuzzy search.
	Name *string `pulumi:"name"`
	// Receive group list.
	NoticeIds []string `pulumi:"noticeIds"`
	// Sort by update time ASC=forward order DESC=reverse order.
	Order *string `pulumi:"order"`
	// The primary account uid is used to create a preset notification.
	OwnerUid *int `pulumi:"ownerUid"`
	// To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
	ReceiverType *string `pulumi:"receiverType"`
	// Used to store results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// List of recipients.
	UserIds []int `pulumi:"userIds"`
}

// A collection of values returned by getAlarmNotices.
type GetAlarmNoticesResult struct {
	// Alarm notification template list.
	AlarmNotices []GetAlarmNoticesAlarmNotice `pulumi:"alarmNotices"`
	// User group ID list.
	GroupIds []int `pulumi:"groupIds"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Alarm notification template name.
	Name      *string  `pulumi:"name"`
	NoticeIds []string `pulumi:"noticeIds"`
	Order     *string  `pulumi:"order"`
	OwnerUid  *int     `pulumi:"ownerUid"`
	// Recipient Type USER=User GROUP=User Group.
	ReceiverType     *string `pulumi:"receiverType"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// User UID List.
	UserIds []int `pulumi:"userIds"`
}

func GetAlarmNoticesOutput(ctx *pulumi.Context, args GetAlarmNoticesOutputArgs, opts ...pulumi.InvokeOption) GetAlarmNoticesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAlarmNoticesResult, error) {
			args := v.(GetAlarmNoticesArgs)
			r, err := GetAlarmNotices(ctx, &args, opts...)
			var s GetAlarmNoticesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAlarmNoticesResultOutput)
}

// A collection of arguments for invoking getAlarmNotices.
type GetAlarmNoticesOutputArgs struct {
	// Receive group list.
	GroupIds pulumi.IntArrayInput `pulumi:"groupIds"`
	// Alarm notification template name Used for fuzzy search.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Receive group list.
	NoticeIds pulumi.StringArrayInput `pulumi:"noticeIds"`
	// Sort by update time ASC=forward order DESC=reverse order.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// The primary account uid is used to create a preset notification.
	OwnerUid pulumi.IntPtrInput `pulumi:"ownerUid"`
	// To filter alarm notification templates according to recipients, you need to select the notification user type. USER=user GROUP=user group Leave blank = not filter by recipient.
	ReceiverType pulumi.StringPtrInput `pulumi:"receiverType"`
	// Used to store results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// List of recipients.
	UserIds pulumi.IntArrayInput `pulumi:"userIds"`
}

func (GetAlarmNoticesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmNoticesArgs)(nil)).Elem()
}

// A collection of values returned by getAlarmNotices.
type GetAlarmNoticesResultOutput struct{ *pulumi.OutputState }

func (GetAlarmNoticesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmNoticesResult)(nil)).Elem()
}

func (o GetAlarmNoticesResultOutput) ToGetAlarmNoticesResultOutput() GetAlarmNoticesResultOutput {
	return o
}

func (o GetAlarmNoticesResultOutput) ToGetAlarmNoticesResultOutputWithContext(ctx context.Context) GetAlarmNoticesResultOutput {
	return o
}

// Alarm notification template list.
func (o GetAlarmNoticesResultOutput) AlarmNotices() GetAlarmNoticesAlarmNoticeArrayOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) []GetAlarmNoticesAlarmNotice { return v.AlarmNotices }).(GetAlarmNoticesAlarmNoticeArrayOutput)
}

// User group ID list.
func (o GetAlarmNoticesResultOutput) GroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) []int { return v.GroupIds }).(pulumi.IntArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAlarmNoticesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Alarm notification template name.
func (o GetAlarmNoticesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetAlarmNoticesResultOutput) NoticeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) []string { return v.NoticeIds }).(pulumi.StringArrayOutput)
}

func (o GetAlarmNoticesResultOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) *string { return v.Order }).(pulumi.StringPtrOutput)
}

func (o GetAlarmNoticesResultOutput) OwnerUid() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) *int { return v.OwnerUid }).(pulumi.IntPtrOutput)
}

// Recipient Type USER=User GROUP=User Group.
func (o GetAlarmNoticesResultOutput) ReceiverType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) *string { return v.ReceiverType }).(pulumi.StringPtrOutput)
}

func (o GetAlarmNoticesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// User UID List.
func (o GetAlarmNoticesResultOutput) UserIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetAlarmNoticesResult) []int { return v.UserIds }).(pulumi.IntArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAlarmNoticesResultOutput{})
}
