// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a monitor grafanaDnsConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.NewGrafanaDnsConfig(ctx, "grafanaDnsConfig", &Monitor.GrafanaDnsConfigArgs{
//				InstanceId: pulumi.String("grafana-dp2hnnfa"),
//				NameServers: pulumi.StringArray{
//					pulumi.String("10.1.2.1"),
//					pulumi.String("10.1.2.2"),
//					pulumi.String("10.1.2.3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// monitor grafana_dns_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Monitor/grafanaDnsConfig:GrafanaDnsConfig grafana_dns_config instance_id
//
// ```
type GrafanaDnsConfig struct {
	pulumi.CustomResourceState

	// Grafana instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// DNS nameserver list.
	NameServers pulumi.StringArrayOutput `pulumi:"nameServers"`
}

// NewGrafanaDnsConfig registers a new resource with the given unique name, arguments, and options.
func NewGrafanaDnsConfig(ctx *pulumi.Context,
	name string, args *GrafanaDnsConfigArgs, opts ...pulumi.ResourceOption) (*GrafanaDnsConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GrafanaDnsConfig
	err := ctx.RegisterResource("tencentcloud:Monitor/grafanaDnsConfig:GrafanaDnsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGrafanaDnsConfig gets an existing GrafanaDnsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGrafanaDnsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GrafanaDnsConfigState, opts ...pulumi.ResourceOption) (*GrafanaDnsConfig, error) {
	var resource GrafanaDnsConfig
	err := ctx.ReadResource("tencentcloud:Monitor/grafanaDnsConfig:GrafanaDnsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GrafanaDnsConfig resources.
type grafanaDnsConfigState struct {
	// Grafana instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// DNS nameserver list.
	NameServers []string `pulumi:"nameServers"`
}

type GrafanaDnsConfigState struct {
	// Grafana instance ID.
	InstanceId pulumi.StringPtrInput
	// DNS nameserver list.
	NameServers pulumi.StringArrayInput
}

func (GrafanaDnsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaDnsConfigState)(nil)).Elem()
}

type grafanaDnsConfigArgs struct {
	// Grafana instance ID.
	InstanceId string `pulumi:"instanceId"`
	// DNS nameserver list.
	NameServers []string `pulumi:"nameServers"`
}

// The set of arguments for constructing a GrafanaDnsConfig resource.
type GrafanaDnsConfigArgs struct {
	// Grafana instance ID.
	InstanceId pulumi.StringInput
	// DNS nameserver list.
	NameServers pulumi.StringArrayInput
}

func (GrafanaDnsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*grafanaDnsConfigArgs)(nil)).Elem()
}

type GrafanaDnsConfigInput interface {
	pulumi.Input

	ToGrafanaDnsConfigOutput() GrafanaDnsConfigOutput
	ToGrafanaDnsConfigOutputWithContext(ctx context.Context) GrafanaDnsConfigOutput
}

func (*GrafanaDnsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaDnsConfig)(nil)).Elem()
}

func (i *GrafanaDnsConfig) ToGrafanaDnsConfigOutput() GrafanaDnsConfigOutput {
	return i.ToGrafanaDnsConfigOutputWithContext(context.Background())
}

func (i *GrafanaDnsConfig) ToGrafanaDnsConfigOutputWithContext(ctx context.Context) GrafanaDnsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDnsConfigOutput)
}

// GrafanaDnsConfigArrayInput is an input type that accepts GrafanaDnsConfigArray and GrafanaDnsConfigArrayOutput values.
// You can construct a concrete instance of `GrafanaDnsConfigArrayInput` via:
//
//	GrafanaDnsConfigArray{ GrafanaDnsConfigArgs{...} }
type GrafanaDnsConfigArrayInput interface {
	pulumi.Input

	ToGrafanaDnsConfigArrayOutput() GrafanaDnsConfigArrayOutput
	ToGrafanaDnsConfigArrayOutputWithContext(context.Context) GrafanaDnsConfigArrayOutput
}

type GrafanaDnsConfigArray []GrafanaDnsConfigInput

func (GrafanaDnsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaDnsConfig)(nil)).Elem()
}

func (i GrafanaDnsConfigArray) ToGrafanaDnsConfigArrayOutput() GrafanaDnsConfigArrayOutput {
	return i.ToGrafanaDnsConfigArrayOutputWithContext(context.Background())
}

func (i GrafanaDnsConfigArray) ToGrafanaDnsConfigArrayOutputWithContext(ctx context.Context) GrafanaDnsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDnsConfigArrayOutput)
}

// GrafanaDnsConfigMapInput is an input type that accepts GrafanaDnsConfigMap and GrafanaDnsConfigMapOutput values.
// You can construct a concrete instance of `GrafanaDnsConfigMapInput` via:
//
//	GrafanaDnsConfigMap{ "key": GrafanaDnsConfigArgs{...} }
type GrafanaDnsConfigMapInput interface {
	pulumi.Input

	ToGrafanaDnsConfigMapOutput() GrafanaDnsConfigMapOutput
	ToGrafanaDnsConfigMapOutputWithContext(context.Context) GrafanaDnsConfigMapOutput
}

type GrafanaDnsConfigMap map[string]GrafanaDnsConfigInput

func (GrafanaDnsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaDnsConfig)(nil)).Elem()
}

func (i GrafanaDnsConfigMap) ToGrafanaDnsConfigMapOutput() GrafanaDnsConfigMapOutput {
	return i.ToGrafanaDnsConfigMapOutputWithContext(context.Background())
}

func (i GrafanaDnsConfigMap) ToGrafanaDnsConfigMapOutputWithContext(ctx context.Context) GrafanaDnsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GrafanaDnsConfigMapOutput)
}

type GrafanaDnsConfigOutput struct{ *pulumi.OutputState }

func (GrafanaDnsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GrafanaDnsConfig)(nil)).Elem()
}

func (o GrafanaDnsConfigOutput) ToGrafanaDnsConfigOutput() GrafanaDnsConfigOutput {
	return o
}

func (o GrafanaDnsConfigOutput) ToGrafanaDnsConfigOutputWithContext(ctx context.Context) GrafanaDnsConfigOutput {
	return o
}

// Grafana instance ID.
func (o GrafanaDnsConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GrafanaDnsConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// DNS nameserver list.
func (o GrafanaDnsConfigOutput) NameServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GrafanaDnsConfig) pulumi.StringArrayOutput { return v.NameServers }).(pulumi.StringArrayOutput)
}

type GrafanaDnsConfigArrayOutput struct{ *pulumi.OutputState }

func (GrafanaDnsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GrafanaDnsConfig)(nil)).Elem()
}

func (o GrafanaDnsConfigArrayOutput) ToGrafanaDnsConfigArrayOutput() GrafanaDnsConfigArrayOutput {
	return o
}

func (o GrafanaDnsConfigArrayOutput) ToGrafanaDnsConfigArrayOutputWithContext(ctx context.Context) GrafanaDnsConfigArrayOutput {
	return o
}

func (o GrafanaDnsConfigArrayOutput) Index(i pulumi.IntInput) GrafanaDnsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GrafanaDnsConfig {
		return vs[0].([]*GrafanaDnsConfig)[vs[1].(int)]
	}).(GrafanaDnsConfigOutput)
}

type GrafanaDnsConfigMapOutput struct{ *pulumi.OutputState }

func (GrafanaDnsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GrafanaDnsConfig)(nil)).Elem()
}

func (o GrafanaDnsConfigMapOutput) ToGrafanaDnsConfigMapOutput() GrafanaDnsConfigMapOutput {
	return o
}

func (o GrafanaDnsConfigMapOutput) ToGrafanaDnsConfigMapOutputWithContext(ctx context.Context) GrafanaDnsConfigMapOutput {
	return o
}

func (o GrafanaDnsConfigMapOutput) MapIndex(k pulumi.StringInput) GrafanaDnsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GrafanaDnsConfig {
		return vs[0].(map[string]*GrafanaDnsConfig)[vs[1].(string)]
	}).(GrafanaDnsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaDnsConfigInput)(nil)).Elem(), &GrafanaDnsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaDnsConfigArrayInput)(nil)).Elem(), GrafanaDnsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GrafanaDnsConfigMapInput)(nil)).Elem(), GrafanaDnsConfigMap{})
	pulumi.RegisterOutputType(GrafanaDnsConfigOutput{})
	pulumi.RegisterOutputType(GrafanaDnsConfigArrayOutput{})
	pulumi.RegisterOutputType(GrafanaDnsConfigMapOutput{})
}
