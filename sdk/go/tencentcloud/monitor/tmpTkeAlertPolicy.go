// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tke tmpAlertPolicy
//
// > **NOTE:** This resource will be deprecated in a future version, please use `Monitor.TmpAlertGroup`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kubernetes"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			defaultInstanceType := "SA1.MEDIUM2"
//			if param := cfg.Get("defaultInstanceType"); param != "" {
//				defaultInstanceType = param
//			}
//			availabilityZoneFirst := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZoneFirst"); param != "" {
//				availabilityZoneFirst = param
//			}
//			availabilityZoneSecond := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZoneSecond"); param != "" {
//				availabilityZoneSecond = param
//			}
//			exampleClusterCidr := "10.31.0.0/16"
//			if param := cfg.Get("exampleClusterCidr"); param != "" {
//				exampleClusterCidr = param
//			}
//			vpcOne, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZoneFirst),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			firstVpcId := vpcOne.InstanceLists[0].VpcId
//			firstSubnetId := vpcOne.InstanceLists[0].SubnetId
//			vpcTwo, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZoneSecond),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_ := vpcTwo.InstanceLists[0].VpcId
//			secondSubnetId := vpcTwo.InstanceLists[0].SubnetId
//			sg, err := Security.NewGroup(ctx, "sg", nil)
//			if err != nil {
//				return err
//			}
//			sgId := sg.ID()
//			_default, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				ImageNameRegex: pulumi.StringRef("Final"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			imageId := _default.ImageId
//			_, err = Security.NewGroupLiteRule(ctx, "sgRule", &Security.GroupLiteRuleArgs{
//				SecurityGroupId: sg.ID(),
//				Ingresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#10.0.0.0/16#ALL#ALL"),
//					pulumi.String("ACCEPT#172.16.0.0/22#ALL#ALL"),
//					pulumi.String("DROP#0.0.0.0/0#ALL#ALL"),
//				},
//				Egresses: pulumi.StringArray{
//					pulumi.String("ACCEPT#172.16.0.0/22#ALL#ALL"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example, err := Kubernetes.NewCluster(ctx, "example", &Kubernetes.ClusterArgs{
//				VpcId:                        pulumi.String(firstVpcId),
//				ClusterCidr:                  pulumi.String(exampleClusterCidr),
//				ClusterMaxPodNum:             pulumi.Int(32),
//				ClusterName:                  pulumi.String("tf_example_cluster"),
//				ClusterDesc:                  pulumi.String("example for tke cluster"),
//				ClusterMaxServiceNum:         pulumi.Int(32),
//				ClusterInternet:              pulumi.Bool(false),
//				ClusterInternetSecurityGroup: pulumi.String(sgId),
//				ClusterVersion:               pulumi.String("1.22.5"),
//				ClusterDeployType:            pulumi.String("MANAGED_CLUSTER"),
//				WorkerConfigs: kubernetes.ClusterWorkerConfigArray{
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZoneFirst),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(firstSubnetId),
//						ImgId:                   pulumi.String(imageId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//					&kubernetes.ClusterWorkerConfigArgs{
//						Count:                   pulumi.Int(1),
//						AvailabilityZone:        pulumi.String(availabilityZoneSecond),
//						InstanceType:            pulumi.String(defaultInstanceType),
//						SystemDiskType:          pulumi.String("CLOUD_SSD"),
//						SystemDiskSize:          pulumi.Int(60),
//						InternetChargeType:      pulumi.String("TRAFFIC_POSTPAID_BY_HOUR"),
//						InternetMaxBandwidthOut: pulumi.Int(100),
//						PublicIpAssigned:        pulumi.Bool(true),
//						SubnetId:                pulumi.String(secondSubnetId),
//						DataDisks: kubernetes.ClusterWorkerConfigDataDiskArray{
//							&kubernetes.ClusterWorkerConfigDataDiskArgs{
//								DiskType: pulumi.String("CLOUD_PREMIUM"),
//								DiskSize: pulumi.Int(50),
//							},
//						},
//						EnhancedSecurityService: pulumi.Bool(false),
//						EnhancedMonitorService:  pulumi.Bool(false),
//						UserData:                pulumi.String("dGVzdA=="),
//						CamRoleName:             pulumi.String("CVM_QcsRole"),
//						Password:                pulumi.String("ZZXXccvv1212"),
//					},
//				},
//				Labels: pulumi.AnyMap{
//					"test1": pulumi.Any("test1"),
//					"test2": pulumi.Any("test2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			zone := "ap-guangzhou"
//			if param := cfg.Get("zone"); param != "" {
//				zone = param
//			}
//			clusterType := "tke"
//			if param := cfg.Get("clusterType"); param != "" {
//				clusterType = param
//			}
//			fooTmpInstance, err := Monitor.NewTmpInstance(ctx, "fooTmpInstance", &Monitor.TmpInstanceArgs{
//				InstanceName:      pulumi.String("tf-tmp-instance"),
//				VpcId:             pulumi.String(firstVpcId),
//				SubnetId:          pulumi.String(firstSubnetId),
//				DataRetentionTime: pulumi.Int(30),
//				Zone:              pulumi.String(availabilityZoneSecond),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooTmpTkeClusterAgent, err := Monitor.NewTmpTkeClusterAgent(ctx, "fooTmpTkeClusterAgent", &Monitor.TmpTkeClusterAgentArgs{
//				InstanceId: fooTmpInstance.ID(),
//				Agents: &monitor.TmpTkeClusterAgentAgentsArgs{
//					Region:         pulumi.String(zone),
//					ClusterType:    pulumi.String(clusterType),
//					ClusterId:      example.ID(),
//					EnableExternal: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Monitor.NewTmpTkeAlertPolicy(ctx, "basic", &Monitor.TmpTkeAlertPolicyArgs{
//				InstanceId: fooTmpInstance.ID(),
//				AlertRule: &monitor.TmpTkeAlertPolicyAlertRuleArgs{
//					Name: pulumi.String("alert_rule-test"),
//					Rules: monitor.TmpTkeAlertPolicyAlertRuleRuleArray{
//						&monitor.TmpTkeAlertPolicyAlertRuleRuleArgs{
//							Name:     pulumi.String("rules-test"),
//							Rule:     pulumi.String("(count(kube_node_status_allocatable_cpu_cores) by (cluster) -1)   / count(kube_node_status_allocatable_cpu_cores) by (cluster)"),
//							Template: pulumi.String(fmt.Sprintf("%v%v%v%v%v", "The CPU requested by the Pod in the cluster {{ ", "$", "labels.cluster }} is overloaded, and the current CPU application ratio is {{ ", "$", "value | humanizePercentage }}")),
//							For:      pulumi.String("5m"),
//							Labels: monitor.TmpTkeAlertPolicyAlertRuleRuleLabelArray{
//								&monitor.TmpTkeAlertPolicyAlertRuleRuleLabelArgs{
//									Name:  pulumi.String("severity"),
//									Value: pulumi.String("warning"),
//								},
//							},
//						},
//					},
//					Notification: &monitor.TmpTkeAlertPolicyAlertRuleNotificationArgs{
//						Type:    pulumi.String("amp"),
//						Enabled: pulumi.Bool(true),
//						AlertManager: &monitor.TmpTkeAlertPolicyAlertRuleNotificationAlertManagerArgs{
//							Url: pulumi.String("xxx"),
//						},
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fooTmpTkeClusterAgent,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type TmpTkeAlertPolicy struct {
	pulumi.CustomResourceState

	// Alarm notification channels.
	AlertRule TmpTkeAlertPolicyAlertRuleOutput `pulumi:"alertRule"`
	// Instance Id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewTmpTkeAlertPolicy registers a new resource with the given unique name, arguments, and options.
func NewTmpTkeAlertPolicy(ctx *pulumi.Context,
	name string, args *TmpTkeAlertPolicyArgs, opts ...pulumi.ResourceOption) (*TmpTkeAlertPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertRule == nil {
		return nil, errors.New("invalid value for required argument 'AlertRule'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TmpTkeAlertPolicy
	err := ctx.RegisterResource("tencentcloud:Monitor/tmpTkeAlertPolicy:TmpTkeAlertPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTmpTkeAlertPolicy gets an existing TmpTkeAlertPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTmpTkeAlertPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TmpTkeAlertPolicyState, opts ...pulumi.ResourceOption) (*TmpTkeAlertPolicy, error) {
	var resource TmpTkeAlertPolicy
	err := ctx.ReadResource("tencentcloud:Monitor/tmpTkeAlertPolicy:TmpTkeAlertPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TmpTkeAlertPolicy resources.
type tmpTkeAlertPolicyState struct {
	// Alarm notification channels.
	AlertRule *TmpTkeAlertPolicyAlertRule `pulumi:"alertRule"`
	// Instance Id.
	InstanceId *string `pulumi:"instanceId"`
}

type TmpTkeAlertPolicyState struct {
	// Alarm notification channels.
	AlertRule TmpTkeAlertPolicyAlertRulePtrInput
	// Instance Id.
	InstanceId pulumi.StringPtrInput
}

func (TmpTkeAlertPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeAlertPolicyState)(nil)).Elem()
}

type tmpTkeAlertPolicyArgs struct {
	// Alarm notification channels.
	AlertRule TmpTkeAlertPolicyAlertRule `pulumi:"alertRule"`
	// Instance Id.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a TmpTkeAlertPolicy resource.
type TmpTkeAlertPolicyArgs struct {
	// Alarm notification channels.
	AlertRule TmpTkeAlertPolicyAlertRuleInput
	// Instance Id.
	InstanceId pulumi.StringInput
}

func (TmpTkeAlertPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tmpTkeAlertPolicyArgs)(nil)).Elem()
}

type TmpTkeAlertPolicyInput interface {
	pulumi.Input

	ToTmpTkeAlertPolicyOutput() TmpTkeAlertPolicyOutput
	ToTmpTkeAlertPolicyOutputWithContext(ctx context.Context) TmpTkeAlertPolicyOutput
}

func (*TmpTkeAlertPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeAlertPolicy)(nil)).Elem()
}

func (i *TmpTkeAlertPolicy) ToTmpTkeAlertPolicyOutput() TmpTkeAlertPolicyOutput {
	return i.ToTmpTkeAlertPolicyOutputWithContext(context.Background())
}

func (i *TmpTkeAlertPolicy) ToTmpTkeAlertPolicyOutputWithContext(ctx context.Context) TmpTkeAlertPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeAlertPolicyOutput)
}

// TmpTkeAlertPolicyArrayInput is an input type that accepts TmpTkeAlertPolicyArray and TmpTkeAlertPolicyArrayOutput values.
// You can construct a concrete instance of `TmpTkeAlertPolicyArrayInput` via:
//
//	TmpTkeAlertPolicyArray{ TmpTkeAlertPolicyArgs{...} }
type TmpTkeAlertPolicyArrayInput interface {
	pulumi.Input

	ToTmpTkeAlertPolicyArrayOutput() TmpTkeAlertPolicyArrayOutput
	ToTmpTkeAlertPolicyArrayOutputWithContext(context.Context) TmpTkeAlertPolicyArrayOutput
}

type TmpTkeAlertPolicyArray []TmpTkeAlertPolicyInput

func (TmpTkeAlertPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeAlertPolicy)(nil)).Elem()
}

func (i TmpTkeAlertPolicyArray) ToTmpTkeAlertPolicyArrayOutput() TmpTkeAlertPolicyArrayOutput {
	return i.ToTmpTkeAlertPolicyArrayOutputWithContext(context.Background())
}

func (i TmpTkeAlertPolicyArray) ToTmpTkeAlertPolicyArrayOutputWithContext(ctx context.Context) TmpTkeAlertPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeAlertPolicyArrayOutput)
}

// TmpTkeAlertPolicyMapInput is an input type that accepts TmpTkeAlertPolicyMap and TmpTkeAlertPolicyMapOutput values.
// You can construct a concrete instance of `TmpTkeAlertPolicyMapInput` via:
//
//	TmpTkeAlertPolicyMap{ "key": TmpTkeAlertPolicyArgs{...} }
type TmpTkeAlertPolicyMapInput interface {
	pulumi.Input

	ToTmpTkeAlertPolicyMapOutput() TmpTkeAlertPolicyMapOutput
	ToTmpTkeAlertPolicyMapOutputWithContext(context.Context) TmpTkeAlertPolicyMapOutput
}

type TmpTkeAlertPolicyMap map[string]TmpTkeAlertPolicyInput

func (TmpTkeAlertPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeAlertPolicy)(nil)).Elem()
}

func (i TmpTkeAlertPolicyMap) ToTmpTkeAlertPolicyMapOutput() TmpTkeAlertPolicyMapOutput {
	return i.ToTmpTkeAlertPolicyMapOutputWithContext(context.Background())
}

func (i TmpTkeAlertPolicyMap) ToTmpTkeAlertPolicyMapOutputWithContext(ctx context.Context) TmpTkeAlertPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TmpTkeAlertPolicyMapOutput)
}

type TmpTkeAlertPolicyOutput struct{ *pulumi.OutputState }

func (TmpTkeAlertPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TmpTkeAlertPolicy)(nil)).Elem()
}

func (o TmpTkeAlertPolicyOutput) ToTmpTkeAlertPolicyOutput() TmpTkeAlertPolicyOutput {
	return o
}

func (o TmpTkeAlertPolicyOutput) ToTmpTkeAlertPolicyOutputWithContext(ctx context.Context) TmpTkeAlertPolicyOutput {
	return o
}

// Alarm notification channels.
func (o TmpTkeAlertPolicyOutput) AlertRule() TmpTkeAlertPolicyAlertRuleOutput {
	return o.ApplyT(func(v *TmpTkeAlertPolicy) TmpTkeAlertPolicyAlertRuleOutput { return v.AlertRule }).(TmpTkeAlertPolicyAlertRuleOutput)
}

// Instance Id.
func (o TmpTkeAlertPolicyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TmpTkeAlertPolicy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type TmpTkeAlertPolicyArrayOutput struct{ *pulumi.OutputState }

func (TmpTkeAlertPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TmpTkeAlertPolicy)(nil)).Elem()
}

func (o TmpTkeAlertPolicyArrayOutput) ToTmpTkeAlertPolicyArrayOutput() TmpTkeAlertPolicyArrayOutput {
	return o
}

func (o TmpTkeAlertPolicyArrayOutput) ToTmpTkeAlertPolicyArrayOutputWithContext(ctx context.Context) TmpTkeAlertPolicyArrayOutput {
	return o
}

func (o TmpTkeAlertPolicyArrayOutput) Index(i pulumi.IntInput) TmpTkeAlertPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TmpTkeAlertPolicy {
		return vs[0].([]*TmpTkeAlertPolicy)[vs[1].(int)]
	}).(TmpTkeAlertPolicyOutput)
}

type TmpTkeAlertPolicyMapOutput struct{ *pulumi.OutputState }

func (TmpTkeAlertPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TmpTkeAlertPolicy)(nil)).Elem()
}

func (o TmpTkeAlertPolicyMapOutput) ToTmpTkeAlertPolicyMapOutput() TmpTkeAlertPolicyMapOutput {
	return o
}

func (o TmpTkeAlertPolicyMapOutput) ToTmpTkeAlertPolicyMapOutputWithContext(ctx context.Context) TmpTkeAlertPolicyMapOutput {
	return o
}

func (o TmpTkeAlertPolicyMapOutput) MapIndex(k pulumi.StringInput) TmpTkeAlertPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TmpTkeAlertPolicy {
		return vs[0].(map[string]*TmpTkeAlertPolicy)[vs[1].(string)]
	}).(TmpTkeAlertPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeAlertPolicyInput)(nil)).Elem(), &TmpTkeAlertPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeAlertPolicyArrayInput)(nil)).Elem(), TmpTkeAlertPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TmpTkeAlertPolicyMapInput)(nil)).Elem(), TmpTkeAlertPolicyMap{})
	pulumi.RegisterOutputType(TmpTkeAlertPolicyOutput{})
	pulumi.RegisterOutputType(TmpTkeAlertPolicyArrayOutput{})
	pulumi.RegisterOutputType(TmpTkeAlertPolicyMapOutput{})
}
