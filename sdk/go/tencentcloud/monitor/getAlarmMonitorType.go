// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package monitor

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of monitor alarmMonitorType
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Monitor"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Monitor.GetAlarmMonitorType(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAlarmMonitorType(ctx *pulumi.Context, args *GetAlarmMonitorTypeArgs, opts ...pulumi.InvokeOption) (*GetAlarmMonitorTypeResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetAlarmMonitorTypeResult
	err := ctx.Invoke("tencentcloud:Monitor/getAlarmMonitorType:getAlarmMonitorType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlarmMonitorType.
type GetAlarmMonitorTypeArgs struct {
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getAlarmMonitorType.
type GetAlarmMonitorTypeResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Monitoring type details.
	MonitorTypeInfos []GetAlarmMonitorTypeMonitorTypeInfo `pulumi:"monitorTypeInfos"`
	// Monitoring type, cloud product monitoring is MT_ QCE.
	MonitorTypes     []string `pulumi:"monitorTypes"`
	ResultOutputFile *string  `pulumi:"resultOutputFile"`
}

func GetAlarmMonitorTypeOutput(ctx *pulumi.Context, args GetAlarmMonitorTypeOutputArgs, opts ...pulumi.InvokeOption) GetAlarmMonitorTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAlarmMonitorTypeResult, error) {
			args := v.(GetAlarmMonitorTypeArgs)
			r, err := GetAlarmMonitorType(ctx, &args, opts...)
			var s GetAlarmMonitorTypeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAlarmMonitorTypeResultOutput)
}

// A collection of arguments for invoking getAlarmMonitorType.
type GetAlarmMonitorTypeOutputArgs struct {
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetAlarmMonitorTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmMonitorTypeArgs)(nil)).Elem()
}

// A collection of values returned by getAlarmMonitorType.
type GetAlarmMonitorTypeResultOutput struct{ *pulumi.OutputState }

func (GetAlarmMonitorTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmMonitorTypeResult)(nil)).Elem()
}

func (o GetAlarmMonitorTypeResultOutput) ToGetAlarmMonitorTypeResultOutput() GetAlarmMonitorTypeResultOutput {
	return o
}

func (o GetAlarmMonitorTypeResultOutput) ToGetAlarmMonitorTypeResultOutputWithContext(ctx context.Context) GetAlarmMonitorTypeResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetAlarmMonitorTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmMonitorTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

// Monitoring type details.
func (o GetAlarmMonitorTypeResultOutput) MonitorTypeInfos() GetAlarmMonitorTypeMonitorTypeInfoArrayOutput {
	return o.ApplyT(func(v GetAlarmMonitorTypeResult) []GetAlarmMonitorTypeMonitorTypeInfo { return v.MonitorTypeInfos }).(GetAlarmMonitorTypeMonitorTypeInfoArrayOutput)
}

// Monitoring type, cloud product monitoring is MT_ QCE.
func (o GetAlarmMonitorTypeResultOutput) MonitorTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAlarmMonitorTypeResult) []string { return v.MonitorTypes }).(pulumi.StringArrayOutput)
}

func (o GetAlarmMonitorTypeResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmMonitorTypeResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAlarmMonitorTypeResultOutput{})
}
