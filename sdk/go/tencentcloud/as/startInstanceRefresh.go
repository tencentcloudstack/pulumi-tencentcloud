// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create as instance refresh
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/As"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := As.NewStartInstanceRefresh(ctx, "example", &As.StartInstanceRefreshArgs{
//				AutoScalingGroupId: pulumi.String("asg-8n7fdm28"),
//				RefreshMode:        pulumi.String("ROLLING_UPDATE_RESET"),
//				RefreshSettings: &as.StartInstanceRefreshRefreshSettingsArgs{
//					CheckInstanceTargetHealth: pulumi.Bool(false),
//					RollingUpdateSettings: &as.StartInstanceRefreshRefreshSettingsRollingUpdateSettingsArgs{
//						BatchNumber: pulumi.Int(1),
//						BatchPause:  pulumi.String("AUTOMATIC"),
//						MaxSurge:    pulumi.Int(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type StartInstanceRefresh struct {
	pulumi.CustomResourceState

	// Scaling group ID.
	AutoScalingGroupId pulumi.StringOutput `pulumi:"autoScalingGroupId"`
	// Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
	RefreshMode pulumi.StringPtrOutput `pulumi:"refreshMode"`
	// Refresh settings.
	RefreshSettings StartInstanceRefreshRefreshSettingsOutput `pulumi:"refreshSettings"`
}

// NewStartInstanceRefresh registers a new resource with the given unique name, arguments, and options.
func NewStartInstanceRefresh(ctx *pulumi.Context,
	name string, args *StartInstanceRefreshArgs, opts ...pulumi.ResourceOption) (*StartInstanceRefresh, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'AutoScalingGroupId'")
	}
	if args.RefreshSettings == nil {
		return nil, errors.New("invalid value for required argument 'RefreshSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StartInstanceRefresh
	err := ctx.RegisterResource("tencentcloud:As/startInstanceRefresh:StartInstanceRefresh", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStartInstanceRefresh gets an existing StartInstanceRefresh resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStartInstanceRefresh(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StartInstanceRefreshState, opts ...pulumi.ResourceOption) (*StartInstanceRefresh, error) {
	var resource StartInstanceRefresh
	err := ctx.ReadResource("tencentcloud:As/startInstanceRefresh:StartInstanceRefresh", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StartInstanceRefresh resources.
type startInstanceRefreshState struct {
	// Scaling group ID.
	AutoScalingGroupId *string `pulumi:"autoScalingGroupId"`
	// Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
	RefreshMode *string `pulumi:"refreshMode"`
	// Refresh settings.
	RefreshSettings *StartInstanceRefreshRefreshSettings `pulumi:"refreshSettings"`
}

type StartInstanceRefreshState struct {
	// Scaling group ID.
	AutoScalingGroupId pulumi.StringPtrInput
	// Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
	RefreshMode pulumi.StringPtrInput
	// Refresh settings.
	RefreshSettings StartInstanceRefreshRefreshSettingsPtrInput
}

func (StartInstanceRefreshState) ElementType() reflect.Type {
	return reflect.TypeOf((*startInstanceRefreshState)(nil)).Elem()
}

type startInstanceRefreshArgs struct {
	// Scaling group ID.
	AutoScalingGroupId string `pulumi:"autoScalingGroupId"`
	// Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
	RefreshMode *string `pulumi:"refreshMode"`
	// Refresh settings.
	RefreshSettings StartInstanceRefreshRefreshSettings `pulumi:"refreshSettings"`
}

// The set of arguments for constructing a StartInstanceRefresh resource.
type StartInstanceRefreshArgs struct {
	// Scaling group ID.
	AutoScalingGroupId pulumi.StringInput
	// Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
	RefreshMode pulumi.StringPtrInput
	// Refresh settings.
	RefreshSettings StartInstanceRefreshRefreshSettingsInput
}

func (StartInstanceRefreshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*startInstanceRefreshArgs)(nil)).Elem()
}

type StartInstanceRefreshInput interface {
	pulumi.Input

	ToStartInstanceRefreshOutput() StartInstanceRefreshOutput
	ToStartInstanceRefreshOutputWithContext(ctx context.Context) StartInstanceRefreshOutput
}

func (*StartInstanceRefresh) ElementType() reflect.Type {
	return reflect.TypeOf((**StartInstanceRefresh)(nil)).Elem()
}

func (i *StartInstanceRefresh) ToStartInstanceRefreshOutput() StartInstanceRefreshOutput {
	return i.ToStartInstanceRefreshOutputWithContext(context.Background())
}

func (i *StartInstanceRefresh) ToStartInstanceRefreshOutputWithContext(ctx context.Context) StartInstanceRefreshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartInstanceRefreshOutput)
}

// StartInstanceRefreshArrayInput is an input type that accepts StartInstanceRefreshArray and StartInstanceRefreshArrayOutput values.
// You can construct a concrete instance of `StartInstanceRefreshArrayInput` via:
//
//	StartInstanceRefreshArray{ StartInstanceRefreshArgs{...} }
type StartInstanceRefreshArrayInput interface {
	pulumi.Input

	ToStartInstanceRefreshArrayOutput() StartInstanceRefreshArrayOutput
	ToStartInstanceRefreshArrayOutputWithContext(context.Context) StartInstanceRefreshArrayOutput
}

type StartInstanceRefreshArray []StartInstanceRefreshInput

func (StartInstanceRefreshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartInstanceRefresh)(nil)).Elem()
}

func (i StartInstanceRefreshArray) ToStartInstanceRefreshArrayOutput() StartInstanceRefreshArrayOutput {
	return i.ToStartInstanceRefreshArrayOutputWithContext(context.Background())
}

func (i StartInstanceRefreshArray) ToStartInstanceRefreshArrayOutputWithContext(ctx context.Context) StartInstanceRefreshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartInstanceRefreshArrayOutput)
}

// StartInstanceRefreshMapInput is an input type that accepts StartInstanceRefreshMap and StartInstanceRefreshMapOutput values.
// You can construct a concrete instance of `StartInstanceRefreshMapInput` via:
//
//	StartInstanceRefreshMap{ "key": StartInstanceRefreshArgs{...} }
type StartInstanceRefreshMapInput interface {
	pulumi.Input

	ToStartInstanceRefreshMapOutput() StartInstanceRefreshMapOutput
	ToStartInstanceRefreshMapOutputWithContext(context.Context) StartInstanceRefreshMapOutput
}

type StartInstanceRefreshMap map[string]StartInstanceRefreshInput

func (StartInstanceRefreshMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartInstanceRefresh)(nil)).Elem()
}

func (i StartInstanceRefreshMap) ToStartInstanceRefreshMapOutput() StartInstanceRefreshMapOutput {
	return i.ToStartInstanceRefreshMapOutputWithContext(context.Background())
}

func (i StartInstanceRefreshMap) ToStartInstanceRefreshMapOutputWithContext(ctx context.Context) StartInstanceRefreshMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartInstanceRefreshMapOutput)
}

type StartInstanceRefreshOutput struct{ *pulumi.OutputState }

func (StartInstanceRefreshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartInstanceRefresh)(nil)).Elem()
}

func (o StartInstanceRefreshOutput) ToStartInstanceRefreshOutput() StartInstanceRefreshOutput {
	return o
}

func (o StartInstanceRefreshOutput) ToStartInstanceRefreshOutputWithContext(ctx context.Context) StartInstanceRefreshOutput {
	return o
}

// Scaling group ID.
func (o StartInstanceRefreshOutput) AutoScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *StartInstanceRefresh) pulumi.StringOutput { return v.AutoScalingGroupId }).(pulumi.StringOutput)
}

// Refresh mode, currently, only rolling updates are supported, with the default value being ROLLING_UPDATE_RESET.
func (o StartInstanceRefreshOutput) RefreshMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StartInstanceRefresh) pulumi.StringPtrOutput { return v.RefreshMode }).(pulumi.StringPtrOutput)
}

// Refresh settings.
func (o StartInstanceRefreshOutput) RefreshSettings() StartInstanceRefreshRefreshSettingsOutput {
	return o.ApplyT(func(v *StartInstanceRefresh) StartInstanceRefreshRefreshSettingsOutput { return v.RefreshSettings }).(StartInstanceRefreshRefreshSettingsOutput)
}

type StartInstanceRefreshArrayOutput struct{ *pulumi.OutputState }

func (StartInstanceRefreshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartInstanceRefresh)(nil)).Elem()
}

func (o StartInstanceRefreshArrayOutput) ToStartInstanceRefreshArrayOutput() StartInstanceRefreshArrayOutput {
	return o
}

func (o StartInstanceRefreshArrayOutput) ToStartInstanceRefreshArrayOutputWithContext(ctx context.Context) StartInstanceRefreshArrayOutput {
	return o
}

func (o StartInstanceRefreshArrayOutput) Index(i pulumi.IntInput) StartInstanceRefreshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StartInstanceRefresh {
		return vs[0].([]*StartInstanceRefresh)[vs[1].(int)]
	}).(StartInstanceRefreshOutput)
}

type StartInstanceRefreshMapOutput struct{ *pulumi.OutputState }

func (StartInstanceRefreshMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartInstanceRefresh)(nil)).Elem()
}

func (o StartInstanceRefreshMapOutput) ToStartInstanceRefreshMapOutput() StartInstanceRefreshMapOutput {
	return o
}

func (o StartInstanceRefreshMapOutput) ToStartInstanceRefreshMapOutputWithContext(ctx context.Context) StartInstanceRefreshMapOutput {
	return o
}

func (o StartInstanceRefreshMapOutput) MapIndex(k pulumi.StringInput) StartInstanceRefreshOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StartInstanceRefresh {
		return vs[0].(map[string]*StartInstanceRefresh)[vs[1].(string)]
	}).(StartInstanceRefreshOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StartInstanceRefreshInput)(nil)).Elem(), &StartInstanceRefresh{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartInstanceRefreshArrayInput)(nil)).Elem(), StartInstanceRefreshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartInstanceRefreshMapInput)(nil)).Elem(), StartInstanceRefreshMap{})
	pulumi.RegisterOutputType(StartInstanceRefreshOutput{})
	pulumi.RegisterOutputType(StartInstanceRefreshArrayOutput{})
	pulumi.RegisterOutputType(StartInstanceRefreshMapOutput{})
}
