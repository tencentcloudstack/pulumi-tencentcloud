// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a as stopInstances
type StopInstances struct {
	pulumi.CustomResourceState

	// Launch configuration ID.
	AutoScalingGroupId pulumi.StringOutput `pulumi:"autoScalingGroupId"`
	// List of cvm instances to stop.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// Billing method of a pay-as-you-go instance after shutdown. Available values: `KEEP_CHARGING`,`STOP_CHARGING`. Default `KEEP_CHARGING`.
	StoppedMode pulumi.StringPtrOutput `pulumi:"stoppedMode"`
}

// NewStopInstances registers a new resource with the given unique name, arguments, and options.
func NewStopInstances(ctx *pulumi.Context,
	name string, args *StopInstancesArgs, opts ...pulumi.ResourceOption) (*StopInstances, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'AutoScalingGroupId'")
	}
	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StopInstances
	err := ctx.RegisterResource("tencentcloud:As/stopInstances:StopInstances", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStopInstances gets an existing StopInstances resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStopInstances(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StopInstancesState, opts ...pulumi.ResourceOption) (*StopInstances, error) {
	var resource StopInstances
	err := ctx.ReadResource("tencentcloud:As/stopInstances:StopInstances", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StopInstances resources.
type stopInstancesState struct {
	// Launch configuration ID.
	AutoScalingGroupId *string `pulumi:"autoScalingGroupId"`
	// List of cvm instances to stop.
	InstanceIds []string `pulumi:"instanceIds"`
	// Billing method of a pay-as-you-go instance after shutdown. Available values: `KEEP_CHARGING`,`STOP_CHARGING`. Default `KEEP_CHARGING`.
	StoppedMode *string `pulumi:"stoppedMode"`
}

type StopInstancesState struct {
	// Launch configuration ID.
	AutoScalingGroupId pulumi.StringPtrInput
	// List of cvm instances to stop.
	InstanceIds pulumi.StringArrayInput
	// Billing method of a pay-as-you-go instance after shutdown. Available values: `KEEP_CHARGING`,`STOP_CHARGING`. Default `KEEP_CHARGING`.
	StoppedMode pulumi.StringPtrInput
}

func (StopInstancesState) ElementType() reflect.Type {
	return reflect.TypeOf((*stopInstancesState)(nil)).Elem()
}

type stopInstancesArgs struct {
	// Launch configuration ID.
	AutoScalingGroupId string `pulumi:"autoScalingGroupId"`
	// List of cvm instances to stop.
	InstanceIds []string `pulumi:"instanceIds"`
	// Billing method of a pay-as-you-go instance after shutdown. Available values: `KEEP_CHARGING`,`STOP_CHARGING`. Default `KEEP_CHARGING`.
	StoppedMode *string `pulumi:"stoppedMode"`
}

// The set of arguments for constructing a StopInstances resource.
type StopInstancesArgs struct {
	// Launch configuration ID.
	AutoScalingGroupId pulumi.StringInput
	// List of cvm instances to stop.
	InstanceIds pulumi.StringArrayInput
	// Billing method of a pay-as-you-go instance after shutdown. Available values: `KEEP_CHARGING`,`STOP_CHARGING`. Default `KEEP_CHARGING`.
	StoppedMode pulumi.StringPtrInput
}

func (StopInstancesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stopInstancesArgs)(nil)).Elem()
}

type StopInstancesInput interface {
	pulumi.Input

	ToStopInstancesOutput() StopInstancesOutput
	ToStopInstancesOutputWithContext(ctx context.Context) StopInstancesOutput
}

func (*StopInstances) ElementType() reflect.Type {
	return reflect.TypeOf((**StopInstances)(nil)).Elem()
}

func (i *StopInstances) ToStopInstancesOutput() StopInstancesOutput {
	return i.ToStopInstancesOutputWithContext(context.Background())
}

func (i *StopInstances) ToStopInstancesOutputWithContext(ctx context.Context) StopInstancesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StopInstancesOutput)
}

// StopInstancesArrayInput is an input type that accepts StopInstancesArray and StopInstancesArrayOutput values.
// You can construct a concrete instance of `StopInstancesArrayInput` via:
//
//	StopInstancesArray{ StopInstancesArgs{...} }
type StopInstancesArrayInput interface {
	pulumi.Input

	ToStopInstancesArrayOutput() StopInstancesArrayOutput
	ToStopInstancesArrayOutputWithContext(context.Context) StopInstancesArrayOutput
}

type StopInstancesArray []StopInstancesInput

func (StopInstancesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StopInstances)(nil)).Elem()
}

func (i StopInstancesArray) ToStopInstancesArrayOutput() StopInstancesArrayOutput {
	return i.ToStopInstancesArrayOutputWithContext(context.Background())
}

func (i StopInstancesArray) ToStopInstancesArrayOutputWithContext(ctx context.Context) StopInstancesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StopInstancesArrayOutput)
}

// StopInstancesMapInput is an input type that accepts StopInstancesMap and StopInstancesMapOutput values.
// You can construct a concrete instance of `StopInstancesMapInput` via:
//
//	StopInstancesMap{ "key": StopInstancesArgs{...} }
type StopInstancesMapInput interface {
	pulumi.Input

	ToStopInstancesMapOutput() StopInstancesMapOutput
	ToStopInstancesMapOutputWithContext(context.Context) StopInstancesMapOutput
}

type StopInstancesMap map[string]StopInstancesInput

func (StopInstancesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StopInstances)(nil)).Elem()
}

func (i StopInstancesMap) ToStopInstancesMapOutput() StopInstancesMapOutput {
	return i.ToStopInstancesMapOutputWithContext(context.Background())
}

func (i StopInstancesMap) ToStopInstancesMapOutputWithContext(ctx context.Context) StopInstancesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StopInstancesMapOutput)
}

type StopInstancesOutput struct{ *pulumi.OutputState }

func (StopInstancesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StopInstances)(nil)).Elem()
}

func (o StopInstancesOutput) ToStopInstancesOutput() StopInstancesOutput {
	return o
}

func (o StopInstancesOutput) ToStopInstancesOutputWithContext(ctx context.Context) StopInstancesOutput {
	return o
}

// Launch configuration ID.
func (o StopInstancesOutput) AutoScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *StopInstances) pulumi.StringOutput { return v.AutoScalingGroupId }).(pulumi.StringOutput)
}

// List of cvm instances to stop.
func (o StopInstancesOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StopInstances) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// Billing method of a pay-as-you-go instance after shutdown. Available values: `KEEP_CHARGING`,`STOP_CHARGING`. Default `KEEP_CHARGING`.
func (o StopInstancesOutput) StoppedMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StopInstances) pulumi.StringPtrOutput { return v.StoppedMode }).(pulumi.StringPtrOutput)
}

type StopInstancesArrayOutput struct{ *pulumi.OutputState }

func (StopInstancesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StopInstances)(nil)).Elem()
}

func (o StopInstancesArrayOutput) ToStopInstancesArrayOutput() StopInstancesArrayOutput {
	return o
}

func (o StopInstancesArrayOutput) ToStopInstancesArrayOutputWithContext(ctx context.Context) StopInstancesArrayOutput {
	return o
}

func (o StopInstancesArrayOutput) Index(i pulumi.IntInput) StopInstancesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StopInstances {
		return vs[0].([]*StopInstances)[vs[1].(int)]
	}).(StopInstancesOutput)
}

type StopInstancesMapOutput struct{ *pulumi.OutputState }

func (StopInstancesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StopInstances)(nil)).Elem()
}

func (o StopInstancesMapOutput) ToStopInstancesMapOutput() StopInstancesMapOutput {
	return o
}

func (o StopInstancesMapOutput) ToStopInstancesMapOutputWithContext(ctx context.Context) StopInstancesMapOutput {
	return o
}

func (o StopInstancesMapOutput) MapIndex(k pulumi.StringInput) StopInstancesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StopInstances {
		return vs[0].(map[string]*StopInstances)[vs[1].(string)]
	}).(StopInstancesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StopInstancesInput)(nil)).Elem(), &StopInstances{})
	pulumi.RegisterInputType(reflect.TypeOf((*StopInstancesArrayInput)(nil)).Elem(), StopInstancesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StopInstancesMapInput)(nil)).Elem(), StopInstancesMap{})
	pulumi.RegisterOutputType(StopInstancesOutput{})
	pulumi.RegisterOutputType(StopInstancesArrayOutput{})
	pulumi.RegisterOutputType(StopInstancesMapOutput{})
}
