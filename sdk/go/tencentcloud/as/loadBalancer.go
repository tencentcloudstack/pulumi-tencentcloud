// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type LoadBalancer struct {
	pulumi.CustomResourceState

	// ID of a scaling group.
	AutoScalingGroupId pulumi.StringOutput `pulumi:"autoScalingGroupId"`
	// List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
	// 100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	ForwardLoadBalancers LoadBalancerForwardLoadBalancerArrayOutput `pulumi:"forwardLoadBalancers"`
	// List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
	// 20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	LoadBalancerIds pulumi.StringArrayOutput `pulumi:"loadBalancerIds"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'AutoScalingGroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("tencentcloud:As/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("tencentcloud:As/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// ID of a scaling group.
	AutoScalingGroupId *string `pulumi:"autoScalingGroupId"`
	// List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
	// 100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	ForwardLoadBalancers []LoadBalancerForwardLoadBalancer `pulumi:"forwardLoadBalancers"`
	// List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
	// 20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	LoadBalancerIds []string `pulumi:"loadBalancerIds"`
}

type LoadBalancerState struct {
	// ID of a scaling group.
	AutoScalingGroupId pulumi.StringPtrInput
	// List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
	// 100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	ForwardLoadBalancers LoadBalancerForwardLoadBalancerArrayInput
	// List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
	// 20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	LoadBalancerIds pulumi.StringArrayInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// ID of a scaling group.
	AutoScalingGroupId string `pulumi:"autoScalingGroupId"`
	// List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
	// 100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	ForwardLoadBalancers []LoadBalancerForwardLoadBalancer `pulumi:"forwardLoadBalancers"`
	// List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
	// 20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	LoadBalancerIds []string `pulumi:"loadBalancerIds"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// ID of a scaling group.
	AutoScalingGroupId pulumi.StringInput
	// List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
	// 100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	ForwardLoadBalancers LoadBalancerForwardLoadBalancerArrayInput
	// List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
	// 20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
	LoadBalancerIds pulumi.StringArrayInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// ID of a scaling group.
func (o LoadBalancerOutput) AutoScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.AutoScalingGroupId }).(pulumi.StringOutput)
}

// List of application load balancers. The maximum number of application-type load balancers bound to each scaling group is
// 100. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
func (o LoadBalancerOutput) ForwardLoadBalancers() LoadBalancerForwardLoadBalancerArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerForwardLoadBalancerArrayOutput { return v.ForwardLoadBalancers }).(LoadBalancerForwardLoadBalancerArrayOutput)
}

// List of traditional load balancer IDs. The maximum number of traditional load balancers bound to each scaling group is
// 20. Both LoadBalancerIds and ForwardLoadBalancers can specify at most one at the same time.
func (o LoadBalancerOutput) LoadBalancerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringArrayOutput { return v.LoadBalancerIds }).(pulumi.StringArrayOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
