// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package as

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "tencentcloud:As/attachment:Attachment":
		r = &Attachment{}
	case "tencentcloud:As/completeLifecycle:CompleteLifecycle":
		r = &CompleteLifecycle{}
	case "tencentcloud:As/executeScalingPolicy:ExecuteScalingPolicy":
		r = &ExecuteScalingPolicy{}
	case "tencentcloud:As/lifecycleHook:LifecycleHook":
		r = &LifecycleHook{}
	case "tencentcloud:As/loadBalancer:LoadBalancer":
		r = &LoadBalancer{}
	case "tencentcloud:As/notification:Notification":
		r = &Notification{}
	case "tencentcloud:As/protectInstances:ProtectInstances":
		r = &ProtectInstances{}
	case "tencentcloud:As/removeInstances:RemoveInstances":
		r = &RemoveInstances{}
	case "tencentcloud:As/scaleInInstances:ScaleInInstances":
		r = &ScaleInInstances{}
	case "tencentcloud:As/scaleOutInstances:ScaleOutInstances":
		r = &ScaleOutInstances{}
	case "tencentcloud:As/scalingConfig:ScalingConfig":
		r = &ScalingConfig{}
	case "tencentcloud:As/scalingGroup:ScalingGroup":
		r = &ScalingGroup{}
	case "tencentcloud:As/scalingGroupStatus:ScalingGroupStatus":
		r = &ScalingGroupStatus{}
	case "tencentcloud:As/scalingPolicy:ScalingPolicy":
		r = &ScalingPolicy{}
	case "tencentcloud:As/schedule:Schedule":
		r = &Schedule{}
	case "tencentcloud:As/startInstanceRefresh:StartInstanceRefresh":
		r = &StartInstanceRefresh{}
	case "tencentcloud:As/startInstances:StartInstances":
		r = &StartInstances{}
	case "tencentcloud:As/stopInstances:StopInstances":
		r = &StopInstances{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/attachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/completeLifecycle",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/executeScalingPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/lifecycleHook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/notification",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/protectInstances",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/removeInstances",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/scaleInInstances",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/scaleOutInstances",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/scalingConfig",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/scalingGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/scalingGroupStatus",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/scalingPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/schedule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/startInstanceRefresh",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/startInstances",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"tencentcloud",
		"As/stopInstances",
		&module{version},
	)
}
