// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tse cngwRouteRateLimit
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			cngwGateway, err := Tse.NewCngwGateway(ctx, "cngwGateway", &Tse.CngwGatewayArgs{
//				Description:             pulumi.String("terraform test1"),
//				EnableCls:               pulumi.Bool(true),
//				EngineRegion:            pulumi.String("ap-guangzhou"),
//				FeatureVersion:          pulumi.String("STANDARD"),
//				GatewayVersion:          pulumi.String("2.5.1"),
//				IngressClassName:        pulumi.String("tse-nginx-ingress"),
//				InternetMaxBandwidthOut: pulumi.Int(0),
//				TradeType:               pulumi.Int(0),
//				Type:                    pulumi.String("kong"),
//				NodeConfig: &tse.CngwGatewayNodeConfigArgs{
//					Number:        pulumi.Int(2),
//					Specification: pulumi.String("1c2g"),
//				},
//				VpcConfig: &tse.CngwGatewayVpcConfigArgs{
//					SubnetId: subnet.ID(),
//					VpcId:    vpc.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cngwService, err := Tse.NewCngwService(ctx, "cngwService", &Tse.CngwServiceArgs{
//				GatewayId:    cngwGateway.ID(),
//				Path:         pulumi.String("/test"),
//				Protocol:     pulumi.String("http"),
//				Retries:      pulumi.Int(5),
//				Timeout:      pulumi.Int(60000),
//				UpstreamType: pulumi.String("HostIP"),
//				UpstreamInfo: &tse.CngwServiceUpstreamInfoArgs{
//					Algorithm:          pulumi.String("round-robin"),
//					AutoScalingCvmPort: pulumi.Int(0),
//					Host:               pulumi.String("arunma.cn"),
//					Port:               pulumi.Int(8012),
//					SlowStart:          pulumi.Int(0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cngwRoute, err := Tse.NewCngwRoute(ctx, "cngwRoute", &Tse.CngwRouteArgs{
//				DestinationPorts: pulumi.IntArray{},
//				ForceHttps:       pulumi.Bool(false),
//				GatewayId:        cngwGateway.ID(),
//				Hosts: pulumi.StringArray{
//					pulumi.String("192.168.0.1:9090"),
//				},
//				HttpsRedirectStatusCode: pulumi.Int(426),
//				Paths: pulumi.StringArray{
//					pulumi.String("/user"),
//				},
//				Headers: tse.CngwRouteHeaderArray{
//					&tse.CngwRouteHeaderArgs{
//						Key:   pulumi.String("req"),
//						Value: pulumi.String("terraform"),
//					},
//				},
//				PreserveHost: pulumi.Bool(false),
//				Protocols: pulumi.StringArray{
//					pulumi.String("http"),
//					pulumi.String("https"),
//				},
//				RouteName: pulumi.String("terraform-route"),
//				ServiceId: cngwService.ServiceId,
//				StripPath: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tse.NewCngwRouteRateLimit(ctx, "cngwRouteRateLimit", &Tse.CngwRouteRateLimitArgs{
//				GatewayId: cngwGateway.ID(),
//				RouteId:   cngwRoute.RouteId,
//				LimitDetail: &tse.CngwRouteRateLimitLimitDetailArgs{
//					Enabled:           pulumi.Bool(true),
//					Header:            pulumi.String("req"),
//					HideClientHeaders: pulumi.Bool(true),
//					IsDelay:           pulumi.Bool(true),
//					LimitBy:           pulumi.String("header"),
//					LineUpTime:        pulumi.Int(10),
//					Policy:            pulumi.String("redis"),
//					ResponseType:      pulumi.String("default"),
//					QpsThresholds: tse.CngwRouteRateLimitLimitDetailQpsThresholdArray{
//						&tse.CngwRouteRateLimitLimitDetailQpsThresholdArgs{
//							Max:  pulumi.Int(10),
//							Unit: pulumi.String("minute"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tse cngw_route_rate_limit can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tse/cngwRouteRateLimit:CngwRouteRateLimit cngw_route_rate_limit gatewayId#routeId
//
// ```
type CngwRouteRateLimit struct {
	pulumi.CustomResourceState

	// gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetailOutput `pulumi:"limitDetail"`
	// Route id, or route name.
	RouteId pulumi.StringOutput `pulumi:"routeId"`
}

// NewCngwRouteRateLimit registers a new resource with the given unique name, arguments, and options.
func NewCngwRouteRateLimit(ctx *pulumi.Context,
	name string, args *CngwRouteRateLimitArgs, opts ...pulumi.ResourceOption) (*CngwRouteRateLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.LimitDetail == nil {
		return nil, errors.New("invalid value for required argument 'LimitDetail'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CngwRouteRateLimit
	err := ctx.RegisterResource("tencentcloud:Tse/cngwRouteRateLimit:CngwRouteRateLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwRouteRateLimit gets an existing CngwRouteRateLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwRouteRateLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwRouteRateLimitState, opts ...pulumi.ResourceOption) (*CngwRouteRateLimit, error) {
	var resource CngwRouteRateLimit
	err := ctx.ReadResource("tencentcloud:Tse/cngwRouteRateLimit:CngwRouteRateLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwRouteRateLimit resources.
type cngwRouteRateLimitState struct {
	// gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail *CngwRouteRateLimitLimitDetail `pulumi:"limitDetail"`
	// Route id, or route name.
	RouteId *string `pulumi:"routeId"`
}

type CngwRouteRateLimitState struct {
	// gateway ID.
	GatewayId pulumi.StringPtrInput
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetailPtrInput
	// Route id, or route name.
	RouteId pulumi.StringPtrInput
}

func (CngwRouteRateLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwRouteRateLimitState)(nil)).Elem()
}

type cngwRouteRateLimitArgs struct {
	// gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetail `pulumi:"limitDetail"`
	// Route id, or route name.
	RouteId string `pulumi:"routeId"`
}

// The set of arguments for constructing a CngwRouteRateLimit resource.
type CngwRouteRateLimitArgs struct {
	// gateway ID.
	GatewayId pulumi.StringInput
	// rate limit configuration.
	LimitDetail CngwRouteRateLimitLimitDetailInput
	// Route id, or route name.
	RouteId pulumi.StringInput
}

func (CngwRouteRateLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwRouteRateLimitArgs)(nil)).Elem()
}

type CngwRouteRateLimitInput interface {
	pulumi.Input

	ToCngwRouteRateLimitOutput() CngwRouteRateLimitOutput
	ToCngwRouteRateLimitOutputWithContext(ctx context.Context) CngwRouteRateLimitOutput
}

func (*CngwRouteRateLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwRouteRateLimit)(nil)).Elem()
}

func (i *CngwRouteRateLimit) ToCngwRouteRateLimitOutput() CngwRouteRateLimitOutput {
	return i.ToCngwRouteRateLimitOutputWithContext(context.Background())
}

func (i *CngwRouteRateLimit) ToCngwRouteRateLimitOutputWithContext(ctx context.Context) CngwRouteRateLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteRateLimitOutput)
}

// CngwRouteRateLimitArrayInput is an input type that accepts CngwRouteRateLimitArray and CngwRouteRateLimitArrayOutput values.
// You can construct a concrete instance of `CngwRouteRateLimitArrayInput` via:
//
//	CngwRouteRateLimitArray{ CngwRouteRateLimitArgs{...} }
type CngwRouteRateLimitArrayInput interface {
	pulumi.Input

	ToCngwRouteRateLimitArrayOutput() CngwRouteRateLimitArrayOutput
	ToCngwRouteRateLimitArrayOutputWithContext(context.Context) CngwRouteRateLimitArrayOutput
}

type CngwRouteRateLimitArray []CngwRouteRateLimitInput

func (CngwRouteRateLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwRouteRateLimit)(nil)).Elem()
}

func (i CngwRouteRateLimitArray) ToCngwRouteRateLimitArrayOutput() CngwRouteRateLimitArrayOutput {
	return i.ToCngwRouteRateLimitArrayOutputWithContext(context.Background())
}

func (i CngwRouteRateLimitArray) ToCngwRouteRateLimitArrayOutputWithContext(ctx context.Context) CngwRouteRateLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteRateLimitArrayOutput)
}

// CngwRouteRateLimitMapInput is an input type that accepts CngwRouteRateLimitMap and CngwRouteRateLimitMapOutput values.
// You can construct a concrete instance of `CngwRouteRateLimitMapInput` via:
//
//	CngwRouteRateLimitMap{ "key": CngwRouteRateLimitArgs{...} }
type CngwRouteRateLimitMapInput interface {
	pulumi.Input

	ToCngwRouteRateLimitMapOutput() CngwRouteRateLimitMapOutput
	ToCngwRouteRateLimitMapOutputWithContext(context.Context) CngwRouteRateLimitMapOutput
}

type CngwRouteRateLimitMap map[string]CngwRouteRateLimitInput

func (CngwRouteRateLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwRouteRateLimit)(nil)).Elem()
}

func (i CngwRouteRateLimitMap) ToCngwRouteRateLimitMapOutput() CngwRouteRateLimitMapOutput {
	return i.ToCngwRouteRateLimitMapOutputWithContext(context.Background())
}

func (i CngwRouteRateLimitMap) ToCngwRouteRateLimitMapOutputWithContext(ctx context.Context) CngwRouteRateLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteRateLimitMapOutput)
}

type CngwRouteRateLimitOutput struct{ *pulumi.OutputState }

func (CngwRouteRateLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwRouteRateLimit)(nil)).Elem()
}

func (o CngwRouteRateLimitOutput) ToCngwRouteRateLimitOutput() CngwRouteRateLimitOutput {
	return o
}

func (o CngwRouteRateLimitOutput) ToCngwRouteRateLimitOutputWithContext(ctx context.Context) CngwRouteRateLimitOutput {
	return o
}

// gateway ID.
func (o CngwRouteRateLimitOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRouteRateLimit) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// rate limit configuration.
func (o CngwRouteRateLimitOutput) LimitDetail() CngwRouteRateLimitLimitDetailOutput {
	return o.ApplyT(func(v *CngwRouteRateLimit) CngwRouteRateLimitLimitDetailOutput { return v.LimitDetail }).(CngwRouteRateLimitLimitDetailOutput)
}

// Route id, or route name.
func (o CngwRouteRateLimitOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRouteRateLimit) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

type CngwRouteRateLimitArrayOutput struct{ *pulumi.OutputState }

func (CngwRouteRateLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwRouteRateLimit)(nil)).Elem()
}

func (o CngwRouteRateLimitArrayOutput) ToCngwRouteRateLimitArrayOutput() CngwRouteRateLimitArrayOutput {
	return o
}

func (o CngwRouteRateLimitArrayOutput) ToCngwRouteRateLimitArrayOutputWithContext(ctx context.Context) CngwRouteRateLimitArrayOutput {
	return o
}

func (o CngwRouteRateLimitArrayOutput) Index(i pulumi.IntInput) CngwRouteRateLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwRouteRateLimit {
		return vs[0].([]*CngwRouteRateLimit)[vs[1].(int)]
	}).(CngwRouteRateLimitOutput)
}

type CngwRouteRateLimitMapOutput struct{ *pulumi.OutputState }

func (CngwRouteRateLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwRouteRateLimit)(nil)).Elem()
}

func (o CngwRouteRateLimitMapOutput) ToCngwRouteRateLimitMapOutput() CngwRouteRateLimitMapOutput {
	return o
}

func (o CngwRouteRateLimitMapOutput) ToCngwRouteRateLimitMapOutputWithContext(ctx context.Context) CngwRouteRateLimitMapOutput {
	return o
}

func (o CngwRouteRateLimitMapOutput) MapIndex(k pulumi.StringInput) CngwRouteRateLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwRouteRateLimit {
		return vs[0].(map[string]*CngwRouteRateLimit)[vs[1].(string)]
	}).(CngwRouteRateLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteRateLimitInput)(nil)).Elem(), &CngwRouteRateLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteRateLimitArrayInput)(nil)).Elem(), CngwRouteRateLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteRateLimitMapInput)(nil)).Elem(), CngwRouteRateLimitMap{})
	pulumi.RegisterOutputType(CngwRouteRateLimitOutput{})
	pulumi.RegisterOutputType(CngwRouteRateLimitArrayOutput{})
	pulumi.RegisterOutputType(CngwRouteRateLimitMapOutput{})
}
