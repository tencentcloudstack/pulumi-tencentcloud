// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tse instance
//
// ## Example Usage
// ### Create zookeeper standard version
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tse.NewInstance(ctx, "zookeeperStandard", &Tse.InstanceArgs{
//				EngineName:           pulumi.String("zookeeper-test"),
//				EngineNodeNum:        pulumi.Int(3),
//				EngineProductVersion: pulumi.String("STANDARD"),
//				EngineRegion:         pulumi.String("ap-guangzhou"),
//				EngineResourceSpec:   pulumi.String("spec-qvj6k7t4q"),
//				EngineType:           pulumi.String("zookeeper"),
//				EngineVersion:        pulumi.String("3.5.9.4"),
//				SubnetId:             pulumi.String("subnet-dwj7ipnc"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//				TradeType: pulumi.Int(0),
//				VpcId:     pulumi.String("vpc-4owdpnwr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create zookeeper professional version
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tse.NewInstance(ctx, "zookeeperProfessional", &Tse.InstanceArgs{
//				EngineName:           pulumi.String("zookeeper-test"),
//				EngineNodeNum:        pulumi.Int(3),
//				EngineProductVersion: pulumi.String("PROFESSIONAL"),
//				EngineRegion:         pulumi.String("ap-guangzhou"),
//				EngineRegionInfos: tse.InstanceEngineRegionInfoArray{
//					&tse.InstanceEngineRegionInfoArgs{
//						EngineRegion: pulumi.String("ap-guangzhou"),
//						Replica:      pulumi.Int(3),
//						VpcInfos: tse.InstanceEngineRegionInfoVpcInfoArray{
//							&tse.InstanceEngineRegionInfoVpcInfoArgs{
//								SubnetId: pulumi.String("subnet-dwj7ipnc"),
//								VpcId:    pulumi.String("vpc-4owdpnwr"),
//							},
//							&tse.InstanceEngineRegionInfoVpcInfoArgs{
//								SubnetId: pulumi.String("subnet-403mgks4"),
//								VpcId:    pulumi.String("vpc-b1puef4z"),
//							},
//						},
//					},
//				},
//				EngineResourceSpec: pulumi.String("spec-qvj6k7t4q"),
//				EngineType:         pulumi.String("zookeeper"),
//				EngineVersion:      pulumi.String("3.5.9.4"),
//				SubnetId:           pulumi.String("subnet-dwj7ipnc"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//				TradeType: pulumi.Int(0),
//				VpcId:     pulumi.String("vpc-4owdpnwr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create nacos standard version
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tse.NewInstance(ctx, "nacos", &Tse.InstanceArgs{
//				EnableClientInternetAccess: pulumi.Bool(false),
//				EngineName:                 pulumi.String("test"),
//				EngineNodeNum:              pulumi.Int(3),
//				EngineProductVersion:       pulumi.String("STANDARD"),
//				EngineRegion:               pulumi.String("ap-guangzhou"),
//				EngineResourceSpec:         pulumi.String("spec-1160a35a"),
//				EngineType:                 pulumi.String("nacos"),
//				EngineVersion:              pulumi.String("2.0.3.4"),
//				SubnetId:                   pulumi.String("subnet-5vpegquy"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//				TradeType: pulumi.Int(0),
//				VpcId:     pulumi.String("vpc-99xmasf9"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Create polaris base version
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tse.NewInstance(ctx, "polaris", &Tse.InstanceArgs{
//				EnableClientInternetAccess: pulumi.Bool(false),
//				EngineName:                 pulumi.String("test"),
//				EngineNodeNum:              pulumi.Int(2),
//				EngineProductVersion:       pulumi.String("BASE"),
//				EngineRegion:               pulumi.String("ap-guangzhou"),
//				EngineResourceSpec:         pulumi.String("spec-c160bas1"),
//				EngineType:                 pulumi.String("polaris"),
//				EngineVersion:              pulumi.String("1.16.0.1"),
//				SubnetId:                   pulumi.String("subnet-5vpegquy"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//				TradeType: pulumi.Int(0),
//				VpcId:     pulumi.String("vpc-99xmasf9"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tse instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tse/instance:Instance instance instance_id
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Client public network access, `true`: on, `false`: off, default: false.
	EnableClientInternetAccess pulumi.BoolPtrOutput `pulumi:"enableClientInternetAccess"`
	// engien name. Reference value: nacos-test.
	EngineName pulumi.StringOutput `pulumi:"engineName"`
	// engine node num. see EngineProductVersion.
	EngineNodeNum pulumi.IntPtrOutput `pulumi:"engineNodeNum"`
	// Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
	EngineProductVersion pulumi.StringOutput `pulumi:"engineProductVersion"`
	// engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
	EngineRegion pulumi.StringOutput `pulumi:"engineRegion"`
	// Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
	EngineRegionInfos InstanceEngineRegionInfoArrayOutput `pulumi:"engineRegionInfos"`
	// engine spec ID. see EngineProductVersion.
	EngineResourceSpec pulumi.StringPtrOutput `pulumi:"engineResourceSpec"`
	// engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
	EngineType pulumi.StringOutput `pulumi:"engineType"`
	// An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// Prepaid time, in monthly units.
	PrepaidPeriod pulumi.IntPtrOutput `pulumi:"prepaidPeriod"`
	// Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
	PrepaidRenewFlag pulumi.IntPtrOutput `pulumi:"prepaidRenewFlag"`
	// subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType pulumi.IntOutput `pulumi:"tradeType"`
	// VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineName == nil {
		return nil, errors.New("invalid value for required argument 'EngineName'")
	}
	if args.EngineProductVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineProductVersion'")
	}
	if args.EngineRegion == nil {
		return nil, errors.New("invalid value for required argument 'EngineRegion'")
	}
	if args.EngineType == nil {
		return nil, errors.New("invalid value for required argument 'EngineType'")
	}
	if args.EngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineVersion'")
	}
	if args.TradeType == nil {
		return nil, errors.New("invalid value for required argument 'TradeType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Tse/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Tse/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Client public network access, `true`: on, `false`: off, default: false.
	EnableClientInternetAccess *bool `pulumi:"enableClientInternetAccess"`
	// engien name. Reference value: nacos-test.
	EngineName *string `pulumi:"engineName"`
	// engine node num. see EngineProductVersion.
	EngineNodeNum *int `pulumi:"engineNodeNum"`
	// Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
	EngineProductVersion *string `pulumi:"engineProductVersion"`
	// engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
	EngineRegion *string `pulumi:"engineRegion"`
	// Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
	EngineRegionInfos []InstanceEngineRegionInfo `pulumi:"engineRegionInfos"`
	// engine spec ID. see EngineProductVersion.
	EngineResourceSpec *string `pulumi:"engineResourceSpec"`
	// engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
	EngineType *string `pulumi:"engineType"`
	// An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
	EngineVersion *string `pulumi:"engineVersion"`
	// Prepaid time, in monthly units.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
	PrepaidRenewFlag *int `pulumi:"prepaidRenewFlag"`
	// subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
	SubnetId *string `pulumi:"subnetId"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType *int `pulumi:"tradeType"`
	// VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
	VpcId *string `pulumi:"vpcId"`
}

type InstanceState struct {
	// Client public network access, `true`: on, `false`: off, default: false.
	EnableClientInternetAccess pulumi.BoolPtrInput
	// engien name. Reference value: nacos-test.
	EngineName pulumi.StringPtrInput
	// engine node num. see EngineProductVersion.
	EngineNodeNum pulumi.IntPtrInput
	// Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
	EngineProductVersion pulumi.StringPtrInput
	// engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
	EngineRegion pulumi.StringPtrInput
	// Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
	EngineRegionInfos InstanceEngineRegionInfoArrayInput
	// engine spec ID. see EngineProductVersion.
	EngineResourceSpec pulumi.StringPtrInput
	// engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
	EngineType pulumi.StringPtrInput
	// An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
	EngineVersion pulumi.StringPtrInput
	// Prepaid time, in monthly units.
	PrepaidPeriod pulumi.IntPtrInput
	// Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
	PrepaidRenewFlag pulumi.IntPtrInput
	// subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
	SubnetId pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType pulumi.IntPtrInput
	// VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
	VpcId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Client public network access, `true`: on, `false`: off, default: false.
	EnableClientInternetAccess *bool `pulumi:"enableClientInternetAccess"`
	// engien name. Reference value: nacos-test.
	EngineName string `pulumi:"engineName"`
	// engine node num. see EngineProductVersion.
	EngineNodeNum *int `pulumi:"engineNodeNum"`
	// Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
	EngineProductVersion string `pulumi:"engineProductVersion"`
	// engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
	EngineRegion string `pulumi:"engineRegion"`
	// Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
	EngineRegionInfos []InstanceEngineRegionInfo `pulumi:"engineRegionInfos"`
	// engine spec ID. see EngineProductVersion.
	EngineResourceSpec *string `pulumi:"engineResourceSpec"`
	// engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
	EngineType string `pulumi:"engineType"`
	// An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
	EngineVersion string `pulumi:"engineVersion"`
	// Prepaid time, in monthly units.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
	PrepaidRenewFlag *int `pulumi:"prepaidRenewFlag"`
	// subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
	SubnetId *string `pulumi:"subnetId"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType int `pulumi:"tradeType"`
	// VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Client public network access, `true`: on, `false`: off, default: false.
	EnableClientInternetAccess pulumi.BoolPtrInput
	// engien name. Reference value: nacos-test.
	EngineName pulumi.StringInput
	// engine node num. see EngineProductVersion.
	EngineNodeNum pulumi.IntPtrInput
	// Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
	EngineProductVersion pulumi.StringInput
	// engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
	EngineRegion pulumi.StringInput
	// Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
	EngineRegionInfos InstanceEngineRegionInfoArrayInput
	// engine spec ID. see EngineProductVersion.
	EngineResourceSpec pulumi.StringPtrInput
	// engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
	EngineType pulumi.StringInput
	// An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
	EngineVersion pulumi.StringInput
	// Prepaid time, in monthly units.
	PrepaidPeriod pulumi.IntPtrInput
	// Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
	PrepaidRenewFlag pulumi.IntPtrInput
	// subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
	SubnetId pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType pulumi.IntInput
	// VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
	VpcId pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Client public network access, `true`: on, `false`: off, default: false.
func (o InstanceOutput) EnableClientInternetAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.EnableClientInternetAccess }).(pulumi.BoolPtrOutput)
}

// engien name. Reference value: nacos-test.
func (o InstanceOutput) EngineName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EngineName }).(pulumi.StringOutput)
}

// engine node num. see EngineProductVersion.
func (o InstanceOutput) EngineNodeNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.EngineNodeNum }).(pulumi.IntPtrOutput)
}

// Engine product version. Reference value: `Nacos`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Zookeeper`: `TRIAL`: Development version, optional node num: `1`, optional spec list: `1C1G`; `STANDARD`: Standard versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`; `PROFESSIONAL`: professional versions, optional node num: `3`, `5`, `7`, optional spec list: `1C2G`, `2C4G`, `4C8G`, `8C16G`, `16C32G`. `Polarismesh`: `BASE`: Base version, optional node num: `1`, optional spec list: `NUM50`; `PROFESSIONAL`: Enterprise versions, optional node num: `2`, `3`, optional spec list: `NUM50`, `NUM100`, `NUM200`, `NUM500`, `NUM1000`, `NUM5000`, `NUM10000`, `NUM50000`.
func (o InstanceOutput) EngineProductVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EngineProductVersion }).(pulumi.StringOutput)
}

// engine deploy region. Reference value: `China area` Reference value: `ap-guangzhou`, `ap-beijing`, `ap-chengdu`, `ap-chongqing`, `ap-nanjing`, `ap-shanghai` `ap-beijing-fsi`, `ap-shanghai-fsi`, `ap-shenzhen-fsi`. `Asia Pacific` area Reference value: `ap-hongkong`, `ap-taipei`, `ap-jakarta`, `ap-singapore`, `ap-bangkok`, `ap-seoul`, `ap-tokyo`. `North America area` Reference value: `na-toronto`, `sa-saopaulo`, `na-siliconvalley`, `na-ashburn`.
func (o InstanceOutput) EngineRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EngineRegion }).(pulumi.StringOutput)
}

// Details about the regional configuration of the engine in cross-region deployment, only zookeeper professional requires the use of the EngineRegionInfos parameter.
func (o InstanceOutput) EngineRegionInfos() InstanceEngineRegionInfoArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceEngineRegionInfoArrayOutput { return v.EngineRegionInfos }).(InstanceEngineRegionInfoArrayOutput)
}

// engine spec ID. see EngineProductVersion.
func (o InstanceOutput) EngineResourceSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.EngineResourceSpec }).(pulumi.StringPtrOutput)
}

// engine type. Reference value: `zookeeper`, `nacos`, `polaris`.
func (o InstanceOutput) EngineType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EngineType }).(pulumi.StringOutput)
}

// An open source version of the engine. Each engine supports different open source versions, refer to the product documentation or console purchase page.
func (o InstanceOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// Prepaid time, in monthly units.
func (o InstanceOutput) PrepaidPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.PrepaidPeriod }).(pulumi.IntPtrOutput)
}

// Automatic renewal mark, prepaid only.  Reference value: `0`: No automatic renewal, `1`: Automatic renewal.
func (o InstanceOutput) PrepaidRenewFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.PrepaidRenewFlag }).(pulumi.IntPtrOutput)
}

// subnet ID. Assign an IP address to the engine in the VPC subnet. Reference value: subnet-ahde9me9.
func (o InstanceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Tag description list.
func (o InstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// trade type. Reference value:- 0:postpaid- 1:Prepaid (Interface does not support the creation of prepaid instances yet).
func (o InstanceOutput) TradeType() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.TradeType }).(pulumi.IntOutput)
}

// VPC ID. Assign an IP address to the engine in the VPC subnet. Reference value: vpc-conz6aix.
func (o InstanceOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
