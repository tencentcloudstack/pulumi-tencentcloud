// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tse cngwCertificate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tse.NewCngwCertificate(ctx, "cngwCertificate", &Tse.CngwCertificateArgs{
//				BindDomains: pulumi.StringArray{
//					pulumi.String("example1.com"),
//				},
//				CertId:    pulumi.String("vYSQkJ3K"),
//				GatewayId: pulumi.String("gateway-ddbb709b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tse cngw_certificate can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tse/cngwCertificate:CngwCertificate cngw_certificate gatewayId#Id
//
// ```
type CngwCertificate struct {
	pulumi.CustomResourceState

	// Domains of the binding.
	BindDomains pulumi.StringArrayOutput `pulumi:"bindDomains"`
	// Certificate ID of ssl platform.
	CertId pulumi.StringOutput `pulumi:"certId"`
	// Pem format of certificate.
	Crt pulumi.StringOutput `pulumi:"crt"`
	// Gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// Private key of certificate.
	Key pulumi.StringOutput `pulumi:"key"`
	// Certificate name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCngwCertificate registers a new resource with the given unique name, arguments, and options.
func NewCngwCertificate(ctx *pulumi.Context,
	name string, args *CngwCertificateArgs, opts ...pulumi.ResourceOption) (*CngwCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BindDomains == nil {
		return nil, errors.New("invalid value for required argument 'BindDomains'")
	}
	if args.CertId == nil {
		return nil, errors.New("invalid value for required argument 'CertId'")
	}
	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CngwCertificate
	err := ctx.RegisterResource("tencentcloud:Tse/cngwCertificate:CngwCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwCertificate gets an existing CngwCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwCertificateState, opts ...pulumi.ResourceOption) (*CngwCertificate, error) {
	var resource CngwCertificate
	err := ctx.ReadResource("tencentcloud:Tse/cngwCertificate:CngwCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwCertificate resources.
type cngwCertificateState struct {
	// Domains of the binding.
	BindDomains []string `pulumi:"bindDomains"`
	// Certificate ID of ssl platform.
	CertId *string `pulumi:"certId"`
	// Pem format of certificate.
	Crt *string `pulumi:"crt"`
	// Gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// Private key of certificate.
	Key *string `pulumi:"key"`
	// Certificate name.
	Name *string `pulumi:"name"`
}

type CngwCertificateState struct {
	// Domains of the binding.
	BindDomains pulumi.StringArrayInput
	// Certificate ID of ssl platform.
	CertId pulumi.StringPtrInput
	// Pem format of certificate.
	Crt pulumi.StringPtrInput
	// Gateway ID.
	GatewayId pulumi.StringPtrInput
	// Private key of certificate.
	Key pulumi.StringPtrInput
	// Certificate name.
	Name pulumi.StringPtrInput
}

func (CngwCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwCertificateState)(nil)).Elem()
}

type cngwCertificateArgs struct {
	// Domains of the binding.
	BindDomains []string `pulumi:"bindDomains"`
	// Certificate ID of ssl platform.
	CertId string `pulumi:"certId"`
	// Gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// Certificate name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CngwCertificate resource.
type CngwCertificateArgs struct {
	// Domains of the binding.
	BindDomains pulumi.StringArrayInput
	// Certificate ID of ssl platform.
	CertId pulumi.StringInput
	// Gateway ID.
	GatewayId pulumi.StringInput
	// Certificate name.
	Name pulumi.StringPtrInput
}

func (CngwCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwCertificateArgs)(nil)).Elem()
}

type CngwCertificateInput interface {
	pulumi.Input

	ToCngwCertificateOutput() CngwCertificateOutput
	ToCngwCertificateOutputWithContext(ctx context.Context) CngwCertificateOutput
}

func (*CngwCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwCertificate)(nil)).Elem()
}

func (i *CngwCertificate) ToCngwCertificateOutput() CngwCertificateOutput {
	return i.ToCngwCertificateOutputWithContext(context.Background())
}

func (i *CngwCertificate) ToCngwCertificateOutputWithContext(ctx context.Context) CngwCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwCertificateOutput)
}

// CngwCertificateArrayInput is an input type that accepts CngwCertificateArray and CngwCertificateArrayOutput values.
// You can construct a concrete instance of `CngwCertificateArrayInput` via:
//
//	CngwCertificateArray{ CngwCertificateArgs{...} }
type CngwCertificateArrayInput interface {
	pulumi.Input

	ToCngwCertificateArrayOutput() CngwCertificateArrayOutput
	ToCngwCertificateArrayOutputWithContext(context.Context) CngwCertificateArrayOutput
}

type CngwCertificateArray []CngwCertificateInput

func (CngwCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwCertificate)(nil)).Elem()
}

func (i CngwCertificateArray) ToCngwCertificateArrayOutput() CngwCertificateArrayOutput {
	return i.ToCngwCertificateArrayOutputWithContext(context.Background())
}

func (i CngwCertificateArray) ToCngwCertificateArrayOutputWithContext(ctx context.Context) CngwCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwCertificateArrayOutput)
}

// CngwCertificateMapInput is an input type that accepts CngwCertificateMap and CngwCertificateMapOutput values.
// You can construct a concrete instance of `CngwCertificateMapInput` via:
//
//	CngwCertificateMap{ "key": CngwCertificateArgs{...} }
type CngwCertificateMapInput interface {
	pulumi.Input

	ToCngwCertificateMapOutput() CngwCertificateMapOutput
	ToCngwCertificateMapOutputWithContext(context.Context) CngwCertificateMapOutput
}

type CngwCertificateMap map[string]CngwCertificateInput

func (CngwCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwCertificate)(nil)).Elem()
}

func (i CngwCertificateMap) ToCngwCertificateMapOutput() CngwCertificateMapOutput {
	return i.ToCngwCertificateMapOutputWithContext(context.Background())
}

func (i CngwCertificateMap) ToCngwCertificateMapOutputWithContext(ctx context.Context) CngwCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwCertificateMapOutput)
}

type CngwCertificateOutput struct{ *pulumi.OutputState }

func (CngwCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwCertificate)(nil)).Elem()
}

func (o CngwCertificateOutput) ToCngwCertificateOutput() CngwCertificateOutput {
	return o
}

func (o CngwCertificateOutput) ToCngwCertificateOutputWithContext(ctx context.Context) CngwCertificateOutput {
	return o
}

// Domains of the binding.
func (o CngwCertificateOutput) BindDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CngwCertificate) pulumi.StringArrayOutput { return v.BindDomains }).(pulumi.StringArrayOutput)
}

// Certificate ID of ssl platform.
func (o CngwCertificateOutput) CertId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwCertificate) pulumi.StringOutput { return v.CertId }).(pulumi.StringOutput)
}

// Pem format of certificate.
func (o CngwCertificateOutput) Crt() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwCertificate) pulumi.StringOutput { return v.Crt }).(pulumi.StringOutput)
}

// Gateway ID.
func (o CngwCertificateOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwCertificate) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// Private key of certificate.
func (o CngwCertificateOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwCertificate) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Certificate name.
func (o CngwCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CngwCertificateArrayOutput struct{ *pulumi.OutputState }

func (CngwCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwCertificate)(nil)).Elem()
}

func (o CngwCertificateArrayOutput) ToCngwCertificateArrayOutput() CngwCertificateArrayOutput {
	return o
}

func (o CngwCertificateArrayOutput) ToCngwCertificateArrayOutputWithContext(ctx context.Context) CngwCertificateArrayOutput {
	return o
}

func (o CngwCertificateArrayOutput) Index(i pulumi.IntInput) CngwCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwCertificate {
		return vs[0].([]*CngwCertificate)[vs[1].(int)]
	}).(CngwCertificateOutput)
}

type CngwCertificateMapOutput struct{ *pulumi.OutputState }

func (CngwCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwCertificate)(nil)).Elem()
}

func (o CngwCertificateMapOutput) ToCngwCertificateMapOutput() CngwCertificateMapOutput {
	return o
}

func (o CngwCertificateMapOutput) ToCngwCertificateMapOutputWithContext(ctx context.Context) CngwCertificateMapOutput {
	return o
}

func (o CngwCertificateMapOutput) MapIndex(k pulumi.StringInput) CngwCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwCertificate {
		return vs[0].(map[string]*CngwCertificate)[vs[1].(string)]
	}).(CngwCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwCertificateInput)(nil)).Elem(), &CngwCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwCertificateArrayInput)(nil)).Elem(), CngwCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwCertificateMapInput)(nil)).Elem(), CngwCertificateMap{})
	pulumi.RegisterOutputType(CngwCertificateOutput{})
	pulumi.RegisterOutputType(CngwCertificateArrayOutput{})
	pulumi.RegisterOutputType(CngwCertificateMapOutput{})
}
