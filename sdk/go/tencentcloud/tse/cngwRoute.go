// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tse cngwRoute
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			cngwGateway, err := Tse.NewCngwGateway(ctx, "cngwGateway", &Tse.CngwGatewayArgs{
//				Description:             pulumi.String("terraform test1"),
//				EnableCls:               pulumi.Bool(true),
//				EngineRegion:            pulumi.String("ap-guangzhou"),
//				FeatureVersion:          pulumi.String("STANDARD"),
//				GatewayVersion:          pulumi.String("2.5.1"),
//				IngressClassName:        pulumi.String("tse-nginx-ingress"),
//				InternetMaxBandwidthOut: pulumi.Int(0),
//				TradeType:               pulumi.Int(0),
//				Type:                    pulumi.String("kong"),
//				NodeConfig: &tse.CngwGatewayNodeConfigArgs{
//					Number:        pulumi.Int(2),
//					Specification: pulumi.String("1c2g"),
//				},
//				VpcConfig: &tse.CngwGatewayVpcConfigArgs{
//					SubnetId: subnet.ID(),
//					VpcId:    vpc.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			cngwService, err := Tse.NewCngwService(ctx, "cngwService", &Tse.CngwServiceArgs{
//				GatewayId:    cngwGateway.ID(),
//				Path:         pulumi.String("/test"),
//				Protocol:     pulumi.String("http"),
//				Retries:      pulumi.Int(5),
//				Timeout:      pulumi.Int(60000),
//				UpstreamType: pulumi.String("HostIP"),
//				UpstreamInfo: &tse.CngwServiceUpstreamInfoArgs{
//					Algorithm:          pulumi.String("round-robin"),
//					AutoScalingCvmPort: pulumi.Int(0),
//					Host:               pulumi.String("arunma.cn"),
//					Port:               pulumi.Int(8012),
//					SlowStart:          pulumi.Int(0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tse.NewCngwRoute(ctx, "cngwRoute", &Tse.CngwRouteArgs{
//				DestinationPorts: pulumi.IntArray{},
//				GatewayId:        cngwGateway.ID(),
//				Hosts: pulumi.StringArray{
//					pulumi.String("192.168.0.1:9090"),
//				},
//				HttpsRedirectStatusCode: pulumi.Int(426),
//				Paths: pulumi.StringArray{
//					pulumi.String("/user"),
//				},
//				Headers: tse.CngwRouteHeaderArray{
//					&tse.CngwRouteHeaderArgs{
//						Key:   pulumi.String("req"),
//						Value: pulumi.String("terraform"),
//					},
//				},
//				PreserveHost: pulumi.Bool(false),
//				Protocols: pulumi.StringArray{
//					pulumi.String("http"),
//					pulumi.String("https"),
//				},
//				RouteName: pulumi.String("terraform-route"),
//				ServiceId: cngwService.ServiceId,
//				StripPath: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CngwRoute struct {
	pulumi.CustomResourceState

	// destination port for Layer 4 matching.
	DestinationPorts pulumi.IntArrayOutput `pulumi:"destinationPorts"`
	// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
	//
	// Deprecated: This field has been deprecated and will be deleted in subsequent versions.
	ForceHttps pulumi.BoolPtrOutput `pulumi:"forceHttps"`
	// gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// the headers of route.
	Headers CngwRouteHeaderArrayOutput `pulumi:"headers"`
	// host list.
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// https redirection status code.
	HttpsRedirectStatusCode pulumi.IntPtrOutput `pulumi:"httpsRedirectStatusCode"`
	// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
	Methods pulumi.StringArrayOutput `pulumi:"methods"`
	// path list.
	Paths pulumi.StringArrayOutput `pulumi:"paths"`
	// whether to keep the host when forwarding to the backend.
	PreserveHost pulumi.BoolPtrOutput `pulumi:"preserveHost"`
	// the protocol list of route.Reference value:`https`,`http`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// the id of the route, unique in the instance.
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// the name of the route, unique in the instance.
	RouteName pulumi.StringPtrOutput `pulumi:"routeName"`
	// ID of the service which the route belongs to.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// whether to strip path when forwarding to the backend.
	StripPath pulumi.BoolPtrOutput `pulumi:"stripPath"`
}

// NewCngwRoute registers a new resource with the given unique name, arguments, and options.
func NewCngwRoute(ctx *pulumi.Context,
	name string, args *CngwRouteArgs, opts ...pulumi.ResourceOption) (*CngwRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CngwRoute
	err := ctx.RegisterResource("tencentcloud:Tse/cngwRoute:CngwRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwRoute gets an existing CngwRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwRouteState, opts ...pulumi.ResourceOption) (*CngwRoute, error) {
	var resource CngwRoute
	err := ctx.ReadResource("tencentcloud:Tse/cngwRoute:CngwRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwRoute resources.
type cngwRouteState struct {
	// destination port for Layer 4 matching.
	DestinationPorts []int `pulumi:"destinationPorts"`
	// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
	//
	// Deprecated: This field has been deprecated and will be deleted in subsequent versions.
	ForceHttps *bool `pulumi:"forceHttps"`
	// gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// the headers of route.
	Headers []CngwRouteHeader `pulumi:"headers"`
	// host list.
	Hosts []string `pulumi:"hosts"`
	// https redirection status code.
	HttpsRedirectStatusCode *int `pulumi:"httpsRedirectStatusCode"`
	// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
	Methods []string `pulumi:"methods"`
	// path list.
	Paths []string `pulumi:"paths"`
	// whether to keep the host when forwarding to the backend.
	PreserveHost *bool `pulumi:"preserveHost"`
	// the protocol list of route.Reference value:`https`,`http`.
	Protocols []string `pulumi:"protocols"`
	// the id of the route, unique in the instance.
	RouteId *string `pulumi:"routeId"`
	// the name of the route, unique in the instance.
	RouteName *string `pulumi:"routeName"`
	// ID of the service which the route belongs to.
	ServiceId *string `pulumi:"serviceId"`
	// whether to strip path when forwarding to the backend.
	StripPath *bool `pulumi:"stripPath"`
}

type CngwRouteState struct {
	// destination port for Layer 4 matching.
	DestinationPorts pulumi.IntArrayInput
	// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
	//
	// Deprecated: This field has been deprecated and will be deleted in subsequent versions.
	ForceHttps pulumi.BoolPtrInput
	// gateway ID.
	GatewayId pulumi.StringPtrInput
	// the headers of route.
	Headers CngwRouteHeaderArrayInput
	// host list.
	Hosts pulumi.StringArrayInput
	// https redirection status code.
	HttpsRedirectStatusCode pulumi.IntPtrInput
	// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
	Methods pulumi.StringArrayInput
	// path list.
	Paths pulumi.StringArrayInput
	// whether to keep the host when forwarding to the backend.
	PreserveHost pulumi.BoolPtrInput
	// the protocol list of route.Reference value:`https`,`http`.
	Protocols pulumi.StringArrayInput
	// the id of the route, unique in the instance.
	RouteId pulumi.StringPtrInput
	// the name of the route, unique in the instance.
	RouteName pulumi.StringPtrInput
	// ID of the service which the route belongs to.
	ServiceId pulumi.StringPtrInput
	// whether to strip path when forwarding to the backend.
	StripPath pulumi.BoolPtrInput
}

func (CngwRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwRouteState)(nil)).Elem()
}

type cngwRouteArgs struct {
	// destination port for Layer 4 matching.
	DestinationPorts []int `pulumi:"destinationPorts"`
	// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
	//
	// Deprecated: This field has been deprecated and will be deleted in subsequent versions.
	ForceHttps *bool `pulumi:"forceHttps"`
	// gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// the headers of route.
	Headers []CngwRouteHeader `pulumi:"headers"`
	// host list.
	Hosts []string `pulumi:"hosts"`
	// https redirection status code.
	HttpsRedirectStatusCode *int `pulumi:"httpsRedirectStatusCode"`
	// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
	Methods []string `pulumi:"methods"`
	// path list.
	Paths []string `pulumi:"paths"`
	// whether to keep the host when forwarding to the backend.
	PreserveHost *bool `pulumi:"preserveHost"`
	// the protocol list of route.Reference value:`https`,`http`.
	Protocols []string `pulumi:"protocols"`
	// the name of the route, unique in the instance.
	RouteName *string `pulumi:"routeName"`
	// ID of the service which the route belongs to.
	ServiceId string `pulumi:"serviceId"`
	// whether to strip path when forwarding to the backend.
	StripPath *bool `pulumi:"stripPath"`
}

// The set of arguments for constructing a CngwRoute resource.
type CngwRouteArgs struct {
	// destination port for Layer 4 matching.
	DestinationPorts pulumi.IntArrayInput
	// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
	//
	// Deprecated: This field has been deprecated and will be deleted in subsequent versions.
	ForceHttps pulumi.BoolPtrInput
	// gateway ID.
	GatewayId pulumi.StringInput
	// the headers of route.
	Headers CngwRouteHeaderArrayInput
	// host list.
	Hosts pulumi.StringArrayInput
	// https redirection status code.
	HttpsRedirectStatusCode pulumi.IntPtrInput
	// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
	Methods pulumi.StringArrayInput
	// path list.
	Paths pulumi.StringArrayInput
	// whether to keep the host when forwarding to the backend.
	PreserveHost pulumi.BoolPtrInput
	// the protocol list of route.Reference value:`https`,`http`.
	Protocols pulumi.StringArrayInput
	// the name of the route, unique in the instance.
	RouteName pulumi.StringPtrInput
	// ID of the service which the route belongs to.
	ServiceId pulumi.StringInput
	// whether to strip path when forwarding to the backend.
	StripPath pulumi.BoolPtrInput
}

func (CngwRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwRouteArgs)(nil)).Elem()
}

type CngwRouteInput interface {
	pulumi.Input

	ToCngwRouteOutput() CngwRouteOutput
	ToCngwRouteOutputWithContext(ctx context.Context) CngwRouteOutput
}

func (*CngwRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwRoute)(nil)).Elem()
}

func (i *CngwRoute) ToCngwRouteOutput() CngwRouteOutput {
	return i.ToCngwRouteOutputWithContext(context.Background())
}

func (i *CngwRoute) ToCngwRouteOutputWithContext(ctx context.Context) CngwRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteOutput)
}

// CngwRouteArrayInput is an input type that accepts CngwRouteArray and CngwRouteArrayOutput values.
// You can construct a concrete instance of `CngwRouteArrayInput` via:
//
//	CngwRouteArray{ CngwRouteArgs{...} }
type CngwRouteArrayInput interface {
	pulumi.Input

	ToCngwRouteArrayOutput() CngwRouteArrayOutput
	ToCngwRouteArrayOutputWithContext(context.Context) CngwRouteArrayOutput
}

type CngwRouteArray []CngwRouteInput

func (CngwRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwRoute)(nil)).Elem()
}

func (i CngwRouteArray) ToCngwRouteArrayOutput() CngwRouteArrayOutput {
	return i.ToCngwRouteArrayOutputWithContext(context.Background())
}

func (i CngwRouteArray) ToCngwRouteArrayOutputWithContext(ctx context.Context) CngwRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteArrayOutput)
}

// CngwRouteMapInput is an input type that accepts CngwRouteMap and CngwRouteMapOutput values.
// You can construct a concrete instance of `CngwRouteMapInput` via:
//
//	CngwRouteMap{ "key": CngwRouteArgs{...} }
type CngwRouteMapInput interface {
	pulumi.Input

	ToCngwRouteMapOutput() CngwRouteMapOutput
	ToCngwRouteMapOutputWithContext(context.Context) CngwRouteMapOutput
}

type CngwRouteMap map[string]CngwRouteInput

func (CngwRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwRoute)(nil)).Elem()
}

func (i CngwRouteMap) ToCngwRouteMapOutput() CngwRouteMapOutput {
	return i.ToCngwRouteMapOutputWithContext(context.Background())
}

func (i CngwRouteMap) ToCngwRouteMapOutputWithContext(ctx context.Context) CngwRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwRouteMapOutput)
}

type CngwRouteOutput struct{ *pulumi.OutputState }

func (CngwRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwRoute)(nil)).Elem()
}

func (o CngwRouteOutput) ToCngwRouteOutput() CngwRouteOutput {
	return o
}

func (o CngwRouteOutput) ToCngwRouteOutputWithContext(ctx context.Context) CngwRouteOutput {
	return o
}

// destination port for Layer 4 matching.
func (o CngwRouteOutput) DestinationPorts() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.IntArrayOutput { return v.DestinationPorts }).(pulumi.IntArrayOutput)
}

// This field has been deprecated and will be deleted in subsequent versions. whether to enable forced HTTPS, no longer use.
//
// Deprecated: This field has been deprecated and will be deleted in subsequent versions.
func (o CngwRouteOutput) ForceHttps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.BoolPtrOutput { return v.ForceHttps }).(pulumi.BoolPtrOutput)
}

// gateway ID.
func (o CngwRouteOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// the headers of route.
func (o CngwRouteOutput) Headers() CngwRouteHeaderArrayOutput {
	return o.ApplyT(func(v *CngwRoute) CngwRouteHeaderArrayOutput { return v.Headers }).(CngwRouteHeaderArrayOutput)
}

// host list.
func (o CngwRouteOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringArrayOutput { return v.Hosts }).(pulumi.StringArrayOutput)
}

// https redirection status code.
func (o CngwRouteOutput) HttpsRedirectStatusCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.IntPtrOutput { return v.HttpsRedirectStatusCode }).(pulumi.IntPtrOutput)
}

// route methods. Reference value:`GET`,`POST`,`DELETE`,`PUT`,`OPTIONS`,`PATCH`,`HEAD`,`ANY`,`TRACE`,`COPY`,`MOVE`,`PROPFIND`,`PROPPATCH`,`MKCOL`,`LOCK`,`UNLOCK`.
func (o CngwRouteOutput) Methods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringArrayOutput { return v.Methods }).(pulumi.StringArrayOutput)
}

// path list.
func (o CngwRouteOutput) Paths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringArrayOutput { return v.Paths }).(pulumi.StringArrayOutput)
}

// whether to keep the host when forwarding to the backend.
func (o CngwRouteOutput) PreserveHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.BoolPtrOutput { return v.PreserveHost }).(pulumi.BoolPtrOutput)
}

// the protocol list of route.Reference value:`https`,`http`.
func (o CngwRouteOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// the id of the route, unique in the instance.
func (o CngwRouteOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// the name of the route, unique in the instance.
func (o CngwRouteOutput) RouteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringPtrOutput { return v.RouteName }).(pulumi.StringPtrOutput)
}

// ID of the service which the route belongs to.
func (o CngwRouteOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// whether to strip path when forwarding to the backend.
func (o CngwRouteOutput) StripPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CngwRoute) pulumi.BoolPtrOutput { return v.StripPath }).(pulumi.BoolPtrOutput)
}

type CngwRouteArrayOutput struct{ *pulumi.OutputState }

func (CngwRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwRoute)(nil)).Elem()
}

func (o CngwRouteArrayOutput) ToCngwRouteArrayOutput() CngwRouteArrayOutput {
	return o
}

func (o CngwRouteArrayOutput) ToCngwRouteArrayOutputWithContext(ctx context.Context) CngwRouteArrayOutput {
	return o
}

func (o CngwRouteArrayOutput) Index(i pulumi.IntInput) CngwRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwRoute {
		return vs[0].([]*CngwRoute)[vs[1].(int)]
	}).(CngwRouteOutput)
}

type CngwRouteMapOutput struct{ *pulumi.OutputState }

func (CngwRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwRoute)(nil)).Elem()
}

func (o CngwRouteMapOutput) ToCngwRouteMapOutput() CngwRouteMapOutput {
	return o
}

func (o CngwRouteMapOutput) ToCngwRouteMapOutputWithContext(ctx context.Context) CngwRouteMapOutput {
	return o
}

func (o CngwRouteMapOutput) MapIndex(k pulumi.StringInput) CngwRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwRoute {
		return vs[0].(map[string]*CngwRoute)[vs[1].(string)]
	}).(CngwRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteInput)(nil)).Elem(), &CngwRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteArrayInput)(nil)).Elem(), CngwRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwRouteMapInput)(nil)).Elem(), CngwRouteMap{})
	pulumi.RegisterOutputType(CngwRouteOutput{})
	pulumi.RegisterOutputType(CngwRouteArrayOutput{})
	pulumi.RegisterOutputType(CngwRouteMapOutput{})
}
