// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tse cngwServiceRateLimit
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			cngwGateway, err := Tse.NewCngwGateway(ctx, "cngwGateway", &Tse.CngwGatewayArgs{
//				Description:             pulumi.String("terraform test1"),
//				EnableCls:               pulumi.Bool(true),
//				EngineRegion:            pulumi.String("ap-guangzhou"),
//				FeatureVersion:          pulumi.String("STANDARD"),
//				GatewayVersion:          pulumi.String("2.5.1"),
//				IngressClassName:        pulumi.String("tse-nginx-ingress"),
//				InternetMaxBandwidthOut: pulumi.Int(0),
//				TradeType:               pulumi.Int(0),
//				Type:                    pulumi.String("kong"),
//				NodeConfig: &tse.CngwGatewayNodeConfigArgs{
//					Number:        pulumi.Int(2),
//					Specification: pulumi.String("1c2g"),
//				},
//				VpcConfig: &tse.CngwGatewayVpcConfigArgs{
//					SubnetId: subnet.ID(),
//					VpcId:    vpc.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tse.NewCngwService(ctx, "cngwService", &Tse.CngwServiceArgs{
//				GatewayId:    cngwGateway.ID(),
//				Path:         pulumi.String("/test"),
//				Protocol:     pulumi.String("http"),
//				Retries:      pulumi.Int(5),
//				Timeout:      pulumi.Int(60000),
//				UpstreamType: pulumi.String("HostIP"),
//				UpstreamInfo: &tse.CngwServiceUpstreamInfoArgs{
//					Algorithm:          pulumi.String("round-robin"),
//					AutoScalingCvmPort: pulumi.Int(0),
//					Host:               pulumi.String("arunma.cn"),
//					Port:               pulumi.Int(8012),
//					SlowStart:          pulumi.Int(0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tse.NewCngwServiceRateLimit(ctx, "cngwServiceRateLimit", &Tse.CngwServiceRateLimitArgs{
//				GatewayId: cngwGateway.ID(),
//				LimitDetail: &tse.CngwServiceRateLimitLimitDetailArgs{
//					Enabled:           pulumi.Bool(true),
//					Header:            pulumi.String("req"),
//					HideClientHeaders: pulumi.Bool(true),
//					IsDelay:           pulumi.Bool(true),
//					LimitBy:           pulumi.String("header"),
//					LineUpTime:        pulumi.Int(15),
//					Policy:            pulumi.String("redis"),
//					ResponseType:      pulumi.String("default"),
//					QpsThresholds: tse.CngwServiceRateLimitLimitDetailQpsThresholdArray{
//						&tse.CngwServiceRateLimitLimitDetailQpsThresholdArgs{
//							Max:  pulumi.Int(100),
//							Unit: pulumi.String("hour"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tse cngw_service_rate_limit can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tse/cngwServiceRateLimit:CngwServiceRateLimit cngw_service_rate_limit gatewayId#name
//
// ```
type CngwServiceRateLimit struct {
	pulumi.CustomResourceState

	// gateway ID.
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail CngwServiceRateLimitLimitDetailOutput `pulumi:"limitDetail"`
	// service name or service ID.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCngwServiceRateLimit registers a new resource with the given unique name, arguments, and options.
func NewCngwServiceRateLimit(ctx *pulumi.Context,
	name string, args *CngwServiceRateLimitArgs, opts ...pulumi.ResourceOption) (*CngwServiceRateLimit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.LimitDetail == nil {
		return nil, errors.New("invalid value for required argument 'LimitDetail'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CngwServiceRateLimit
	err := ctx.RegisterResource("tencentcloud:Tse/cngwServiceRateLimit:CngwServiceRateLimit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwServiceRateLimit gets an existing CngwServiceRateLimit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwServiceRateLimit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwServiceRateLimitState, opts ...pulumi.ResourceOption) (*CngwServiceRateLimit, error) {
	var resource CngwServiceRateLimit
	err := ctx.ReadResource("tencentcloud:Tse/cngwServiceRateLimit:CngwServiceRateLimit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwServiceRateLimit resources.
type cngwServiceRateLimitState struct {
	// gateway ID.
	GatewayId *string `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail *CngwServiceRateLimitLimitDetail `pulumi:"limitDetail"`
	// service name or service ID.
	Name *string `pulumi:"name"`
}

type CngwServiceRateLimitState struct {
	// gateway ID.
	GatewayId pulumi.StringPtrInput
	// rate limit configuration.
	LimitDetail CngwServiceRateLimitLimitDetailPtrInput
	// service name or service ID.
	Name pulumi.StringPtrInput
}

func (CngwServiceRateLimitState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwServiceRateLimitState)(nil)).Elem()
}

type cngwServiceRateLimitArgs struct {
	// gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// rate limit configuration.
	LimitDetail CngwServiceRateLimitLimitDetail `pulumi:"limitDetail"`
	// service name or service ID.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CngwServiceRateLimit resource.
type CngwServiceRateLimitArgs struct {
	// gateway ID.
	GatewayId pulumi.StringInput
	// rate limit configuration.
	LimitDetail CngwServiceRateLimitLimitDetailInput
	// service name or service ID.
	Name pulumi.StringPtrInput
}

func (CngwServiceRateLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwServiceRateLimitArgs)(nil)).Elem()
}

type CngwServiceRateLimitInput interface {
	pulumi.Input

	ToCngwServiceRateLimitOutput() CngwServiceRateLimitOutput
	ToCngwServiceRateLimitOutputWithContext(ctx context.Context) CngwServiceRateLimitOutput
}

func (*CngwServiceRateLimit) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwServiceRateLimit)(nil)).Elem()
}

func (i *CngwServiceRateLimit) ToCngwServiceRateLimitOutput() CngwServiceRateLimitOutput {
	return i.ToCngwServiceRateLimitOutputWithContext(context.Background())
}

func (i *CngwServiceRateLimit) ToCngwServiceRateLimitOutputWithContext(ctx context.Context) CngwServiceRateLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwServiceRateLimitOutput)
}

// CngwServiceRateLimitArrayInput is an input type that accepts CngwServiceRateLimitArray and CngwServiceRateLimitArrayOutput values.
// You can construct a concrete instance of `CngwServiceRateLimitArrayInput` via:
//
//	CngwServiceRateLimitArray{ CngwServiceRateLimitArgs{...} }
type CngwServiceRateLimitArrayInput interface {
	pulumi.Input

	ToCngwServiceRateLimitArrayOutput() CngwServiceRateLimitArrayOutput
	ToCngwServiceRateLimitArrayOutputWithContext(context.Context) CngwServiceRateLimitArrayOutput
}

type CngwServiceRateLimitArray []CngwServiceRateLimitInput

func (CngwServiceRateLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwServiceRateLimit)(nil)).Elem()
}

func (i CngwServiceRateLimitArray) ToCngwServiceRateLimitArrayOutput() CngwServiceRateLimitArrayOutput {
	return i.ToCngwServiceRateLimitArrayOutputWithContext(context.Background())
}

func (i CngwServiceRateLimitArray) ToCngwServiceRateLimitArrayOutputWithContext(ctx context.Context) CngwServiceRateLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwServiceRateLimitArrayOutput)
}

// CngwServiceRateLimitMapInput is an input type that accepts CngwServiceRateLimitMap and CngwServiceRateLimitMapOutput values.
// You can construct a concrete instance of `CngwServiceRateLimitMapInput` via:
//
//	CngwServiceRateLimitMap{ "key": CngwServiceRateLimitArgs{...} }
type CngwServiceRateLimitMapInput interface {
	pulumi.Input

	ToCngwServiceRateLimitMapOutput() CngwServiceRateLimitMapOutput
	ToCngwServiceRateLimitMapOutputWithContext(context.Context) CngwServiceRateLimitMapOutput
}

type CngwServiceRateLimitMap map[string]CngwServiceRateLimitInput

func (CngwServiceRateLimitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwServiceRateLimit)(nil)).Elem()
}

func (i CngwServiceRateLimitMap) ToCngwServiceRateLimitMapOutput() CngwServiceRateLimitMapOutput {
	return i.ToCngwServiceRateLimitMapOutputWithContext(context.Background())
}

func (i CngwServiceRateLimitMap) ToCngwServiceRateLimitMapOutputWithContext(ctx context.Context) CngwServiceRateLimitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwServiceRateLimitMapOutput)
}

type CngwServiceRateLimitOutput struct{ *pulumi.OutputState }

func (CngwServiceRateLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwServiceRateLimit)(nil)).Elem()
}

func (o CngwServiceRateLimitOutput) ToCngwServiceRateLimitOutput() CngwServiceRateLimitOutput {
	return o
}

func (o CngwServiceRateLimitOutput) ToCngwServiceRateLimitOutputWithContext(ctx context.Context) CngwServiceRateLimitOutput {
	return o
}

// gateway ID.
func (o CngwServiceRateLimitOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwServiceRateLimit) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// rate limit configuration.
func (o CngwServiceRateLimitOutput) LimitDetail() CngwServiceRateLimitLimitDetailOutput {
	return o.ApplyT(func(v *CngwServiceRateLimit) CngwServiceRateLimitLimitDetailOutput { return v.LimitDetail }).(CngwServiceRateLimitLimitDetailOutput)
}

// service name or service ID.
func (o CngwServiceRateLimitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwServiceRateLimit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CngwServiceRateLimitArrayOutput struct{ *pulumi.OutputState }

func (CngwServiceRateLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwServiceRateLimit)(nil)).Elem()
}

func (o CngwServiceRateLimitArrayOutput) ToCngwServiceRateLimitArrayOutput() CngwServiceRateLimitArrayOutput {
	return o
}

func (o CngwServiceRateLimitArrayOutput) ToCngwServiceRateLimitArrayOutputWithContext(ctx context.Context) CngwServiceRateLimitArrayOutput {
	return o
}

func (o CngwServiceRateLimitArrayOutput) Index(i pulumi.IntInput) CngwServiceRateLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwServiceRateLimit {
		return vs[0].([]*CngwServiceRateLimit)[vs[1].(int)]
	}).(CngwServiceRateLimitOutput)
}

type CngwServiceRateLimitMapOutput struct{ *pulumi.OutputState }

func (CngwServiceRateLimitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwServiceRateLimit)(nil)).Elem()
}

func (o CngwServiceRateLimitMapOutput) ToCngwServiceRateLimitMapOutput() CngwServiceRateLimitMapOutput {
	return o
}

func (o CngwServiceRateLimitMapOutput) ToCngwServiceRateLimitMapOutputWithContext(ctx context.Context) CngwServiceRateLimitMapOutput {
	return o
}

func (o CngwServiceRateLimitMapOutput) MapIndex(k pulumi.StringInput) CngwServiceRateLimitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwServiceRateLimit {
		return vs[0].(map[string]*CngwServiceRateLimit)[vs[1].(string)]
	}).(CngwServiceRateLimitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwServiceRateLimitInput)(nil)).Elem(), &CngwServiceRateLimit{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwServiceRateLimitArrayInput)(nil)).Elem(), CngwServiceRateLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwServiceRateLimitMapInput)(nil)).Elem(), CngwServiceRateLimitMap{})
	pulumi.RegisterOutputType(CngwServiceRateLimitOutput{})
	pulumi.RegisterOutputType(CngwServiceRateLimitArrayOutput{})
	pulumi.RegisterOutputType(CngwServiceRateLimitMapOutput{})
}
