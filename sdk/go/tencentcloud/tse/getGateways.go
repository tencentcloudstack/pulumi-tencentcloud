// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tse gateways
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tse.GetGateways(ctx, &tse.GetGatewaysArgs{
//				Filters: []tse.GetGatewaysFilter{
//					tse.GetGatewaysFilter{
//						Name: "GatewayId",
//						Values: []string{
//							"gateway-ddbb709b",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGateways(ctx *pulumi.Context, args *LookupGatewaysArgs, opts ...pulumi.InvokeOption) (*LookupGatewaysResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupGatewaysResult
	err := ctx.Invoke("tencentcloud:Tse/getGateways:getGateways", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGateways.
type LookupGatewaysArgs struct {
	// filter conditions, valid value:Type,Name,GatewayId,Tag,TradeType,InternetPaymode,Region.
	Filters []GetGatewaysFilter `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getGateways.
type LookupGatewaysResult struct {
	Filters []GetGatewaysFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// gateways information.
	Results []GetGatewaysResult `pulumi:"results"`
}

func LookupGatewaysOutput(ctx *pulumi.Context, args LookupGatewaysOutputArgs, opts ...pulumi.InvokeOption) LookupGatewaysResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGatewaysResult, error) {
			args := v.(LookupGatewaysArgs)
			r, err := LookupGateways(ctx, &args, opts...)
			var s LookupGatewaysResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGatewaysResultOutput)
}

// A collection of arguments for invoking getGateways.
type LookupGatewaysOutputArgs struct {
	// filter conditions, valid value:Type,Name,GatewayId,Tag,TradeType,InternetPaymode,Region.
	Filters GetGatewaysFilterArrayInput `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupGatewaysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGatewaysArgs)(nil)).Elem()
}

// A collection of values returned by getGateways.
type LookupGatewaysResultOutput struct{ *pulumi.OutputState }

func (LookupGatewaysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGatewaysResult)(nil)).Elem()
}

func (o LookupGatewaysResultOutput) ToLookupGatewaysResultOutput() LookupGatewaysResultOutput {
	return o
}

func (o LookupGatewaysResultOutput) ToLookupGatewaysResultOutputWithContext(ctx context.Context) LookupGatewaysResultOutput {
	return o
}

func (o LookupGatewaysResultOutput) Filters() GetGatewaysFilterArrayOutput {
	return o.ApplyT(func(v LookupGatewaysResult) []GetGatewaysFilter { return v.Filters }).(GetGatewaysFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGatewaysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGatewaysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupGatewaysResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGatewaysResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// gateways information.
func (o LookupGatewaysResultOutput) Results() GetGatewaysResultArrayOutput {
	return o.ApplyT(func(v LookupGatewaysResult) []GetGatewaysResult { return v.Results }).(GetGatewaysResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGatewaysResultOutput{})
}
