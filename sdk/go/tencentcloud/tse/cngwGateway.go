// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tse cngwGateway
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tse"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tse.NewCngwGateway(ctx, "cngwGateway", &Tse.CngwGatewayArgs{
//				Description:             pulumi.String("terraform test1"),
//				EnableCls:               pulumi.Bool(true),
//				EngineRegion:            pulumi.String("ap-guangzhou"),
//				FeatureVersion:          pulumi.String("STANDARD"),
//				GatewayVersion:          pulumi.String("2.5.1"),
//				IngressClassName:        pulumi.String("tse-nginx-ingress"),
//				InternetMaxBandwidthOut: pulumi.Int(0),
//				TradeType:               pulumi.Int(0),
//				Type:                    pulumi.String("kong"),
//				NodeConfig: &tse.CngwGatewayNodeConfigArgs{
//					Number:        pulumi.Int(2),
//					Specification: pulumi.String("1c2g"),
//				},
//				VpcConfig: &tse.CngwGatewayVpcConfigArgs{
//					SubnetId: subnet.ID(),
//					VpcId:    vpc.ID(),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CngwGateway struct {
	pulumi.CustomResourceState

	// description information, up to 120 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// whether to enable CLS log. Default value: fasle.
	EnableCls pulumi.BoolPtrOutput `pulumi:"enableCls"`
	// engine region of gateway.
	EngineRegion pulumi.StringOutput `pulumi:"engineRegion"`
	// product version. Reference value: `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
	FeatureVersion pulumi.StringOutput `pulumi:"featureVersion"`
	// gateway vwersion. Reference value: `2.4.1`, `2.5.1`.
	GatewayVersion pulumi.StringOutput `pulumi:"gatewayVersion"`
	// ingress class name.
	IngressClassName pulumi.StringOutput `pulumi:"ingressClassName"`
	// Port information that the instance listens to.
	InstancePorts CngwGatewayInstancePortArrayOutput `pulumi:"instancePorts"`
	// internet configration.
	InternetConfig CngwGatewayInternetConfigPtrOutput `pulumi:"internetConfig"`
	// public network outbound traffic bandwidth,[1,2048]Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrOutput `pulumi:"internetMaxBandwidthOut"`
	// gateway name, supports up to 60 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// gateway node configration.
	NodeConfig CngwGatewayNodeConfigOutput `pulumi:"nodeConfig"`
	// Public IP address list.
	PublicIpAddresses pulumi.StringArrayOutput `pulumi:"publicIpAddresses"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// trade type. Reference value: `0`: postpaid, `1`:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType pulumi.IntPtrOutput `pulumi:"tradeType"`
	// gateway type,currently only supports kong.
	Type pulumi.StringOutput `pulumi:"type"`
	// vpc information.
	VpcConfig CngwGatewayVpcConfigOutput `pulumi:"vpcConfig"`
}

// NewCngwGateway registers a new resource with the given unique name, arguments, and options.
func NewCngwGateway(ctx *pulumi.Context,
	name string, args *CngwGatewayArgs, opts ...pulumi.ResourceOption) (*CngwGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayVersion == nil {
		return nil, errors.New("invalid value for required argument 'GatewayVersion'")
	}
	if args.NodeConfig == nil {
		return nil, errors.New("invalid value for required argument 'NodeConfig'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.VpcConfig == nil {
		return nil, errors.New("invalid value for required argument 'VpcConfig'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CngwGateway
	err := ctx.RegisterResource("tencentcloud:Tse/cngwGateway:CngwGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCngwGateway gets an existing CngwGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCngwGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CngwGatewayState, opts ...pulumi.ResourceOption) (*CngwGateway, error) {
	var resource CngwGateway
	err := ctx.ReadResource("tencentcloud:Tse/cngwGateway:CngwGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CngwGateway resources.
type cngwGatewayState struct {
	// description information, up to 120 characters.
	Description *string `pulumi:"description"`
	// whether to enable CLS log. Default value: fasle.
	EnableCls *bool `pulumi:"enableCls"`
	// engine region of gateway.
	EngineRegion *string `pulumi:"engineRegion"`
	// product version. Reference value: `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
	FeatureVersion *string `pulumi:"featureVersion"`
	// gateway vwersion. Reference value: `2.4.1`, `2.5.1`.
	GatewayVersion *string `pulumi:"gatewayVersion"`
	// ingress class name.
	IngressClassName *string `pulumi:"ingressClassName"`
	// Port information that the instance listens to.
	InstancePorts []CngwGatewayInstancePort `pulumi:"instancePorts"`
	// internet configration.
	InternetConfig *CngwGatewayInternetConfig `pulumi:"internetConfig"`
	// public network outbound traffic bandwidth,[1,2048]Mbps.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// gateway name, supports up to 60 characters.
	Name *string `pulumi:"name"`
	// gateway node configration.
	NodeConfig *CngwGatewayNodeConfig `pulumi:"nodeConfig"`
	// Public IP address list.
	PublicIpAddresses []string `pulumi:"publicIpAddresses"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// trade type. Reference value: `0`: postpaid, `1`:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType *int `pulumi:"tradeType"`
	// gateway type,currently only supports kong.
	Type *string `pulumi:"type"`
	// vpc information.
	VpcConfig *CngwGatewayVpcConfig `pulumi:"vpcConfig"`
}

type CngwGatewayState struct {
	// description information, up to 120 characters.
	Description pulumi.StringPtrInput
	// whether to enable CLS log. Default value: fasle.
	EnableCls pulumi.BoolPtrInput
	// engine region of gateway.
	EngineRegion pulumi.StringPtrInput
	// product version. Reference value: `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
	FeatureVersion pulumi.StringPtrInput
	// gateway vwersion. Reference value: `2.4.1`, `2.5.1`.
	GatewayVersion pulumi.StringPtrInput
	// ingress class name.
	IngressClassName pulumi.StringPtrInput
	// Port information that the instance listens to.
	InstancePorts CngwGatewayInstancePortArrayInput
	// internet configration.
	InternetConfig CngwGatewayInternetConfigPtrInput
	// public network outbound traffic bandwidth,[1,2048]Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// gateway name, supports up to 60 characters.
	Name pulumi.StringPtrInput
	// gateway node configration.
	NodeConfig CngwGatewayNodeConfigPtrInput
	// Public IP address list.
	PublicIpAddresses pulumi.StringArrayInput
	// Tag description list.
	Tags pulumi.MapInput
	// trade type. Reference value: `0`: postpaid, `1`:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType pulumi.IntPtrInput
	// gateway type,currently only supports kong.
	Type pulumi.StringPtrInput
	// vpc information.
	VpcConfig CngwGatewayVpcConfigPtrInput
}

func (CngwGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwGatewayState)(nil)).Elem()
}

type cngwGatewayArgs struct {
	// description information, up to 120 characters.
	Description *string `pulumi:"description"`
	// whether to enable CLS log. Default value: fasle.
	EnableCls *bool `pulumi:"enableCls"`
	// engine region of gateway.
	EngineRegion *string `pulumi:"engineRegion"`
	// product version. Reference value: `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
	FeatureVersion *string `pulumi:"featureVersion"`
	// gateway vwersion. Reference value: `2.4.1`, `2.5.1`.
	GatewayVersion string `pulumi:"gatewayVersion"`
	// ingress class name.
	IngressClassName *string `pulumi:"ingressClassName"`
	// internet configration.
	InternetConfig *CngwGatewayInternetConfig `pulumi:"internetConfig"`
	// public network outbound traffic bandwidth,[1,2048]Mbps.
	InternetMaxBandwidthOut *int `pulumi:"internetMaxBandwidthOut"`
	// gateway name, supports up to 60 characters.
	Name *string `pulumi:"name"`
	// gateway node configration.
	NodeConfig CngwGatewayNodeConfig `pulumi:"nodeConfig"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// trade type. Reference value: `0`: postpaid, `1`:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType *int `pulumi:"tradeType"`
	// gateway type,currently only supports kong.
	Type string `pulumi:"type"`
	// vpc information.
	VpcConfig CngwGatewayVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a CngwGateway resource.
type CngwGatewayArgs struct {
	// description information, up to 120 characters.
	Description pulumi.StringPtrInput
	// whether to enable CLS log. Default value: fasle.
	EnableCls pulumi.BoolPtrInput
	// engine region of gateway.
	EngineRegion pulumi.StringPtrInput
	// product version. Reference value: `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
	FeatureVersion pulumi.StringPtrInput
	// gateway vwersion. Reference value: `2.4.1`, `2.5.1`.
	GatewayVersion pulumi.StringInput
	// ingress class name.
	IngressClassName pulumi.StringPtrInput
	// internet configration.
	InternetConfig CngwGatewayInternetConfigPtrInput
	// public network outbound traffic bandwidth,[1,2048]Mbps.
	InternetMaxBandwidthOut pulumi.IntPtrInput
	// gateway name, supports up to 60 characters.
	Name pulumi.StringPtrInput
	// gateway node configration.
	NodeConfig CngwGatewayNodeConfigInput
	// Tag description list.
	Tags pulumi.MapInput
	// trade type. Reference value: `0`: postpaid, `1`:Prepaid (Interface does not support the creation of prepaid instances yet).
	TradeType pulumi.IntPtrInput
	// gateway type,currently only supports kong.
	Type pulumi.StringInput
	// vpc information.
	VpcConfig CngwGatewayVpcConfigInput
}

func (CngwGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cngwGatewayArgs)(nil)).Elem()
}

type CngwGatewayInput interface {
	pulumi.Input

	ToCngwGatewayOutput() CngwGatewayOutput
	ToCngwGatewayOutputWithContext(ctx context.Context) CngwGatewayOutput
}

func (*CngwGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwGateway)(nil)).Elem()
}

func (i *CngwGateway) ToCngwGatewayOutput() CngwGatewayOutput {
	return i.ToCngwGatewayOutputWithContext(context.Background())
}

func (i *CngwGateway) ToCngwGatewayOutputWithContext(ctx context.Context) CngwGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwGatewayOutput)
}

// CngwGatewayArrayInput is an input type that accepts CngwGatewayArray and CngwGatewayArrayOutput values.
// You can construct a concrete instance of `CngwGatewayArrayInput` via:
//
//	CngwGatewayArray{ CngwGatewayArgs{...} }
type CngwGatewayArrayInput interface {
	pulumi.Input

	ToCngwGatewayArrayOutput() CngwGatewayArrayOutput
	ToCngwGatewayArrayOutputWithContext(context.Context) CngwGatewayArrayOutput
}

type CngwGatewayArray []CngwGatewayInput

func (CngwGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwGateway)(nil)).Elem()
}

func (i CngwGatewayArray) ToCngwGatewayArrayOutput() CngwGatewayArrayOutput {
	return i.ToCngwGatewayArrayOutputWithContext(context.Background())
}

func (i CngwGatewayArray) ToCngwGatewayArrayOutputWithContext(ctx context.Context) CngwGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwGatewayArrayOutput)
}

// CngwGatewayMapInput is an input type that accepts CngwGatewayMap and CngwGatewayMapOutput values.
// You can construct a concrete instance of `CngwGatewayMapInput` via:
//
//	CngwGatewayMap{ "key": CngwGatewayArgs{...} }
type CngwGatewayMapInput interface {
	pulumi.Input

	ToCngwGatewayMapOutput() CngwGatewayMapOutput
	ToCngwGatewayMapOutputWithContext(context.Context) CngwGatewayMapOutput
}

type CngwGatewayMap map[string]CngwGatewayInput

func (CngwGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwGateway)(nil)).Elem()
}

func (i CngwGatewayMap) ToCngwGatewayMapOutput() CngwGatewayMapOutput {
	return i.ToCngwGatewayMapOutputWithContext(context.Background())
}

func (i CngwGatewayMap) ToCngwGatewayMapOutputWithContext(ctx context.Context) CngwGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CngwGatewayMapOutput)
}

type CngwGatewayOutput struct{ *pulumi.OutputState }

func (CngwGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CngwGateway)(nil)).Elem()
}

func (o CngwGatewayOutput) ToCngwGatewayOutput() CngwGatewayOutput {
	return o
}

func (o CngwGatewayOutput) ToCngwGatewayOutputWithContext(ctx context.Context) CngwGatewayOutput {
	return o
}

// description information, up to 120 characters.
func (o CngwGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// whether to enable CLS log. Default value: fasle.
func (o CngwGatewayOutput) EnableCls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.BoolPtrOutput { return v.EnableCls }).(pulumi.BoolPtrOutput)
}

// engine region of gateway.
func (o CngwGatewayOutput) EngineRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringOutput { return v.EngineRegion }).(pulumi.StringOutput)
}

// product version. Reference value: `TRIAL`, `STANDARD`(default value), `PROFESSIONAL`.
func (o CngwGatewayOutput) FeatureVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringOutput { return v.FeatureVersion }).(pulumi.StringOutput)
}

// gateway vwersion. Reference value: `2.4.1`, `2.5.1`.
func (o CngwGatewayOutput) GatewayVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringOutput { return v.GatewayVersion }).(pulumi.StringOutput)
}

// ingress class name.
func (o CngwGatewayOutput) IngressClassName() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringOutput { return v.IngressClassName }).(pulumi.StringOutput)
}

// Port information that the instance listens to.
func (o CngwGatewayOutput) InstancePorts() CngwGatewayInstancePortArrayOutput {
	return o.ApplyT(func(v *CngwGateway) CngwGatewayInstancePortArrayOutput { return v.InstancePorts }).(CngwGatewayInstancePortArrayOutput)
}

// internet configration.
func (o CngwGatewayOutput) InternetConfig() CngwGatewayInternetConfigPtrOutput {
	return o.ApplyT(func(v *CngwGateway) CngwGatewayInternetConfigPtrOutput { return v.InternetConfig }).(CngwGatewayInternetConfigPtrOutput)
}

// public network outbound traffic bandwidth,[1,2048]Mbps.
func (o CngwGatewayOutput) InternetMaxBandwidthOut() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.IntPtrOutput { return v.InternetMaxBandwidthOut }).(pulumi.IntPtrOutput)
}

// gateway name, supports up to 60 characters.
func (o CngwGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// gateway node configration.
func (o CngwGatewayOutput) NodeConfig() CngwGatewayNodeConfigOutput {
	return o.ApplyT(func(v *CngwGateway) CngwGatewayNodeConfigOutput { return v.NodeConfig }).(CngwGatewayNodeConfigOutput)
}

// Public IP address list.
func (o CngwGatewayOutput) PublicIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringArrayOutput { return v.PublicIpAddresses }).(pulumi.StringArrayOutput)
}

// Tag description list.
func (o CngwGatewayOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// trade type. Reference value: `0`: postpaid, `1`:Prepaid (Interface does not support the creation of prepaid instances yet).
func (o CngwGatewayOutput) TradeType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.IntPtrOutput { return v.TradeType }).(pulumi.IntPtrOutput)
}

// gateway type,currently only supports kong.
func (o CngwGatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CngwGateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// vpc information.
func (o CngwGatewayOutput) VpcConfig() CngwGatewayVpcConfigOutput {
	return o.ApplyT(func(v *CngwGateway) CngwGatewayVpcConfigOutput { return v.VpcConfig }).(CngwGatewayVpcConfigOutput)
}

type CngwGatewayArrayOutput struct{ *pulumi.OutputState }

func (CngwGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CngwGateway)(nil)).Elem()
}

func (o CngwGatewayArrayOutput) ToCngwGatewayArrayOutput() CngwGatewayArrayOutput {
	return o
}

func (o CngwGatewayArrayOutput) ToCngwGatewayArrayOutputWithContext(ctx context.Context) CngwGatewayArrayOutput {
	return o
}

func (o CngwGatewayArrayOutput) Index(i pulumi.IntInput) CngwGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CngwGateway {
		return vs[0].([]*CngwGateway)[vs[1].(int)]
	}).(CngwGatewayOutput)
}

type CngwGatewayMapOutput struct{ *pulumi.OutputState }

func (CngwGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CngwGateway)(nil)).Elem()
}

func (o CngwGatewayMapOutput) ToCngwGatewayMapOutput() CngwGatewayMapOutput {
	return o
}

func (o CngwGatewayMapOutput) ToCngwGatewayMapOutputWithContext(ctx context.Context) CngwGatewayMapOutput {
	return o
}

func (o CngwGatewayMapOutput) MapIndex(k pulumi.StringInput) CngwGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CngwGateway {
		return vs[0].(map[string]*CngwGateway)[vs[1].(string)]
	}).(CngwGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CngwGatewayInput)(nil)).Elem(), &CngwGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwGatewayArrayInput)(nil)).Elem(), CngwGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CngwGatewayMapInput)(nil)).Elem(), CngwGatewayMap{})
	pulumi.RegisterOutputType(CngwGatewayOutput{})
	pulumi.RegisterOutputType(CngwGatewayArrayOutput{})
	pulumi.RegisterOutputType(CngwGatewayMapOutput{})
}
