// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse stopInstance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewStopInstance(ctx, "stopInstance", &Lighthouse.StopInstanceArgs{
//				InstanceId: pulumi.String("lhins-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StopInstance struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewStopInstance registers a new resource with the given unique name, arguments, and options.
func NewStopInstance(ctx *pulumi.Context,
	name string, args *StopInstanceArgs, opts ...pulumi.ResourceOption) (*StopInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StopInstance
	err := ctx.RegisterResource("tencentcloud:Lighthouse/stopInstance:StopInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStopInstance gets an existing StopInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStopInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StopInstanceState, opts ...pulumi.ResourceOption) (*StopInstance, error) {
	var resource StopInstance
	err := ctx.ReadResource("tencentcloud:Lighthouse/stopInstance:StopInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StopInstance resources.
type stopInstanceState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type StopInstanceState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (StopInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*stopInstanceState)(nil)).Elem()
}

type stopInstanceArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a StopInstance resource.
type StopInstanceArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (StopInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*stopInstanceArgs)(nil)).Elem()
}

type StopInstanceInput interface {
	pulumi.Input

	ToStopInstanceOutput() StopInstanceOutput
	ToStopInstanceOutputWithContext(ctx context.Context) StopInstanceOutput
}

func (*StopInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**StopInstance)(nil)).Elem()
}

func (i *StopInstance) ToStopInstanceOutput() StopInstanceOutput {
	return i.ToStopInstanceOutputWithContext(context.Background())
}

func (i *StopInstance) ToStopInstanceOutputWithContext(ctx context.Context) StopInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StopInstanceOutput)
}

// StopInstanceArrayInput is an input type that accepts StopInstanceArray and StopInstanceArrayOutput values.
// You can construct a concrete instance of `StopInstanceArrayInput` via:
//
//	StopInstanceArray{ StopInstanceArgs{...} }
type StopInstanceArrayInput interface {
	pulumi.Input

	ToStopInstanceArrayOutput() StopInstanceArrayOutput
	ToStopInstanceArrayOutputWithContext(context.Context) StopInstanceArrayOutput
}

type StopInstanceArray []StopInstanceInput

func (StopInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StopInstance)(nil)).Elem()
}

func (i StopInstanceArray) ToStopInstanceArrayOutput() StopInstanceArrayOutput {
	return i.ToStopInstanceArrayOutputWithContext(context.Background())
}

func (i StopInstanceArray) ToStopInstanceArrayOutputWithContext(ctx context.Context) StopInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StopInstanceArrayOutput)
}

// StopInstanceMapInput is an input type that accepts StopInstanceMap and StopInstanceMapOutput values.
// You can construct a concrete instance of `StopInstanceMapInput` via:
//
//	StopInstanceMap{ "key": StopInstanceArgs{...} }
type StopInstanceMapInput interface {
	pulumi.Input

	ToStopInstanceMapOutput() StopInstanceMapOutput
	ToStopInstanceMapOutputWithContext(context.Context) StopInstanceMapOutput
}

type StopInstanceMap map[string]StopInstanceInput

func (StopInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StopInstance)(nil)).Elem()
}

func (i StopInstanceMap) ToStopInstanceMapOutput() StopInstanceMapOutput {
	return i.ToStopInstanceMapOutputWithContext(context.Background())
}

func (i StopInstanceMap) ToStopInstanceMapOutputWithContext(ctx context.Context) StopInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StopInstanceMapOutput)
}

type StopInstanceOutput struct{ *pulumi.OutputState }

func (StopInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StopInstance)(nil)).Elem()
}

func (o StopInstanceOutput) ToStopInstanceOutput() StopInstanceOutput {
	return o
}

func (o StopInstanceOutput) ToStopInstanceOutputWithContext(ctx context.Context) StopInstanceOutput {
	return o
}

// Instance ID.
func (o StopInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StopInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type StopInstanceArrayOutput struct{ *pulumi.OutputState }

func (StopInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StopInstance)(nil)).Elem()
}

func (o StopInstanceArrayOutput) ToStopInstanceArrayOutput() StopInstanceArrayOutput {
	return o
}

func (o StopInstanceArrayOutput) ToStopInstanceArrayOutputWithContext(ctx context.Context) StopInstanceArrayOutput {
	return o
}

func (o StopInstanceArrayOutput) Index(i pulumi.IntInput) StopInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StopInstance {
		return vs[0].([]*StopInstance)[vs[1].(int)]
	}).(StopInstanceOutput)
}

type StopInstanceMapOutput struct{ *pulumi.OutputState }

func (StopInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StopInstance)(nil)).Elem()
}

func (o StopInstanceMapOutput) ToStopInstanceMapOutput() StopInstanceMapOutput {
	return o
}

func (o StopInstanceMapOutput) ToStopInstanceMapOutputWithContext(ctx context.Context) StopInstanceMapOutput {
	return o
}

func (o StopInstanceMapOutput) MapIndex(k pulumi.StringInput) StopInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StopInstance {
		return vs[0].(map[string]*StopInstance)[vs[1].(string)]
	}).(StopInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StopInstanceInput)(nil)).Elem(), &StopInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*StopInstanceArrayInput)(nil)).Elem(), StopInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StopInstanceMapInput)(nil)).Elem(), StopInstanceMap{})
	pulumi.RegisterOutputType(StopInstanceOutput{})
	pulumi.RegisterOutputType(StopInstanceArrayOutput{})
	pulumi.RegisterOutputType(StopInstanceMapOutput{})
}
