// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse applyInstanceSnapshot
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewApplyInstanceSnapshot(ctx, "applyInstanceSnapshot", &Lighthouse.ApplyInstanceSnapshotArgs{
//				InstanceId: pulumi.String("lhins-123456"),
//				SnapshotId: pulumi.String("lhsnap-123456"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApplyInstanceSnapshot struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Snapshot ID.
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
}

// NewApplyInstanceSnapshot registers a new resource with the given unique name, arguments, and options.
func NewApplyInstanceSnapshot(ctx *pulumi.Context,
	name string, args *ApplyInstanceSnapshotArgs, opts ...pulumi.ResourceOption) (*ApplyInstanceSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.SnapshotId == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApplyInstanceSnapshot
	err := ctx.RegisterResource("tencentcloud:Lighthouse/applyInstanceSnapshot:ApplyInstanceSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplyInstanceSnapshot gets an existing ApplyInstanceSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplyInstanceSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplyInstanceSnapshotState, opts ...pulumi.ResourceOption) (*ApplyInstanceSnapshot, error) {
	var resource ApplyInstanceSnapshot
	err := ctx.ReadResource("tencentcloud:Lighthouse/applyInstanceSnapshot:ApplyInstanceSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplyInstanceSnapshot resources.
type applyInstanceSnapshotState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Snapshot ID.
	SnapshotId *string `pulumi:"snapshotId"`
}

type ApplyInstanceSnapshotState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Snapshot ID.
	SnapshotId pulumi.StringPtrInput
}

func (ApplyInstanceSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*applyInstanceSnapshotState)(nil)).Elem()
}

type applyInstanceSnapshotArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Snapshot ID.
	SnapshotId string `pulumi:"snapshotId"`
}

// The set of arguments for constructing a ApplyInstanceSnapshot resource.
type ApplyInstanceSnapshotArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
	// Snapshot ID.
	SnapshotId pulumi.StringInput
}

func (ApplyInstanceSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applyInstanceSnapshotArgs)(nil)).Elem()
}

type ApplyInstanceSnapshotInput interface {
	pulumi.Input

	ToApplyInstanceSnapshotOutput() ApplyInstanceSnapshotOutput
	ToApplyInstanceSnapshotOutputWithContext(ctx context.Context) ApplyInstanceSnapshotOutput
}

func (*ApplyInstanceSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyInstanceSnapshot)(nil)).Elem()
}

func (i *ApplyInstanceSnapshot) ToApplyInstanceSnapshotOutput() ApplyInstanceSnapshotOutput {
	return i.ToApplyInstanceSnapshotOutputWithContext(context.Background())
}

func (i *ApplyInstanceSnapshot) ToApplyInstanceSnapshotOutputWithContext(ctx context.Context) ApplyInstanceSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyInstanceSnapshotOutput)
}

// ApplyInstanceSnapshotArrayInput is an input type that accepts ApplyInstanceSnapshotArray and ApplyInstanceSnapshotArrayOutput values.
// You can construct a concrete instance of `ApplyInstanceSnapshotArrayInput` via:
//
//	ApplyInstanceSnapshotArray{ ApplyInstanceSnapshotArgs{...} }
type ApplyInstanceSnapshotArrayInput interface {
	pulumi.Input

	ToApplyInstanceSnapshotArrayOutput() ApplyInstanceSnapshotArrayOutput
	ToApplyInstanceSnapshotArrayOutputWithContext(context.Context) ApplyInstanceSnapshotArrayOutput
}

type ApplyInstanceSnapshotArray []ApplyInstanceSnapshotInput

func (ApplyInstanceSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplyInstanceSnapshot)(nil)).Elem()
}

func (i ApplyInstanceSnapshotArray) ToApplyInstanceSnapshotArrayOutput() ApplyInstanceSnapshotArrayOutput {
	return i.ToApplyInstanceSnapshotArrayOutputWithContext(context.Background())
}

func (i ApplyInstanceSnapshotArray) ToApplyInstanceSnapshotArrayOutputWithContext(ctx context.Context) ApplyInstanceSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyInstanceSnapshotArrayOutput)
}

// ApplyInstanceSnapshotMapInput is an input type that accepts ApplyInstanceSnapshotMap and ApplyInstanceSnapshotMapOutput values.
// You can construct a concrete instance of `ApplyInstanceSnapshotMapInput` via:
//
//	ApplyInstanceSnapshotMap{ "key": ApplyInstanceSnapshotArgs{...} }
type ApplyInstanceSnapshotMapInput interface {
	pulumi.Input

	ToApplyInstanceSnapshotMapOutput() ApplyInstanceSnapshotMapOutput
	ToApplyInstanceSnapshotMapOutputWithContext(context.Context) ApplyInstanceSnapshotMapOutput
}

type ApplyInstanceSnapshotMap map[string]ApplyInstanceSnapshotInput

func (ApplyInstanceSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplyInstanceSnapshot)(nil)).Elem()
}

func (i ApplyInstanceSnapshotMap) ToApplyInstanceSnapshotMapOutput() ApplyInstanceSnapshotMapOutput {
	return i.ToApplyInstanceSnapshotMapOutputWithContext(context.Background())
}

func (i ApplyInstanceSnapshotMap) ToApplyInstanceSnapshotMapOutputWithContext(ctx context.Context) ApplyInstanceSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyInstanceSnapshotMapOutput)
}

type ApplyInstanceSnapshotOutput struct{ *pulumi.OutputState }

func (ApplyInstanceSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyInstanceSnapshot)(nil)).Elem()
}

func (o ApplyInstanceSnapshotOutput) ToApplyInstanceSnapshotOutput() ApplyInstanceSnapshotOutput {
	return o
}

func (o ApplyInstanceSnapshotOutput) ToApplyInstanceSnapshotOutputWithContext(ctx context.Context) ApplyInstanceSnapshotOutput {
	return o
}

// Instance ID.
func (o ApplyInstanceSnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplyInstanceSnapshot) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Snapshot ID.
func (o ApplyInstanceSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplyInstanceSnapshot) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

type ApplyInstanceSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ApplyInstanceSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplyInstanceSnapshot)(nil)).Elem()
}

func (o ApplyInstanceSnapshotArrayOutput) ToApplyInstanceSnapshotArrayOutput() ApplyInstanceSnapshotArrayOutput {
	return o
}

func (o ApplyInstanceSnapshotArrayOutput) ToApplyInstanceSnapshotArrayOutputWithContext(ctx context.Context) ApplyInstanceSnapshotArrayOutput {
	return o
}

func (o ApplyInstanceSnapshotArrayOutput) Index(i pulumi.IntInput) ApplyInstanceSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplyInstanceSnapshot {
		return vs[0].([]*ApplyInstanceSnapshot)[vs[1].(int)]
	}).(ApplyInstanceSnapshotOutput)
}

type ApplyInstanceSnapshotMapOutput struct{ *pulumi.OutputState }

func (ApplyInstanceSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplyInstanceSnapshot)(nil)).Elem()
}

func (o ApplyInstanceSnapshotMapOutput) ToApplyInstanceSnapshotMapOutput() ApplyInstanceSnapshotMapOutput {
	return o
}

func (o ApplyInstanceSnapshotMapOutput) ToApplyInstanceSnapshotMapOutputWithContext(ctx context.Context) ApplyInstanceSnapshotMapOutput {
	return o
}

func (o ApplyInstanceSnapshotMapOutput) MapIndex(k pulumi.StringInput) ApplyInstanceSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplyInstanceSnapshot {
		return vs[0].(map[string]*ApplyInstanceSnapshot)[vs[1].(string)]
	}).(ApplyInstanceSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyInstanceSnapshotInput)(nil)).Elem(), &ApplyInstanceSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyInstanceSnapshotArrayInput)(nil)).Elem(), ApplyInstanceSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyInstanceSnapshotMapInput)(nil)).Elem(), ApplyInstanceSnapshotMap{})
	pulumi.RegisterOutputType(ApplyInstanceSnapshotOutput{})
	pulumi.RegisterOutputType(ApplyInstanceSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ApplyInstanceSnapshotMapOutput{})
}
