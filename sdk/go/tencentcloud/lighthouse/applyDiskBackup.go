// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse applyDiskBackup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewApplyDiskBackup(ctx, "applyDiskBackup", &Lighthouse.ApplyDiskBackupArgs{
//				DiskBackupId: pulumi.String("lhbak-xxxxxx"),
//				DiskId:       pulumi.String("lhdisk-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApplyDiskBackup struct {
	pulumi.CustomResourceState

	// Disk backup ID.
	DiskBackupId pulumi.StringOutput `pulumi:"diskBackupId"`
	// Disk ID.
	DiskId pulumi.StringOutput `pulumi:"diskId"`
}

// NewApplyDiskBackup registers a new resource with the given unique name, arguments, and options.
func NewApplyDiskBackup(ctx *pulumi.Context,
	name string, args *ApplyDiskBackupArgs, opts ...pulumi.ResourceOption) (*ApplyDiskBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskBackupId == nil {
		return nil, errors.New("invalid value for required argument 'DiskBackupId'")
	}
	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApplyDiskBackup
	err := ctx.RegisterResource("tencentcloud:Lighthouse/applyDiskBackup:ApplyDiskBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplyDiskBackup gets an existing ApplyDiskBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplyDiskBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplyDiskBackupState, opts ...pulumi.ResourceOption) (*ApplyDiskBackup, error) {
	var resource ApplyDiskBackup
	err := ctx.ReadResource("tencentcloud:Lighthouse/applyDiskBackup:ApplyDiskBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplyDiskBackup resources.
type applyDiskBackupState struct {
	// Disk backup ID.
	DiskBackupId *string `pulumi:"diskBackupId"`
	// Disk ID.
	DiskId *string `pulumi:"diskId"`
}

type ApplyDiskBackupState struct {
	// Disk backup ID.
	DiskBackupId pulumi.StringPtrInput
	// Disk ID.
	DiskId pulumi.StringPtrInput
}

func (ApplyDiskBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*applyDiskBackupState)(nil)).Elem()
}

type applyDiskBackupArgs struct {
	// Disk backup ID.
	DiskBackupId string `pulumi:"diskBackupId"`
	// Disk ID.
	DiskId string `pulumi:"diskId"`
}

// The set of arguments for constructing a ApplyDiskBackup resource.
type ApplyDiskBackupArgs struct {
	// Disk backup ID.
	DiskBackupId pulumi.StringInput
	// Disk ID.
	DiskId pulumi.StringInput
}

func (ApplyDiskBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applyDiskBackupArgs)(nil)).Elem()
}

type ApplyDiskBackupInput interface {
	pulumi.Input

	ToApplyDiskBackupOutput() ApplyDiskBackupOutput
	ToApplyDiskBackupOutputWithContext(ctx context.Context) ApplyDiskBackupOutput
}

func (*ApplyDiskBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyDiskBackup)(nil)).Elem()
}

func (i *ApplyDiskBackup) ToApplyDiskBackupOutput() ApplyDiskBackupOutput {
	return i.ToApplyDiskBackupOutputWithContext(context.Background())
}

func (i *ApplyDiskBackup) ToApplyDiskBackupOutputWithContext(ctx context.Context) ApplyDiskBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyDiskBackupOutput)
}

// ApplyDiskBackupArrayInput is an input type that accepts ApplyDiskBackupArray and ApplyDiskBackupArrayOutput values.
// You can construct a concrete instance of `ApplyDiskBackupArrayInput` via:
//
//	ApplyDiskBackupArray{ ApplyDiskBackupArgs{...} }
type ApplyDiskBackupArrayInput interface {
	pulumi.Input

	ToApplyDiskBackupArrayOutput() ApplyDiskBackupArrayOutput
	ToApplyDiskBackupArrayOutputWithContext(context.Context) ApplyDiskBackupArrayOutput
}

type ApplyDiskBackupArray []ApplyDiskBackupInput

func (ApplyDiskBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplyDiskBackup)(nil)).Elem()
}

func (i ApplyDiskBackupArray) ToApplyDiskBackupArrayOutput() ApplyDiskBackupArrayOutput {
	return i.ToApplyDiskBackupArrayOutputWithContext(context.Background())
}

func (i ApplyDiskBackupArray) ToApplyDiskBackupArrayOutputWithContext(ctx context.Context) ApplyDiskBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyDiskBackupArrayOutput)
}

// ApplyDiskBackupMapInput is an input type that accepts ApplyDiskBackupMap and ApplyDiskBackupMapOutput values.
// You can construct a concrete instance of `ApplyDiskBackupMapInput` via:
//
//	ApplyDiskBackupMap{ "key": ApplyDiskBackupArgs{...} }
type ApplyDiskBackupMapInput interface {
	pulumi.Input

	ToApplyDiskBackupMapOutput() ApplyDiskBackupMapOutput
	ToApplyDiskBackupMapOutputWithContext(context.Context) ApplyDiskBackupMapOutput
}

type ApplyDiskBackupMap map[string]ApplyDiskBackupInput

func (ApplyDiskBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplyDiskBackup)(nil)).Elem()
}

func (i ApplyDiskBackupMap) ToApplyDiskBackupMapOutput() ApplyDiskBackupMapOutput {
	return i.ToApplyDiskBackupMapOutputWithContext(context.Background())
}

func (i ApplyDiskBackupMap) ToApplyDiskBackupMapOutputWithContext(ctx context.Context) ApplyDiskBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplyDiskBackupMapOutput)
}

type ApplyDiskBackupOutput struct{ *pulumi.OutputState }

func (ApplyDiskBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplyDiskBackup)(nil)).Elem()
}

func (o ApplyDiskBackupOutput) ToApplyDiskBackupOutput() ApplyDiskBackupOutput {
	return o
}

func (o ApplyDiskBackupOutput) ToApplyDiskBackupOutputWithContext(ctx context.Context) ApplyDiskBackupOutput {
	return o
}

// Disk backup ID.
func (o ApplyDiskBackupOutput) DiskBackupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplyDiskBackup) pulumi.StringOutput { return v.DiskBackupId }).(pulumi.StringOutput)
}

// Disk ID.
func (o ApplyDiskBackupOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplyDiskBackup) pulumi.StringOutput { return v.DiskId }).(pulumi.StringOutput)
}

type ApplyDiskBackupArrayOutput struct{ *pulumi.OutputState }

func (ApplyDiskBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplyDiskBackup)(nil)).Elem()
}

func (o ApplyDiskBackupArrayOutput) ToApplyDiskBackupArrayOutput() ApplyDiskBackupArrayOutput {
	return o
}

func (o ApplyDiskBackupArrayOutput) ToApplyDiskBackupArrayOutputWithContext(ctx context.Context) ApplyDiskBackupArrayOutput {
	return o
}

func (o ApplyDiskBackupArrayOutput) Index(i pulumi.IntInput) ApplyDiskBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplyDiskBackup {
		return vs[0].([]*ApplyDiskBackup)[vs[1].(int)]
	}).(ApplyDiskBackupOutput)
}

type ApplyDiskBackupMapOutput struct{ *pulumi.OutputState }

func (ApplyDiskBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplyDiskBackup)(nil)).Elem()
}

func (o ApplyDiskBackupMapOutput) ToApplyDiskBackupMapOutput() ApplyDiskBackupMapOutput {
	return o
}

func (o ApplyDiskBackupMapOutput) ToApplyDiskBackupMapOutputWithContext(ctx context.Context) ApplyDiskBackupMapOutput {
	return o
}

func (o ApplyDiskBackupMapOutput) MapIndex(k pulumi.StringInput) ApplyDiskBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplyDiskBackup {
		return vs[0].(map[string]*ApplyDiskBackup)[vs[1].(string)]
	}).(ApplyDiskBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyDiskBackupInput)(nil)).Elem(), &ApplyDiskBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyDiskBackupArrayInput)(nil)).Elem(), ApplyDiskBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplyDiskBackupMapInput)(nil)).Elem(), ApplyDiskBackupMap{})
	pulumi.RegisterOutputType(ApplyDiskBackupOutput{})
	pulumi.RegisterOutputType(ApplyDiskBackupArrayOutput{})
	pulumi.RegisterOutputType(ApplyDiskBackupMapOutput{})
}
