// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse firewall template
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewFirewallTemplate(ctx, "firewallTemplate", &Lighthouse.FirewallTemplateArgs{
//				TemplateName: pulumi.String("firewall-template-test"),
//				TemplateRules: lighthouse.FirewallTemplateTemplateRuleArray{
//					&lighthouse.FirewallTemplateTemplateRuleArgs{
//						Action:                  pulumi.String("ACCEPT"),
//						CidrBlock:               pulumi.String("127.0.0.1"),
//						FirewallRuleDescription: pulumi.String("test description"),
//						Port:                    pulumi.String("8080"),
//						Protocol:                pulumi.String("TCP"),
//					},
//					&lighthouse.FirewallTemplateTemplateRuleArgs{
//						Action:                  pulumi.String("DROP"),
//						CidrBlock:               pulumi.String("127.0.0.0/24"),
//						FirewallRuleDescription: pulumi.String("test description"),
//						Port:                    pulumi.String("8090"),
//						Protocol:                pulumi.String("TCP"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// lighthouse firewall_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate firewall_template firewall_template_id
//
// ```
type FirewallTemplate struct {
	pulumi.CustomResourceState

	// Template name.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
	// List of firewall rules.
	TemplateRules FirewallTemplateTemplateRuleArrayOutput `pulumi:"templateRules"`
}

// NewFirewallTemplate registers a new resource with the given unique name, arguments, and options.
func NewFirewallTemplate(ctx *pulumi.Context,
	name string, args *FirewallTemplateArgs, opts ...pulumi.ResourceOption) (*FirewallTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallTemplate
	err := ctx.RegisterResource("tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallTemplate gets an existing FirewallTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallTemplateState, opts ...pulumi.ResourceOption) (*FirewallTemplate, error) {
	var resource FirewallTemplate
	err := ctx.ReadResource("tencentcloud:Lighthouse/firewallTemplate:FirewallTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallTemplate resources.
type firewallTemplateState struct {
	// Template name.
	TemplateName *string `pulumi:"templateName"`
	// List of firewall rules.
	TemplateRules []FirewallTemplateTemplateRule `pulumi:"templateRules"`
}

type FirewallTemplateState struct {
	// Template name.
	TemplateName pulumi.StringPtrInput
	// List of firewall rules.
	TemplateRules FirewallTemplateTemplateRuleArrayInput
}

func (FirewallTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallTemplateState)(nil)).Elem()
}

type firewallTemplateArgs struct {
	// Template name.
	TemplateName string `pulumi:"templateName"`
	// List of firewall rules.
	TemplateRules []FirewallTemplateTemplateRule `pulumi:"templateRules"`
}

// The set of arguments for constructing a FirewallTemplate resource.
type FirewallTemplateArgs struct {
	// Template name.
	TemplateName pulumi.StringInput
	// List of firewall rules.
	TemplateRules FirewallTemplateTemplateRuleArrayInput
}

func (FirewallTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallTemplateArgs)(nil)).Elem()
}

type FirewallTemplateInput interface {
	pulumi.Input

	ToFirewallTemplateOutput() FirewallTemplateOutput
	ToFirewallTemplateOutputWithContext(ctx context.Context) FirewallTemplateOutput
}

func (*FirewallTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallTemplate)(nil)).Elem()
}

func (i *FirewallTemplate) ToFirewallTemplateOutput() FirewallTemplateOutput {
	return i.ToFirewallTemplateOutputWithContext(context.Background())
}

func (i *FirewallTemplate) ToFirewallTemplateOutputWithContext(ctx context.Context) FirewallTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallTemplateOutput)
}

// FirewallTemplateArrayInput is an input type that accepts FirewallTemplateArray and FirewallTemplateArrayOutput values.
// You can construct a concrete instance of `FirewallTemplateArrayInput` via:
//
//	FirewallTemplateArray{ FirewallTemplateArgs{...} }
type FirewallTemplateArrayInput interface {
	pulumi.Input

	ToFirewallTemplateArrayOutput() FirewallTemplateArrayOutput
	ToFirewallTemplateArrayOutputWithContext(context.Context) FirewallTemplateArrayOutput
}

type FirewallTemplateArray []FirewallTemplateInput

func (FirewallTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallTemplate)(nil)).Elem()
}

func (i FirewallTemplateArray) ToFirewallTemplateArrayOutput() FirewallTemplateArrayOutput {
	return i.ToFirewallTemplateArrayOutputWithContext(context.Background())
}

func (i FirewallTemplateArray) ToFirewallTemplateArrayOutputWithContext(ctx context.Context) FirewallTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallTemplateArrayOutput)
}

// FirewallTemplateMapInput is an input type that accepts FirewallTemplateMap and FirewallTemplateMapOutput values.
// You can construct a concrete instance of `FirewallTemplateMapInput` via:
//
//	FirewallTemplateMap{ "key": FirewallTemplateArgs{...} }
type FirewallTemplateMapInput interface {
	pulumi.Input

	ToFirewallTemplateMapOutput() FirewallTemplateMapOutput
	ToFirewallTemplateMapOutputWithContext(context.Context) FirewallTemplateMapOutput
}

type FirewallTemplateMap map[string]FirewallTemplateInput

func (FirewallTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallTemplate)(nil)).Elem()
}

func (i FirewallTemplateMap) ToFirewallTemplateMapOutput() FirewallTemplateMapOutput {
	return i.ToFirewallTemplateMapOutputWithContext(context.Background())
}

func (i FirewallTemplateMap) ToFirewallTemplateMapOutputWithContext(ctx context.Context) FirewallTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallTemplateMapOutput)
}

type FirewallTemplateOutput struct{ *pulumi.OutputState }

func (FirewallTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallTemplate)(nil)).Elem()
}

func (o FirewallTemplateOutput) ToFirewallTemplateOutput() FirewallTemplateOutput {
	return o
}

func (o FirewallTemplateOutput) ToFirewallTemplateOutputWithContext(ctx context.Context) FirewallTemplateOutput {
	return o
}

// Template name.
func (o FirewallTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

// List of firewall rules.
func (o FirewallTemplateOutput) TemplateRules() FirewallTemplateTemplateRuleArrayOutput {
	return o.ApplyT(func(v *FirewallTemplate) FirewallTemplateTemplateRuleArrayOutput { return v.TemplateRules }).(FirewallTemplateTemplateRuleArrayOutput)
}

type FirewallTemplateArrayOutput struct{ *pulumi.OutputState }

func (FirewallTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallTemplate)(nil)).Elem()
}

func (o FirewallTemplateArrayOutput) ToFirewallTemplateArrayOutput() FirewallTemplateArrayOutput {
	return o
}

func (o FirewallTemplateArrayOutput) ToFirewallTemplateArrayOutputWithContext(ctx context.Context) FirewallTemplateArrayOutput {
	return o
}

func (o FirewallTemplateArrayOutput) Index(i pulumi.IntInput) FirewallTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallTemplate {
		return vs[0].([]*FirewallTemplate)[vs[1].(int)]
	}).(FirewallTemplateOutput)
}

type FirewallTemplateMapOutput struct{ *pulumi.OutputState }

func (FirewallTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallTemplate)(nil)).Elem()
}

func (o FirewallTemplateMapOutput) ToFirewallTemplateMapOutput() FirewallTemplateMapOutput {
	return o
}

func (o FirewallTemplateMapOutput) ToFirewallTemplateMapOutputWithContext(ctx context.Context) FirewallTemplateMapOutput {
	return o
}

func (o FirewallTemplateMapOutput) MapIndex(k pulumi.StringInput) FirewallTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallTemplate {
		return vs[0].(map[string]*FirewallTemplate)[vs[1].(string)]
	}).(FirewallTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallTemplateInput)(nil)).Elem(), &FirewallTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallTemplateArrayInput)(nil)).Elem(), FirewallTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallTemplateMapInput)(nil)).Elem(), FirewallTemplateMap{})
	pulumi.RegisterOutputType(FirewallTemplateOutput{})
	pulumi.RegisterOutputType(FirewallTemplateArrayOutput{})
	pulumi.RegisterOutputType(FirewallTemplateMapOutput{})
}
