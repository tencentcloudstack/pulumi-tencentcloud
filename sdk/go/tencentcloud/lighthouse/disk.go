// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse disk
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewDisk(ctx, "disk", &Lighthouse.DiskArgs{
//				DiskChargePrepaid: &lighthouse.DiskDiskChargePrepaidArgs{
//					Period:    pulumi.Int(1),
//					RenewFlag: pulumi.String("NOTIFY_AND_AUTO_RENEW"),
//					TimeUnit:  pulumi.String("m"),
//				},
//				DiskName: pulumi.String("test"),
//				DiskSize: pulumi.Int(20),
//				DiskType: pulumi.String("CLOUD_SSD"),
//				Zone:     pulumi.String("ap-hongkong-2"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Disk struct {
	pulumi.CustomResourceState

	// Automatically mount and initialize data disks.
	AutoMountConfiguration DiskAutoMountConfigurationPtrOutput `pulumi:"autoMountConfiguration"`
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher pulumi.BoolOutput `pulumi:"autoVoucher"`
	// Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
	DiskBackupQuota pulumi.IntOutput `pulumi:"diskBackupQuota"`
	// Disk subscription related parameter settings.
	DiskChargePrepaid DiskDiskChargePrepaidOutput `pulumi:"diskChargePrepaid"`
	// Disk count. Values: [1, 30]. Default: 1.
	DiskCount pulumi.IntOutput `pulumi:"diskCount"`
	// Disk name. Maximum length 60.
	DiskName pulumi.StringOutput `pulumi:"diskName"`
	// Disk size, unit: GB.
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
	DiskType pulumi.StringOutput `pulumi:"diskType"`
	// Availability zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDisk registers a new resource with the given unique name, arguments, and options.
func NewDisk(ctx *pulumi.Context,
	name string, args *DiskArgs, opts ...pulumi.ResourceOption) (*Disk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskChargePrepaid == nil {
		return nil, errors.New("invalid value for required argument 'DiskChargePrepaid'")
	}
	if args.DiskSize == nil {
		return nil, errors.New("invalid value for required argument 'DiskSize'")
	}
	if args.DiskType == nil {
		return nil, errors.New("invalid value for required argument 'DiskType'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Disk
	err := ctx.RegisterResource("tencentcloud:Lighthouse/disk:Disk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDisk gets an existing Disk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiskState, opts ...pulumi.ResourceOption) (*Disk, error) {
	var resource Disk
	err := ctx.ReadResource("tencentcloud:Lighthouse/disk:Disk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Disk resources.
type diskState struct {
	// Automatically mount and initialize data disks.
	AutoMountConfiguration *DiskAutoMountConfiguration `pulumi:"autoMountConfiguration"`
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
	DiskBackupQuota *int `pulumi:"diskBackupQuota"`
	// Disk subscription related parameter settings.
	DiskChargePrepaid *DiskDiskChargePrepaid `pulumi:"diskChargePrepaid"`
	// Disk count. Values: [1, 30]. Default: 1.
	DiskCount *int `pulumi:"diskCount"`
	// Disk name. Maximum length 60.
	DiskName *string `pulumi:"diskName"`
	// Disk size, unit: GB.
	DiskSize *int `pulumi:"diskSize"`
	// Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
	DiskType *string `pulumi:"diskType"`
	// Availability zone.
	Zone *string `pulumi:"zone"`
}

type DiskState struct {
	// Automatically mount and initialize data disks.
	AutoMountConfiguration DiskAutoMountConfigurationPtrInput
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher pulumi.BoolPtrInput
	// Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
	DiskBackupQuota pulumi.IntPtrInput
	// Disk subscription related parameter settings.
	DiskChargePrepaid DiskDiskChargePrepaidPtrInput
	// Disk count. Values: [1, 30]. Default: 1.
	DiskCount pulumi.IntPtrInput
	// Disk name. Maximum length 60.
	DiskName pulumi.StringPtrInput
	// Disk size, unit: GB.
	DiskSize pulumi.IntPtrInput
	// Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
	DiskType pulumi.StringPtrInput
	// Availability zone.
	Zone pulumi.StringPtrInput
}

func (DiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*diskState)(nil)).Elem()
}

type diskArgs struct {
	// Automatically mount and initialize data disks.
	AutoMountConfiguration *DiskAutoMountConfiguration `pulumi:"autoMountConfiguration"`
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
	DiskBackupQuota *int `pulumi:"diskBackupQuota"`
	// Disk subscription related parameter settings.
	DiskChargePrepaid DiskDiskChargePrepaid `pulumi:"diskChargePrepaid"`
	// Disk count. Values: [1, 30]. Default: 1.
	DiskCount *int `pulumi:"diskCount"`
	// Disk name. Maximum length 60.
	DiskName *string `pulumi:"diskName"`
	// Disk size, unit: GB.
	DiskSize int `pulumi:"diskSize"`
	// Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
	DiskType string `pulumi:"diskType"`
	// Availability zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Disk resource.
type DiskArgs struct {
	// Automatically mount and initialize data disks.
	AutoMountConfiguration DiskAutoMountConfigurationPtrInput
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher pulumi.BoolPtrInput
	// Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
	DiskBackupQuota pulumi.IntPtrInput
	// Disk subscription related parameter settings.
	DiskChargePrepaid DiskDiskChargePrepaidInput
	// Disk count. Values: [1, 30]. Default: 1.
	DiskCount pulumi.IntPtrInput
	// Disk name. Maximum length 60.
	DiskName pulumi.StringPtrInput
	// Disk size, unit: GB.
	DiskSize pulumi.IntInput
	// Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
	DiskType pulumi.StringInput
	// Availability zone.
	Zone pulumi.StringInput
}

func (DiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diskArgs)(nil)).Elem()
}

type DiskInput interface {
	pulumi.Input

	ToDiskOutput() DiskOutput
	ToDiskOutputWithContext(ctx context.Context) DiskOutput
}

func (*Disk) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil)).Elem()
}

func (i *Disk) ToDiskOutput() DiskOutput {
	return i.ToDiskOutputWithContext(context.Background())
}

func (i *Disk) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskOutput)
}

// DiskArrayInput is an input type that accepts DiskArray and DiskArrayOutput values.
// You can construct a concrete instance of `DiskArrayInput` via:
//
//	DiskArray{ DiskArgs{...} }
type DiskArrayInput interface {
	pulumi.Input

	ToDiskArrayOutput() DiskArrayOutput
	ToDiskArrayOutputWithContext(context.Context) DiskArrayOutput
}

type DiskArray []DiskInput

func (DiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Disk)(nil)).Elem()
}

func (i DiskArray) ToDiskArrayOutput() DiskArrayOutput {
	return i.ToDiskArrayOutputWithContext(context.Background())
}

func (i DiskArray) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskArrayOutput)
}

// DiskMapInput is an input type that accepts DiskMap and DiskMapOutput values.
// You can construct a concrete instance of `DiskMapInput` via:
//
//	DiskMap{ "key": DiskArgs{...} }
type DiskMapInput interface {
	pulumi.Input

	ToDiskMapOutput() DiskMapOutput
	ToDiskMapOutputWithContext(context.Context) DiskMapOutput
}

type DiskMap map[string]DiskInput

func (DiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Disk)(nil)).Elem()
}

func (i DiskMap) ToDiskMapOutput() DiskMapOutput {
	return i.ToDiskMapOutputWithContext(context.Background())
}

func (i DiskMap) ToDiskMapOutputWithContext(ctx context.Context) DiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DiskMapOutput)
}

type DiskOutput struct{ *pulumi.OutputState }

func (DiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Disk)(nil)).Elem()
}

func (o DiskOutput) ToDiskOutput() DiskOutput {
	return o
}

func (o DiskOutput) ToDiskOutputWithContext(ctx context.Context) DiskOutput {
	return o
}

// Automatically mount and initialize data disks.
func (o DiskOutput) AutoMountConfiguration() DiskAutoMountConfigurationPtrOutput {
	return o.ApplyT(func(v *Disk) DiskAutoMountConfigurationPtrOutput { return v.AutoMountConfiguration }).(DiskAutoMountConfigurationPtrOutput)
}

// Whether to automatically use the voucher. Not used by default.
func (o DiskOutput) AutoVoucher() pulumi.BoolOutput {
	return o.ApplyT(func(v *Disk) pulumi.BoolOutput { return v.AutoVoucher }).(pulumi.BoolOutput)
}

// Specify the disk backup quota. If not uploaded, the default is no backup quota. Currently, only one disk backup quota is supported.
func (o DiskOutput) DiskBackupQuota() pulumi.IntOutput {
	return o.ApplyT(func(v *Disk) pulumi.IntOutput { return v.DiskBackupQuota }).(pulumi.IntOutput)
}

// Disk subscription related parameter settings.
func (o DiskOutput) DiskChargePrepaid() DiskDiskChargePrepaidOutput {
	return o.ApplyT(func(v *Disk) DiskDiskChargePrepaidOutput { return v.DiskChargePrepaid }).(DiskDiskChargePrepaidOutput)
}

// Disk count. Values: [1, 30]. Default: 1.
func (o DiskOutput) DiskCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Disk) pulumi.IntOutput { return v.DiskCount }).(pulumi.IntOutput)
}

// Disk name. Maximum length 60.
func (o DiskOutput) DiskName() pulumi.StringOutput {
	return o.ApplyT(func(v *Disk) pulumi.StringOutput { return v.DiskName }).(pulumi.StringOutput)
}

// Disk size, unit: GB.
func (o DiskOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Disk) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// Disk type. Value:CLOUD_PREMIUM, CLOUD_SSD.
func (o DiskOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Disk) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

// Availability zone.
func (o DiskOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Disk) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type DiskArrayOutput struct{ *pulumi.OutputState }

func (DiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Disk)(nil)).Elem()
}

func (o DiskArrayOutput) ToDiskArrayOutput() DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) ToDiskArrayOutputWithContext(ctx context.Context) DiskArrayOutput {
	return o
}

func (o DiskArrayOutput) Index(i pulumi.IntInput) DiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Disk {
		return vs[0].([]*Disk)[vs[1].(int)]
	}).(DiskOutput)
}

type DiskMapOutput struct{ *pulumi.OutputState }

func (DiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Disk)(nil)).Elem()
}

func (o DiskMapOutput) ToDiskMapOutput() DiskMapOutput {
	return o
}

func (o DiskMapOutput) ToDiskMapOutputWithContext(ctx context.Context) DiskMapOutput {
	return o
}

func (o DiskMapOutput) MapIndex(k pulumi.StringInput) DiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Disk {
		return vs[0].(map[string]*Disk)[vs[1].(string)]
	}).(DiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DiskInput)(nil)).Elem(), &Disk{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskArrayInput)(nil)).Elem(), DiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DiskMapInput)(nil)).Elem(), DiskMap{})
	pulumi.RegisterOutputType(DiskOutput{})
	pulumi.RegisterOutputType(DiskArrayOutput{})
	pulumi.RegisterOutputType(DiskMapOutput{})
}
