// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse startInstance
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewStartInstance(ctx, "startInstance", &Lighthouse.StartInstanceArgs{
//				InstanceId: pulumi.String("lhins-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StartInstance struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewStartInstance registers a new resource with the given unique name, arguments, and options.
func NewStartInstance(ctx *pulumi.Context,
	name string, args *StartInstanceArgs, opts ...pulumi.ResourceOption) (*StartInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StartInstance
	err := ctx.RegisterResource("tencentcloud:Lighthouse/startInstance:StartInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStartInstance gets an existing StartInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStartInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StartInstanceState, opts ...pulumi.ResourceOption) (*StartInstance, error) {
	var resource StartInstance
	err := ctx.ReadResource("tencentcloud:Lighthouse/startInstance:StartInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StartInstance resources.
type startInstanceState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
}

type StartInstanceState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
}

func (StartInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*startInstanceState)(nil)).Elem()
}

type startInstanceArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a StartInstance resource.
type StartInstanceArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
}

func (StartInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*startInstanceArgs)(nil)).Elem()
}

type StartInstanceInput interface {
	pulumi.Input

	ToStartInstanceOutput() StartInstanceOutput
	ToStartInstanceOutputWithContext(ctx context.Context) StartInstanceOutput
}

func (*StartInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**StartInstance)(nil)).Elem()
}

func (i *StartInstance) ToStartInstanceOutput() StartInstanceOutput {
	return i.ToStartInstanceOutputWithContext(context.Background())
}

func (i *StartInstance) ToStartInstanceOutputWithContext(ctx context.Context) StartInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartInstanceOutput)
}

// StartInstanceArrayInput is an input type that accepts StartInstanceArray and StartInstanceArrayOutput values.
// You can construct a concrete instance of `StartInstanceArrayInput` via:
//
//	StartInstanceArray{ StartInstanceArgs{...} }
type StartInstanceArrayInput interface {
	pulumi.Input

	ToStartInstanceArrayOutput() StartInstanceArrayOutput
	ToStartInstanceArrayOutputWithContext(context.Context) StartInstanceArrayOutput
}

type StartInstanceArray []StartInstanceInput

func (StartInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartInstance)(nil)).Elem()
}

func (i StartInstanceArray) ToStartInstanceArrayOutput() StartInstanceArrayOutput {
	return i.ToStartInstanceArrayOutputWithContext(context.Background())
}

func (i StartInstanceArray) ToStartInstanceArrayOutputWithContext(ctx context.Context) StartInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartInstanceArrayOutput)
}

// StartInstanceMapInput is an input type that accepts StartInstanceMap and StartInstanceMapOutput values.
// You can construct a concrete instance of `StartInstanceMapInput` via:
//
//	StartInstanceMap{ "key": StartInstanceArgs{...} }
type StartInstanceMapInput interface {
	pulumi.Input

	ToStartInstanceMapOutput() StartInstanceMapOutput
	ToStartInstanceMapOutputWithContext(context.Context) StartInstanceMapOutput
}

type StartInstanceMap map[string]StartInstanceInput

func (StartInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartInstance)(nil)).Elem()
}

func (i StartInstanceMap) ToStartInstanceMapOutput() StartInstanceMapOutput {
	return i.ToStartInstanceMapOutputWithContext(context.Background())
}

func (i StartInstanceMap) ToStartInstanceMapOutputWithContext(ctx context.Context) StartInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StartInstanceMapOutput)
}

type StartInstanceOutput struct{ *pulumi.OutputState }

func (StartInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StartInstance)(nil)).Elem()
}

func (o StartInstanceOutput) ToStartInstanceOutput() StartInstanceOutput {
	return o
}

func (o StartInstanceOutput) ToStartInstanceOutputWithContext(ctx context.Context) StartInstanceOutput {
	return o
}

// Instance ID.
func (o StartInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StartInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type StartInstanceArrayOutput struct{ *pulumi.OutputState }

func (StartInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StartInstance)(nil)).Elem()
}

func (o StartInstanceArrayOutput) ToStartInstanceArrayOutput() StartInstanceArrayOutput {
	return o
}

func (o StartInstanceArrayOutput) ToStartInstanceArrayOutputWithContext(ctx context.Context) StartInstanceArrayOutput {
	return o
}

func (o StartInstanceArrayOutput) Index(i pulumi.IntInput) StartInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StartInstance {
		return vs[0].([]*StartInstance)[vs[1].(int)]
	}).(StartInstanceOutput)
}

type StartInstanceMapOutput struct{ *pulumi.OutputState }

func (StartInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StartInstance)(nil)).Elem()
}

func (o StartInstanceMapOutput) ToStartInstanceMapOutput() StartInstanceMapOutput {
	return o
}

func (o StartInstanceMapOutput) ToStartInstanceMapOutputWithContext(ctx context.Context) StartInstanceMapOutput {
	return o
}

func (o StartInstanceMapOutput) MapIndex(k pulumi.StringInput) StartInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StartInstance {
		return vs[0].(map[string]*StartInstance)[vs[1].(string)]
	}).(StartInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StartInstanceInput)(nil)).Elem(), &StartInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartInstanceArrayInput)(nil)).Elem(), StartInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StartInstanceMapInput)(nil)).Elem(), StartInstanceMap{})
	pulumi.RegisterOutputType(StartInstanceOutput{})
	pulumi.RegisterOutputType(StartInstanceArrayOutput{})
	pulumi.RegisterOutputType(StartInstanceMapOutput{})
}
