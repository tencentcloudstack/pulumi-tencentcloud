// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse keyPairAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewKeyPairAttachment(ctx, "keyPairAttachment", &Lighthouse.KeyPairAttachmentArgs{
//				InstanceId: pulumi.String("lhins-xxxxxx"),
//				KeyId:      pulumi.String("lhkp-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// lighthouse key_pair_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Lighthouse/keyPairAttachment:KeyPairAttachment key_pair_attachment key_pair_attachment_id
//
// ```
type KeyPairAttachment struct {
	pulumi.CustomResourceState

	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Key pair ID.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
}

// NewKeyPairAttachment registers a new resource with the given unique name, arguments, and options.
func NewKeyPairAttachment(ctx *pulumi.Context,
	name string, args *KeyPairAttachmentArgs, opts ...pulumi.ResourceOption) (*KeyPairAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource KeyPairAttachment
	err := ctx.RegisterResource("tencentcloud:Lighthouse/keyPairAttachment:KeyPairAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyPairAttachment gets an existing KeyPairAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyPairAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyPairAttachmentState, opts ...pulumi.ResourceOption) (*KeyPairAttachment, error) {
	var resource KeyPairAttachment
	err := ctx.ReadResource("tencentcloud:Lighthouse/keyPairAttachment:KeyPairAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyPairAttachment resources.
type keyPairAttachmentState struct {
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Key pair ID.
	KeyId *string `pulumi:"keyId"`
}

type KeyPairAttachmentState struct {
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Key pair ID.
	KeyId pulumi.StringPtrInput
}

func (KeyPairAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairAttachmentState)(nil)).Elem()
}

type keyPairAttachmentArgs struct {
	// Instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Key pair ID.
	KeyId string `pulumi:"keyId"`
}

// The set of arguments for constructing a KeyPairAttachment resource.
type KeyPairAttachmentArgs struct {
	// Instance ID.
	InstanceId pulumi.StringInput
	// Key pair ID.
	KeyId pulumi.StringInput
}

func (KeyPairAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyPairAttachmentArgs)(nil)).Elem()
}

type KeyPairAttachmentInput interface {
	pulumi.Input

	ToKeyPairAttachmentOutput() KeyPairAttachmentOutput
	ToKeyPairAttachmentOutputWithContext(ctx context.Context) KeyPairAttachmentOutput
}

func (*KeyPairAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPairAttachment)(nil)).Elem()
}

func (i *KeyPairAttachment) ToKeyPairAttachmentOutput() KeyPairAttachmentOutput {
	return i.ToKeyPairAttachmentOutputWithContext(context.Background())
}

func (i *KeyPairAttachment) ToKeyPairAttachmentOutputWithContext(ctx context.Context) KeyPairAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairAttachmentOutput)
}

// KeyPairAttachmentArrayInput is an input type that accepts KeyPairAttachmentArray and KeyPairAttachmentArrayOutput values.
// You can construct a concrete instance of `KeyPairAttachmentArrayInput` via:
//
//	KeyPairAttachmentArray{ KeyPairAttachmentArgs{...} }
type KeyPairAttachmentArrayInput interface {
	pulumi.Input

	ToKeyPairAttachmentArrayOutput() KeyPairAttachmentArrayOutput
	ToKeyPairAttachmentArrayOutputWithContext(context.Context) KeyPairAttachmentArrayOutput
}

type KeyPairAttachmentArray []KeyPairAttachmentInput

func (KeyPairAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyPairAttachment)(nil)).Elem()
}

func (i KeyPairAttachmentArray) ToKeyPairAttachmentArrayOutput() KeyPairAttachmentArrayOutput {
	return i.ToKeyPairAttachmentArrayOutputWithContext(context.Background())
}

func (i KeyPairAttachmentArray) ToKeyPairAttachmentArrayOutputWithContext(ctx context.Context) KeyPairAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairAttachmentArrayOutput)
}

// KeyPairAttachmentMapInput is an input type that accepts KeyPairAttachmentMap and KeyPairAttachmentMapOutput values.
// You can construct a concrete instance of `KeyPairAttachmentMapInput` via:
//
//	KeyPairAttachmentMap{ "key": KeyPairAttachmentArgs{...} }
type KeyPairAttachmentMapInput interface {
	pulumi.Input

	ToKeyPairAttachmentMapOutput() KeyPairAttachmentMapOutput
	ToKeyPairAttachmentMapOutputWithContext(context.Context) KeyPairAttachmentMapOutput
}

type KeyPairAttachmentMap map[string]KeyPairAttachmentInput

func (KeyPairAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyPairAttachment)(nil)).Elem()
}

func (i KeyPairAttachmentMap) ToKeyPairAttachmentMapOutput() KeyPairAttachmentMapOutput {
	return i.ToKeyPairAttachmentMapOutputWithContext(context.Background())
}

func (i KeyPairAttachmentMap) ToKeyPairAttachmentMapOutputWithContext(ctx context.Context) KeyPairAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairAttachmentMapOutput)
}

type KeyPairAttachmentOutput struct{ *pulumi.OutputState }

func (KeyPairAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyPairAttachment)(nil)).Elem()
}

func (o KeyPairAttachmentOutput) ToKeyPairAttachmentOutput() KeyPairAttachmentOutput {
	return o
}

func (o KeyPairAttachmentOutput) ToKeyPairAttachmentOutputWithContext(ctx context.Context) KeyPairAttachmentOutput {
	return o
}

// Instance ID.
func (o KeyPairAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPairAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Key pair ID.
func (o KeyPairAttachmentOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyPairAttachment) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

type KeyPairAttachmentArrayOutput struct{ *pulumi.OutputState }

func (KeyPairAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyPairAttachment)(nil)).Elem()
}

func (o KeyPairAttachmentArrayOutput) ToKeyPairAttachmentArrayOutput() KeyPairAttachmentArrayOutput {
	return o
}

func (o KeyPairAttachmentArrayOutput) ToKeyPairAttachmentArrayOutputWithContext(ctx context.Context) KeyPairAttachmentArrayOutput {
	return o
}

func (o KeyPairAttachmentArrayOutput) Index(i pulumi.IntInput) KeyPairAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyPairAttachment {
		return vs[0].([]*KeyPairAttachment)[vs[1].(int)]
	}).(KeyPairAttachmentOutput)
}

type KeyPairAttachmentMapOutput struct{ *pulumi.OutputState }

func (KeyPairAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyPairAttachment)(nil)).Elem()
}

func (o KeyPairAttachmentMapOutput) ToKeyPairAttachmentMapOutput() KeyPairAttachmentMapOutput {
	return o
}

func (o KeyPairAttachmentMapOutput) ToKeyPairAttachmentMapOutputWithContext(ctx context.Context) KeyPairAttachmentMapOutput {
	return o
}

func (o KeyPairAttachmentMapOutput) MapIndex(k pulumi.StringInput) KeyPairAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyPairAttachment {
		return vs[0].(map[string]*KeyPairAttachment)[vs[1].(string)]
	}).(KeyPairAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairAttachmentInput)(nil)).Elem(), &KeyPairAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairAttachmentArrayInput)(nil)).Elem(), KeyPairAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairAttachmentMapInput)(nil)).Elem(), KeyPairAttachmentMap{})
	pulumi.RegisterOutputType(KeyPairAttachmentOutput{})
	pulumi.RegisterOutputType(KeyPairAttachmentArrayOutput{})
	pulumi.RegisterOutputType(KeyPairAttachmentMapOutput{})
}
