// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package lighthouse

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a lighthouse renewDisk
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Lighthouse"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Lighthouse.NewRenewDisk(ctx, "renewDisk", &Lighthouse.RenewDiskArgs{
//				AutoVoucher: pulumi.Bool(true),
//				DiskId:      pulumi.String("lhdisk-xxxxxx"),
//				RenewDiskChargePrepaid: &lighthouse.RenewDiskRenewDiskChargePrepaidArgs{
//					Period:    pulumi.Int(1),
//					RenewFlag: pulumi.String("NOTIFY_AND_AUTO_RENEW"),
//					TimeUnit:  pulumi.String("m"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RenewDisk struct {
	pulumi.CustomResourceState

	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher pulumi.BoolPtrOutput `pulumi:"autoVoucher"`
	// List of disk ID.
	DiskId pulumi.StringOutput `pulumi:"diskId"`
	// Renew cloud hard disk subscription related parameter settings.
	RenewDiskChargePrepaid RenewDiskRenewDiskChargePrepaidOutput `pulumi:"renewDiskChargePrepaid"`
}

// NewRenewDisk registers a new resource with the given unique name, arguments, and options.
func NewRenewDisk(ctx *pulumi.Context,
	name string, args *RenewDiskArgs, opts ...pulumi.ResourceOption) (*RenewDisk, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DiskId == nil {
		return nil, errors.New("invalid value for required argument 'DiskId'")
	}
	if args.RenewDiskChargePrepaid == nil {
		return nil, errors.New("invalid value for required argument 'RenewDiskChargePrepaid'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RenewDisk
	err := ctx.RegisterResource("tencentcloud:Lighthouse/renewDisk:RenewDisk", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRenewDisk gets an existing RenewDisk resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRenewDisk(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RenewDiskState, opts ...pulumi.ResourceOption) (*RenewDisk, error) {
	var resource RenewDisk
	err := ctx.ReadResource("tencentcloud:Lighthouse/renewDisk:RenewDisk", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RenewDisk resources.
type renewDiskState struct {
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// List of disk ID.
	DiskId *string `pulumi:"diskId"`
	// Renew cloud hard disk subscription related parameter settings.
	RenewDiskChargePrepaid *RenewDiskRenewDiskChargePrepaid `pulumi:"renewDiskChargePrepaid"`
}

type RenewDiskState struct {
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher pulumi.BoolPtrInput
	// List of disk ID.
	DiskId pulumi.StringPtrInput
	// Renew cloud hard disk subscription related parameter settings.
	RenewDiskChargePrepaid RenewDiskRenewDiskChargePrepaidPtrInput
}

func (RenewDiskState) ElementType() reflect.Type {
	return reflect.TypeOf((*renewDiskState)(nil)).Elem()
}

type renewDiskArgs struct {
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher *bool `pulumi:"autoVoucher"`
	// List of disk ID.
	DiskId string `pulumi:"diskId"`
	// Renew cloud hard disk subscription related parameter settings.
	RenewDiskChargePrepaid RenewDiskRenewDiskChargePrepaid `pulumi:"renewDiskChargePrepaid"`
}

// The set of arguments for constructing a RenewDisk resource.
type RenewDiskArgs struct {
	// Whether to automatically use the voucher. Not used by default.
	AutoVoucher pulumi.BoolPtrInput
	// List of disk ID.
	DiskId pulumi.StringInput
	// Renew cloud hard disk subscription related parameter settings.
	RenewDiskChargePrepaid RenewDiskRenewDiskChargePrepaidInput
}

func (RenewDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*renewDiskArgs)(nil)).Elem()
}

type RenewDiskInput interface {
	pulumi.Input

	ToRenewDiskOutput() RenewDiskOutput
	ToRenewDiskOutputWithContext(ctx context.Context) RenewDiskOutput
}

func (*RenewDisk) ElementType() reflect.Type {
	return reflect.TypeOf((**RenewDisk)(nil)).Elem()
}

func (i *RenewDisk) ToRenewDiskOutput() RenewDiskOutput {
	return i.ToRenewDiskOutputWithContext(context.Background())
}

func (i *RenewDisk) ToRenewDiskOutputWithContext(ctx context.Context) RenewDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RenewDiskOutput)
}

// RenewDiskArrayInput is an input type that accepts RenewDiskArray and RenewDiskArrayOutput values.
// You can construct a concrete instance of `RenewDiskArrayInput` via:
//
//	RenewDiskArray{ RenewDiskArgs{...} }
type RenewDiskArrayInput interface {
	pulumi.Input

	ToRenewDiskArrayOutput() RenewDiskArrayOutput
	ToRenewDiskArrayOutputWithContext(context.Context) RenewDiskArrayOutput
}

type RenewDiskArray []RenewDiskInput

func (RenewDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RenewDisk)(nil)).Elem()
}

func (i RenewDiskArray) ToRenewDiskArrayOutput() RenewDiskArrayOutput {
	return i.ToRenewDiskArrayOutputWithContext(context.Background())
}

func (i RenewDiskArray) ToRenewDiskArrayOutputWithContext(ctx context.Context) RenewDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RenewDiskArrayOutput)
}

// RenewDiskMapInput is an input type that accepts RenewDiskMap and RenewDiskMapOutput values.
// You can construct a concrete instance of `RenewDiskMapInput` via:
//
//	RenewDiskMap{ "key": RenewDiskArgs{...} }
type RenewDiskMapInput interface {
	pulumi.Input

	ToRenewDiskMapOutput() RenewDiskMapOutput
	ToRenewDiskMapOutputWithContext(context.Context) RenewDiskMapOutput
}

type RenewDiskMap map[string]RenewDiskInput

func (RenewDiskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RenewDisk)(nil)).Elem()
}

func (i RenewDiskMap) ToRenewDiskMapOutput() RenewDiskMapOutput {
	return i.ToRenewDiskMapOutputWithContext(context.Background())
}

func (i RenewDiskMap) ToRenewDiskMapOutputWithContext(ctx context.Context) RenewDiskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RenewDiskMapOutput)
}

type RenewDiskOutput struct{ *pulumi.OutputState }

func (RenewDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RenewDisk)(nil)).Elem()
}

func (o RenewDiskOutput) ToRenewDiskOutput() RenewDiskOutput {
	return o
}

func (o RenewDiskOutput) ToRenewDiskOutputWithContext(ctx context.Context) RenewDiskOutput {
	return o
}

// Whether to automatically use the voucher. Not used by default.
func (o RenewDiskOutput) AutoVoucher() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RenewDisk) pulumi.BoolPtrOutput { return v.AutoVoucher }).(pulumi.BoolPtrOutput)
}

// List of disk ID.
func (o RenewDiskOutput) DiskId() pulumi.StringOutput {
	return o.ApplyT(func(v *RenewDisk) pulumi.StringOutput { return v.DiskId }).(pulumi.StringOutput)
}

// Renew cloud hard disk subscription related parameter settings.
func (o RenewDiskOutput) RenewDiskChargePrepaid() RenewDiskRenewDiskChargePrepaidOutput {
	return o.ApplyT(func(v *RenewDisk) RenewDiskRenewDiskChargePrepaidOutput { return v.RenewDiskChargePrepaid }).(RenewDiskRenewDiskChargePrepaidOutput)
}

type RenewDiskArrayOutput struct{ *pulumi.OutputState }

func (RenewDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RenewDisk)(nil)).Elem()
}

func (o RenewDiskArrayOutput) ToRenewDiskArrayOutput() RenewDiskArrayOutput {
	return o
}

func (o RenewDiskArrayOutput) ToRenewDiskArrayOutputWithContext(ctx context.Context) RenewDiskArrayOutput {
	return o
}

func (o RenewDiskArrayOutput) Index(i pulumi.IntInput) RenewDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RenewDisk {
		return vs[0].([]*RenewDisk)[vs[1].(int)]
	}).(RenewDiskOutput)
}

type RenewDiskMapOutput struct{ *pulumi.OutputState }

func (RenewDiskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RenewDisk)(nil)).Elem()
}

func (o RenewDiskMapOutput) ToRenewDiskMapOutput() RenewDiskMapOutput {
	return o
}

func (o RenewDiskMapOutput) ToRenewDiskMapOutputWithContext(ctx context.Context) RenewDiskMapOutput {
	return o
}

func (o RenewDiskMapOutput) MapIndex(k pulumi.StringInput) RenewDiskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RenewDisk {
		return vs[0].(map[string]*RenewDisk)[vs[1].(string)]
	}).(RenewDiskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RenewDiskInput)(nil)).Elem(), &RenewDisk{})
	pulumi.RegisterInputType(reflect.TypeOf((*RenewDiskArrayInput)(nil)).Elem(), RenewDiskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RenewDiskMapInput)(nil)).Elem(), RenewDiskMap{})
	pulumi.RegisterOutputType(RenewDiskOutput{})
	pulumi.RegisterOutputType(RenewDiskArrayOutput{})
	pulumi.RegisterOutputType(RenewDiskMapOutput{})
}
