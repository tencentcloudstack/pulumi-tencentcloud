// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create an identity center user group attachment
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterUserGroupAttachment(ctx, "identityCenterUserGroupAttachment", &Identity.CenterUserGroupAttachmentArgs{
//				GroupId: pulumi.String("g-xxxxxx"),
//				UserId:  pulumi.String("u-xxxxxx"),
//				ZoneId:  pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization identity_center_user_group_attachment can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerUserGroupAttachment:CenterUserGroupAttachment identity_center_user_group_attachment ${zoneId}#${groupId}#${userId}
// ```
type CenterUserGroupAttachment struct {
	pulumi.CustomResourceState

	// User group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// User ID.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// Zone id.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterUserGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewCenterUserGroupAttachment(ctx *pulumi.Context,
	name string, args *CenterUserGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*CenterUserGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterUserGroupAttachment
	err := ctx.RegisterResource("tencentcloud:Identity/centerUserGroupAttachment:CenterUserGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterUserGroupAttachment gets an existing CenterUserGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterUserGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterUserGroupAttachmentState, opts ...pulumi.ResourceOption) (*CenterUserGroupAttachment, error) {
	var resource CenterUserGroupAttachment
	err := ctx.ReadResource("tencentcloud:Identity/centerUserGroupAttachment:CenterUserGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterUserGroupAttachment resources.
type centerUserGroupAttachmentState struct {
	// User group ID.
	GroupId *string `pulumi:"groupId"`
	// User ID.
	UserId *string `pulumi:"userId"`
	// Zone id.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterUserGroupAttachmentState struct {
	// User group ID.
	GroupId pulumi.StringPtrInput
	// User ID.
	UserId pulumi.StringPtrInput
	// Zone id.
	ZoneId pulumi.StringPtrInput
}

func (CenterUserGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerUserGroupAttachmentState)(nil)).Elem()
}

type centerUserGroupAttachmentArgs struct {
	// User group ID.
	GroupId string `pulumi:"groupId"`
	// User ID.
	UserId string `pulumi:"userId"`
	// Zone id.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterUserGroupAttachment resource.
type CenterUserGroupAttachmentArgs struct {
	// User group ID.
	GroupId pulumi.StringInput
	// User ID.
	UserId pulumi.StringInput
	// Zone id.
	ZoneId pulumi.StringInput
}

func (CenterUserGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerUserGroupAttachmentArgs)(nil)).Elem()
}

type CenterUserGroupAttachmentInput interface {
	pulumi.Input

	ToCenterUserGroupAttachmentOutput() CenterUserGroupAttachmentOutput
	ToCenterUserGroupAttachmentOutputWithContext(ctx context.Context) CenterUserGroupAttachmentOutput
}

func (*CenterUserGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterUserGroupAttachment)(nil)).Elem()
}

func (i *CenterUserGroupAttachment) ToCenterUserGroupAttachmentOutput() CenterUserGroupAttachmentOutput {
	return i.ToCenterUserGroupAttachmentOutputWithContext(context.Background())
}

func (i *CenterUserGroupAttachment) ToCenterUserGroupAttachmentOutputWithContext(ctx context.Context) CenterUserGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserGroupAttachmentOutput)
}

// CenterUserGroupAttachmentArrayInput is an input type that accepts CenterUserGroupAttachmentArray and CenterUserGroupAttachmentArrayOutput values.
// You can construct a concrete instance of `CenterUserGroupAttachmentArrayInput` via:
//
//	CenterUserGroupAttachmentArray{ CenterUserGroupAttachmentArgs{...} }
type CenterUserGroupAttachmentArrayInput interface {
	pulumi.Input

	ToCenterUserGroupAttachmentArrayOutput() CenterUserGroupAttachmentArrayOutput
	ToCenterUserGroupAttachmentArrayOutputWithContext(context.Context) CenterUserGroupAttachmentArrayOutput
}

type CenterUserGroupAttachmentArray []CenterUserGroupAttachmentInput

func (CenterUserGroupAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterUserGroupAttachment)(nil)).Elem()
}

func (i CenterUserGroupAttachmentArray) ToCenterUserGroupAttachmentArrayOutput() CenterUserGroupAttachmentArrayOutput {
	return i.ToCenterUserGroupAttachmentArrayOutputWithContext(context.Background())
}

func (i CenterUserGroupAttachmentArray) ToCenterUserGroupAttachmentArrayOutputWithContext(ctx context.Context) CenterUserGroupAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserGroupAttachmentArrayOutput)
}

// CenterUserGroupAttachmentMapInput is an input type that accepts CenterUserGroupAttachmentMap and CenterUserGroupAttachmentMapOutput values.
// You can construct a concrete instance of `CenterUserGroupAttachmentMapInput` via:
//
//	CenterUserGroupAttachmentMap{ "key": CenterUserGroupAttachmentArgs{...} }
type CenterUserGroupAttachmentMapInput interface {
	pulumi.Input

	ToCenterUserGroupAttachmentMapOutput() CenterUserGroupAttachmentMapOutput
	ToCenterUserGroupAttachmentMapOutputWithContext(context.Context) CenterUserGroupAttachmentMapOutput
}

type CenterUserGroupAttachmentMap map[string]CenterUserGroupAttachmentInput

func (CenterUserGroupAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterUserGroupAttachment)(nil)).Elem()
}

func (i CenterUserGroupAttachmentMap) ToCenterUserGroupAttachmentMapOutput() CenterUserGroupAttachmentMapOutput {
	return i.ToCenterUserGroupAttachmentMapOutputWithContext(context.Background())
}

func (i CenterUserGroupAttachmentMap) ToCenterUserGroupAttachmentMapOutputWithContext(ctx context.Context) CenterUserGroupAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserGroupAttachmentMapOutput)
}

type CenterUserGroupAttachmentOutput struct{ *pulumi.OutputState }

func (CenterUserGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterUserGroupAttachment)(nil)).Elem()
}

func (o CenterUserGroupAttachmentOutput) ToCenterUserGroupAttachmentOutput() CenterUserGroupAttachmentOutput {
	return o
}

func (o CenterUserGroupAttachmentOutput) ToCenterUserGroupAttachmentOutputWithContext(ctx context.Context) CenterUserGroupAttachmentOutput {
	return o
}

// User group ID.
func (o CenterUserGroupAttachmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserGroupAttachment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// User ID.
func (o CenterUserGroupAttachmentOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserGroupAttachment) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// Zone id.
func (o CenterUserGroupAttachmentOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserGroupAttachment) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterUserGroupAttachmentArrayOutput struct{ *pulumi.OutputState }

func (CenterUserGroupAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterUserGroupAttachment)(nil)).Elem()
}

func (o CenterUserGroupAttachmentArrayOutput) ToCenterUserGroupAttachmentArrayOutput() CenterUserGroupAttachmentArrayOutput {
	return o
}

func (o CenterUserGroupAttachmentArrayOutput) ToCenterUserGroupAttachmentArrayOutputWithContext(ctx context.Context) CenterUserGroupAttachmentArrayOutput {
	return o
}

func (o CenterUserGroupAttachmentArrayOutput) Index(i pulumi.IntInput) CenterUserGroupAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterUserGroupAttachment {
		return vs[0].([]*CenterUserGroupAttachment)[vs[1].(int)]
	}).(CenterUserGroupAttachmentOutput)
}

type CenterUserGroupAttachmentMapOutput struct{ *pulumi.OutputState }

func (CenterUserGroupAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterUserGroupAttachment)(nil)).Elem()
}

func (o CenterUserGroupAttachmentMapOutput) ToCenterUserGroupAttachmentMapOutput() CenterUserGroupAttachmentMapOutput {
	return o
}

func (o CenterUserGroupAttachmentMapOutput) ToCenterUserGroupAttachmentMapOutputWithContext(ctx context.Context) CenterUserGroupAttachmentMapOutput {
	return o
}

func (o CenterUserGroupAttachmentMapOutput) MapIndex(k pulumi.StringInput) CenterUserGroupAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterUserGroupAttachment {
		return vs[0].(map[string]*CenterUserGroupAttachment)[vs[1].(string)]
	}).(CenterUserGroupAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserGroupAttachmentInput)(nil)).Elem(), &CenterUserGroupAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserGroupAttachmentArrayInput)(nil)).Elem(), CenterUserGroupAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserGroupAttachmentMapInput)(nil)).Elem(), CenterUserGroupAttachmentMap{})
	pulumi.RegisterOutputType(CenterUserGroupAttachmentOutput{})
	pulumi.RegisterOutputType(CenterUserGroupAttachmentArrayOutput{})
	pulumi.RegisterOutputType(CenterUserGroupAttachmentMapOutput{})
}
