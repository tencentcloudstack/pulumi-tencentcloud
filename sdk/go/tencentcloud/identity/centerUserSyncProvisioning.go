// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a organization identityCenterUserSyncProvisioning
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterUserSyncProvisioning(ctx, "identityCenterUserSyncProvisioning", &Identity.CenterUserSyncProvisioningArgs{
//				DeletionStrategy:    pulumi.String("Keep"),
//				Description:         pulumi.String("tf-test"),
//				DuplicationStrategy: pulumi.String("TakeOver"),
//				PrincipalId:         pulumi.String("u-xxxxxx"),
//				PrincipalType:       pulumi.String("User"),
//				TargetType:          pulumi.String("MemberUin"),
//				TargetUin:           pulumi.Int("xxxxxx"),
//				ZoneId:              pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization identity_center_user_sync_provisioning can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning identity_center_user_sync_provisioning ${zoneId}#${userProvisioningId}
// ```
type CenterUserSyncProvisioning struct {
	pulumi.CustomResourceState

	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
	DeletionStrategy pulumi.StringPtrOutput `pulumi:"deletionStrategy"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
	DuplicationStrategy pulumi.StringPtrOutput `pulumi:"duplicationStrategy"`
	// Identity ID for the CAM user synchronization. Valid values:
	// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
	// When the PrincipalType value is User, it is the CIC user ID (u-********).
	PrincipalId pulumi.StringPtrOutput `pulumi:"principalId"`
	// The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
	PrincipalName pulumi.StringOutput `pulumi:"principalName"`
	// Identity type for the CAM user synchronization. Valid values:
	//
	// User: indicates that the identity for the CAM user synchronization is a CIC user.
	// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
	PrincipalType pulumi.StringPtrOutput `pulumi:"principalType"`
	// Status of CAM user synchronization. Value:
	// * Enabled: CAM user synchronization is enabled;
	// * Disabled: CAM user synchronization is not enabled.
	Status pulumi.StringOutput `pulumi:"status"`
	// Group account The name of the target account..
	TargetName pulumi.StringOutput `pulumi:"targetName"`
	// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
	TargetType pulumi.StringPtrOutput `pulumi:"targetType"`
	// UIN of the synchronized target account of the Tencent Cloud Organization.
	TargetUin pulumi.IntPtrOutput `pulumi:"targetUin"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// User provisioning id.
	UserProvisioningId pulumi.StringOutput `pulumi:"userProvisioningId"`
	// Space ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterUserSyncProvisioning registers a new resource with the given unique name, arguments, and options.
func NewCenterUserSyncProvisioning(ctx *pulumi.Context,
	name string, args *CenterUserSyncProvisioningArgs, opts ...pulumi.ResourceOption) (*CenterUserSyncProvisioning, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterUserSyncProvisioning
	err := ctx.RegisterResource("tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterUserSyncProvisioning gets an existing CenterUserSyncProvisioning resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterUserSyncProvisioning(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterUserSyncProvisioningState, opts ...pulumi.ResourceOption) (*CenterUserSyncProvisioning, error) {
	var resource CenterUserSyncProvisioning
	err := ctx.ReadResource("tencentcloud:Identity/centerUserSyncProvisioning:CenterUserSyncProvisioning", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterUserSyncProvisioning resources.
type centerUserSyncProvisioningState struct {
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
	DeletionStrategy *string `pulumi:"deletionStrategy"`
	// Description.
	Description *string `pulumi:"description"`
	// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
	DuplicationStrategy *string `pulumi:"duplicationStrategy"`
	// Identity ID for the CAM user synchronization. Valid values:
	// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
	// When the PrincipalType value is User, it is the CIC user ID (u-********).
	PrincipalId *string `pulumi:"principalId"`
	// The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
	PrincipalName *string `pulumi:"principalName"`
	// Identity type for the CAM user synchronization. Valid values:
	//
	// User: indicates that the identity for the CAM user synchronization is a CIC user.
	// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
	PrincipalType *string `pulumi:"principalType"`
	// Status of CAM user synchronization. Value:
	// * Enabled: CAM user synchronization is enabled;
	// * Disabled: CAM user synchronization is not enabled.
	Status *string `pulumi:"status"`
	// Group account The name of the target account..
	TargetName *string `pulumi:"targetName"`
	// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
	TargetType *string `pulumi:"targetType"`
	// UIN of the synchronized target account of the Tencent Cloud Organization.
	TargetUin *int `pulumi:"targetUin"`
	// Update time.
	UpdateTime *string `pulumi:"updateTime"`
	// User provisioning id.
	UserProvisioningId *string `pulumi:"userProvisioningId"`
	// Space ID.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterUserSyncProvisioningState struct {
	// Create time.
	CreateTime pulumi.StringPtrInput
	// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
	DeletionStrategy pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
	DuplicationStrategy pulumi.StringPtrInput
	// Identity ID for the CAM user synchronization. Valid values:
	// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
	// When the PrincipalType value is User, it is the CIC user ID (u-********).
	PrincipalId pulumi.StringPtrInput
	// The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
	PrincipalName pulumi.StringPtrInput
	// Identity type for the CAM user synchronization. Valid values:
	//
	// User: indicates that the identity for the CAM user synchronization is a CIC user.
	// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
	PrincipalType pulumi.StringPtrInput
	// Status of CAM user synchronization. Value:
	// * Enabled: CAM user synchronization is enabled;
	// * Disabled: CAM user synchronization is not enabled.
	Status pulumi.StringPtrInput
	// Group account The name of the target account..
	TargetName pulumi.StringPtrInput
	// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
	TargetType pulumi.StringPtrInput
	// UIN of the synchronized target account of the Tencent Cloud Organization.
	TargetUin pulumi.IntPtrInput
	// Update time.
	UpdateTime pulumi.StringPtrInput
	// User provisioning id.
	UserProvisioningId pulumi.StringPtrInput
	// Space ID.
	ZoneId pulumi.StringPtrInput
}

func (CenterUserSyncProvisioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerUserSyncProvisioningState)(nil)).Elem()
}

type centerUserSyncProvisioningArgs struct {
	// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
	DeletionStrategy *string `pulumi:"deletionStrategy"`
	// Description.
	Description *string `pulumi:"description"`
	// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
	DuplicationStrategy *string `pulumi:"duplicationStrategy"`
	// Identity ID for the CAM user synchronization. Valid values:
	// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
	// When the PrincipalType value is User, it is the CIC user ID (u-********).
	PrincipalId *string `pulumi:"principalId"`
	// Identity type for the CAM user synchronization. Valid values:
	//
	// User: indicates that the identity for the CAM user synchronization is a CIC user.
	// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
	PrincipalType *string `pulumi:"principalType"`
	// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
	TargetType *string `pulumi:"targetType"`
	// UIN of the synchronized target account of the Tencent Cloud Organization.
	TargetUin *int `pulumi:"targetUin"`
	// Space ID.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterUserSyncProvisioning resource.
type CenterUserSyncProvisioningArgs struct {
	// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
	DeletionStrategy pulumi.StringPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
	DuplicationStrategy pulumi.StringPtrInput
	// Identity ID for the CAM user synchronization. Valid values:
	// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
	// When the PrincipalType value is User, it is the CIC user ID (u-********).
	PrincipalId pulumi.StringPtrInput
	// Identity type for the CAM user synchronization. Valid values:
	//
	// User: indicates that the identity for the CAM user synchronization is a CIC user.
	// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
	PrincipalType pulumi.StringPtrInput
	// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
	TargetType pulumi.StringPtrInput
	// UIN of the synchronized target account of the Tencent Cloud Organization.
	TargetUin pulumi.IntPtrInput
	// Space ID.
	ZoneId pulumi.StringInput
}

func (CenterUserSyncProvisioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerUserSyncProvisioningArgs)(nil)).Elem()
}

type CenterUserSyncProvisioningInput interface {
	pulumi.Input

	ToCenterUserSyncProvisioningOutput() CenterUserSyncProvisioningOutput
	ToCenterUserSyncProvisioningOutputWithContext(ctx context.Context) CenterUserSyncProvisioningOutput
}

func (*CenterUserSyncProvisioning) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterUserSyncProvisioning)(nil)).Elem()
}

func (i *CenterUserSyncProvisioning) ToCenterUserSyncProvisioningOutput() CenterUserSyncProvisioningOutput {
	return i.ToCenterUserSyncProvisioningOutputWithContext(context.Background())
}

func (i *CenterUserSyncProvisioning) ToCenterUserSyncProvisioningOutputWithContext(ctx context.Context) CenterUserSyncProvisioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserSyncProvisioningOutput)
}

// CenterUserSyncProvisioningArrayInput is an input type that accepts CenterUserSyncProvisioningArray and CenterUserSyncProvisioningArrayOutput values.
// You can construct a concrete instance of `CenterUserSyncProvisioningArrayInput` via:
//
//	CenterUserSyncProvisioningArray{ CenterUserSyncProvisioningArgs{...} }
type CenterUserSyncProvisioningArrayInput interface {
	pulumi.Input

	ToCenterUserSyncProvisioningArrayOutput() CenterUserSyncProvisioningArrayOutput
	ToCenterUserSyncProvisioningArrayOutputWithContext(context.Context) CenterUserSyncProvisioningArrayOutput
}

type CenterUserSyncProvisioningArray []CenterUserSyncProvisioningInput

func (CenterUserSyncProvisioningArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterUserSyncProvisioning)(nil)).Elem()
}

func (i CenterUserSyncProvisioningArray) ToCenterUserSyncProvisioningArrayOutput() CenterUserSyncProvisioningArrayOutput {
	return i.ToCenterUserSyncProvisioningArrayOutputWithContext(context.Background())
}

func (i CenterUserSyncProvisioningArray) ToCenterUserSyncProvisioningArrayOutputWithContext(ctx context.Context) CenterUserSyncProvisioningArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserSyncProvisioningArrayOutput)
}

// CenterUserSyncProvisioningMapInput is an input type that accepts CenterUserSyncProvisioningMap and CenterUserSyncProvisioningMapOutput values.
// You can construct a concrete instance of `CenterUserSyncProvisioningMapInput` via:
//
//	CenterUserSyncProvisioningMap{ "key": CenterUserSyncProvisioningArgs{...} }
type CenterUserSyncProvisioningMapInput interface {
	pulumi.Input

	ToCenterUserSyncProvisioningMapOutput() CenterUserSyncProvisioningMapOutput
	ToCenterUserSyncProvisioningMapOutputWithContext(context.Context) CenterUserSyncProvisioningMapOutput
}

type CenterUserSyncProvisioningMap map[string]CenterUserSyncProvisioningInput

func (CenterUserSyncProvisioningMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterUserSyncProvisioning)(nil)).Elem()
}

func (i CenterUserSyncProvisioningMap) ToCenterUserSyncProvisioningMapOutput() CenterUserSyncProvisioningMapOutput {
	return i.ToCenterUserSyncProvisioningMapOutputWithContext(context.Background())
}

func (i CenterUserSyncProvisioningMap) ToCenterUserSyncProvisioningMapOutputWithContext(ctx context.Context) CenterUserSyncProvisioningMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserSyncProvisioningMapOutput)
}

type CenterUserSyncProvisioningOutput struct{ *pulumi.OutputState }

func (CenterUserSyncProvisioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterUserSyncProvisioning)(nil)).Elem()
}

func (o CenterUserSyncProvisioningOutput) ToCenterUserSyncProvisioningOutput() CenterUserSyncProvisioningOutput {
	return o
}

func (o CenterUserSyncProvisioningOutput) ToCenterUserSyncProvisioningOutputWithContext(ctx context.Context) CenterUserSyncProvisioningOutput {
	return o
}

// Create time.
func (o CenterUserSyncProvisioningOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Deletion policy. It indicates the handling policy for CAM users already synchronized when the CAM user synchronization is deleted. Valid values: Delete: Delete the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted; Keep: Keep the CAM users already synchronized from CIC to CAM when the CAM user synchronization is deleted.
func (o CenterUserSyncProvisioningOutput) DeletionStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringPtrOutput { return v.DeletionStrategy }).(pulumi.StringPtrOutput)
}

// Description.
func (o CenterUserSyncProvisioningOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Conflict policy. It indicates the handling policy for existence of a user with the same username when CIC users are synchronized to CAM. Valid values: KeepBoth: Keep both, that is, add the _cic suffix to the CIC user's username and then try to create a CAM user with the username when CIC users are synchronized to CAM and a user with the same username already exists in CAM; TakeOver: Replace, that is, directly replace the existing CAM user with the synchronized CIC user when CIC users are synchronized to CAM and a user with the same username already exists in CAM.
func (o CenterUserSyncProvisioningOutput) DuplicationStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringPtrOutput { return v.DuplicationStrategy }).(pulumi.StringPtrOutput)
}

// Identity ID for the CAM user synchronization. Valid values:
// When the PrincipalType value is Group, it is the CIC user group ID (g-********).
// When the PrincipalType value is User, it is the CIC user ID (u-********).
func (o CenterUserSyncProvisioningOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringPtrOutput { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

// The identity name of the CAM user synchronization. Value: When PrincipalType is Group, the value is the CIC user group name; When PrincipalType takes the value to User, the value is the CIC user name.
func (o CenterUserSyncProvisioningOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.PrincipalName }).(pulumi.StringOutput)
}

// Identity type for the CAM user synchronization. Valid values:
//
// User: indicates that the identity for the CAM user synchronization is a CIC user.
// Group: indicates that the identity for the CAM user synchronization is a CIC user group.
func (o CenterUserSyncProvisioningOutput) PrincipalType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringPtrOutput { return v.PrincipalType }).(pulumi.StringPtrOutput)
}

// Status of CAM user synchronization. Value:
// * Enabled: CAM user synchronization is enabled;
// * Disabled: CAM user synchronization is not enabled.
func (o CenterUserSyncProvisioningOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Group account The name of the target account..
func (o CenterUserSyncProvisioningOutput) TargetName() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.TargetName }).(pulumi.StringOutput)
}

// Type of the synchronized target account of the Tencent Cloud Organization. ManagerUin: admin account; MemberUin: member account.
func (o CenterUserSyncProvisioningOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringPtrOutput { return v.TargetType }).(pulumi.StringPtrOutput)
}

// UIN of the synchronized target account of the Tencent Cloud Organization.
func (o CenterUserSyncProvisioningOutput) TargetUin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.IntPtrOutput { return v.TargetUin }).(pulumi.IntPtrOutput)
}

// Update time.
func (o CenterUserSyncProvisioningOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// User provisioning id.
func (o CenterUserSyncProvisioningOutput) UserProvisioningId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.UserProvisioningId }).(pulumi.StringOutput)
}

// Space ID.
func (o CenterUserSyncProvisioningOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUserSyncProvisioning) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterUserSyncProvisioningArrayOutput struct{ *pulumi.OutputState }

func (CenterUserSyncProvisioningArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterUserSyncProvisioning)(nil)).Elem()
}

func (o CenterUserSyncProvisioningArrayOutput) ToCenterUserSyncProvisioningArrayOutput() CenterUserSyncProvisioningArrayOutput {
	return o
}

func (o CenterUserSyncProvisioningArrayOutput) ToCenterUserSyncProvisioningArrayOutputWithContext(ctx context.Context) CenterUserSyncProvisioningArrayOutput {
	return o
}

func (o CenterUserSyncProvisioningArrayOutput) Index(i pulumi.IntInput) CenterUserSyncProvisioningOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterUserSyncProvisioning {
		return vs[0].([]*CenterUserSyncProvisioning)[vs[1].(int)]
	}).(CenterUserSyncProvisioningOutput)
}

type CenterUserSyncProvisioningMapOutput struct{ *pulumi.OutputState }

func (CenterUserSyncProvisioningMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterUserSyncProvisioning)(nil)).Elem()
}

func (o CenterUserSyncProvisioningMapOutput) ToCenterUserSyncProvisioningMapOutput() CenterUserSyncProvisioningMapOutput {
	return o
}

func (o CenterUserSyncProvisioningMapOutput) ToCenterUserSyncProvisioningMapOutputWithContext(ctx context.Context) CenterUserSyncProvisioningMapOutput {
	return o
}

func (o CenterUserSyncProvisioningMapOutput) MapIndex(k pulumi.StringInput) CenterUserSyncProvisioningOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterUserSyncProvisioning {
		return vs[0].(map[string]*CenterUserSyncProvisioning)[vs[1].(string)]
	}).(CenterUserSyncProvisioningOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserSyncProvisioningInput)(nil)).Elem(), &CenterUserSyncProvisioning{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserSyncProvisioningArrayInput)(nil)).Elem(), CenterUserSyncProvisioningArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserSyncProvisioningMapInput)(nil)).Elem(), CenterUserSyncProvisioningMap{})
	pulumi.RegisterOutputType(CenterUserSyncProvisioningOutput{})
	pulumi.RegisterOutputType(CenterUserSyncProvisioningArrayOutput{})
	pulumi.RegisterOutputType(CenterUserSyncProvisioningMapOutput{})
}
