// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Use this data source to query detailed information of identity center role configurations
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.GetCenterRoleConfigurations(ctx, &identity.GetCenterRoleConfigurationsArgs{
//				ZoneId: "z-xxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetCenterRoleConfigurations(ctx *pulumi.Context, args *GetCenterRoleConfigurationsArgs, opts ...pulumi.InvokeOption) (*GetCenterRoleConfigurationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCenterRoleConfigurationsResult
	err := ctx.Invoke("tencentcloud:Identity/getCenterRoleConfigurations:getCenterRoleConfigurations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCenterRoleConfigurations.
type GetCenterRoleConfigurationsArgs struct {
	// Filter criteria, which are case insensitive. Currently, only RoleConfigurationName is supported and only eq (Equals) and sw (Start With) are supported. Example: Filter = "RoleConfigurationName, only sw test" means querying all permission configurations starting with test. Filter = "RoleConfigurationName, only eq TestRoleConfiguration" means querying the permission configuration named TestRoleConfiguration.
	Filter *string `pulumi:"filter"`
	// Check whether the member account has been configured with permissions. If configured, return IsSelected: true; otherwise, return false.
	FilterTargets []int `pulumi:"filterTargets"`
	// UserId of the authorized user or GroupId of the authorized user group, which must be set together with the input parameter FilterTargets.
	PrincipalId *string `pulumi:"principalId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Space ID.
	ZoneId string `pulumi:"zoneId"`
}

// A collection of values returned by getCenterRoleConfigurations.
type GetCenterRoleConfigurationsResult struct {
	Filter        *string `pulumi:"filter"`
	FilterTargets []int   `pulumi:"filterTargets"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	PrincipalId      *string `pulumi:"principalId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Permission configuration list.
	RoleConfigurations []GetCenterRoleConfigurationsRoleConfiguration `pulumi:"roleConfigurations"`
	ZoneId             string                                         `pulumi:"zoneId"`
}

func GetCenterRoleConfigurationsOutput(ctx *pulumi.Context, args GetCenterRoleConfigurationsOutputArgs, opts ...pulumi.InvokeOption) GetCenterRoleConfigurationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCenterRoleConfigurationsResult, error) {
			args := v.(GetCenterRoleConfigurationsArgs)
			r, err := GetCenterRoleConfigurations(ctx, &args, opts...)
			var s GetCenterRoleConfigurationsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCenterRoleConfigurationsResultOutput)
}

// A collection of arguments for invoking getCenterRoleConfigurations.
type GetCenterRoleConfigurationsOutputArgs struct {
	// Filter criteria, which are case insensitive. Currently, only RoleConfigurationName is supported and only eq (Equals) and sw (Start With) are supported. Example: Filter = "RoleConfigurationName, only sw test" means querying all permission configurations starting with test. Filter = "RoleConfigurationName, only eq TestRoleConfiguration" means querying the permission configuration named TestRoleConfiguration.
	Filter pulumi.StringPtrInput `pulumi:"filter"`
	// Check whether the member account has been configured with permissions. If configured, return IsSelected: true; otherwise, return false.
	FilterTargets pulumi.IntArrayInput `pulumi:"filterTargets"`
	// UserId of the authorized user or GroupId of the authorized user group, which must be set together with the input parameter FilterTargets.
	PrincipalId pulumi.StringPtrInput `pulumi:"principalId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Space ID.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetCenterRoleConfigurationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCenterRoleConfigurationsArgs)(nil)).Elem()
}

// A collection of values returned by getCenterRoleConfigurations.
type GetCenterRoleConfigurationsResultOutput struct{ *pulumi.OutputState }

func (GetCenterRoleConfigurationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCenterRoleConfigurationsResult)(nil)).Elem()
}

func (o GetCenterRoleConfigurationsResultOutput) ToGetCenterRoleConfigurationsResultOutput() GetCenterRoleConfigurationsResultOutput {
	return o
}

func (o GetCenterRoleConfigurationsResultOutput) ToGetCenterRoleConfigurationsResultOutputWithContext(ctx context.Context) GetCenterRoleConfigurationsResultOutput {
	return o
}

func (o GetCenterRoleConfigurationsResultOutput) Filter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) *string { return v.Filter }).(pulumi.StringPtrOutput)
}

func (o GetCenterRoleConfigurationsResultOutput) FilterTargets() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) []int { return v.FilterTargets }).(pulumi.IntArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCenterRoleConfigurationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCenterRoleConfigurationsResultOutput) PrincipalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) *string { return v.PrincipalId }).(pulumi.StringPtrOutput)
}

func (o GetCenterRoleConfigurationsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Permission configuration list.
func (o GetCenterRoleConfigurationsResultOutput) RoleConfigurations() GetCenterRoleConfigurationsRoleConfigurationArrayOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) []GetCenterRoleConfigurationsRoleConfiguration {
		return v.RoleConfigurations
	}).(GetCenterRoleConfigurationsRoleConfigurationArrayOutput)
}

func (o GetCenterRoleConfigurationsResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCenterRoleConfigurationsResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCenterRoleConfigurationsResultOutput{})
}
