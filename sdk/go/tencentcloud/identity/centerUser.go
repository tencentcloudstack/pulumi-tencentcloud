// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create an identity center user
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterUser(ctx, "identityCenterUser", &Identity.CenterUserArgs{
//				Description: pulumi.String("test"),
//				UserName:    pulumi.String("test-user"),
//				ZoneId:      pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization identity_center_user can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerUser:CenterUser identity_center_user ${zoneId}#${userId}
// ```
type CenterUser struct {
	pulumi.CustomResourceState

	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// User's description. Length: Maximum 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The display name of the user. Length: Maximum 256 characters.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// The user's last name. Length: Maximum 64 characters.
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// The user's name. Length: Maximum 64 characters.
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// User id.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
	UserStatus pulumi.StringOutput `pulumi:"userStatus"`
	// User type.
	UserType pulumi.StringOutput `pulumi:"userType"`
	// Zone id.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterUser registers a new resource with the given unique name, arguments, and options.
func NewCenterUser(ctx *pulumi.Context,
	name string, args *CenterUserArgs, opts ...pulumi.ResourceOption) (*CenterUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterUser
	err := ctx.RegisterResource("tencentcloud:Identity/centerUser:CenterUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterUser gets an existing CenterUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterUserState, opts ...pulumi.ResourceOption) (*CenterUser, error) {
	var resource CenterUser
	err := ctx.ReadResource("tencentcloud:Identity/centerUser:CenterUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterUser resources.
type centerUserState struct {
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// User's description. Length: Maximum 1024 characters.
	Description *string `pulumi:"description"`
	// The display name of the user. Length: Maximum 256 characters.
	DisplayName *string `pulumi:"displayName"`
	// The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
	Email *string `pulumi:"email"`
	// The user's last name. Length: Maximum 64 characters.
	FirstName *string `pulumi:"firstName"`
	// The user's name. Length: Maximum 64 characters.
	LastName *string `pulumi:"lastName"`
	// Update time.
	UpdateTime *string `pulumi:"updateTime"`
	// User id.
	UserId *string `pulumi:"userId"`
	// User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
	UserName *string `pulumi:"userName"`
	// The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
	UserStatus *string `pulumi:"userStatus"`
	// User type.
	UserType *string `pulumi:"userType"`
	// Zone id.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterUserState struct {
	// Create time.
	CreateTime pulumi.StringPtrInput
	// User's description. Length: Maximum 1024 characters.
	Description pulumi.StringPtrInput
	// The display name of the user. Length: Maximum 256 characters.
	DisplayName pulumi.StringPtrInput
	// The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
	Email pulumi.StringPtrInput
	// The user's last name. Length: Maximum 64 characters.
	FirstName pulumi.StringPtrInput
	// The user's name. Length: Maximum 64 characters.
	LastName pulumi.StringPtrInput
	// Update time.
	UpdateTime pulumi.StringPtrInput
	// User id.
	UserId pulumi.StringPtrInput
	// User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
	UserName pulumi.StringPtrInput
	// The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
	UserStatus pulumi.StringPtrInput
	// User type.
	UserType pulumi.StringPtrInput
	// Zone id.
	ZoneId pulumi.StringPtrInput
}

func (CenterUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerUserState)(nil)).Elem()
}

type centerUserArgs struct {
	// User's description. Length: Maximum 1024 characters.
	Description *string `pulumi:"description"`
	// The display name of the user. Length: Maximum 256 characters.
	DisplayName *string `pulumi:"displayName"`
	// The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
	Email *string `pulumi:"email"`
	// The user's last name. Length: Maximum 64 characters.
	FirstName *string `pulumi:"firstName"`
	// The user's name. Length: Maximum 64 characters.
	LastName *string `pulumi:"lastName"`
	// User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
	UserName string `pulumi:"userName"`
	// The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
	UserStatus *string `pulumi:"userStatus"`
	// Zone id.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterUser resource.
type CenterUserArgs struct {
	// User's description. Length: Maximum 1024 characters.
	Description pulumi.StringPtrInput
	// The display name of the user. Length: Maximum 256 characters.
	DisplayName pulumi.StringPtrInput
	// The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
	Email pulumi.StringPtrInput
	// The user's last name. Length: Maximum 64 characters.
	FirstName pulumi.StringPtrInput
	// The user's name. Length: Maximum 64 characters.
	LastName pulumi.StringPtrInput
	// User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
	UserName pulumi.StringInput
	// The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
	UserStatus pulumi.StringPtrInput
	// Zone id.
	ZoneId pulumi.StringInput
}

func (CenterUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerUserArgs)(nil)).Elem()
}

type CenterUserInput interface {
	pulumi.Input

	ToCenterUserOutput() CenterUserOutput
	ToCenterUserOutputWithContext(ctx context.Context) CenterUserOutput
}

func (*CenterUser) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterUser)(nil)).Elem()
}

func (i *CenterUser) ToCenterUserOutput() CenterUserOutput {
	return i.ToCenterUserOutputWithContext(context.Background())
}

func (i *CenterUser) ToCenterUserOutputWithContext(ctx context.Context) CenterUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserOutput)
}

// CenterUserArrayInput is an input type that accepts CenterUserArray and CenterUserArrayOutput values.
// You can construct a concrete instance of `CenterUserArrayInput` via:
//
//	CenterUserArray{ CenterUserArgs{...} }
type CenterUserArrayInput interface {
	pulumi.Input

	ToCenterUserArrayOutput() CenterUserArrayOutput
	ToCenterUserArrayOutputWithContext(context.Context) CenterUserArrayOutput
}

type CenterUserArray []CenterUserInput

func (CenterUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterUser)(nil)).Elem()
}

func (i CenterUserArray) ToCenterUserArrayOutput() CenterUserArrayOutput {
	return i.ToCenterUserArrayOutputWithContext(context.Background())
}

func (i CenterUserArray) ToCenterUserArrayOutputWithContext(ctx context.Context) CenterUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserArrayOutput)
}

// CenterUserMapInput is an input type that accepts CenterUserMap and CenterUserMapOutput values.
// You can construct a concrete instance of `CenterUserMapInput` via:
//
//	CenterUserMap{ "key": CenterUserArgs{...} }
type CenterUserMapInput interface {
	pulumi.Input

	ToCenterUserMapOutput() CenterUserMapOutput
	ToCenterUserMapOutputWithContext(context.Context) CenterUserMapOutput
}

type CenterUserMap map[string]CenterUserInput

func (CenterUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterUser)(nil)).Elem()
}

func (i CenterUserMap) ToCenterUserMapOutput() CenterUserMapOutput {
	return i.ToCenterUserMapOutputWithContext(context.Background())
}

func (i CenterUserMap) ToCenterUserMapOutputWithContext(ctx context.Context) CenterUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterUserMapOutput)
}

type CenterUserOutput struct{ *pulumi.OutputState }

func (CenterUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterUser)(nil)).Elem()
}

func (o CenterUserOutput) ToCenterUserOutput() CenterUserOutput {
	return o
}

func (o CenterUserOutput) ToCenterUserOutputWithContext(ctx context.Context) CenterUserOutput {
	return o
}

// Create time.
func (o CenterUserOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// User's description. Length: Maximum 1024 characters.
func (o CenterUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The display name of the user. Length: Maximum 256 characters.
func (o CenterUserOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// The user's email address. Must be unique within the catalog. Length: Maximum 128 characters.
func (o CenterUserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// The user's last name. Length: Maximum 64 characters.
func (o CenterUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// The user's name. Length: Maximum 64 characters.
func (o CenterUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

// Update time.
func (o CenterUserOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// User id.
func (o CenterUserOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

// User name. It must be unique in space. Modifications are not supported. Format: Contains numbers, English letters and special symbols(`+`, `=`, `,`, `.`, `@`, `-`, `_`). Length: Maximum 64 characters.
func (o CenterUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// The status of the user. Value: Enabled (default): Enabled. Disabled: Disabled.
func (o CenterUserOutput) UserStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.UserStatus }).(pulumi.StringOutput)
}

// User type.
func (o CenterUserOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.UserType }).(pulumi.StringOutput)
}

// Zone id.
func (o CenterUserOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterUser) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterUserArrayOutput struct{ *pulumi.OutputState }

func (CenterUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterUser)(nil)).Elem()
}

func (o CenterUserArrayOutput) ToCenterUserArrayOutput() CenterUserArrayOutput {
	return o
}

func (o CenterUserArrayOutput) ToCenterUserArrayOutputWithContext(ctx context.Context) CenterUserArrayOutput {
	return o
}

func (o CenterUserArrayOutput) Index(i pulumi.IntInput) CenterUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterUser {
		return vs[0].([]*CenterUser)[vs[1].(int)]
	}).(CenterUserOutput)
}

type CenterUserMapOutput struct{ *pulumi.OutputState }

func (CenterUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterUser)(nil)).Elem()
}

func (o CenterUserMapOutput) ToCenterUserMapOutput() CenterUserMapOutput {
	return o
}

func (o CenterUserMapOutput) ToCenterUserMapOutputWithContext(ctx context.Context) CenterUserMapOutput {
	return o
}

func (o CenterUserMapOutput) MapIndex(k pulumi.StringInput) CenterUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterUser {
		return vs[0].(map[string]*CenterUser)[vs[1].(string)]
	}).(CenterUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserInput)(nil)).Elem(), &CenterUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserArrayInput)(nil)).Elem(), CenterUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterUserMapInput)(nil)).Elem(), CenterUserMap{})
	pulumi.RegisterOutputType(CenterUserOutput{})
	pulumi.RegisterOutputType(CenterUserArrayOutput{})
	pulumi.RegisterOutputType(CenterUserMapOutput{})
}
