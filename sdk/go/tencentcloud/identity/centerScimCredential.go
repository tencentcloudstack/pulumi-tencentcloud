// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create an identity center scim credential
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterScimCredential(ctx, "identityCenterScimCredential", &Identity.CenterScimCredentialArgs{
//				ZoneId: pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization identity_center_scim_credential can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerScimCredential:CenterScimCredential identity_center_scim_credential ${zone_id}#${credential_id}
// ```
type CenterScimCredential struct {
	pulumi.CustomResourceState

	// SCIM create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId pulumi.StringOutput `pulumi:"credentialId"`
	// SCIM credential type.
	CredentialType pulumi.StringOutput `pulumi:"credentialType"`
	// SCIM expire time.
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// SCIM key status, Enabled-On, Disabled-Closed.
	Status pulumi.StringOutput `pulumi:"status"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterScimCredential registers a new resource with the given unique name, arguments, and options.
func NewCenterScimCredential(ctx *pulumi.Context,
	name string, args *CenterScimCredentialArgs, opts ...pulumi.ResourceOption) (*CenterScimCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterScimCredential
	err := ctx.RegisterResource("tencentcloud:Identity/centerScimCredential:CenterScimCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterScimCredential gets an existing CenterScimCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterScimCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterScimCredentialState, opts ...pulumi.ResourceOption) (*CenterScimCredential, error) {
	var resource CenterScimCredential
	err := ctx.ReadResource("tencentcloud:Identity/centerScimCredential:CenterScimCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterScimCredential resources.
type centerScimCredentialState struct {
	// SCIM create time.
	CreateTime *string `pulumi:"createTime"`
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId *string `pulumi:"credentialId"`
	// SCIM credential type.
	CredentialType *string `pulumi:"credentialType"`
	// SCIM expire time.
	ExpireTime *string `pulumi:"expireTime"`
	// SCIM key status, Enabled-On, Disabled-Closed.
	Status *string `pulumi:"status"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterScimCredentialState struct {
	// SCIM create time.
	CreateTime pulumi.StringPtrInput
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId pulumi.StringPtrInput
	// SCIM credential type.
	CredentialType pulumi.StringPtrInput
	// SCIM expire time.
	ExpireTime pulumi.StringPtrInput
	// SCIM key status, Enabled-On, Disabled-Closed.
	Status pulumi.StringPtrInput
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringPtrInput
}

func (CenterScimCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerScimCredentialState)(nil)).Elem()
}

type centerScimCredentialArgs struct {
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterScimCredential resource.
type CenterScimCredentialArgs struct {
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringInput
}

func (CenterScimCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerScimCredentialArgs)(nil)).Elem()
}

type CenterScimCredentialInput interface {
	pulumi.Input

	ToCenterScimCredentialOutput() CenterScimCredentialOutput
	ToCenterScimCredentialOutputWithContext(ctx context.Context) CenterScimCredentialOutput
}

func (*CenterScimCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterScimCredential)(nil)).Elem()
}

func (i *CenterScimCredential) ToCenterScimCredentialOutput() CenterScimCredentialOutput {
	return i.ToCenterScimCredentialOutputWithContext(context.Background())
}

func (i *CenterScimCredential) ToCenterScimCredentialOutputWithContext(ctx context.Context) CenterScimCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimCredentialOutput)
}

// CenterScimCredentialArrayInput is an input type that accepts CenterScimCredentialArray and CenterScimCredentialArrayOutput values.
// You can construct a concrete instance of `CenterScimCredentialArrayInput` via:
//
//	CenterScimCredentialArray{ CenterScimCredentialArgs{...} }
type CenterScimCredentialArrayInput interface {
	pulumi.Input

	ToCenterScimCredentialArrayOutput() CenterScimCredentialArrayOutput
	ToCenterScimCredentialArrayOutputWithContext(context.Context) CenterScimCredentialArrayOutput
}

type CenterScimCredentialArray []CenterScimCredentialInput

func (CenterScimCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterScimCredential)(nil)).Elem()
}

func (i CenterScimCredentialArray) ToCenterScimCredentialArrayOutput() CenterScimCredentialArrayOutput {
	return i.ToCenterScimCredentialArrayOutputWithContext(context.Background())
}

func (i CenterScimCredentialArray) ToCenterScimCredentialArrayOutputWithContext(ctx context.Context) CenterScimCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimCredentialArrayOutput)
}

// CenterScimCredentialMapInput is an input type that accepts CenterScimCredentialMap and CenterScimCredentialMapOutput values.
// You can construct a concrete instance of `CenterScimCredentialMapInput` via:
//
//	CenterScimCredentialMap{ "key": CenterScimCredentialArgs{...} }
type CenterScimCredentialMapInput interface {
	pulumi.Input

	ToCenterScimCredentialMapOutput() CenterScimCredentialMapOutput
	ToCenterScimCredentialMapOutputWithContext(context.Context) CenterScimCredentialMapOutput
}

type CenterScimCredentialMap map[string]CenterScimCredentialInput

func (CenterScimCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterScimCredential)(nil)).Elem()
}

func (i CenterScimCredentialMap) ToCenterScimCredentialMapOutput() CenterScimCredentialMapOutput {
	return i.ToCenterScimCredentialMapOutputWithContext(context.Background())
}

func (i CenterScimCredentialMap) ToCenterScimCredentialMapOutputWithContext(ctx context.Context) CenterScimCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimCredentialMapOutput)
}

type CenterScimCredentialOutput struct{ *pulumi.OutputState }

func (CenterScimCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterScimCredential)(nil)).Elem()
}

func (o CenterScimCredentialOutput) ToCenterScimCredentialOutput() CenterScimCredentialOutput {
	return o
}

func (o CenterScimCredentialOutput) ToCenterScimCredentialOutputWithContext(ctx context.Context) CenterScimCredentialOutput {
	return o
}

// SCIM create time.
func (o CenterScimCredentialOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredential) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
func (o CenterScimCredentialOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredential) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

// SCIM credential type.
func (o CenterScimCredentialOutput) CredentialType() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredential) pulumi.StringOutput { return v.CredentialType }).(pulumi.StringOutput)
}

// SCIM expire time.
func (o CenterScimCredentialOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredential) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// SCIM key status, Enabled-On, Disabled-Closed.
func (o CenterScimCredentialOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredential) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Space ID. z-prefix starts with 12 random digits/lowercase letters.
func (o CenterScimCredentialOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredential) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterScimCredentialArrayOutput struct{ *pulumi.OutputState }

func (CenterScimCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterScimCredential)(nil)).Elem()
}

func (o CenterScimCredentialArrayOutput) ToCenterScimCredentialArrayOutput() CenterScimCredentialArrayOutput {
	return o
}

func (o CenterScimCredentialArrayOutput) ToCenterScimCredentialArrayOutputWithContext(ctx context.Context) CenterScimCredentialArrayOutput {
	return o
}

func (o CenterScimCredentialArrayOutput) Index(i pulumi.IntInput) CenterScimCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterScimCredential {
		return vs[0].([]*CenterScimCredential)[vs[1].(int)]
	}).(CenterScimCredentialOutput)
}

type CenterScimCredentialMapOutput struct{ *pulumi.OutputState }

func (CenterScimCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterScimCredential)(nil)).Elem()
}

func (o CenterScimCredentialMapOutput) ToCenterScimCredentialMapOutput() CenterScimCredentialMapOutput {
	return o
}

func (o CenterScimCredentialMapOutput) ToCenterScimCredentialMapOutputWithContext(ctx context.Context) CenterScimCredentialMapOutput {
	return o
}

func (o CenterScimCredentialMapOutput) MapIndex(k pulumi.StringInput) CenterScimCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterScimCredential {
		return vs[0].(map[string]*CenterScimCredential)[vs[1].(string)]
	}).(CenterScimCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimCredentialInput)(nil)).Elem(), &CenterScimCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimCredentialArrayInput)(nil)).Elem(), CenterScimCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimCredentialMapInput)(nil)).Elem(), CenterScimCredentialMap{})
	pulumi.RegisterOutputType(CenterScimCredentialOutput{})
	pulumi.RegisterOutputType(CenterScimCredentialArrayOutput{})
	pulumi.RegisterOutputType(CenterScimCredentialMapOutput{})
}
