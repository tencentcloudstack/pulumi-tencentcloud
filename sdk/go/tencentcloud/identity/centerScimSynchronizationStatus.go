// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to manage identity center scim synchronization status
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterScimSynchronizationStatus(ctx, "identityCenterScimSynchronizationStatus", &Identity.CenterScimSynchronizationStatusArgs{
//				ScimSynchronizationStatus: pulumi.String("Enabled"),
//				ZoneId:                    pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization identity_center_scim_synchronization_status can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerScimSynchronizationStatus:CenterScimSynchronizationStatus identity_center_scim_synchronization_status ${zone_id}
// ```
type CenterScimSynchronizationStatus struct {
	pulumi.CustomResourceState

	// SCIM synchronization status. Enabled-enabled. Disabled-disables.
	ScimSynchronizationStatus pulumi.StringOutput `pulumi:"scimSynchronizationStatus"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterScimSynchronizationStatus registers a new resource with the given unique name, arguments, and options.
func NewCenterScimSynchronizationStatus(ctx *pulumi.Context,
	name string, args *CenterScimSynchronizationStatusArgs, opts ...pulumi.ResourceOption) (*CenterScimSynchronizationStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScimSynchronizationStatus == nil {
		return nil, errors.New("invalid value for required argument 'ScimSynchronizationStatus'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterScimSynchronizationStatus
	err := ctx.RegisterResource("tencentcloud:Identity/centerScimSynchronizationStatus:CenterScimSynchronizationStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterScimSynchronizationStatus gets an existing CenterScimSynchronizationStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterScimSynchronizationStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterScimSynchronizationStatusState, opts ...pulumi.ResourceOption) (*CenterScimSynchronizationStatus, error) {
	var resource CenterScimSynchronizationStatus
	err := ctx.ReadResource("tencentcloud:Identity/centerScimSynchronizationStatus:CenterScimSynchronizationStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterScimSynchronizationStatus resources.
type centerScimSynchronizationStatusState struct {
	// SCIM synchronization status. Enabled-enabled. Disabled-disables.
	ScimSynchronizationStatus *string `pulumi:"scimSynchronizationStatus"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterScimSynchronizationStatusState struct {
	// SCIM synchronization status. Enabled-enabled. Disabled-disables.
	ScimSynchronizationStatus pulumi.StringPtrInput
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringPtrInput
}

func (CenterScimSynchronizationStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerScimSynchronizationStatusState)(nil)).Elem()
}

type centerScimSynchronizationStatusArgs struct {
	// SCIM synchronization status. Enabled-enabled. Disabled-disables.
	ScimSynchronizationStatus string `pulumi:"scimSynchronizationStatus"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterScimSynchronizationStatus resource.
type CenterScimSynchronizationStatusArgs struct {
	// SCIM synchronization status. Enabled-enabled. Disabled-disables.
	ScimSynchronizationStatus pulumi.StringInput
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringInput
}

func (CenterScimSynchronizationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerScimSynchronizationStatusArgs)(nil)).Elem()
}

type CenterScimSynchronizationStatusInput interface {
	pulumi.Input

	ToCenterScimSynchronizationStatusOutput() CenterScimSynchronizationStatusOutput
	ToCenterScimSynchronizationStatusOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusOutput
}

func (*CenterScimSynchronizationStatus) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterScimSynchronizationStatus)(nil)).Elem()
}

func (i *CenterScimSynchronizationStatus) ToCenterScimSynchronizationStatusOutput() CenterScimSynchronizationStatusOutput {
	return i.ToCenterScimSynchronizationStatusOutputWithContext(context.Background())
}

func (i *CenterScimSynchronizationStatus) ToCenterScimSynchronizationStatusOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimSynchronizationStatusOutput)
}

// CenterScimSynchronizationStatusArrayInput is an input type that accepts CenterScimSynchronizationStatusArray and CenterScimSynchronizationStatusArrayOutput values.
// You can construct a concrete instance of `CenterScimSynchronizationStatusArrayInput` via:
//
//	CenterScimSynchronizationStatusArray{ CenterScimSynchronizationStatusArgs{...} }
type CenterScimSynchronizationStatusArrayInput interface {
	pulumi.Input

	ToCenterScimSynchronizationStatusArrayOutput() CenterScimSynchronizationStatusArrayOutput
	ToCenterScimSynchronizationStatusArrayOutputWithContext(context.Context) CenterScimSynchronizationStatusArrayOutput
}

type CenterScimSynchronizationStatusArray []CenterScimSynchronizationStatusInput

func (CenterScimSynchronizationStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterScimSynchronizationStatus)(nil)).Elem()
}

func (i CenterScimSynchronizationStatusArray) ToCenterScimSynchronizationStatusArrayOutput() CenterScimSynchronizationStatusArrayOutput {
	return i.ToCenterScimSynchronizationStatusArrayOutputWithContext(context.Background())
}

func (i CenterScimSynchronizationStatusArray) ToCenterScimSynchronizationStatusArrayOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimSynchronizationStatusArrayOutput)
}

// CenterScimSynchronizationStatusMapInput is an input type that accepts CenterScimSynchronizationStatusMap and CenterScimSynchronizationStatusMapOutput values.
// You can construct a concrete instance of `CenterScimSynchronizationStatusMapInput` via:
//
//	CenterScimSynchronizationStatusMap{ "key": CenterScimSynchronizationStatusArgs{...} }
type CenterScimSynchronizationStatusMapInput interface {
	pulumi.Input

	ToCenterScimSynchronizationStatusMapOutput() CenterScimSynchronizationStatusMapOutput
	ToCenterScimSynchronizationStatusMapOutputWithContext(context.Context) CenterScimSynchronizationStatusMapOutput
}

type CenterScimSynchronizationStatusMap map[string]CenterScimSynchronizationStatusInput

func (CenterScimSynchronizationStatusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterScimSynchronizationStatus)(nil)).Elem()
}

func (i CenterScimSynchronizationStatusMap) ToCenterScimSynchronizationStatusMapOutput() CenterScimSynchronizationStatusMapOutput {
	return i.ToCenterScimSynchronizationStatusMapOutputWithContext(context.Background())
}

func (i CenterScimSynchronizationStatusMap) ToCenterScimSynchronizationStatusMapOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimSynchronizationStatusMapOutput)
}

type CenterScimSynchronizationStatusOutput struct{ *pulumi.OutputState }

func (CenterScimSynchronizationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterScimSynchronizationStatus)(nil)).Elem()
}

func (o CenterScimSynchronizationStatusOutput) ToCenterScimSynchronizationStatusOutput() CenterScimSynchronizationStatusOutput {
	return o
}

func (o CenterScimSynchronizationStatusOutput) ToCenterScimSynchronizationStatusOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusOutput {
	return o
}

// SCIM synchronization status. Enabled-enabled. Disabled-disables.
func (o CenterScimSynchronizationStatusOutput) ScimSynchronizationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimSynchronizationStatus) pulumi.StringOutput { return v.ScimSynchronizationStatus }).(pulumi.StringOutput)
}

// Space ID. z-prefix starts with 12 random digits/lowercase letters.
func (o CenterScimSynchronizationStatusOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimSynchronizationStatus) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterScimSynchronizationStatusArrayOutput struct{ *pulumi.OutputState }

func (CenterScimSynchronizationStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterScimSynchronizationStatus)(nil)).Elem()
}

func (o CenterScimSynchronizationStatusArrayOutput) ToCenterScimSynchronizationStatusArrayOutput() CenterScimSynchronizationStatusArrayOutput {
	return o
}

func (o CenterScimSynchronizationStatusArrayOutput) ToCenterScimSynchronizationStatusArrayOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusArrayOutput {
	return o
}

func (o CenterScimSynchronizationStatusArrayOutput) Index(i pulumi.IntInput) CenterScimSynchronizationStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterScimSynchronizationStatus {
		return vs[0].([]*CenterScimSynchronizationStatus)[vs[1].(int)]
	}).(CenterScimSynchronizationStatusOutput)
}

type CenterScimSynchronizationStatusMapOutput struct{ *pulumi.OutputState }

func (CenterScimSynchronizationStatusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterScimSynchronizationStatus)(nil)).Elem()
}

func (o CenterScimSynchronizationStatusMapOutput) ToCenterScimSynchronizationStatusMapOutput() CenterScimSynchronizationStatusMapOutput {
	return o
}

func (o CenterScimSynchronizationStatusMapOutput) ToCenterScimSynchronizationStatusMapOutputWithContext(ctx context.Context) CenterScimSynchronizationStatusMapOutput {
	return o
}

func (o CenterScimSynchronizationStatusMapOutput) MapIndex(k pulumi.StringInput) CenterScimSynchronizationStatusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterScimSynchronizationStatus {
		return vs[0].(map[string]*CenterScimSynchronizationStatus)[vs[1].(string)]
	}).(CenterScimSynchronizationStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimSynchronizationStatusInput)(nil)).Elem(), &CenterScimSynchronizationStatus{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimSynchronizationStatusArrayInput)(nil)).Elem(), CenterScimSynchronizationStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimSynchronizationStatusMapInput)(nil)).Elem(), CenterScimSynchronizationStatusMap{})
	pulumi.RegisterOutputType(CenterScimSynchronizationStatusOutput{})
	pulumi.RegisterOutputType(CenterScimSynchronizationStatusArrayOutput{})
	pulumi.RegisterOutputType(CenterScimSynchronizationStatusMapOutput{})
}
