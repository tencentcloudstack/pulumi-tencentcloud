// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create an identity center group
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterGroup(ctx, "identityCenterGroup", &Identity.CenterGroupArgs{
//				Description: pulumi.String("test"),
//				GroupName:   pulumi.String("test-group"),
//				ZoneId:      pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// tencentcloud_identity_center_group can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerGroup:CenterGroup identity_center_group ${zoneId}#${groupId}
// ```
type CenterGroup struct {
	pulumi.CustomResourceState

	// Creation time of the user group.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// A description of the user group. Length: Maximum 1024 characters.
	Description pulumi.StringOutput `pulumi:"description"`
	// ID of the user group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Type of user group. `Manual`: manual creation, `Synchronized`: external import.
	GroupType pulumi.StringOutput `pulumi:"groupType"`
	// Number of team members.
	MemberCount pulumi.IntOutput `pulumi:"memberCount"`
	// Modification time for the user group.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Zone id.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterGroup registers a new resource with the given unique name, arguments, and options.
func NewCenterGroup(ctx *pulumi.Context,
	name string, args *CenterGroupArgs, opts ...pulumi.ResourceOption) (*CenterGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterGroup
	err := ctx.RegisterResource("tencentcloud:Identity/centerGroup:CenterGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterGroup gets an existing CenterGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterGroupState, opts ...pulumi.ResourceOption) (*CenterGroup, error) {
	var resource CenterGroup
	err := ctx.ReadResource("tencentcloud:Identity/centerGroup:CenterGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterGroup resources.
type centerGroupState struct {
	// Creation time of the user group.
	CreateTime *string `pulumi:"createTime"`
	// A description of the user group. Length: Maximum 1024 characters.
	Description *string `pulumi:"description"`
	// ID of the user group.
	GroupId *string `pulumi:"groupId"`
	// The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
	GroupName *string `pulumi:"groupName"`
	// Type of user group. `Manual`: manual creation, `Synchronized`: external import.
	GroupType *string `pulumi:"groupType"`
	// Number of team members.
	MemberCount *int `pulumi:"memberCount"`
	// Modification time for the user group.
	UpdateTime *string `pulumi:"updateTime"`
	// Zone id.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterGroupState struct {
	// Creation time of the user group.
	CreateTime pulumi.StringPtrInput
	// A description of the user group. Length: Maximum 1024 characters.
	Description pulumi.StringPtrInput
	// ID of the user group.
	GroupId pulumi.StringPtrInput
	// The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
	GroupName pulumi.StringPtrInput
	// Type of user group. `Manual`: manual creation, `Synchronized`: external import.
	GroupType pulumi.StringPtrInput
	// Number of team members.
	MemberCount pulumi.IntPtrInput
	// Modification time for the user group.
	UpdateTime pulumi.StringPtrInput
	// Zone id.
	ZoneId pulumi.StringPtrInput
}

func (CenterGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerGroupState)(nil)).Elem()
}

type centerGroupArgs struct {
	// A description of the user group. Length: Maximum 1024 characters.
	Description *string `pulumi:"description"`
	// The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
	GroupName string `pulumi:"groupName"`
	// Zone id.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterGroup resource.
type CenterGroupArgs struct {
	// A description of the user group. Length: Maximum 1024 characters.
	Description pulumi.StringPtrInput
	// The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
	GroupName pulumi.StringInput
	// Zone id.
	ZoneId pulumi.StringInput
}

func (CenterGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerGroupArgs)(nil)).Elem()
}

type CenterGroupInput interface {
	pulumi.Input

	ToCenterGroupOutput() CenterGroupOutput
	ToCenterGroupOutputWithContext(ctx context.Context) CenterGroupOutput
}

func (*CenterGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterGroup)(nil)).Elem()
}

func (i *CenterGroup) ToCenterGroupOutput() CenterGroupOutput {
	return i.ToCenterGroupOutputWithContext(context.Background())
}

func (i *CenterGroup) ToCenterGroupOutputWithContext(ctx context.Context) CenterGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterGroupOutput)
}

// CenterGroupArrayInput is an input type that accepts CenterGroupArray and CenterGroupArrayOutput values.
// You can construct a concrete instance of `CenterGroupArrayInput` via:
//
//	CenterGroupArray{ CenterGroupArgs{...} }
type CenterGroupArrayInput interface {
	pulumi.Input

	ToCenterGroupArrayOutput() CenterGroupArrayOutput
	ToCenterGroupArrayOutputWithContext(context.Context) CenterGroupArrayOutput
}

type CenterGroupArray []CenterGroupInput

func (CenterGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterGroup)(nil)).Elem()
}

func (i CenterGroupArray) ToCenterGroupArrayOutput() CenterGroupArrayOutput {
	return i.ToCenterGroupArrayOutputWithContext(context.Background())
}

func (i CenterGroupArray) ToCenterGroupArrayOutputWithContext(ctx context.Context) CenterGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterGroupArrayOutput)
}

// CenterGroupMapInput is an input type that accepts CenterGroupMap and CenterGroupMapOutput values.
// You can construct a concrete instance of `CenterGroupMapInput` via:
//
//	CenterGroupMap{ "key": CenterGroupArgs{...} }
type CenterGroupMapInput interface {
	pulumi.Input

	ToCenterGroupMapOutput() CenterGroupMapOutput
	ToCenterGroupMapOutputWithContext(context.Context) CenterGroupMapOutput
}

type CenterGroupMap map[string]CenterGroupInput

func (CenterGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterGroup)(nil)).Elem()
}

func (i CenterGroupMap) ToCenterGroupMapOutput() CenterGroupMapOutput {
	return i.ToCenterGroupMapOutputWithContext(context.Background())
}

func (i CenterGroupMap) ToCenterGroupMapOutputWithContext(ctx context.Context) CenterGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterGroupMapOutput)
}

type CenterGroupOutput struct{ *pulumi.OutputState }

func (CenterGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterGroup)(nil)).Elem()
}

func (o CenterGroupOutput) ToCenterGroupOutput() CenterGroupOutput {
	return o
}

func (o CenterGroupOutput) ToCenterGroupOutputWithContext(ctx context.Context) CenterGroupOutput {
	return o
}

// Creation time of the user group.
func (o CenterGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// A description of the user group. Length: Maximum 1024 characters.
func (o CenterGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// ID of the user group.
func (o CenterGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The name of the user group. Format: Allow English letters, numbers and special characters-. Length: Maximum 128 characters.
func (o CenterGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Type of user group. `Manual`: manual creation, `Synchronized`: external import.
func (o CenterGroupOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.GroupType }).(pulumi.StringOutput)
}

// Number of team members.
func (o CenterGroupOutput) MemberCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.IntOutput { return v.MemberCount }).(pulumi.IntOutput)
}

// Modification time for the user group.
func (o CenterGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Zone id.
func (o CenterGroupOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterGroup) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterGroupArrayOutput struct{ *pulumi.OutputState }

func (CenterGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterGroup)(nil)).Elem()
}

func (o CenterGroupArrayOutput) ToCenterGroupArrayOutput() CenterGroupArrayOutput {
	return o
}

func (o CenterGroupArrayOutput) ToCenterGroupArrayOutputWithContext(ctx context.Context) CenterGroupArrayOutput {
	return o
}

func (o CenterGroupArrayOutput) Index(i pulumi.IntInput) CenterGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterGroup {
		return vs[0].([]*CenterGroup)[vs[1].(int)]
	}).(CenterGroupOutput)
}

type CenterGroupMapOutput struct{ *pulumi.OutputState }

func (CenterGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterGroup)(nil)).Elem()
}

func (o CenterGroupMapOutput) ToCenterGroupMapOutput() CenterGroupMapOutput {
	return o
}

func (o CenterGroupMapOutput) ToCenterGroupMapOutputWithContext(ctx context.Context) CenterGroupMapOutput {
	return o
}

func (o CenterGroupMapOutput) MapIndex(k pulumi.StringInput) CenterGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterGroup {
		return vs[0].(map[string]*CenterGroup)[vs[1].(string)]
	}).(CenterGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterGroupInput)(nil)).Elem(), &CenterGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterGroupArrayInput)(nil)).Elem(), CenterGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterGroupMapInput)(nil)).Elem(), CenterGroupMap{})
	pulumi.RegisterOutputType(CenterGroupOutput{})
	pulumi.RegisterOutputType(CenterGroupArrayOutput{})
	pulumi.RegisterOutputType(CenterGroupMapOutput{})
}
