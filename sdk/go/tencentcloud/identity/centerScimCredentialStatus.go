// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to manage identity center scim credential status
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Identity"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Identity.NewCenterScimCredentialStatus(ctx, "identityCenterScimCredentialStatus", &Identity.CenterScimCredentialStatusArgs{
//				CredentialId: pulumi.String("scimcred-xxxxxx"),
//				Status:       pulumi.String("Enabled"),
//				ZoneId:       pulumi.String("z-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// organization identity_center_scim_credential_status can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Identity/centerScimCredentialStatus:CenterScimCredentialStatus identity_center_scim_credential_status ${zone_id}#${credential_id}
// ```
type CenterScimCredentialStatus struct {
	pulumi.CustomResourceState

	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId pulumi.StringOutput `pulumi:"credentialId"`
	// SCIM key status. Enabled-enabled. Disabled-disabled.
	Status pulumi.StringOutput `pulumi:"status"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCenterScimCredentialStatus registers a new resource with the given unique name, arguments, and options.
func NewCenterScimCredentialStatus(ctx *pulumi.Context,
	name string, args *CenterScimCredentialStatusArgs, opts ...pulumi.ResourceOption) (*CenterScimCredentialStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CredentialId == nil {
		return nil, errors.New("invalid value for required argument 'CredentialId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CenterScimCredentialStatus
	err := ctx.RegisterResource("tencentcloud:Identity/centerScimCredentialStatus:CenterScimCredentialStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCenterScimCredentialStatus gets an existing CenterScimCredentialStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCenterScimCredentialStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CenterScimCredentialStatusState, opts ...pulumi.ResourceOption) (*CenterScimCredentialStatus, error) {
	var resource CenterScimCredentialStatus
	err := ctx.ReadResource("tencentcloud:Identity/centerScimCredentialStatus:CenterScimCredentialStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CenterScimCredentialStatus resources.
type centerScimCredentialStatusState struct {
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId *string `pulumi:"credentialId"`
	// SCIM key status. Enabled-enabled. Disabled-disabled.
	Status *string `pulumi:"status"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId *string `pulumi:"zoneId"`
}

type CenterScimCredentialStatusState struct {
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId pulumi.StringPtrInput
	// SCIM key status. Enabled-enabled. Disabled-disabled.
	Status pulumi.StringPtrInput
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringPtrInput
}

func (CenterScimCredentialStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*centerScimCredentialStatusState)(nil)).Elem()
}

type centerScimCredentialStatusArgs struct {
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId string `pulumi:"credentialId"`
	// SCIM key status. Enabled-enabled. Disabled-disabled.
	Status string `pulumi:"status"`
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CenterScimCredentialStatus resource.
type CenterScimCredentialStatusArgs struct {
	// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
	CredentialId pulumi.StringInput
	// SCIM key status. Enabled-enabled. Disabled-disabled.
	Status pulumi.StringInput
	// Space ID. z-prefix starts with 12 random digits/lowercase letters.
	ZoneId pulumi.StringInput
}

func (CenterScimCredentialStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centerScimCredentialStatusArgs)(nil)).Elem()
}

type CenterScimCredentialStatusInput interface {
	pulumi.Input

	ToCenterScimCredentialStatusOutput() CenterScimCredentialStatusOutput
	ToCenterScimCredentialStatusOutputWithContext(ctx context.Context) CenterScimCredentialStatusOutput
}

func (*CenterScimCredentialStatus) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterScimCredentialStatus)(nil)).Elem()
}

func (i *CenterScimCredentialStatus) ToCenterScimCredentialStatusOutput() CenterScimCredentialStatusOutput {
	return i.ToCenterScimCredentialStatusOutputWithContext(context.Background())
}

func (i *CenterScimCredentialStatus) ToCenterScimCredentialStatusOutputWithContext(ctx context.Context) CenterScimCredentialStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimCredentialStatusOutput)
}

// CenterScimCredentialStatusArrayInput is an input type that accepts CenterScimCredentialStatusArray and CenterScimCredentialStatusArrayOutput values.
// You can construct a concrete instance of `CenterScimCredentialStatusArrayInput` via:
//
//	CenterScimCredentialStatusArray{ CenterScimCredentialStatusArgs{...} }
type CenterScimCredentialStatusArrayInput interface {
	pulumi.Input

	ToCenterScimCredentialStatusArrayOutput() CenterScimCredentialStatusArrayOutput
	ToCenterScimCredentialStatusArrayOutputWithContext(context.Context) CenterScimCredentialStatusArrayOutput
}

type CenterScimCredentialStatusArray []CenterScimCredentialStatusInput

func (CenterScimCredentialStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterScimCredentialStatus)(nil)).Elem()
}

func (i CenterScimCredentialStatusArray) ToCenterScimCredentialStatusArrayOutput() CenterScimCredentialStatusArrayOutput {
	return i.ToCenterScimCredentialStatusArrayOutputWithContext(context.Background())
}

func (i CenterScimCredentialStatusArray) ToCenterScimCredentialStatusArrayOutputWithContext(ctx context.Context) CenterScimCredentialStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimCredentialStatusArrayOutput)
}

// CenterScimCredentialStatusMapInput is an input type that accepts CenterScimCredentialStatusMap and CenterScimCredentialStatusMapOutput values.
// You can construct a concrete instance of `CenterScimCredentialStatusMapInput` via:
//
//	CenterScimCredentialStatusMap{ "key": CenterScimCredentialStatusArgs{...} }
type CenterScimCredentialStatusMapInput interface {
	pulumi.Input

	ToCenterScimCredentialStatusMapOutput() CenterScimCredentialStatusMapOutput
	ToCenterScimCredentialStatusMapOutputWithContext(context.Context) CenterScimCredentialStatusMapOutput
}

type CenterScimCredentialStatusMap map[string]CenterScimCredentialStatusInput

func (CenterScimCredentialStatusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterScimCredentialStatus)(nil)).Elem()
}

func (i CenterScimCredentialStatusMap) ToCenterScimCredentialStatusMapOutput() CenterScimCredentialStatusMapOutput {
	return i.ToCenterScimCredentialStatusMapOutputWithContext(context.Background())
}

func (i CenterScimCredentialStatusMap) ToCenterScimCredentialStatusMapOutputWithContext(ctx context.Context) CenterScimCredentialStatusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CenterScimCredentialStatusMapOutput)
}

type CenterScimCredentialStatusOutput struct{ *pulumi.OutputState }

func (CenterScimCredentialStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CenterScimCredentialStatus)(nil)).Elem()
}

func (o CenterScimCredentialStatusOutput) ToCenterScimCredentialStatusOutput() CenterScimCredentialStatusOutput {
	return o
}

func (o CenterScimCredentialStatusOutput) ToCenterScimCredentialStatusOutputWithContext(ctx context.Context) CenterScimCredentialStatusOutput {
	return o
}

// SCIM key ID. scimcred-prefix and followed by 12 random digits/lowercase letters.
func (o CenterScimCredentialStatusOutput) CredentialId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredentialStatus) pulumi.StringOutput { return v.CredentialId }).(pulumi.StringOutput)
}

// SCIM key status. Enabled-enabled. Disabled-disabled.
func (o CenterScimCredentialStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredentialStatus) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Space ID. z-prefix starts with 12 random digits/lowercase letters.
func (o CenterScimCredentialStatusOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CenterScimCredentialStatus) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CenterScimCredentialStatusArrayOutput struct{ *pulumi.OutputState }

func (CenterScimCredentialStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CenterScimCredentialStatus)(nil)).Elem()
}

func (o CenterScimCredentialStatusArrayOutput) ToCenterScimCredentialStatusArrayOutput() CenterScimCredentialStatusArrayOutput {
	return o
}

func (o CenterScimCredentialStatusArrayOutput) ToCenterScimCredentialStatusArrayOutputWithContext(ctx context.Context) CenterScimCredentialStatusArrayOutput {
	return o
}

func (o CenterScimCredentialStatusArrayOutput) Index(i pulumi.IntInput) CenterScimCredentialStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CenterScimCredentialStatus {
		return vs[0].([]*CenterScimCredentialStatus)[vs[1].(int)]
	}).(CenterScimCredentialStatusOutput)
}

type CenterScimCredentialStatusMapOutput struct{ *pulumi.OutputState }

func (CenterScimCredentialStatusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CenterScimCredentialStatus)(nil)).Elem()
}

func (o CenterScimCredentialStatusMapOutput) ToCenterScimCredentialStatusMapOutput() CenterScimCredentialStatusMapOutput {
	return o
}

func (o CenterScimCredentialStatusMapOutput) ToCenterScimCredentialStatusMapOutputWithContext(ctx context.Context) CenterScimCredentialStatusMapOutput {
	return o
}

func (o CenterScimCredentialStatusMapOutput) MapIndex(k pulumi.StringInput) CenterScimCredentialStatusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CenterScimCredentialStatus {
		return vs[0].(map[string]*CenterScimCredentialStatus)[vs[1].(string)]
	}).(CenterScimCredentialStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimCredentialStatusInput)(nil)).Elem(), &CenterScimCredentialStatus{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimCredentialStatusArrayInput)(nil)).Elem(), CenterScimCredentialStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CenterScimCredentialStatusMapInput)(nil)).Elem(), CenterScimCredentialStatusMap{})
	pulumi.RegisterOutputType(CenterScimCredentialStatusOutput{})
	pulumi.RegisterOutputType(CenterScimCredentialStatusArrayOutput{})
	pulumi.RegisterOutputType(CenterScimCredentialStatusMapOutput{})
}
