// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tat

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tat invoker
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tat"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tat.NewInvoker(ctx, "invoker", &Tat.InvokerArgs{
//				CommandId: pulumi.String("cmd-6fydo27j"),
//				InstanceIds: pulumi.StringArray{
//					pulumi.String("ins-3c7q2ebs"),
//				},
//				ScheduleSettings: &tat.InvokerScheduleSettingsArgs{
//					InvokeTime: pulumi.String("2099-11-17T16:00:00Z"),
//					Policy:     pulumi.String("ONCE"),
//				},
//				Type:     pulumi.String("SCHEDULE"),
//				Username: pulumi.String("root"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tat invoker can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tat/invoker:Invoker invoker ivk-gwb4ztk5
//
// ```
type Invoker struct {
	pulumi.CustomResourceState

	// Remote command ID.
	CommandId pulumi.StringOutput `pulumi:"commandId"`
	// Creation time.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// Whether to enable the invoker.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// ID of the instance bound to the trigger. Up to 100 IDs are allowed.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// Invoker ID.
	InvokerId pulumi.StringOutput `pulumi:"invokerId"`
	// Invoker name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Custom parameters of the command.
	Parameters pulumi.StringPtrOutput `pulumi:"parameters"`
	// Settings required for a recurring invoker.
	ScheduleSettings InvokerScheduleSettingsPtrOutput `pulumi:"scheduleSettings"`
	// Invoker type. It can only be `SCHEDULE` (recurring invokers).
	Type pulumi.StringOutput `pulumi:"type"`
	// Modification time.
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// The user who executes the command.
	Username pulumi.StringPtrOutput `pulumi:"username"`
}

// NewInvoker registers a new resource with the given unique name, arguments, and options.
func NewInvoker(ctx *pulumi.Context,
	name string, args *InvokerArgs, opts ...pulumi.ResourceOption) (*Invoker, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommandId == nil {
		return nil, errors.New("invalid value for required argument 'CommandId'")
	}
	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Invoker
	err := ctx.RegisterResource("tencentcloud:Tat/invoker:Invoker", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvoker gets an existing Invoker resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvoker(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvokerState, opts ...pulumi.ResourceOption) (*Invoker, error) {
	var resource Invoker
	err := ctx.ReadResource("tencentcloud:Tat/invoker:Invoker", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Invoker resources.
type invokerState struct {
	// Remote command ID.
	CommandId *string `pulumi:"commandId"`
	// Creation time.
	CreatedTime *string `pulumi:"createdTime"`
	// Whether to enable the invoker.
	Enable *bool `pulumi:"enable"`
	// ID of the instance bound to the trigger. Up to 100 IDs are allowed.
	InstanceIds []string `pulumi:"instanceIds"`
	// Invoker ID.
	InvokerId *string `pulumi:"invokerId"`
	// Invoker name.
	Name *string `pulumi:"name"`
	// Custom parameters of the command.
	Parameters *string `pulumi:"parameters"`
	// Settings required for a recurring invoker.
	ScheduleSettings *InvokerScheduleSettings `pulumi:"scheduleSettings"`
	// Invoker type. It can only be `SCHEDULE` (recurring invokers).
	Type *string `pulumi:"type"`
	// Modification time.
	UpdatedTime *string `pulumi:"updatedTime"`
	// The user who executes the command.
	Username *string `pulumi:"username"`
}

type InvokerState struct {
	// Remote command ID.
	CommandId pulumi.StringPtrInput
	// Creation time.
	CreatedTime pulumi.StringPtrInput
	// Whether to enable the invoker.
	Enable pulumi.BoolPtrInput
	// ID of the instance bound to the trigger. Up to 100 IDs are allowed.
	InstanceIds pulumi.StringArrayInput
	// Invoker ID.
	InvokerId pulumi.StringPtrInput
	// Invoker name.
	Name pulumi.StringPtrInput
	// Custom parameters of the command.
	Parameters pulumi.StringPtrInput
	// Settings required for a recurring invoker.
	ScheduleSettings InvokerScheduleSettingsPtrInput
	// Invoker type. It can only be `SCHEDULE` (recurring invokers).
	Type pulumi.StringPtrInput
	// Modification time.
	UpdatedTime pulumi.StringPtrInput
	// The user who executes the command.
	Username pulumi.StringPtrInput
}

func (InvokerState) ElementType() reflect.Type {
	return reflect.TypeOf((*invokerState)(nil)).Elem()
}

type invokerArgs struct {
	// Remote command ID.
	CommandId string `pulumi:"commandId"`
	// ID of the instance bound to the trigger. Up to 100 IDs are allowed.
	InstanceIds []string `pulumi:"instanceIds"`
	// Invoker name.
	Name *string `pulumi:"name"`
	// Custom parameters of the command.
	Parameters *string `pulumi:"parameters"`
	// Settings required for a recurring invoker.
	ScheduleSettings *InvokerScheduleSettings `pulumi:"scheduleSettings"`
	// Invoker type. It can only be `SCHEDULE` (recurring invokers).
	Type string `pulumi:"type"`
	// The user who executes the command.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a Invoker resource.
type InvokerArgs struct {
	// Remote command ID.
	CommandId pulumi.StringInput
	// ID of the instance bound to the trigger. Up to 100 IDs are allowed.
	InstanceIds pulumi.StringArrayInput
	// Invoker name.
	Name pulumi.StringPtrInput
	// Custom parameters of the command.
	Parameters pulumi.StringPtrInput
	// Settings required for a recurring invoker.
	ScheduleSettings InvokerScheduleSettingsPtrInput
	// Invoker type. It can only be `SCHEDULE` (recurring invokers).
	Type pulumi.StringInput
	// The user who executes the command.
	Username pulumi.StringPtrInput
}

func (InvokerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invokerArgs)(nil)).Elem()
}

type InvokerInput interface {
	pulumi.Input

	ToInvokerOutput() InvokerOutput
	ToInvokerOutputWithContext(ctx context.Context) InvokerOutput
}

func (*Invoker) ElementType() reflect.Type {
	return reflect.TypeOf((**Invoker)(nil)).Elem()
}

func (i *Invoker) ToInvokerOutput() InvokerOutput {
	return i.ToInvokerOutputWithContext(context.Background())
}

func (i *Invoker) ToInvokerOutputWithContext(ctx context.Context) InvokerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokerOutput)
}

// InvokerArrayInput is an input type that accepts InvokerArray and InvokerArrayOutput values.
// You can construct a concrete instance of `InvokerArrayInput` via:
//
//	InvokerArray{ InvokerArgs{...} }
type InvokerArrayInput interface {
	pulumi.Input

	ToInvokerArrayOutput() InvokerArrayOutput
	ToInvokerArrayOutputWithContext(context.Context) InvokerArrayOutput
}

type InvokerArray []InvokerInput

func (InvokerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invoker)(nil)).Elem()
}

func (i InvokerArray) ToInvokerArrayOutput() InvokerArrayOutput {
	return i.ToInvokerArrayOutputWithContext(context.Background())
}

func (i InvokerArray) ToInvokerArrayOutputWithContext(ctx context.Context) InvokerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokerArrayOutput)
}

// InvokerMapInput is an input type that accepts InvokerMap and InvokerMapOutput values.
// You can construct a concrete instance of `InvokerMapInput` via:
//
//	InvokerMap{ "key": InvokerArgs{...} }
type InvokerMapInput interface {
	pulumi.Input

	ToInvokerMapOutput() InvokerMapOutput
	ToInvokerMapOutputWithContext(context.Context) InvokerMapOutput
}

type InvokerMap map[string]InvokerInput

func (InvokerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invoker)(nil)).Elem()
}

func (i InvokerMap) ToInvokerMapOutput() InvokerMapOutput {
	return i.ToInvokerMapOutputWithContext(context.Background())
}

func (i InvokerMap) ToInvokerMapOutputWithContext(ctx context.Context) InvokerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokerMapOutput)
}

type InvokerOutput struct{ *pulumi.OutputState }

func (InvokerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Invoker)(nil)).Elem()
}

func (o InvokerOutput) ToInvokerOutput() InvokerOutput {
	return o
}

func (o InvokerOutput) ToInvokerOutputWithContext(ctx context.Context) InvokerOutput {
	return o
}

// Remote command ID.
func (o InvokerOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringOutput { return v.CommandId }).(pulumi.StringOutput)
}

// Creation time.
func (o InvokerOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// Whether to enable the invoker.
func (o InvokerOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Invoker) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// ID of the instance bound to the trigger. Up to 100 IDs are allowed.
func (o InvokerOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// Invoker ID.
func (o InvokerOutput) InvokerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringOutput { return v.InvokerId }).(pulumi.StringOutput)
}

// Invoker name.
func (o InvokerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Custom parameters of the command.
func (o InvokerOutput) Parameters() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringPtrOutput { return v.Parameters }).(pulumi.StringPtrOutput)
}

// Settings required for a recurring invoker.
func (o InvokerOutput) ScheduleSettings() InvokerScheduleSettingsPtrOutput {
	return o.ApplyT(func(v *Invoker) InvokerScheduleSettingsPtrOutput { return v.ScheduleSettings }).(InvokerScheduleSettingsPtrOutput)
}

// Invoker type. It can only be `SCHEDULE` (recurring invokers).
func (o InvokerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Modification time.
func (o InvokerOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// The user who executes the command.
func (o InvokerOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invoker) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

type InvokerArrayOutput struct{ *pulumi.OutputState }

func (InvokerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invoker)(nil)).Elem()
}

func (o InvokerArrayOutput) ToInvokerArrayOutput() InvokerArrayOutput {
	return o
}

func (o InvokerArrayOutput) ToInvokerArrayOutputWithContext(ctx context.Context) InvokerArrayOutput {
	return o
}

func (o InvokerArrayOutput) Index(i pulumi.IntInput) InvokerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Invoker {
		return vs[0].([]*Invoker)[vs[1].(int)]
	}).(InvokerOutput)
}

type InvokerMapOutput struct{ *pulumi.OutputState }

func (InvokerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invoker)(nil)).Elem()
}

func (o InvokerMapOutput) ToInvokerMapOutput() InvokerMapOutput {
	return o
}

func (o InvokerMapOutput) ToInvokerMapOutputWithContext(ctx context.Context) InvokerMapOutput {
	return o
}

func (o InvokerMapOutput) MapIndex(k pulumi.StringInput) InvokerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Invoker {
		return vs[0].(map[string]*Invoker)[vs[1].(string)]
	}).(InvokerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvokerInput)(nil)).Elem(), &Invoker{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvokerArrayInput)(nil)).Elem(), InvokerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvokerMapInput)(nil)).Elem(), InvokerMap{})
	pulumi.RegisterOutputType(InvokerOutput{})
	pulumi.RegisterOutputType(InvokerArrayOutput{})
	pulumi.RegisterOutputType(InvokerMapOutput{})
}
