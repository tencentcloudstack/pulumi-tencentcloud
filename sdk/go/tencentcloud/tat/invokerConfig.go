// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tat

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tat invokerConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tat.NewInvokerConfig(ctx, "invokerConfig", &Tat.InvokerConfigArgs{
//				InvokerId:     pulumi.String("ivk-cas4upyf"),
//				InvokerStatus: pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tat invoker_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tat/invokerConfig:InvokerConfig invoker_config invoker_config_id
//
// ```
type InvokerConfig struct {
	pulumi.CustomResourceState

	// ID of the invoker to be enabled.
	InvokerId pulumi.StringOutput `pulumi:"invokerId"`
	// Invoker on and off state, Values: `on`, `off`.
	InvokerStatus pulumi.StringOutput `pulumi:"invokerStatus"`
}

// NewInvokerConfig registers a new resource with the given unique name, arguments, and options.
func NewInvokerConfig(ctx *pulumi.Context,
	name string, args *InvokerConfigArgs, opts ...pulumi.ResourceOption) (*InvokerConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InvokerId == nil {
		return nil, errors.New("invalid value for required argument 'InvokerId'")
	}
	if args.InvokerStatus == nil {
		return nil, errors.New("invalid value for required argument 'InvokerStatus'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InvokerConfig
	err := ctx.RegisterResource("tencentcloud:Tat/invokerConfig:InvokerConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvokerConfig gets an existing InvokerConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvokerConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvokerConfigState, opts ...pulumi.ResourceOption) (*InvokerConfig, error) {
	var resource InvokerConfig
	err := ctx.ReadResource("tencentcloud:Tat/invokerConfig:InvokerConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InvokerConfig resources.
type invokerConfigState struct {
	// ID of the invoker to be enabled.
	InvokerId *string `pulumi:"invokerId"`
	// Invoker on and off state, Values: `on`, `off`.
	InvokerStatus *string `pulumi:"invokerStatus"`
}

type InvokerConfigState struct {
	// ID of the invoker to be enabled.
	InvokerId pulumi.StringPtrInput
	// Invoker on and off state, Values: `on`, `off`.
	InvokerStatus pulumi.StringPtrInput
}

func (InvokerConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*invokerConfigState)(nil)).Elem()
}

type invokerConfigArgs struct {
	// ID of the invoker to be enabled.
	InvokerId string `pulumi:"invokerId"`
	// Invoker on and off state, Values: `on`, `off`.
	InvokerStatus string `pulumi:"invokerStatus"`
}

// The set of arguments for constructing a InvokerConfig resource.
type InvokerConfigArgs struct {
	// ID of the invoker to be enabled.
	InvokerId pulumi.StringInput
	// Invoker on and off state, Values: `on`, `off`.
	InvokerStatus pulumi.StringInput
}

func (InvokerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invokerConfigArgs)(nil)).Elem()
}

type InvokerConfigInput interface {
	pulumi.Input

	ToInvokerConfigOutput() InvokerConfigOutput
	ToInvokerConfigOutputWithContext(ctx context.Context) InvokerConfigOutput
}

func (*InvokerConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InvokerConfig)(nil)).Elem()
}

func (i *InvokerConfig) ToInvokerConfigOutput() InvokerConfigOutput {
	return i.ToInvokerConfigOutputWithContext(context.Background())
}

func (i *InvokerConfig) ToInvokerConfigOutputWithContext(ctx context.Context) InvokerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokerConfigOutput)
}

// InvokerConfigArrayInput is an input type that accepts InvokerConfigArray and InvokerConfigArrayOutput values.
// You can construct a concrete instance of `InvokerConfigArrayInput` via:
//
//	InvokerConfigArray{ InvokerConfigArgs{...} }
type InvokerConfigArrayInput interface {
	pulumi.Input

	ToInvokerConfigArrayOutput() InvokerConfigArrayOutput
	ToInvokerConfigArrayOutputWithContext(context.Context) InvokerConfigArrayOutput
}

type InvokerConfigArray []InvokerConfigInput

func (InvokerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InvokerConfig)(nil)).Elem()
}

func (i InvokerConfigArray) ToInvokerConfigArrayOutput() InvokerConfigArrayOutput {
	return i.ToInvokerConfigArrayOutputWithContext(context.Background())
}

func (i InvokerConfigArray) ToInvokerConfigArrayOutputWithContext(ctx context.Context) InvokerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokerConfigArrayOutput)
}

// InvokerConfigMapInput is an input type that accepts InvokerConfigMap and InvokerConfigMapOutput values.
// You can construct a concrete instance of `InvokerConfigMapInput` via:
//
//	InvokerConfigMap{ "key": InvokerConfigArgs{...} }
type InvokerConfigMapInput interface {
	pulumi.Input

	ToInvokerConfigMapOutput() InvokerConfigMapOutput
	ToInvokerConfigMapOutputWithContext(context.Context) InvokerConfigMapOutput
}

type InvokerConfigMap map[string]InvokerConfigInput

func (InvokerConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InvokerConfig)(nil)).Elem()
}

func (i InvokerConfigMap) ToInvokerConfigMapOutput() InvokerConfigMapOutput {
	return i.ToInvokerConfigMapOutputWithContext(context.Background())
}

func (i InvokerConfigMap) ToInvokerConfigMapOutputWithContext(ctx context.Context) InvokerConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvokerConfigMapOutput)
}

type InvokerConfigOutput struct{ *pulumi.OutputState }

func (InvokerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InvokerConfig)(nil)).Elem()
}

func (o InvokerConfigOutput) ToInvokerConfigOutput() InvokerConfigOutput {
	return o
}

func (o InvokerConfigOutput) ToInvokerConfigOutputWithContext(ctx context.Context) InvokerConfigOutput {
	return o
}

// ID of the invoker to be enabled.
func (o InvokerConfigOutput) InvokerId() pulumi.StringOutput {
	return o.ApplyT(func(v *InvokerConfig) pulumi.StringOutput { return v.InvokerId }).(pulumi.StringOutput)
}

// Invoker on and off state, Values: `on`, `off`.
func (o InvokerConfigOutput) InvokerStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *InvokerConfig) pulumi.StringOutput { return v.InvokerStatus }).(pulumi.StringOutput)
}

type InvokerConfigArrayOutput struct{ *pulumi.OutputState }

func (InvokerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InvokerConfig)(nil)).Elem()
}

func (o InvokerConfigArrayOutput) ToInvokerConfigArrayOutput() InvokerConfigArrayOutput {
	return o
}

func (o InvokerConfigArrayOutput) ToInvokerConfigArrayOutputWithContext(ctx context.Context) InvokerConfigArrayOutput {
	return o
}

func (o InvokerConfigArrayOutput) Index(i pulumi.IntInput) InvokerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InvokerConfig {
		return vs[0].([]*InvokerConfig)[vs[1].(int)]
	}).(InvokerConfigOutput)
}

type InvokerConfigMapOutput struct{ *pulumi.OutputState }

func (InvokerConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InvokerConfig)(nil)).Elem()
}

func (o InvokerConfigMapOutput) ToInvokerConfigMapOutput() InvokerConfigMapOutput {
	return o
}

func (o InvokerConfigMapOutput) ToInvokerConfigMapOutputWithContext(ctx context.Context) InvokerConfigMapOutput {
	return o
}

func (o InvokerConfigMapOutput) MapIndex(k pulumi.StringInput) InvokerConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InvokerConfig {
		return vs[0].(map[string]*InvokerConfig)[vs[1].(string)]
	}).(InvokerConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvokerConfigInput)(nil)).Elem(), &InvokerConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvokerConfigArrayInput)(nil)).Elem(), InvokerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvokerConfigMapInput)(nil)).Elem(), InvokerConfigMap{})
	pulumi.RegisterOutputType(InvokerConfigOutput{})
	pulumi.RegisterOutputType(InvokerConfigArrayOutput{})
	pulumi.RegisterOutputType(InvokerConfigMapOutput{})
}
