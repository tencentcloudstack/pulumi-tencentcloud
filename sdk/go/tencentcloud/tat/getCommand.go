// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tat command
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tat"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tat.GetCommand(ctx, &tat.GetCommandArgs{
//				CommandType: pulumi.StringRef("SHELL"),
//				CreatedBy:   pulumi.StringRef("TAT"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCommand(ctx *pulumi.Context, args *LookupCommandArgs, opts ...pulumi.InvokeOption) (*LookupCommandResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupCommandResult
	err := ctx.Invoke("tencentcloud:Tat/getCommand:getCommand", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCommand.
type LookupCommandArgs struct {
	// Command ID.
	CommandId *string `pulumi:"commandId"`
	// Command name.
	CommandName *string `pulumi:"commandName"`
	// Command type, Value is `SHELL` or `POWERSHELL`.
	CommandType *string `pulumi:"commandType"`
	// Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
	CreatedBy *string `pulumi:"createdBy"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getCommand.
type LookupCommandResult struct {
	// Command ID.
	CommandId *string `pulumi:"commandId"`
	// Command name.
	CommandName *string `pulumi:"commandName"`
	// List of command details.
	CommandSets []GetCommandCommandSet `pulumi:"commandSets"`
	// Command type.
	CommandType *string `pulumi:"commandType"`
	// Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
	CreatedBy *string `pulumi:"createdBy"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func LookupCommandOutput(ctx *pulumi.Context, args LookupCommandOutputArgs, opts ...pulumi.InvokeOption) LookupCommandResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCommandResult, error) {
			args := v.(LookupCommandArgs)
			r, err := LookupCommand(ctx, &args, opts...)
			var s LookupCommandResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCommandResultOutput)
}

// A collection of arguments for invoking getCommand.
type LookupCommandOutputArgs struct {
	// Command ID.
	CommandId pulumi.StringPtrInput `pulumi:"commandId"`
	// Command name.
	CommandName pulumi.StringPtrInput `pulumi:"commandName"`
	// Command type, Value is `SHELL` or `POWERSHELL`.
	CommandType pulumi.StringPtrInput `pulumi:"commandType"`
	// Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
	CreatedBy pulumi.StringPtrInput `pulumi:"createdBy"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupCommandOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCommandArgs)(nil)).Elem()
}

// A collection of values returned by getCommand.
type LookupCommandResultOutput struct{ *pulumi.OutputState }

func (LookupCommandResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCommandResult)(nil)).Elem()
}

func (o LookupCommandResultOutput) ToLookupCommandResultOutput() LookupCommandResultOutput {
	return o
}

func (o LookupCommandResultOutput) ToLookupCommandResultOutputWithContext(ctx context.Context) LookupCommandResultOutput {
	return o
}

// Command ID.
func (o LookupCommandResultOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCommandResult) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// Command name.
func (o LookupCommandResultOutput) CommandName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCommandResult) *string { return v.CommandName }).(pulumi.StringPtrOutput)
}

// List of command details.
func (o LookupCommandResultOutput) CommandSets() GetCommandCommandSetArrayOutput {
	return o.ApplyT(func(v LookupCommandResult) []GetCommandCommandSet { return v.CommandSets }).(GetCommandCommandSetArrayOutput)
}

// Command type.
func (o LookupCommandResultOutput) CommandType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCommandResult) *string { return v.CommandType }).(pulumi.StringPtrOutput)
}

// Command creator. `TAT` indicates a public command and `USER` indicates a personal command.
func (o LookupCommandResultOutput) CreatedBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCommandResult) *string { return v.CreatedBy }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCommandResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCommandResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCommandResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCommandResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCommandResultOutput{})
}
