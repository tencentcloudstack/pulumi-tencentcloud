// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package emr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a emr user
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Emr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Emr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myEmr, err := Emr.GetInstance(ctx, &emr.GetInstanceArgs{
//				DisplayStrategy: "clusterList",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Emr.NewUserManager(ctx, "userManager", &Emr.UserManagerArgs{
//				InstanceId: pulumi.String(myEmr.Clusters[0].ClusterId),
//				UserName:   pulumi.String("tf-test"),
//				UserGroup:  pulumi.String("group1"),
//				Password:   pulumi.String("tf@123456"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// emr user_manager can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Emr/userManager:UserManager user_manager instanceId#userName
//
// ```
type UserManager struct {
	pulumi.CustomResourceState

	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Download keytab url.
	DownloadKeytabUrl pulumi.StringOutput `pulumi:"downloadKeytabUrl"`
	// Cluster string ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// PassWord.
	Password pulumi.StringOutput `pulumi:"password"`
	// If support download keytab.
	SupportDownloadKeytab pulumi.BoolOutput `pulumi:"supportDownloadKeytab"`
	// User group membership.
	UserGroup pulumi.StringOutput `pulumi:"userGroup"`
	// Username.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// User type.
	UserType pulumi.StringOutput `pulumi:"userType"`
}

// NewUserManager registers a new resource with the given unique name, arguments, and options.
func NewUserManager(ctx *pulumi.Context,
	name string, args *UserManagerArgs, opts ...pulumi.ResourceOption) (*UserManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.UserGroup == nil {
		return nil, errors.New("invalid value for required argument 'UserGroup'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UserManager
	err := ctx.RegisterResource("tencentcloud:Emr/userManager:UserManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserManager gets an existing UserManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserManagerState, opts ...pulumi.ResourceOption) (*UserManager, error) {
	var resource UserManager
	err := ctx.ReadResource("tencentcloud:Emr/userManager:UserManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserManager resources.
type userManagerState struct {
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Download keytab url.
	DownloadKeytabUrl *string `pulumi:"downloadKeytabUrl"`
	// Cluster string ID.
	InstanceId *string `pulumi:"instanceId"`
	// PassWord.
	Password *string `pulumi:"password"`
	// If support download keytab.
	SupportDownloadKeytab *bool `pulumi:"supportDownloadKeytab"`
	// User group membership.
	UserGroup *string `pulumi:"userGroup"`
	// Username.
	UserName *string `pulumi:"userName"`
	// User type.
	UserType *string `pulumi:"userType"`
}

type UserManagerState struct {
	// Create time.
	CreateTime pulumi.StringPtrInput
	// Download keytab url.
	DownloadKeytabUrl pulumi.StringPtrInput
	// Cluster string ID.
	InstanceId pulumi.StringPtrInput
	// PassWord.
	Password pulumi.StringPtrInput
	// If support download keytab.
	SupportDownloadKeytab pulumi.BoolPtrInput
	// User group membership.
	UserGroup pulumi.StringPtrInput
	// Username.
	UserName pulumi.StringPtrInput
	// User type.
	UserType pulumi.StringPtrInput
}

func (UserManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*userManagerState)(nil)).Elem()
}

type userManagerArgs struct {
	// Cluster string ID.
	InstanceId string `pulumi:"instanceId"`
	// PassWord.
	Password string `pulumi:"password"`
	// User group membership.
	UserGroup string `pulumi:"userGroup"`
	// Username.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a UserManager resource.
type UserManagerArgs struct {
	// Cluster string ID.
	InstanceId pulumi.StringInput
	// PassWord.
	Password pulumi.StringInput
	// User group membership.
	UserGroup pulumi.StringInput
	// Username.
	UserName pulumi.StringInput
}

func (UserManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userManagerArgs)(nil)).Elem()
}

type UserManagerInput interface {
	pulumi.Input

	ToUserManagerOutput() UserManagerOutput
	ToUserManagerOutputWithContext(ctx context.Context) UserManagerOutput
}

func (*UserManager) ElementType() reflect.Type {
	return reflect.TypeOf((**UserManager)(nil)).Elem()
}

func (i *UserManager) ToUserManagerOutput() UserManagerOutput {
	return i.ToUserManagerOutputWithContext(context.Background())
}

func (i *UserManager) ToUserManagerOutputWithContext(ctx context.Context) UserManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagerOutput)
}

// UserManagerArrayInput is an input type that accepts UserManagerArray and UserManagerArrayOutput values.
// You can construct a concrete instance of `UserManagerArrayInput` via:
//
//	UserManagerArray{ UserManagerArgs{...} }
type UserManagerArrayInput interface {
	pulumi.Input

	ToUserManagerArrayOutput() UserManagerArrayOutput
	ToUserManagerArrayOutputWithContext(context.Context) UserManagerArrayOutput
}

type UserManagerArray []UserManagerInput

func (UserManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserManager)(nil)).Elem()
}

func (i UserManagerArray) ToUserManagerArrayOutput() UserManagerArrayOutput {
	return i.ToUserManagerArrayOutputWithContext(context.Background())
}

func (i UserManagerArray) ToUserManagerArrayOutputWithContext(ctx context.Context) UserManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagerArrayOutput)
}

// UserManagerMapInput is an input type that accepts UserManagerMap and UserManagerMapOutput values.
// You can construct a concrete instance of `UserManagerMapInput` via:
//
//	UserManagerMap{ "key": UserManagerArgs{...} }
type UserManagerMapInput interface {
	pulumi.Input

	ToUserManagerMapOutput() UserManagerMapOutput
	ToUserManagerMapOutputWithContext(context.Context) UserManagerMapOutput
}

type UserManagerMap map[string]UserManagerInput

func (UserManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserManager)(nil)).Elem()
}

func (i UserManagerMap) ToUserManagerMapOutput() UserManagerMapOutput {
	return i.ToUserManagerMapOutputWithContext(context.Background())
}

func (i UserManagerMap) ToUserManagerMapOutputWithContext(ctx context.Context) UserManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagerMapOutput)
}

type UserManagerOutput struct{ *pulumi.OutputState }

func (UserManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserManager)(nil)).Elem()
}

func (o UserManagerOutput) ToUserManagerOutput() UserManagerOutput {
	return o
}

func (o UserManagerOutput) ToUserManagerOutputWithContext(ctx context.Context) UserManagerOutput {
	return o
}

// Create time.
func (o UserManagerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Download keytab url.
func (o UserManagerOutput) DownloadKeytabUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.DownloadKeytabUrl }).(pulumi.StringOutput)
}

// Cluster string ID.
func (o UserManagerOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// PassWord.
func (o UserManagerOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// If support download keytab.
func (o UserManagerOutput) SupportDownloadKeytab() pulumi.BoolOutput {
	return o.ApplyT(func(v *UserManager) pulumi.BoolOutput { return v.SupportDownloadKeytab }).(pulumi.BoolOutput)
}

// User group membership.
func (o UserManagerOutput) UserGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.UserGroup }).(pulumi.StringOutput)
}

// Username.
func (o UserManagerOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// User type.
func (o UserManagerOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManager) pulumi.StringOutput { return v.UserType }).(pulumi.StringOutput)
}

type UserManagerArrayOutput struct{ *pulumi.OutputState }

func (UserManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserManager)(nil)).Elem()
}

func (o UserManagerArrayOutput) ToUserManagerArrayOutput() UserManagerArrayOutput {
	return o
}

func (o UserManagerArrayOutput) ToUserManagerArrayOutputWithContext(ctx context.Context) UserManagerArrayOutput {
	return o
}

func (o UserManagerArrayOutput) Index(i pulumi.IntInput) UserManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserManager {
		return vs[0].([]*UserManager)[vs[1].(int)]
	}).(UserManagerOutput)
}

type UserManagerMapOutput struct{ *pulumi.OutputState }

func (UserManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserManager)(nil)).Elem()
}

func (o UserManagerMapOutput) ToUserManagerMapOutput() UserManagerMapOutput {
	return o
}

func (o UserManagerMapOutput) ToUserManagerMapOutputWithContext(ctx context.Context) UserManagerMapOutput {
	return o
}

func (o UserManagerMapOutput) MapIndex(k pulumi.StringInput) UserManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserManager {
		return vs[0].(map[string]*UserManager)[vs[1].(string)]
	}).(UserManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagerInput)(nil)).Elem(), &UserManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagerArrayInput)(nil)).Elem(), UserManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagerMapInput)(nil)).Elem(), UserManagerMap{})
	pulumi.RegisterOutputType(UserManagerOutput{})
	pulumi.RegisterOutputType(UserManagerArrayOutput{})
	pulumi.RegisterOutputType(UserManagerMapOutput{})
}
