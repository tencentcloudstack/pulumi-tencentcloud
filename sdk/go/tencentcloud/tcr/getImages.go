// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tcr images
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcr.GetImages(ctx, &tcr.GetImagesArgs{
//				Digest:         pulumi.StringRef("sha256:xxxxx"),
//				ExactMatch:     pulumi.BoolRef(false),
//				ImageVersion:   pulumi.StringRef("v1"),
//				NamespaceName:  "ns",
//				RegistryId:     "tcr-xxx",
//				RepositoryName: "repo",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetImages(ctx *pulumi.Context, args *GetImagesArgs, opts ...pulumi.InvokeOption) (*GetImagesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetImagesResult
	err := ctx.Invoke("tencentcloud:Tcr/getImages:getImages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImages.
type GetImagesArgs struct {
	// specify image digest for lookup.
	Digest *string `pulumi:"digest"`
	// specifies whether it is an exact match, true is an exact match, and not filled is a fuzzy match.
	ExactMatch *bool `pulumi:"exactMatch"`
	// image version name, default is fuzzy match.
	ImageVersion *string `pulumi:"imageVersion"`
	// namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// instance id.
	RegistryId string `pulumi:"registryId"`
	// repository name.
	RepositoryName string `pulumi:"repositoryName"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getImages.
type GetImagesResult struct {
	// hash value.
	Digest     *string `pulumi:"digest"`
	ExactMatch *bool   `pulumi:"exactMatch"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// container image information list.
	ImageInfoLists []GetImagesImageInfoList `pulumi:"imageInfoLists"`
	// tag name.
	ImageVersion     *string `pulumi:"imageVersion"`
	NamespaceName    string  `pulumi:"namespaceName"`
	RegistryId       string  `pulumi:"registryId"`
	RepositoryName   string  `pulumi:"repositoryName"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetImagesOutput(ctx *pulumi.Context, args GetImagesOutputArgs, opts ...pulumi.InvokeOption) GetImagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImagesResult, error) {
			args := v.(GetImagesArgs)
			r, err := GetImages(ctx, &args, opts...)
			var s GetImagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetImagesResultOutput)
}

// A collection of arguments for invoking getImages.
type GetImagesOutputArgs struct {
	// specify image digest for lookup.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// specifies whether it is an exact match, true is an exact match, and not filled is a fuzzy match.
	ExactMatch pulumi.BoolPtrInput `pulumi:"exactMatch"`
	// image version name, default is fuzzy match.
	ImageVersion pulumi.StringPtrInput `pulumi:"imageVersion"`
	// namespace name.
	NamespaceName pulumi.StringInput `pulumi:"namespaceName"`
	// instance id.
	RegistryId pulumi.StringInput `pulumi:"registryId"`
	// repository name.
	RepositoryName pulumi.StringInput `pulumi:"repositoryName"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetImagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesArgs)(nil)).Elem()
}

// A collection of values returned by getImages.
type GetImagesResultOutput struct{ *pulumi.OutputState }

func (GetImagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesResult)(nil)).Elem()
}

func (o GetImagesResultOutput) ToGetImagesResultOutput() GetImagesResultOutput {
	return o
}

func (o GetImagesResultOutput) ToGetImagesResultOutputWithContext(ctx context.Context) GetImagesResultOutput {
	return o
}

// hash value.
func (o GetImagesResultOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) ExactMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *bool { return v.ExactMatch }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetImagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesResult) string { return v.Id }).(pulumi.StringOutput)
}

// container image information list.
func (o GetImagesResultOutput) ImageInfoLists() GetImagesImageInfoListArrayOutput {
	return o.ApplyT(func(v GetImagesResult) []GetImagesImageInfoList { return v.ImageInfoLists }).(GetImagesImageInfoListArrayOutput)
}

// tag name.
func (o GetImagesResultOutput) ImageVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.ImageVersion }).(pulumi.StringPtrOutput)
}

func (o GetImagesResultOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesResult) string { return v.NamespaceName }).(pulumi.StringOutput)
}

func (o GetImagesResultOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesResult) string { return v.RegistryId }).(pulumi.StringOutput)
}

func (o GetImagesResultOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesResult) string { return v.RepositoryName }).(pulumi.StringOutput)
}

func (o GetImagesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetImagesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImagesResultOutput{})
}
