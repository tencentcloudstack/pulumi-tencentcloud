// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to attach tcr instance with the vpc and subnet network.
//
// ## Example Usage
// ### Attach a tcr instance with vpc resource
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(_var.Availability_zone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpcId := vpc.InstanceLists[0].VpcId
//			subnetId := vpc.InstanceLists[0].SubnetId
//			example, err := Tcr.NewInstance(ctx, "example", &Tcr.InstanceArgs{
//				InstanceType: pulumi.String("basic"),
//				DeleteBucket: pulumi.Bool(true),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			tcrId := example.ID()
//			_, err = Security.GetGroups(ctx, &security.GetGroupsArgs{
//				Name: pulumi.StringRef("default"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Tcr.NewVpcAttachment(ctx, "foo", &Tcr.VpcAttachmentArgs{
//				InstanceId: pulumi.String(tcrId),
//				VpcId:      pulumi.String(vpcId),
//				SubnetId:   pulumi.String(subnetId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcr vpc attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcr/vpcAttachment:VpcAttachment foo instance_id#vpc_id#subnet_id
//
// ```
type VpcAttachment struct {
	pulumi.CustomResourceState

	// IP address of the internal access.
	AccessIp pulumi.StringOutput `pulumi:"accessIp"`
	// Whether to enable public domain dns. Default value is `false`.
	EnablePublicDomainDns pulumi.BoolPtrOutput `pulumi:"enablePublicDomainDns"`
	// Whether to enable vpc domain dns. Default value is `false`.
	EnableVpcDomainDns pulumi.BoolPtrOutput `pulumi:"enableVpcDomainDns"`
	// ID of the TCR instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// this argument was deprecated, use `regionName` instead. ID of region. Conflict with region_name, can not be set at the same time.
	//
	// Deprecated: this argument was deprecated, use `region_name` instead.
	RegionId pulumi.IntPtrOutput `pulumi:"regionId"`
	// Name of region. Conflict with region_id, can not be set at the same time.
	RegionName pulumi.StringPtrOutput `pulumi:"regionName"`
	// Status of the internal access.
	Status pulumi.StringOutput `pulumi:"status"`
	// ID of subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// ID of VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewVpcAttachment registers a new resource with the given unique name, arguments, and options.
func NewVpcAttachment(ctx *pulumi.Context,
	name string, args *VpcAttachmentArgs, opts ...pulumi.ResourceOption) (*VpcAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource VpcAttachment
	err := ctx.RegisterResource("tencentcloud:Tcr/vpcAttachment:VpcAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcAttachment gets an existing VpcAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcAttachmentState, opts ...pulumi.ResourceOption) (*VpcAttachment, error) {
	var resource VpcAttachment
	err := ctx.ReadResource("tencentcloud:Tcr/vpcAttachment:VpcAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcAttachment resources.
type vpcAttachmentState struct {
	// IP address of the internal access.
	AccessIp *string `pulumi:"accessIp"`
	// Whether to enable public domain dns. Default value is `false`.
	EnablePublicDomainDns *bool `pulumi:"enablePublicDomainDns"`
	// Whether to enable vpc domain dns. Default value is `false`.
	EnableVpcDomainDns *bool `pulumi:"enableVpcDomainDns"`
	// ID of the TCR instance.
	InstanceId *string `pulumi:"instanceId"`
	// this argument was deprecated, use `regionName` instead. ID of region. Conflict with region_name, can not be set at the same time.
	//
	// Deprecated: this argument was deprecated, use `region_name` instead.
	RegionId *int `pulumi:"regionId"`
	// Name of region. Conflict with region_id, can not be set at the same time.
	RegionName *string `pulumi:"regionName"`
	// Status of the internal access.
	Status *string `pulumi:"status"`
	// ID of subnet.
	SubnetId *string `pulumi:"subnetId"`
	// ID of VPC.
	VpcId *string `pulumi:"vpcId"`
}

type VpcAttachmentState struct {
	// IP address of the internal access.
	AccessIp pulumi.StringPtrInput
	// Whether to enable public domain dns. Default value is `false`.
	EnablePublicDomainDns pulumi.BoolPtrInput
	// Whether to enable vpc domain dns. Default value is `false`.
	EnableVpcDomainDns pulumi.BoolPtrInput
	// ID of the TCR instance.
	InstanceId pulumi.StringPtrInput
	// this argument was deprecated, use `regionName` instead. ID of region. Conflict with region_name, can not be set at the same time.
	//
	// Deprecated: this argument was deprecated, use `region_name` instead.
	RegionId pulumi.IntPtrInput
	// Name of region. Conflict with region_id, can not be set at the same time.
	RegionName pulumi.StringPtrInput
	// Status of the internal access.
	Status pulumi.StringPtrInput
	// ID of subnet.
	SubnetId pulumi.StringPtrInput
	// ID of VPC.
	VpcId pulumi.StringPtrInput
}

func (VpcAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAttachmentState)(nil)).Elem()
}

type vpcAttachmentArgs struct {
	// Whether to enable public domain dns. Default value is `false`.
	EnablePublicDomainDns *bool `pulumi:"enablePublicDomainDns"`
	// Whether to enable vpc domain dns. Default value is `false`.
	EnableVpcDomainDns *bool `pulumi:"enableVpcDomainDns"`
	// ID of the TCR instance.
	InstanceId string `pulumi:"instanceId"`
	// this argument was deprecated, use `regionName` instead. ID of region. Conflict with region_name, can not be set at the same time.
	//
	// Deprecated: this argument was deprecated, use `region_name` instead.
	RegionId *int `pulumi:"regionId"`
	// Name of region. Conflict with region_id, can not be set at the same time.
	RegionName *string `pulumi:"regionName"`
	// ID of subnet.
	SubnetId string `pulumi:"subnetId"`
	// ID of VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a VpcAttachment resource.
type VpcAttachmentArgs struct {
	// Whether to enable public domain dns. Default value is `false`.
	EnablePublicDomainDns pulumi.BoolPtrInput
	// Whether to enable vpc domain dns. Default value is `false`.
	EnableVpcDomainDns pulumi.BoolPtrInput
	// ID of the TCR instance.
	InstanceId pulumi.StringInput
	// this argument was deprecated, use `regionName` instead. ID of region. Conflict with region_name, can not be set at the same time.
	//
	// Deprecated: this argument was deprecated, use `region_name` instead.
	RegionId pulumi.IntPtrInput
	// Name of region. Conflict with region_id, can not be set at the same time.
	RegionName pulumi.StringPtrInput
	// ID of subnet.
	SubnetId pulumi.StringInput
	// ID of VPC.
	VpcId pulumi.StringInput
}

func (VpcAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcAttachmentArgs)(nil)).Elem()
}

type VpcAttachmentInput interface {
	pulumi.Input

	ToVpcAttachmentOutput() VpcAttachmentOutput
	ToVpcAttachmentOutputWithContext(ctx context.Context) VpcAttachmentOutput
}

func (*VpcAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAttachment)(nil)).Elem()
}

func (i *VpcAttachment) ToVpcAttachmentOutput() VpcAttachmentOutput {
	return i.ToVpcAttachmentOutputWithContext(context.Background())
}

func (i *VpcAttachment) ToVpcAttachmentOutputWithContext(ctx context.Context) VpcAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentOutput)
}

// VpcAttachmentArrayInput is an input type that accepts VpcAttachmentArray and VpcAttachmentArrayOutput values.
// You can construct a concrete instance of `VpcAttachmentArrayInput` via:
//
//	VpcAttachmentArray{ VpcAttachmentArgs{...} }
type VpcAttachmentArrayInput interface {
	pulumi.Input

	ToVpcAttachmentArrayOutput() VpcAttachmentArrayOutput
	ToVpcAttachmentArrayOutputWithContext(context.Context) VpcAttachmentArrayOutput
}

type VpcAttachmentArray []VpcAttachmentInput

func (VpcAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcAttachment)(nil)).Elem()
}

func (i VpcAttachmentArray) ToVpcAttachmentArrayOutput() VpcAttachmentArrayOutput {
	return i.ToVpcAttachmentArrayOutputWithContext(context.Background())
}

func (i VpcAttachmentArray) ToVpcAttachmentArrayOutputWithContext(ctx context.Context) VpcAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentArrayOutput)
}

// VpcAttachmentMapInput is an input type that accepts VpcAttachmentMap and VpcAttachmentMapOutput values.
// You can construct a concrete instance of `VpcAttachmentMapInput` via:
//
//	VpcAttachmentMap{ "key": VpcAttachmentArgs{...} }
type VpcAttachmentMapInput interface {
	pulumi.Input

	ToVpcAttachmentMapOutput() VpcAttachmentMapOutput
	ToVpcAttachmentMapOutputWithContext(context.Context) VpcAttachmentMapOutput
}

type VpcAttachmentMap map[string]VpcAttachmentInput

func (VpcAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcAttachment)(nil)).Elem()
}

func (i VpcAttachmentMap) ToVpcAttachmentMapOutput() VpcAttachmentMapOutput {
	return i.ToVpcAttachmentMapOutputWithContext(context.Background())
}

func (i VpcAttachmentMap) ToVpcAttachmentMapOutputWithContext(ctx context.Context) VpcAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAttachmentMapOutput)
}

type VpcAttachmentOutput struct{ *pulumi.OutputState }

func (VpcAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcAttachment)(nil)).Elem()
}

func (o VpcAttachmentOutput) ToVpcAttachmentOutput() VpcAttachmentOutput {
	return o
}

func (o VpcAttachmentOutput) ToVpcAttachmentOutputWithContext(ctx context.Context) VpcAttachmentOutput {
	return o
}

// IP address of the internal access.
func (o VpcAttachmentOutput) AccessIp() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.StringOutput { return v.AccessIp }).(pulumi.StringOutput)
}

// Whether to enable public domain dns. Default value is `false`.
func (o VpcAttachmentOutput) EnablePublicDomainDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.BoolPtrOutput { return v.EnablePublicDomainDns }).(pulumi.BoolPtrOutput)
}

// Whether to enable vpc domain dns. Default value is `false`.
func (o VpcAttachmentOutput) EnableVpcDomainDns() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.BoolPtrOutput { return v.EnableVpcDomainDns }).(pulumi.BoolPtrOutput)
}

// ID of the TCR instance.
func (o VpcAttachmentOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// this argument was deprecated, use `regionName` instead. ID of region. Conflict with region_name, can not be set at the same time.
//
// Deprecated: this argument was deprecated, use `region_name` instead.
func (o VpcAttachmentOutput) RegionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.IntPtrOutput { return v.RegionId }).(pulumi.IntPtrOutput)
}

// Name of region. Conflict with region_id, can not be set at the same time.
func (o VpcAttachmentOutput) RegionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.StringPtrOutput { return v.RegionName }).(pulumi.StringPtrOutput)
}

// Status of the internal access.
func (o VpcAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// ID of subnet.
func (o VpcAttachmentOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// ID of VPC.
func (o VpcAttachmentOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcAttachment) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type VpcAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VpcAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcAttachment)(nil)).Elem()
}

func (o VpcAttachmentArrayOutput) ToVpcAttachmentArrayOutput() VpcAttachmentArrayOutput {
	return o
}

func (o VpcAttachmentArrayOutput) ToVpcAttachmentArrayOutputWithContext(ctx context.Context) VpcAttachmentArrayOutput {
	return o
}

func (o VpcAttachmentArrayOutput) Index(i pulumi.IntInput) VpcAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcAttachment {
		return vs[0].([]*VpcAttachment)[vs[1].(int)]
	}).(VpcAttachmentOutput)
}

type VpcAttachmentMapOutput struct{ *pulumi.OutputState }

func (VpcAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcAttachment)(nil)).Elem()
}

func (o VpcAttachmentMapOutput) ToVpcAttachmentMapOutput() VpcAttachmentMapOutput {
	return o
}

func (o VpcAttachmentMapOutput) ToVpcAttachmentMapOutputWithContext(ctx context.Context) VpcAttachmentMapOutput {
	return o
}

func (o VpcAttachmentMapOutput) MapIndex(k pulumi.StringInput) VpcAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcAttachment {
		return vs[0].(map[string]*VpcAttachment)[vs[1].(string)]
	}).(VpcAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAttachmentInput)(nil)).Elem(), &VpcAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAttachmentArrayInput)(nil)).Elem(), VpcAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAttachmentMapInput)(nil)).Elem(), VpcAttachmentMap{})
	pulumi.RegisterOutputType(VpcAttachmentOutput{})
	pulumi.RegisterOutputType(VpcAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VpcAttachmentMapOutput{})
}
