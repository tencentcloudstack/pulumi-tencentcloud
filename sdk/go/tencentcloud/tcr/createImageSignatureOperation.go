// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to operate a tcr image signature.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleInstance, err := Tcr.NewInstance(ctx, "exampleInstance", &Tcr.InstanceArgs{
//				InstanceType: pulumi.String("premium"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := Tcr.NewNamespace(ctx, "exampleNamespace", &Tcr.NamespaceArgs{
//				InstanceId:   exampleInstance.ID(),
//				IsPublic:     pulumi.Bool(true),
//				IsAutoScan:   pulumi.Bool(true),
//				IsPreventVul: pulumi.Bool(true),
//				Severity:     pulumi.String("medium"),
//				CveWhitelistItems: tcr.NamespaceCveWhitelistItemArray{
//					&tcr.NamespaceCveWhitelistItemArgs{
//						CveId: pulumi.String("cve-xxxxx"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleRepository, err := Tcr.NewRepository(ctx, "exampleRepository", &Tcr.RepositoryArgs{
//				InstanceId:    exampleInstance.ID(),
//				NamespaceName: exampleNamespace.Name,
//				BriefDesc:     pulumi.String("111"),
//				Description:   pulumi.String("111111111111111111111111111111111111"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tcr.NewCreateImageSignatureOperation(ctx, "exampleCreateImageSignatureOperation", &Tcr.CreateImageSignatureOperationArgs{
//				RegistryId:     exampleInstance.ID(),
//				NamespaceName:  exampleNamespace.Name,
//				RepositoryName: exampleRepository.Name,
//				ImageVersion:   pulumi.String("v1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcr image_signature_operation can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcr/createImageSignatureOperation:CreateImageSignatureOperation image_signature_operation image_signature_operation_id
//
// ```
type CreateImageSignatureOperation struct {
	pulumi.CustomResourceState

	// image version name.
	ImageVersion pulumi.StringOutput `pulumi:"imageVersion"`
	// namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// instance id.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// repository name.
	RepositoryName pulumi.StringOutput `pulumi:"repositoryName"`
}

// NewCreateImageSignatureOperation registers a new resource with the given unique name, arguments, and options.
func NewCreateImageSignatureOperation(ctx *pulumi.Context,
	name string, args *CreateImageSignatureOperationArgs, opts ...pulumi.ResourceOption) (*CreateImageSignatureOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageVersion == nil {
		return nil, errors.New("invalid value for required argument 'ImageVersion'")
	}
	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CreateImageSignatureOperation
	err := ctx.RegisterResource("tencentcloud:Tcr/createImageSignatureOperation:CreateImageSignatureOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCreateImageSignatureOperation gets an existing CreateImageSignatureOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCreateImageSignatureOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CreateImageSignatureOperationState, opts ...pulumi.ResourceOption) (*CreateImageSignatureOperation, error) {
	var resource CreateImageSignatureOperation
	err := ctx.ReadResource("tencentcloud:Tcr/createImageSignatureOperation:CreateImageSignatureOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CreateImageSignatureOperation resources.
type createImageSignatureOperationState struct {
	// image version name.
	ImageVersion *string `pulumi:"imageVersion"`
	// namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// instance id.
	RegistryId *string `pulumi:"registryId"`
	// repository name.
	RepositoryName *string `pulumi:"repositoryName"`
}

type CreateImageSignatureOperationState struct {
	// image version name.
	ImageVersion pulumi.StringPtrInput
	// namespace name.
	NamespaceName pulumi.StringPtrInput
	// instance id.
	RegistryId pulumi.StringPtrInput
	// repository name.
	RepositoryName pulumi.StringPtrInput
}

func (CreateImageSignatureOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*createImageSignatureOperationState)(nil)).Elem()
}

type createImageSignatureOperationArgs struct {
	// image version name.
	ImageVersion string `pulumi:"imageVersion"`
	// namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// instance id.
	RegistryId string `pulumi:"registryId"`
	// repository name.
	RepositoryName string `pulumi:"repositoryName"`
}

// The set of arguments for constructing a CreateImageSignatureOperation resource.
type CreateImageSignatureOperationArgs struct {
	// image version name.
	ImageVersion pulumi.StringInput
	// namespace name.
	NamespaceName pulumi.StringInput
	// instance id.
	RegistryId pulumi.StringInput
	// repository name.
	RepositoryName pulumi.StringInput
}

func (CreateImageSignatureOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*createImageSignatureOperationArgs)(nil)).Elem()
}

type CreateImageSignatureOperationInput interface {
	pulumi.Input

	ToCreateImageSignatureOperationOutput() CreateImageSignatureOperationOutput
	ToCreateImageSignatureOperationOutputWithContext(ctx context.Context) CreateImageSignatureOperationOutput
}

func (*CreateImageSignatureOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateImageSignatureOperation)(nil)).Elem()
}

func (i *CreateImageSignatureOperation) ToCreateImageSignatureOperationOutput() CreateImageSignatureOperationOutput {
	return i.ToCreateImageSignatureOperationOutputWithContext(context.Background())
}

func (i *CreateImageSignatureOperation) ToCreateImageSignatureOperationOutputWithContext(ctx context.Context) CreateImageSignatureOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateImageSignatureOperationOutput)
}

// CreateImageSignatureOperationArrayInput is an input type that accepts CreateImageSignatureOperationArray and CreateImageSignatureOperationArrayOutput values.
// You can construct a concrete instance of `CreateImageSignatureOperationArrayInput` via:
//
//	CreateImageSignatureOperationArray{ CreateImageSignatureOperationArgs{...} }
type CreateImageSignatureOperationArrayInput interface {
	pulumi.Input

	ToCreateImageSignatureOperationArrayOutput() CreateImageSignatureOperationArrayOutput
	ToCreateImageSignatureOperationArrayOutputWithContext(context.Context) CreateImageSignatureOperationArrayOutput
}

type CreateImageSignatureOperationArray []CreateImageSignatureOperationInput

func (CreateImageSignatureOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CreateImageSignatureOperation)(nil)).Elem()
}

func (i CreateImageSignatureOperationArray) ToCreateImageSignatureOperationArrayOutput() CreateImageSignatureOperationArrayOutput {
	return i.ToCreateImageSignatureOperationArrayOutputWithContext(context.Background())
}

func (i CreateImageSignatureOperationArray) ToCreateImageSignatureOperationArrayOutputWithContext(ctx context.Context) CreateImageSignatureOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateImageSignatureOperationArrayOutput)
}

// CreateImageSignatureOperationMapInput is an input type that accepts CreateImageSignatureOperationMap and CreateImageSignatureOperationMapOutput values.
// You can construct a concrete instance of `CreateImageSignatureOperationMapInput` via:
//
//	CreateImageSignatureOperationMap{ "key": CreateImageSignatureOperationArgs{...} }
type CreateImageSignatureOperationMapInput interface {
	pulumi.Input

	ToCreateImageSignatureOperationMapOutput() CreateImageSignatureOperationMapOutput
	ToCreateImageSignatureOperationMapOutputWithContext(context.Context) CreateImageSignatureOperationMapOutput
}

type CreateImageSignatureOperationMap map[string]CreateImageSignatureOperationInput

func (CreateImageSignatureOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CreateImageSignatureOperation)(nil)).Elem()
}

func (i CreateImageSignatureOperationMap) ToCreateImageSignatureOperationMapOutput() CreateImageSignatureOperationMapOutput {
	return i.ToCreateImageSignatureOperationMapOutputWithContext(context.Background())
}

func (i CreateImageSignatureOperationMap) ToCreateImageSignatureOperationMapOutputWithContext(ctx context.Context) CreateImageSignatureOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CreateImageSignatureOperationMapOutput)
}

type CreateImageSignatureOperationOutput struct{ *pulumi.OutputState }

func (CreateImageSignatureOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CreateImageSignatureOperation)(nil)).Elem()
}

func (o CreateImageSignatureOperationOutput) ToCreateImageSignatureOperationOutput() CreateImageSignatureOperationOutput {
	return o
}

func (o CreateImageSignatureOperationOutput) ToCreateImageSignatureOperationOutputWithContext(ctx context.Context) CreateImageSignatureOperationOutput {
	return o
}

// image version name.
func (o CreateImageSignatureOperationOutput) ImageVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *CreateImageSignatureOperation) pulumi.StringOutput { return v.ImageVersion }).(pulumi.StringOutput)
}

// namespace name.
func (o CreateImageSignatureOperationOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CreateImageSignatureOperation) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// instance id.
func (o CreateImageSignatureOperationOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *CreateImageSignatureOperation) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// repository name.
func (o CreateImageSignatureOperationOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v *CreateImageSignatureOperation) pulumi.StringOutput { return v.RepositoryName }).(pulumi.StringOutput)
}

type CreateImageSignatureOperationArrayOutput struct{ *pulumi.OutputState }

func (CreateImageSignatureOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CreateImageSignatureOperation)(nil)).Elem()
}

func (o CreateImageSignatureOperationArrayOutput) ToCreateImageSignatureOperationArrayOutput() CreateImageSignatureOperationArrayOutput {
	return o
}

func (o CreateImageSignatureOperationArrayOutput) ToCreateImageSignatureOperationArrayOutputWithContext(ctx context.Context) CreateImageSignatureOperationArrayOutput {
	return o
}

func (o CreateImageSignatureOperationArrayOutput) Index(i pulumi.IntInput) CreateImageSignatureOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CreateImageSignatureOperation {
		return vs[0].([]*CreateImageSignatureOperation)[vs[1].(int)]
	}).(CreateImageSignatureOperationOutput)
}

type CreateImageSignatureOperationMapOutput struct{ *pulumi.OutputState }

func (CreateImageSignatureOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CreateImageSignatureOperation)(nil)).Elem()
}

func (o CreateImageSignatureOperationMapOutput) ToCreateImageSignatureOperationMapOutput() CreateImageSignatureOperationMapOutput {
	return o
}

func (o CreateImageSignatureOperationMapOutput) ToCreateImageSignatureOperationMapOutputWithContext(ctx context.Context) CreateImageSignatureOperationMapOutput {
	return o
}

func (o CreateImageSignatureOperationMapOutput) MapIndex(k pulumi.StringInput) CreateImageSignatureOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CreateImageSignatureOperation {
		return vs[0].(map[string]*CreateImageSignatureOperation)[vs[1].(string)]
	}).(CreateImageSignatureOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CreateImageSignatureOperationInput)(nil)).Elem(), &CreateImageSignatureOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CreateImageSignatureOperationArrayInput)(nil)).Elem(), CreateImageSignatureOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CreateImageSignatureOperationMapInput)(nil)).Elem(), CreateImageSignatureOperationMap{})
	pulumi.RegisterOutputType(CreateImageSignatureOperationOutput{})
	pulumi.RegisterOutputType(CreateImageSignatureOperationArrayOutput{})
	pulumi.RegisterOutputType(CreateImageSignatureOperationMapOutput{})
}
