// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcr

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tcr immutable tag rule.
//
// ## Example Usage
// ### Create a immutable tag rule with specified tags and exclude specified repositories
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleInstance, err := Tcr.NewInstance(ctx, "exampleInstance", &Tcr.InstanceArgs{
//				InstanceType: pulumi.String("premium"),
//				DeleteBucket: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleNamespace, err := Tcr.NewNamespace(ctx, "exampleNamespace", &Tcr.NamespaceArgs{
//				InstanceId:   exampleInstance.ID(),
//				IsPublic:     pulumi.Bool(true),
//				IsAutoScan:   pulumi.Bool(true),
//				IsPreventVul: pulumi.Bool(true),
//				Severity:     pulumi.String("medium"),
//				CveWhitelistItems: tcr.NamespaceCveWhitelistItemArray{
//					&tcr.NamespaceCveWhitelistItemArgs{
//						CveId: pulumi.String("cve-xxxxx"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tcr.NewImmutableTagRule(ctx, "exampleImmutableTagRule", &Tcr.ImmutableTagRuleArgs{
//				RegistryId:    exampleInstance.ID(),
//				NamespaceName: exampleNamespace.Name,
//				Rule: &tcr.ImmutableTagRuleRuleArgs{
//					RepositoryPattern:    pulumi.String("deprecated_repo"),
//					TagPattern:           pulumi.String("**"),
//					RepositoryDecoration: pulumi.String("repoExcludes"),
//					TagDecoration:        pulumi.String("matches"),
//					Disabled:             pulumi.Bool(false),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### With specified repositories and exclude specified version tag
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcr.NewImmutableTagRule(ctx, "example", &Tcr.ImmutableTagRuleArgs{
//				RegistryId:    pulumi.Any(tencentcloud_tcr_instance.Example.Id),
//				NamespaceName: pulumi.Any(tencentcloud_tcr_namespace.Example.Name),
//				Rule: &tcr.ImmutableTagRuleRuleArgs{
//					RepositoryPattern:    pulumi.String("**"),
//					TagPattern:           pulumi.String("v1"),
//					RepositoryDecoration: pulumi.String("repoMatches"),
//					TagDecoration:        pulumi.String("excludes"),
//					Disabled:             pulumi.Bool(false),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Disabled the specified rule
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcr.NewImmutableTagRule(ctx, "exampleRuleA", &Tcr.ImmutableTagRuleArgs{
//				RegistryId:    pulumi.Any(tencentcloud_tcr_instance.Example.Id),
//				NamespaceName: pulumi.Any(tencentcloud_tcr_namespace.Example.Name),
//				Rule: &tcr.ImmutableTagRuleRuleArgs{
//					RepositoryPattern:    pulumi.String("deprecated_repo"),
//					TagPattern:           pulumi.String("**"),
//					RepositoryDecoration: pulumi.String("repoExcludes"),
//					TagDecoration:        pulumi.String("matches"),
//					Disabled:             pulumi.Bool(false),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tcr.NewImmutableTagRule(ctx, "exampleRuleB", &Tcr.ImmutableTagRuleArgs{
//				RegistryId:    pulumi.Any(tencentcloud_tcr_instance.Example.Id),
//				NamespaceName: pulumi.Any(tencentcloud_tcr_namespace.Example.Name),
//				Rule: &tcr.ImmutableTagRuleRuleArgs{
//					RepositoryPattern:    pulumi.String("**"),
//					TagPattern:           pulumi.String("v1"),
//					RepositoryDecoration: pulumi.String("repoMatches"),
//					TagDecoration:        pulumi.String("excludes"),
//					Disabled:             pulumi.Bool(true),
//				},
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcr immutable_tag_rule can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcr/immutableTagRule:ImmutableTagRule immutable_tag_rule immutable_tag_rule_id
//
// ```
type ImmutableTagRule struct {
	pulumi.CustomResourceState

	// namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// instance id.
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
	// rule.
	Rule ImmutableTagRuleRuleOutput `pulumi:"rule"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewImmutableTagRule registers a new resource with the given unique name, arguments, and options.
func NewImmutableTagRule(ctx *pulumi.Context,
	name string, args *ImmutableTagRuleArgs, opts ...pulumi.ResourceOption) (*ImmutableTagRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImmutableTagRule
	err := ctx.RegisterResource("tencentcloud:Tcr/immutableTagRule:ImmutableTagRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImmutableTagRule gets an existing ImmutableTagRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImmutableTagRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImmutableTagRuleState, opts ...pulumi.ResourceOption) (*ImmutableTagRule, error) {
	var resource ImmutableTagRule
	err := ctx.ReadResource("tencentcloud:Tcr/immutableTagRule:ImmutableTagRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImmutableTagRule resources.
type immutableTagRuleState struct {
	// namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// instance id.
	RegistryId *string `pulumi:"registryId"`
	// rule.
	Rule *ImmutableTagRuleRule `pulumi:"rule"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

type ImmutableTagRuleState struct {
	// namespace name.
	NamespaceName pulumi.StringPtrInput
	// instance id.
	RegistryId pulumi.StringPtrInput
	// rule.
	Rule ImmutableTagRuleRulePtrInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (ImmutableTagRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*immutableTagRuleState)(nil)).Elem()
}

type immutableTagRuleArgs struct {
	// namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// instance id.
	RegistryId string `pulumi:"registryId"`
	// rule.
	Rule ImmutableTagRuleRule `pulumi:"rule"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a ImmutableTagRule resource.
type ImmutableTagRuleArgs struct {
	// namespace name.
	NamespaceName pulumi.StringInput
	// instance id.
	RegistryId pulumi.StringInput
	// rule.
	Rule ImmutableTagRuleRuleInput
	// Tag description list.
	Tags pulumi.MapInput
}

func (ImmutableTagRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*immutableTagRuleArgs)(nil)).Elem()
}

type ImmutableTagRuleInput interface {
	pulumi.Input

	ToImmutableTagRuleOutput() ImmutableTagRuleOutput
	ToImmutableTagRuleOutputWithContext(ctx context.Context) ImmutableTagRuleOutput
}

func (*ImmutableTagRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ImmutableTagRule)(nil)).Elem()
}

func (i *ImmutableTagRule) ToImmutableTagRuleOutput() ImmutableTagRuleOutput {
	return i.ToImmutableTagRuleOutputWithContext(context.Background())
}

func (i *ImmutableTagRule) ToImmutableTagRuleOutputWithContext(ctx context.Context) ImmutableTagRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImmutableTagRuleOutput)
}

// ImmutableTagRuleArrayInput is an input type that accepts ImmutableTagRuleArray and ImmutableTagRuleArrayOutput values.
// You can construct a concrete instance of `ImmutableTagRuleArrayInput` via:
//
//	ImmutableTagRuleArray{ ImmutableTagRuleArgs{...} }
type ImmutableTagRuleArrayInput interface {
	pulumi.Input

	ToImmutableTagRuleArrayOutput() ImmutableTagRuleArrayOutput
	ToImmutableTagRuleArrayOutputWithContext(context.Context) ImmutableTagRuleArrayOutput
}

type ImmutableTagRuleArray []ImmutableTagRuleInput

func (ImmutableTagRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImmutableTagRule)(nil)).Elem()
}

func (i ImmutableTagRuleArray) ToImmutableTagRuleArrayOutput() ImmutableTagRuleArrayOutput {
	return i.ToImmutableTagRuleArrayOutputWithContext(context.Background())
}

func (i ImmutableTagRuleArray) ToImmutableTagRuleArrayOutputWithContext(ctx context.Context) ImmutableTagRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImmutableTagRuleArrayOutput)
}

// ImmutableTagRuleMapInput is an input type that accepts ImmutableTagRuleMap and ImmutableTagRuleMapOutput values.
// You can construct a concrete instance of `ImmutableTagRuleMapInput` via:
//
//	ImmutableTagRuleMap{ "key": ImmutableTagRuleArgs{...} }
type ImmutableTagRuleMapInput interface {
	pulumi.Input

	ToImmutableTagRuleMapOutput() ImmutableTagRuleMapOutput
	ToImmutableTagRuleMapOutputWithContext(context.Context) ImmutableTagRuleMapOutput
}

type ImmutableTagRuleMap map[string]ImmutableTagRuleInput

func (ImmutableTagRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImmutableTagRule)(nil)).Elem()
}

func (i ImmutableTagRuleMap) ToImmutableTagRuleMapOutput() ImmutableTagRuleMapOutput {
	return i.ToImmutableTagRuleMapOutputWithContext(context.Background())
}

func (i ImmutableTagRuleMap) ToImmutableTagRuleMapOutputWithContext(ctx context.Context) ImmutableTagRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImmutableTagRuleMapOutput)
}

type ImmutableTagRuleOutput struct{ *pulumi.OutputState }

func (ImmutableTagRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImmutableTagRule)(nil)).Elem()
}

func (o ImmutableTagRuleOutput) ToImmutableTagRuleOutput() ImmutableTagRuleOutput {
	return o
}

func (o ImmutableTagRuleOutput) ToImmutableTagRuleOutputWithContext(ctx context.Context) ImmutableTagRuleOutput {
	return o
}

// namespace name.
func (o ImmutableTagRuleOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImmutableTagRule) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// instance id.
func (o ImmutableTagRuleOutput) RegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImmutableTagRule) pulumi.StringOutput { return v.RegistryId }).(pulumi.StringOutput)
}

// rule.
func (o ImmutableTagRuleOutput) Rule() ImmutableTagRuleRuleOutput {
	return o.ApplyT(func(v *ImmutableTagRule) ImmutableTagRuleRuleOutput { return v.Rule }).(ImmutableTagRuleRuleOutput)
}

// Tag description list.
func (o ImmutableTagRuleOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *ImmutableTagRule) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type ImmutableTagRuleArrayOutput struct{ *pulumi.OutputState }

func (ImmutableTagRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImmutableTagRule)(nil)).Elem()
}

func (o ImmutableTagRuleArrayOutput) ToImmutableTagRuleArrayOutput() ImmutableTagRuleArrayOutput {
	return o
}

func (o ImmutableTagRuleArrayOutput) ToImmutableTagRuleArrayOutputWithContext(ctx context.Context) ImmutableTagRuleArrayOutput {
	return o
}

func (o ImmutableTagRuleArrayOutput) Index(i pulumi.IntInput) ImmutableTagRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImmutableTagRule {
		return vs[0].([]*ImmutableTagRule)[vs[1].(int)]
	}).(ImmutableTagRuleOutput)
}

type ImmutableTagRuleMapOutput struct{ *pulumi.OutputState }

func (ImmutableTagRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImmutableTagRule)(nil)).Elem()
}

func (o ImmutableTagRuleMapOutput) ToImmutableTagRuleMapOutput() ImmutableTagRuleMapOutput {
	return o
}

func (o ImmutableTagRuleMapOutput) ToImmutableTagRuleMapOutputWithContext(ctx context.Context) ImmutableTagRuleMapOutput {
	return o
}

func (o ImmutableTagRuleMapOutput) MapIndex(k pulumi.StringInput) ImmutableTagRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImmutableTagRule {
		return vs[0].(map[string]*ImmutableTagRule)[vs[1].(string)]
	}).(ImmutableTagRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImmutableTagRuleInput)(nil)).Elem(), &ImmutableTagRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImmutableTagRuleArrayInput)(nil)).Elem(), ImmutableTagRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImmutableTagRuleMapInput)(nil)).Elem(), ImmutableTagRuleMap{})
	pulumi.RegisterOutputType(ImmutableTagRuleOutput{})
	pulumi.RegisterOutputType(ImmutableTagRuleArrayOutput{})
	pulumi.RegisterOutputType(ImmutableTagRuleMapOutput{})
}
