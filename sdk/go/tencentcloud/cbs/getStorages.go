// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cbs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of CBS storages.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cbs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cbs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cbs.GetStorages(ctx, &cbs.GetStoragesArgs{
//				ResultOutputFile: pulumi.StringRef("mytestpath"),
//				StorageId:        pulumi.StringRef("disk-kdt0sq6m"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### The following snippet shows the new supported query params
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cbs"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cbs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cbs.GetStorages(ctx, &cbs.GetStoragesArgs{
//				ChargeTypes: []string{
//					"POSTPAID_BY_HOUR",
//					"PREPAID",
//				},
//				InstanceIps: []string{
//					"10.0.0.2",
//				},
//				InstanceNames: []string{
//					"my-instance",
//				},
//				Portable: pulumi.BoolRef(true),
//				StorageStates: []string{
//					"ATTACHED",
//				},
//				TagKeys: []string{
//					"foo",
//				},
//				TagValues: []string{
//					"bar",
//					"baz",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetStorages(ctx *pulumi.Context, args *GetStoragesArgs, opts ...pulumi.InvokeOption) (*GetStoragesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetStoragesResult
	err := ctx.Invoke("tencentcloud:Cbs/getStorages:getStorages", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStorages.
type GetStoragesArgs struct {
	// The available zone that the CBS instance locates at.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID`).
	ChargeTypes []string `pulumi:"chargeTypes"`
	// List filter by attached instance public or private IPs.
	InstanceIps []string `pulumi:"instanceIps"`
	// List filter by attached instance name.
	InstanceNames []string `pulumi:"instanceNames"`
	// Filter by whether the disk is portable (Boolean `true` or `false`).
	Portable *bool `pulumi:"portable"`
	// ID of the project with which the CBS is associated.
	ProjectId *int `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the CBS to be queried.
	StorageId *string `pulumi:"storageId"`
	// Name of the CBS to be queried.
	StorageName *string `pulumi:"storageName"`
	// List filter by disk state (`UNATTACHED` | `ATTACHING` | `ATTACHED` | `DETACHING` | `EXPANDING` | `ROLLBACKING` | `TORECYCLE`).
	StorageStates []string `pulumi:"storageStates"`
	// Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
	StorageType *string `pulumi:"storageType"`
	// Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
	StorageUsage *string `pulumi:"storageUsage"`
	// List filter by tag keys.
	TagKeys []string `pulumi:"tagKeys"`
	// List filter by tag values.
	TagValues []string `pulumi:"tagValues"`
}

// A collection of values returned by getStorages.
type GetStoragesResult struct {
	// The zone of CBS.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// Pay type of the CBS instance.
	ChargeTypes []string `pulumi:"chargeTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id            string   `pulumi:"id"`
	InstanceIps   []string `pulumi:"instanceIps"`
	InstanceNames []string `pulumi:"instanceNames"`
	Portable      *bool    `pulumi:"portable"`
	// ID of the project.
	ProjectId        *int    `pulumi:"projectId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of CBS.
	StorageId *string `pulumi:"storageId"`
	// A list of storage. Each element contains the following attributes:
	StorageLists []GetStoragesStorageList `pulumi:"storageLists"`
	// Name of CBS.
	StorageName   *string  `pulumi:"storageName"`
	StorageStates []string `pulumi:"storageStates"`
	// Types of storage medium.
	StorageType *string `pulumi:"storageType"`
	// Types of CBS.
	StorageUsage *string  `pulumi:"storageUsage"`
	TagKeys      []string `pulumi:"tagKeys"`
	TagValues    []string `pulumi:"tagValues"`
}

func GetStoragesOutput(ctx *pulumi.Context, args GetStoragesOutputArgs, opts ...pulumi.InvokeOption) GetStoragesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetStoragesResult, error) {
			args := v.(GetStoragesArgs)
			r, err := GetStorages(ctx, &args, opts...)
			var s GetStoragesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetStoragesResultOutput)
}

// A collection of arguments for invoking getStorages.
type GetStoragesOutputArgs struct {
	// The available zone that the CBS instance locates at.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// List filter by disk charge type (`POSTPAID_BY_HOUR` | `PREPAID`).
	ChargeTypes pulumi.StringArrayInput `pulumi:"chargeTypes"`
	// List filter by attached instance public or private IPs.
	InstanceIps pulumi.StringArrayInput `pulumi:"instanceIps"`
	// List filter by attached instance name.
	InstanceNames pulumi.StringArrayInput `pulumi:"instanceNames"`
	// Filter by whether the disk is portable (Boolean `true` or `false`).
	Portable pulumi.BoolPtrInput `pulumi:"portable"`
	// ID of the project with which the CBS is associated.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// ID of the CBS to be queried.
	StorageId pulumi.StringPtrInput `pulumi:"storageId"`
	// Name of the CBS to be queried.
	StorageName pulumi.StringPtrInput `pulumi:"storageName"`
	// List filter by disk state (`UNATTACHED` | `ATTACHING` | `ATTACHED` | `DETACHING` | `EXPANDING` | `ROLLBACKING` | `TORECYCLE`).
	StorageStates pulumi.StringArrayInput `pulumi:"storageStates"`
	// Filter by cloud disk media type (`CLOUD_BASIC`: HDD cloud disk | `CLOUD_PREMIUM`: Premium Cloud Storage | `CLOUD_SSD`: SSD cloud disk).
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
	// Filter by cloud disk type (`SYSTEM_DISK`: system disk | `DATA_DISK`: data disk).
	StorageUsage pulumi.StringPtrInput `pulumi:"storageUsage"`
	// List filter by tag keys.
	TagKeys pulumi.StringArrayInput `pulumi:"tagKeys"`
	// List filter by tag values.
	TagValues pulumi.StringArrayInput `pulumi:"tagValues"`
}

func (GetStoragesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoragesArgs)(nil)).Elem()
}

// A collection of values returned by getStorages.
type GetStoragesResultOutput struct{ *pulumi.OutputState }

func (GetStoragesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoragesResult)(nil)).Elem()
}

func (o GetStoragesResultOutput) ToGetStoragesResultOutput() GetStoragesResultOutput {
	return o
}

func (o GetStoragesResultOutput) ToGetStoragesResultOutputWithContext(ctx context.Context) GetStoragesResultOutput {
	return o
}

// The zone of CBS.
func (o GetStoragesResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// Pay type of the CBS instance.
func (o GetStoragesResultOutput) ChargeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []string { return v.ChargeTypes }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetStoragesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoragesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetStoragesResultOutput) InstanceIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []string { return v.InstanceIps }).(pulumi.StringArrayOutput)
}

func (o GetStoragesResultOutput) InstanceNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []string { return v.InstanceNames }).(pulumi.StringArrayOutput)
}

func (o GetStoragesResultOutput) Portable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *bool { return v.Portable }).(pulumi.BoolPtrOutput)
}

// ID of the project.
func (o GetStoragesResultOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

func (o GetStoragesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// ID of CBS.
func (o GetStoragesResultOutput) StorageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *string { return v.StorageId }).(pulumi.StringPtrOutput)
}

// A list of storage. Each element contains the following attributes:
func (o GetStoragesResultOutput) StorageLists() GetStoragesStorageListArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []GetStoragesStorageList { return v.StorageLists }).(GetStoragesStorageListArrayOutput)
}

// Name of CBS.
func (o GetStoragesResultOutput) StorageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *string { return v.StorageName }).(pulumi.StringPtrOutput)
}

func (o GetStoragesResultOutput) StorageStates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []string { return v.StorageStates }).(pulumi.StringArrayOutput)
}

// Types of storage medium.
func (o GetStoragesResultOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

// Types of CBS.
func (o GetStoragesResultOutput) StorageUsage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetStoragesResult) *string { return v.StorageUsage }).(pulumi.StringPtrOutput)
}

func (o GetStoragesResultOutput) TagKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []string { return v.TagKeys }).(pulumi.StringArrayOutput)
}

func (o GetStoragesResultOutput) TagValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetStoragesResult) []string { return v.TagValues }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStoragesResultOutput{})
}
