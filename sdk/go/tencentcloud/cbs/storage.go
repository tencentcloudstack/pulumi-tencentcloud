// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cbs

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a CBS.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cbs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cbs.NewStorage(ctx, "storage", &Cbs.StorageArgs{
//				AvailabilityZone: pulumi.String("ap-guangzhou-3"),
//				Encrypt:          pulumi.Bool(false),
//				ProjectId:        pulumi.Int(0),
//				StorageName:      pulumi.String("mystorage"),
//				StorageSize:      pulumi.Int(100),
//				StorageType:      pulumi.String("CLOUD_SSD"),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("tf"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CBS storage can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cbs/storage:Storage storage disk-41s6jwy4
//
// ```
type Storage struct {
	pulumi.CustomResourceState

	// Indicates whether the CBS is mounted the CVM.
	Attached pulumi.BoolOutput `pulumi:"attached"`
	// The available zone that the CBS instance locates at.
	AvailabilityZone pulumi.StringOutput `pulumi:"availabilityZone"`
	// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// The quota of backup points of cloud disk.
	DiskBackupQuota pulumi.IntOutput `pulumi:"diskBackupQuota"`
	// Indicates whether CBS is encrypted.
	Encrypt pulumi.BoolPtrOutput `pulumi:"encrypt"`
	// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// It has been deprecated from version 1.33.0. Set `prepaidPeriod` instead. The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
	//
	// Deprecated: It has been deprecated from version 1.33.0. Set `prepaid_period` instead.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when chargeType is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
	PrepaidPeriod pulumi.IntOutput `pulumi:"prepaidPeriod"`
	// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidRenewFlag pulumi.StringOutput `pulumi:"prepaidRenewFlag"`
	// ID of the project to which the instance belongs.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName pulumi.StringOutput `pulumi:"storageName"`
	// Volume of CBS, and unit is GB.
	StorageSize pulumi.IntOutput `pulumi:"storageSize"`
	// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
	StorageStatus pulumi.StringOutput `pulumi:"storageStatus"`
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// The available tags within this CBS.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance pulumi.IntPtrOutput `pulumi:"throughputPerformance"`
}

// NewStorage registers a new resource with the given unique name, arguments, and options.
func NewStorage(ctx *pulumi.Context,
	name string, args *StorageArgs, opts ...pulumi.ResourceOption) (*Storage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityZone'")
	}
	if args.StorageName == nil {
		return nil, errors.New("invalid value for required argument 'StorageName'")
	}
	if args.StorageSize == nil {
		return nil, errors.New("invalid value for required argument 'StorageSize'")
	}
	if args.StorageType == nil {
		return nil, errors.New("invalid value for required argument 'StorageType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Storage
	err := ctx.RegisterResource("tencentcloud:Cbs/storage:Storage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorage gets an existing Storage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageState, opts ...pulumi.ResourceOption) (*Storage, error) {
	var resource Storage
	err := ctx.ReadResource("tencentcloud:Cbs/storage:Storage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Storage resources.
type storageState struct {
	// Indicates whether the CBS is mounted the CVM.
	Attached *bool `pulumi:"attached"`
	// The available zone that the CBS instance locates at.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// The quota of backup points of cloud disk.
	DiskBackupQuota *int `pulumi:"diskBackupQuota"`
	// Indicates whether CBS is encrypted.
	Encrypt *bool `pulumi:"encrypt"`
	// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
	ForceDelete *bool `pulumi:"forceDelete"`
	// It has been deprecated from version 1.33.0. Set `prepaidPeriod` instead. The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
	//
	// Deprecated: It has been deprecated from version 1.33.0. Set `prepaid_period` instead.
	Period *int `pulumi:"period"`
	// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when chargeType is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidRenewFlag *string `pulumi:"prepaidRenewFlag"`
	// ID of the project to which the instance belongs.
	ProjectId *int `pulumi:"projectId"`
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName *string `pulumi:"storageName"`
	// Volume of CBS, and unit is GB.
	StorageSize *int `pulumi:"storageSize"`
	// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
	StorageStatus *string `pulumi:"storageStatus"`
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType *string `pulumi:"storageType"`
	// The available tags within this CBS.
	Tags map[string]interface{} `pulumi:"tags"`
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance *int `pulumi:"throughputPerformance"`
}

type StorageState struct {
	// Indicates whether the CBS is mounted the CVM.
	Attached pulumi.BoolPtrInput
	// The available zone that the CBS instance locates at.
	AvailabilityZone pulumi.StringPtrInput
	// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// The quota of backup points of cloud disk.
	DiskBackupQuota pulumi.IntPtrInput
	// Indicates whether CBS is encrypted.
	Encrypt pulumi.BoolPtrInput
	// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
	ForceDelete pulumi.BoolPtrInput
	// It has been deprecated from version 1.33.0. Set `prepaidPeriod` instead. The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
	//
	// Deprecated: It has been deprecated from version 1.33.0. Set `prepaid_period` instead.
	Period pulumi.IntPtrInput
	// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when chargeType is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
	PrepaidPeriod pulumi.IntPtrInput
	// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidRenewFlag pulumi.StringPtrInput
	// ID of the project to which the instance belongs.
	ProjectId pulumi.IntPtrInput
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotId pulumi.StringPtrInput
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName pulumi.StringPtrInput
	// Volume of CBS, and unit is GB.
	StorageSize pulumi.IntPtrInput
	// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
	StorageStatus pulumi.StringPtrInput
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType pulumi.StringPtrInput
	// The available tags within this CBS.
	Tags pulumi.MapInput
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance pulumi.IntPtrInput
}

func (StorageState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageState)(nil)).Elem()
}

type storageArgs struct {
	// The available zone that the CBS instance locates at.
	AvailabilityZone string `pulumi:"availabilityZone"`
	// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// The quota of backup points of cloud disk.
	DiskBackupQuota *int `pulumi:"diskBackupQuota"`
	// Indicates whether CBS is encrypted.
	Encrypt *bool `pulumi:"encrypt"`
	// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
	ForceDelete *bool `pulumi:"forceDelete"`
	// It has been deprecated from version 1.33.0. Set `prepaidPeriod` instead. The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
	//
	// Deprecated: It has been deprecated from version 1.33.0. Set `prepaid_period` instead.
	Period *int `pulumi:"period"`
	// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when chargeType is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidRenewFlag *string `pulumi:"prepaidRenewFlag"`
	// ID of the project to which the instance belongs.
	ProjectId *int `pulumi:"projectId"`
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName string `pulumi:"storageName"`
	// Volume of CBS, and unit is GB.
	StorageSize int `pulumi:"storageSize"`
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType string `pulumi:"storageType"`
	// The available tags within this CBS.
	Tags map[string]interface{} `pulumi:"tags"`
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance *int `pulumi:"throughputPerformance"`
}

// The set of arguments for constructing a Storage resource.
type StorageArgs struct {
	// The available zone that the CBS instance locates at.
	AvailabilityZone pulumi.StringInput
	// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// The quota of backup points of cloud disk.
	DiskBackupQuota pulumi.IntPtrInput
	// Indicates whether CBS is encrypted.
	Encrypt pulumi.BoolPtrInput
	// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
	ForceDelete pulumi.BoolPtrInput
	// It has been deprecated from version 1.33.0. Set `prepaidPeriod` instead. The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
	//
	// Deprecated: It has been deprecated from version 1.33.0. Set `prepaid_period` instead.
	Period pulumi.IntPtrInput
	// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when chargeType is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
	PrepaidPeriod pulumi.IntPtrInput
	// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidRenewFlag pulumi.StringPtrInput
	// ID of the project to which the instance belongs.
	ProjectId pulumi.IntPtrInput
	// ID of the snapshot. If specified, created the CBS by this snapshot.
	SnapshotId pulumi.StringPtrInput
	// Name of CBS. The maximum length can not exceed 60 bytes.
	StorageName pulumi.StringInput
	// Volume of CBS, and unit is GB.
	StorageSize pulumi.IntInput
	// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
	StorageType pulumi.StringInput
	// The available tags within this CBS.
	Tags pulumi.MapInput
	// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
	ThroughputPerformance pulumi.IntPtrInput
}

func (StorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageArgs)(nil)).Elem()
}

type StorageInput interface {
	pulumi.Input

	ToStorageOutput() StorageOutput
	ToStorageOutputWithContext(ctx context.Context) StorageOutput
}

func (*Storage) ElementType() reflect.Type {
	return reflect.TypeOf((**Storage)(nil)).Elem()
}

func (i *Storage) ToStorageOutput() StorageOutput {
	return i.ToStorageOutputWithContext(context.Background())
}

func (i *Storage) ToStorageOutputWithContext(ctx context.Context) StorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageOutput)
}

// StorageArrayInput is an input type that accepts StorageArray and StorageArrayOutput values.
// You can construct a concrete instance of `StorageArrayInput` via:
//
//	StorageArray{ StorageArgs{...} }
type StorageArrayInput interface {
	pulumi.Input

	ToStorageArrayOutput() StorageArrayOutput
	ToStorageArrayOutputWithContext(context.Context) StorageArrayOutput
}

type StorageArray []StorageInput

func (StorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Storage)(nil)).Elem()
}

func (i StorageArray) ToStorageArrayOutput() StorageArrayOutput {
	return i.ToStorageArrayOutputWithContext(context.Background())
}

func (i StorageArray) ToStorageArrayOutputWithContext(ctx context.Context) StorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageArrayOutput)
}

// StorageMapInput is an input type that accepts StorageMap and StorageMapOutput values.
// You can construct a concrete instance of `StorageMapInput` via:
//
//	StorageMap{ "key": StorageArgs{...} }
type StorageMapInput interface {
	pulumi.Input

	ToStorageMapOutput() StorageMapOutput
	ToStorageMapOutputWithContext(context.Context) StorageMapOutput
}

type StorageMap map[string]StorageInput

func (StorageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Storage)(nil)).Elem()
}

func (i StorageMap) ToStorageMapOutput() StorageMapOutput {
	return i.ToStorageMapOutputWithContext(context.Background())
}

func (i StorageMap) ToStorageMapOutputWithContext(ctx context.Context) StorageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageMapOutput)
}

type StorageOutput struct{ *pulumi.OutputState }

func (StorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Storage)(nil)).Elem()
}

func (o StorageOutput) ToStorageOutput() StorageOutput {
	return o
}

func (o StorageOutput) ToStorageOutputWithContext(ctx context.Context) StorageOutput {
	return o
}

// Indicates whether the CBS is mounted the CVM.
func (o StorageOutput) Attached() pulumi.BoolOutput {
	return o.ApplyT(func(v *Storage) pulumi.BoolOutput { return v.Attached }).(pulumi.BoolOutput)
}

// The available zone that the CBS instance locates at.
func (o StorageOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

// The charge type of CBS instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
func (o StorageOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// The quota of backup points of cloud disk.
func (o StorageOutput) DiskBackupQuota() pulumi.IntOutput {
	return o.ApplyT(func(v *Storage) pulumi.IntOutput { return v.DiskBackupQuota }).(pulumi.IntOutput)
}

// Indicates whether CBS is encrypted.
func (o StorageOutput) Encrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Storage) pulumi.BoolPtrOutput { return v.Encrypt }).(pulumi.BoolPtrOutput)
}

// Indicate whether to delete CBS instance directly or not. Default is false. If set true, the instance will be deleted instead of staying recycle bin.
func (o StorageOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Storage) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// It has been deprecated from version 1.33.0. Set `prepaidPeriod` instead. The purchased usage period of CBS. Valid values: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36].
//
// Deprecated: It has been deprecated from version 1.33.0. Set `prepaid_period` instead.
func (o StorageOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Storage) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The tenancy (time unit is month) of the prepaid instance, NOTE: it only works when chargeType is set to `PREPAID`. Valid values are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36.
func (o StorageOutput) PrepaidPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *Storage) pulumi.IntOutput { return v.PrepaidPeriod }).(pulumi.IntOutput)
}

// Auto Renewal flag. Value range: `NOTIFY_AND_AUTO_RENEW`: Notify expiry and renew automatically, `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically, `DISABLE_NOTIFY_AND_MANUAL_RENEW`: Neither notify expiry nor renew automatically. Default value range: `NOTIFY_AND_MANUAL_RENEW`: Notify expiry but do not renew automatically. NOTE: it only works when chargeType is set to `PREPAID`.
func (o StorageOutput) PrepaidRenewFlag() pulumi.StringOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringOutput { return v.PrepaidRenewFlag }).(pulumi.StringOutput)
}

// ID of the project to which the instance belongs.
func (o StorageOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Storage) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// ID of the snapshot. If specified, created the CBS by this snapshot.
func (o StorageOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// Name of CBS. The maximum length can not exceed 60 bytes.
func (o StorageOutput) StorageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringOutput { return v.StorageName }).(pulumi.StringOutput)
}

// Volume of CBS, and unit is GB.
func (o StorageOutput) StorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Storage) pulumi.IntOutput { return v.StorageSize }).(pulumi.IntOutput)
}

// Status of CBS. Valid values: UNATTACHED, ATTACHING, ATTACHED, DETACHING, EXPANDING, ROLLBACKING, TORECYCLE and DUMPING.
func (o StorageOutput) StorageStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringOutput { return v.StorageStatus }).(pulumi.StringOutput)
}

// Type of CBS medium. Valid values: CLOUD_BASIC: HDD cloud disk, CLOUD_PREMIUM: Premium Cloud Storage, CLOUD_BSSD: General Purpose SSD, CLOUD_SSD: SSD, CLOUD_HSSD: Enhanced SSD, CLOUD_TSSD: Tremendous SSD.
func (o StorageOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Storage) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// The available tags within this CBS.
func (o StorageOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Storage) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Add extra performance to the data disk. Only works when disk type is `CLOUD_TSSD` or `CLOUD_HSSD`.
func (o StorageOutput) ThroughputPerformance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Storage) pulumi.IntPtrOutput { return v.ThroughputPerformance }).(pulumi.IntPtrOutput)
}

type StorageArrayOutput struct{ *pulumi.OutputState }

func (StorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Storage)(nil)).Elem()
}

func (o StorageArrayOutput) ToStorageArrayOutput() StorageArrayOutput {
	return o
}

func (o StorageArrayOutput) ToStorageArrayOutputWithContext(ctx context.Context) StorageArrayOutput {
	return o
}

func (o StorageArrayOutput) Index(i pulumi.IntInput) StorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Storage {
		return vs[0].([]*Storage)[vs[1].(int)]
	}).(StorageOutput)
}

type StorageMapOutput struct{ *pulumi.OutputState }

func (StorageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Storage)(nil)).Elem()
}

func (o StorageMapOutput) ToStorageMapOutput() StorageMapOutput {
	return o
}

func (o StorageMapOutput) ToStorageMapOutputWithContext(ctx context.Context) StorageMapOutput {
	return o
}

func (o StorageMapOutput) MapIndex(k pulumi.StringInput) StorageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Storage {
		return vs[0].(map[string]*Storage)[vs[1].(string)]
	}).(StorageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageInput)(nil)).Elem(), &Storage{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageArrayInput)(nil)).Elem(), StorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageMapInput)(nil)).Elem(), StorageMap{})
	pulumi.RegisterOutputType(StorageOutput{})
	pulumi.RegisterOutputType(StorageArrayOutput{})
	pulumi.RegisterOutputType(StorageMapOutput{})
}
