// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcaplus

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create TcaplusDB cluster.
//
// > **NOTE:** TcaplusDB now only supports the following regions: `ap-shanghai,ap-hongkong,na-siliconvalley,ap-singapore,ap-seoul,ap-tokyo,eu-frankfurt, and na-ashburn`.
//
// ## Example Usage
// ### Create a new tcaplus cluster instance
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcaplus"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.GetSubnets(ctx, &vpc.GetSubnetsArgs{
//				IsDefault:        pulumi.BoolRef(true),
//				AvailabilityZone: pulumi.StringRef(availabilityZone),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			vpcId := vpc.InstanceLists[0].VpcId
//			subnetId := vpc.InstanceLists[0].SubnetId
//			_, err = Tcaplus.NewCluster(ctx, "example", &Tcaplus.ClusterArgs{
//				IdlType:               pulumi.String("PROTO"),
//				ClusterName:           pulumi.String("tf_example_tcaplus_cluster"),
//				VpcId:                 pulumi.String(vpcId),
//				SubnetId:              pulumi.String(subnetId),
//				Password:              pulumi.String("your_pw_123111"),
//				OldPasswordExpireLast: pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcaplus cluster can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcaplus/cluster:Cluster example cluster_id
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Access ID of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessId pulumi.StringOutput `pulumi:"apiAccessId"`
	// Access IP of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessIp pulumi.StringOutput `pulumi:"apiAccessIp"`
	// Access port of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessPort pulumi.IntOutput `pulumi:"apiAccessPort"`
	// Name of the TcaplusDB cluster. Name length should be between 1 and 30.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Create time of the TcaplusDB cluster.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// IDL type of the TcaplusDB cluster. Valid values: `PROTO` and `TDR`.
	IdlType pulumi.StringOutput `pulumi:"idlType"`
	// Network type of the TcaplusDB cluster.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// Expiration time of old password after password update, unit: second.
	OldPasswordExpireLast pulumi.IntPtrOutput `pulumi:"oldPasswordExpireLast"`
	// Expiration time of the old password. If `passwordStatus` is `unmodifiable`, it means the old password has not yet expired.
	OldPasswordExpireTime pulumi.StringOutput `pulumi:"oldPasswordExpireTime"`
	// Password of the TcaplusDB cluster. Password length should be between 12 and 16. The password must be a *mix* of uppercase letters (A-Z), lowercase *letters* (a-z) and *numbers* (0-9).
	Password pulumi.StringOutput `pulumi:"password"`
	// Password status of the TcaplusDB cluster. Valid values: `unmodifiable`, `modifiable`. `unmodifiable`. which means the password can not be changed in this moment; `modifiable`, which means the password can be changed in this moment.
	PasswordStatus pulumi.StringOutput `pulumi:"passwordStatus"`
	// Subnet id of the TcaplusDB cluster.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// VPC id of the TcaplusDB cluster.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.IdlType == nil {
		return nil, errors.New("invalid value for required argument 'IdlType'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("tencentcloud:Tcaplus/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("tencentcloud:Tcaplus/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Access ID of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessId *string `pulumi:"apiAccessId"`
	// Access IP of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessIp *string `pulumi:"apiAccessIp"`
	// Access port of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessPort *int `pulumi:"apiAccessPort"`
	// Name of the TcaplusDB cluster. Name length should be between 1 and 30.
	ClusterName *string `pulumi:"clusterName"`
	// Create time of the TcaplusDB cluster.
	CreateTime *string `pulumi:"createTime"`
	// IDL type of the TcaplusDB cluster. Valid values: `PROTO` and `TDR`.
	IdlType *string `pulumi:"idlType"`
	// Network type of the TcaplusDB cluster.
	NetworkType *string `pulumi:"networkType"`
	// Expiration time of old password after password update, unit: second.
	OldPasswordExpireLast *int `pulumi:"oldPasswordExpireLast"`
	// Expiration time of the old password. If `passwordStatus` is `unmodifiable`, it means the old password has not yet expired.
	OldPasswordExpireTime *string `pulumi:"oldPasswordExpireTime"`
	// Password of the TcaplusDB cluster. Password length should be between 12 and 16. The password must be a *mix* of uppercase letters (A-Z), lowercase *letters* (a-z) and *numbers* (0-9).
	Password *string `pulumi:"password"`
	// Password status of the TcaplusDB cluster. Valid values: `unmodifiable`, `modifiable`. `unmodifiable`. which means the password can not be changed in this moment; `modifiable`, which means the password can be changed in this moment.
	PasswordStatus *string `pulumi:"passwordStatus"`
	// Subnet id of the TcaplusDB cluster.
	SubnetId *string `pulumi:"subnetId"`
	// VPC id of the TcaplusDB cluster.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// Access ID of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessId pulumi.StringPtrInput
	// Access IP of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessIp pulumi.StringPtrInput
	// Access port of the TcaplusDB cluster.For TcaplusDB SDK connect.
	ApiAccessPort pulumi.IntPtrInput
	// Name of the TcaplusDB cluster. Name length should be between 1 and 30.
	ClusterName pulumi.StringPtrInput
	// Create time of the TcaplusDB cluster.
	CreateTime pulumi.StringPtrInput
	// IDL type of the TcaplusDB cluster. Valid values: `PROTO` and `TDR`.
	IdlType pulumi.StringPtrInput
	// Network type of the TcaplusDB cluster.
	NetworkType pulumi.StringPtrInput
	// Expiration time of old password after password update, unit: second.
	OldPasswordExpireLast pulumi.IntPtrInput
	// Expiration time of the old password. If `passwordStatus` is `unmodifiable`, it means the old password has not yet expired.
	OldPasswordExpireTime pulumi.StringPtrInput
	// Password of the TcaplusDB cluster. Password length should be between 12 and 16. The password must be a *mix* of uppercase letters (A-Z), lowercase *letters* (a-z) and *numbers* (0-9).
	Password pulumi.StringPtrInput
	// Password status of the TcaplusDB cluster. Valid values: `unmodifiable`, `modifiable`. `unmodifiable`. which means the password can not be changed in this moment; `modifiable`, which means the password can be changed in this moment.
	PasswordStatus pulumi.StringPtrInput
	// Subnet id of the TcaplusDB cluster.
	SubnetId pulumi.StringPtrInput
	// VPC id of the TcaplusDB cluster.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Name of the TcaplusDB cluster. Name length should be between 1 and 30.
	ClusterName string `pulumi:"clusterName"`
	// IDL type of the TcaplusDB cluster. Valid values: `PROTO` and `TDR`.
	IdlType string `pulumi:"idlType"`
	// Expiration time of old password after password update, unit: second.
	OldPasswordExpireLast *int `pulumi:"oldPasswordExpireLast"`
	// Password of the TcaplusDB cluster. Password length should be between 12 and 16. The password must be a *mix* of uppercase letters (A-Z), lowercase *letters* (a-z) and *numbers* (0-9).
	Password string `pulumi:"password"`
	// Subnet id of the TcaplusDB cluster.
	SubnetId string `pulumi:"subnetId"`
	// VPC id of the TcaplusDB cluster.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Name of the TcaplusDB cluster. Name length should be between 1 and 30.
	ClusterName pulumi.StringInput
	// IDL type of the TcaplusDB cluster. Valid values: `PROTO` and `TDR`.
	IdlType pulumi.StringInput
	// Expiration time of old password after password update, unit: second.
	OldPasswordExpireLast pulumi.IntPtrInput
	// Password of the TcaplusDB cluster. Password length should be between 12 and 16. The password must be a *mix* of uppercase letters (A-Z), lowercase *letters* (a-z) and *numbers* (0-9).
	Password pulumi.StringInput
	// Subnet id of the TcaplusDB cluster.
	SubnetId pulumi.StringInput
	// VPC id of the TcaplusDB cluster.
	VpcId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Access ID of the TcaplusDB cluster.For TcaplusDB SDK connect.
func (o ClusterOutput) ApiAccessId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ApiAccessId }).(pulumi.StringOutput)
}

// Access IP of the TcaplusDB cluster.For TcaplusDB SDK connect.
func (o ClusterOutput) ApiAccessIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ApiAccessIp }).(pulumi.StringOutput)
}

// Access port of the TcaplusDB cluster.For TcaplusDB SDK connect.
func (o ClusterOutput) ApiAccessPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ApiAccessPort }).(pulumi.IntOutput)
}

// Name of the TcaplusDB cluster. Name length should be between 1 and 30.
func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Create time of the TcaplusDB cluster.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// IDL type of the TcaplusDB cluster. Valid values: `PROTO` and `TDR`.
func (o ClusterOutput) IdlType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.IdlType }).(pulumi.StringOutput)
}

// Network type of the TcaplusDB cluster.
func (o ClusterOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// Expiration time of old password after password update, unit: second.
func (o ClusterOutput) OldPasswordExpireLast() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.OldPasswordExpireLast }).(pulumi.IntPtrOutput)
}

// Expiration time of the old password. If `passwordStatus` is `unmodifiable`, it means the old password has not yet expired.
func (o ClusterOutput) OldPasswordExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.OldPasswordExpireTime }).(pulumi.StringOutput)
}

// Password of the TcaplusDB cluster. Password length should be between 12 and 16. The password must be a *mix* of uppercase letters (A-Z), lowercase *letters* (a-z) and *numbers* (0-9).
func (o ClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Password status of the TcaplusDB cluster. Valid values: `unmodifiable`, `modifiable`. `unmodifiable`. which means the password can not be changed in this moment; `modifiable`, which means the password can be changed in this moment.
func (o ClusterOutput) PasswordStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PasswordStatus }).(pulumi.StringOutput)
}

// Subnet id of the TcaplusDB cluster.
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// VPC id of the TcaplusDB cluster.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
