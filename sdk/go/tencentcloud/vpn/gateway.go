// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
// ### VPC SSL VPN gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGateway(ctx, "myCgw", &Vpn.GatewayArgs{
//				Bandwidth: pulumi.Int(5),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//				Type:  pulumi.String("SSL"),
//				VpcId: pulumi.String("vpc-86v957zb"),
//				Zone:  pulumi.String("ap-guangzhou-3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### CCN IPSEC VPN gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGateway(ctx, "myCgw", &Vpn.GatewayArgs{
//				Bandwidth: pulumi.Int(5),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//				Type: pulumi.String("IPSEC"),
//				Zone: pulumi.String("ap-guangzhou-3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### CCN SSL VPN gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGateway(ctx, "myCgw", &Vpn.GatewayArgs{
//				Bandwidth: pulumi.Int(5),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//				Type: pulumi.String("SSL_CCN"),
//				Zone: pulumi.String("ap-guangzhou-3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### POSTPAID_BY_HOUR VPN gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGateway(ctx, "myCgw", &Vpn.GatewayArgs{
//				Bandwidth: pulumi.Int(5),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//				VpcId: pulumi.String("vpc-dk8zmwuf"),
//				Zone:  pulumi.String("ap-guangzhou-3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### PREPAID VPN gateway
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGateway(ctx, "myCgw", &Vpn.GatewayArgs{
//				Bandwidth:     pulumi.Int(5),
//				ChargeType:    pulumi.String("PREPAID"),
//				PrepaidPeriod: pulumi.Int(1),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//				VpcId: pulumi.String("vpc-dk8zmwuf"),
//				Zone:  pulumi.String("ap-guangzhou-3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPN gateway can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpn/gateway:Gateway foo vpngw-8ccsnclt
//
// ```
type Gateway struct {
	pulumi.CustomResourceState

	// The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
	Bandwidth pulumi.IntPtrOutput `pulumi:"bandwidth"`
	// CDC instance ID.
	CdcId pulumi.StringOutput `pulumi:"cdcId"`
	// Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Create time of the VPN gateway.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Expired time of the VPN gateway when charge type is `PREPAID`.
	ExpiredTime pulumi.StringOutput `pulumi:"expiredTime"`
	// Indicates whether ip address is blocked.
	IsAddressBlocked pulumi.BoolOutput `pulumi:"isAddressBlocked"`
	// Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
	MaxConnection pulumi.IntOutput `pulumi:"maxConnection"`
	// Name of the VPN gateway. The length of character is limited to 1-60.
	Name pulumi.StringOutput `pulumi:"name"`
	// The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
	NewPurchasePlan pulumi.StringOutput `pulumi:"newPurchasePlan"`
	// Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renewFlag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
	PrepaidPeriod pulumi.IntPtrOutput `pulumi:"prepaidPeriod"`
	// Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
	PrepaidRenewFlag pulumi.StringPtrOutput `pulumi:"prepaidRenewFlag"`
	// Public IP of the VPN gateway.
	PublicIpAddress pulumi.StringOutput `pulumi:"publicIpAddress"`
	// Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
	RestrictState pulumi.StringOutput `pulumi:"restrictState"`
	// State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
	State pulumi.StringOutput `pulumi:"state"`
	// A list of tags used to associate different resources.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
	Type pulumi.StringOutput `pulumi:"type"`
	// ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// Zone of the VPN gateway.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		args = &GatewayArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("tencentcloud:Vpn/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("tencentcloud:Vpn/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
	Bandwidth *int `pulumi:"bandwidth"`
	// CDC instance ID.
	CdcId *string `pulumi:"cdcId"`
	// Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// Create time of the VPN gateway.
	CreateTime *string `pulumi:"createTime"`
	// Expired time of the VPN gateway when charge type is `PREPAID`.
	ExpiredTime *string `pulumi:"expiredTime"`
	// Indicates whether ip address is blocked.
	IsAddressBlocked *bool `pulumi:"isAddressBlocked"`
	// Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
	MaxConnection *int `pulumi:"maxConnection"`
	// Name of the VPN gateway. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
	NewPurchasePlan *string `pulumi:"newPurchasePlan"`
	// Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renewFlag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
	PrepaidRenewFlag *string `pulumi:"prepaidRenewFlag"`
	// Public IP of the VPN gateway.
	PublicIpAddress *string `pulumi:"publicIpAddress"`
	// Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
	RestrictState *string `pulumi:"restrictState"`
	// State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
	State *string `pulumi:"state"`
	// A list of tags used to associate different resources.
	Tags map[string]interface{} `pulumi:"tags"`
	// Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
	Type *string `pulumi:"type"`
	// ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
	VpcId *string `pulumi:"vpcId"`
	// Zone of the VPN gateway.
	Zone *string `pulumi:"zone"`
}

type GatewayState struct {
	// The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
	Bandwidth pulumi.IntPtrInput
	// CDC instance ID.
	CdcId pulumi.StringPtrInput
	// Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// Create time of the VPN gateway.
	CreateTime pulumi.StringPtrInput
	// Expired time of the VPN gateway when charge type is `PREPAID`.
	ExpiredTime pulumi.StringPtrInput
	// Indicates whether ip address is blocked.
	IsAddressBlocked pulumi.BoolPtrInput
	// Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
	MaxConnection pulumi.IntPtrInput
	// Name of the VPN gateway. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
	NewPurchasePlan pulumi.StringPtrInput
	// Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renewFlag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
	PrepaidPeriod pulumi.IntPtrInput
	// Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
	PrepaidRenewFlag pulumi.StringPtrInput
	// Public IP of the VPN gateway.
	PublicIpAddress pulumi.StringPtrInput
	// Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
	RestrictState pulumi.StringPtrInput
	// State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
	State pulumi.StringPtrInput
	// A list of tags used to associate different resources.
	Tags pulumi.MapInput
	// Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
	Type pulumi.StringPtrInput
	// ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
	VpcId pulumi.StringPtrInput
	// Zone of the VPN gateway.
	Zone pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
	Bandwidth *int `pulumi:"bandwidth"`
	// CDC instance ID.
	CdcId *string `pulumi:"cdcId"`
	// Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
	MaxConnection *int `pulumi:"maxConnection"`
	// Name of the VPN gateway. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renewFlag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
	PrepaidRenewFlag *string `pulumi:"prepaidRenewFlag"`
	// A list of tags used to associate different resources.
	Tags map[string]interface{} `pulumi:"tags"`
	// Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
	Type *string `pulumi:"type"`
	// ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
	VpcId *string `pulumi:"vpcId"`
	// Zone of the VPN gateway.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
	Bandwidth pulumi.IntPtrInput
	// CDC instance ID.
	CdcId pulumi.StringPtrInput
	// Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
	MaxConnection pulumi.IntPtrInput
	// Name of the VPN gateway. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renewFlag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
	PrepaidPeriod pulumi.IntPtrInput
	// Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
	PrepaidRenewFlag pulumi.StringPtrInput
	// A list of tags used to associate different resources.
	Tags pulumi.MapInput
	// Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
	Type pulumi.StringPtrInput
	// ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
	VpcId pulumi.StringPtrInput
	// Zone of the VPN gateway.
	Zone pulumi.StringPtrInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// The maximum public network output bandwidth of VPN gateway (unit: Mbps), the available values include: 5,10,20,50,100,200,500,1000. Default is 5. When charge type is `PREPAID`, bandwidth degradation operation is unsupported.
func (o GatewayOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntPtrOutput { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// CDC instance ID.
func (o GatewayOutput) CdcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.CdcId }).(pulumi.StringOutput)
}

// Charge Type of the VPN gateway. Valid value: `PREPAID`, `POSTPAID_BY_HOUR`. The default is `POSTPAID_BY_HOUR`.
func (o GatewayOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Create time of the VPN gateway.
func (o GatewayOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Expired time of the VPN gateway when charge type is `PREPAID`.
func (o GatewayOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.ExpiredTime }).(pulumi.StringOutput)
}

// Indicates whether ip address is blocked.
func (o GatewayOutput) IsAddressBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v *Gateway) pulumi.BoolOutput { return v.IsAddressBlocked }).(pulumi.BoolOutput)
}

// Maximum number of connected clients allowed for the SSL VPN gateway. Valid values: [5, 10, 20, 50, 100]. This parameter is only required for SSL VPN gateways.
func (o GatewayOutput) MaxConnection() pulumi.IntOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntOutput { return v.MaxConnection }).(pulumi.IntOutput)
}

// Name of the VPN gateway. The length of character is limited to 1-60.
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The plan of new purchase. Valid value: `PREPAID_TO_POSTPAID`.
func (o GatewayOutput) NewPurchasePlan() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.NewPurchasePlan }).(pulumi.StringOutput)
}

// Period of instance to be prepaid. Valid value: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `9`, `12`, `24`, `36`. The unit is month. Caution: when this para and renewFlag para are valid, the request means to renew several months more pre-paid period. This para can only be changed on `IPSEC` vpn gateway.
func (o GatewayOutput) PrepaidPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntPtrOutput { return v.PrepaidPeriod }).(pulumi.IntPtrOutput)
}

// Flag indicates whether to renew or not. Valid value: `NOTIFY_AND_AUTO_RENEW`, `NOTIFY_AND_MANUAL_RENEW`.
func (o GatewayOutput) PrepaidRenewFlag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.PrepaidRenewFlag }).(pulumi.StringPtrOutput)
}

// Public IP of the VPN gateway.
func (o GatewayOutput) PublicIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.PublicIpAddress }).(pulumi.StringOutput)
}

// Restrict state of gateway. Valid value: `PRETECIVELY_ISOLATED`, `NORMAL`.
func (o GatewayOutput) RestrictState() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.RestrictState }).(pulumi.StringOutput)
}

// State of the VPN gateway. Valid value: `PENDING`, `DELETING`, `AVAILABLE`.
func (o GatewayOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A list of tags used to associate different resources.
func (o GatewayOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Gateway) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Type of gateway instance, Default is `IPSEC`. Valid value: `IPSEC`, `SSL`, `CCN` and `SSL_CCN`.
func (o GatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// ID of the VPC. Required if vpn gateway is not in `CCN` or `SSL_CCN` type, and doesn't make sense for `CCN` or `SSL_CCN` vpn gateway.
func (o GatewayOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// Zone of the VPN gateway.
func (o GatewayOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}
