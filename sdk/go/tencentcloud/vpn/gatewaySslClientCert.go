// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc vpnGatewaySslClientCert
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGatewaySslClientCert(ctx, "vpnGatewaySslClientCert", &Vpn.GatewaySslClientCertArgs{
//				SslVpnClientId: pulumi.String("vpnc-123456"),
//				Switch:         pulumi.String("off"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// vpc vpn_gateway_ssl_client_cert can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpn/gatewaySslClientCert:GatewaySslClientCert vpn_gateway_ssl_client_cert ssl_client_id
//
// ```
type GatewaySslClientCert struct {
	pulumi.CustomResourceState

	// SSL-VPN-CLIENT Instance ID.
	SslVpnClientId pulumi.StringOutput `pulumi:"sslVpnClientId"`
	// `on`: Enable, `off`: Disable.
	Switch pulumi.StringPtrOutput `pulumi:"switch"`
}

// NewGatewaySslClientCert registers a new resource with the given unique name, arguments, and options.
func NewGatewaySslClientCert(ctx *pulumi.Context,
	name string, args *GatewaySslClientCertArgs, opts ...pulumi.ResourceOption) (*GatewaySslClientCert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SslVpnClientId == nil {
		return nil, errors.New("invalid value for required argument 'SslVpnClientId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GatewaySslClientCert
	err := ctx.RegisterResource("tencentcloud:Vpn/gatewaySslClientCert:GatewaySslClientCert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewaySslClientCert gets an existing GatewaySslClientCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewaySslClientCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewaySslClientCertState, opts ...pulumi.ResourceOption) (*GatewaySslClientCert, error) {
	var resource GatewaySslClientCert
	err := ctx.ReadResource("tencentcloud:Vpn/gatewaySslClientCert:GatewaySslClientCert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewaySslClientCert resources.
type gatewaySslClientCertState struct {
	// SSL-VPN-CLIENT Instance ID.
	SslVpnClientId *string `pulumi:"sslVpnClientId"`
	// `on`: Enable, `off`: Disable.
	Switch *string `pulumi:"switch"`
}

type GatewaySslClientCertState struct {
	// SSL-VPN-CLIENT Instance ID.
	SslVpnClientId pulumi.StringPtrInput
	// `on`: Enable, `off`: Disable.
	Switch pulumi.StringPtrInput
}

func (GatewaySslClientCertState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewaySslClientCertState)(nil)).Elem()
}

type gatewaySslClientCertArgs struct {
	// SSL-VPN-CLIENT Instance ID.
	SslVpnClientId string `pulumi:"sslVpnClientId"`
	// `on`: Enable, `off`: Disable.
	Switch *string `pulumi:"switch"`
}

// The set of arguments for constructing a GatewaySslClientCert resource.
type GatewaySslClientCertArgs struct {
	// SSL-VPN-CLIENT Instance ID.
	SslVpnClientId pulumi.StringInput
	// `on`: Enable, `off`: Disable.
	Switch pulumi.StringPtrInput
}

func (GatewaySslClientCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewaySslClientCertArgs)(nil)).Elem()
}

type GatewaySslClientCertInput interface {
	pulumi.Input

	ToGatewaySslClientCertOutput() GatewaySslClientCertOutput
	ToGatewaySslClientCertOutputWithContext(ctx context.Context) GatewaySslClientCertOutput
}

func (*GatewaySslClientCert) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySslClientCert)(nil)).Elem()
}

func (i *GatewaySslClientCert) ToGatewaySslClientCertOutput() GatewaySslClientCertOutput {
	return i.ToGatewaySslClientCertOutputWithContext(context.Background())
}

func (i *GatewaySslClientCert) ToGatewaySslClientCertOutputWithContext(ctx context.Context) GatewaySslClientCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySslClientCertOutput)
}

// GatewaySslClientCertArrayInput is an input type that accepts GatewaySslClientCertArray and GatewaySslClientCertArrayOutput values.
// You can construct a concrete instance of `GatewaySslClientCertArrayInput` via:
//
//	GatewaySslClientCertArray{ GatewaySslClientCertArgs{...} }
type GatewaySslClientCertArrayInput interface {
	pulumi.Input

	ToGatewaySslClientCertArrayOutput() GatewaySslClientCertArrayOutput
	ToGatewaySslClientCertArrayOutputWithContext(context.Context) GatewaySslClientCertArrayOutput
}

type GatewaySslClientCertArray []GatewaySslClientCertInput

func (GatewaySslClientCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewaySslClientCert)(nil)).Elem()
}

func (i GatewaySslClientCertArray) ToGatewaySslClientCertArrayOutput() GatewaySslClientCertArrayOutput {
	return i.ToGatewaySslClientCertArrayOutputWithContext(context.Background())
}

func (i GatewaySslClientCertArray) ToGatewaySslClientCertArrayOutputWithContext(ctx context.Context) GatewaySslClientCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySslClientCertArrayOutput)
}

// GatewaySslClientCertMapInput is an input type that accepts GatewaySslClientCertMap and GatewaySslClientCertMapOutput values.
// You can construct a concrete instance of `GatewaySslClientCertMapInput` via:
//
//	GatewaySslClientCertMap{ "key": GatewaySslClientCertArgs{...} }
type GatewaySslClientCertMapInput interface {
	pulumi.Input

	ToGatewaySslClientCertMapOutput() GatewaySslClientCertMapOutput
	ToGatewaySslClientCertMapOutputWithContext(context.Context) GatewaySslClientCertMapOutput
}

type GatewaySslClientCertMap map[string]GatewaySslClientCertInput

func (GatewaySslClientCertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewaySslClientCert)(nil)).Elem()
}

func (i GatewaySslClientCertMap) ToGatewaySslClientCertMapOutput() GatewaySslClientCertMapOutput {
	return i.ToGatewaySslClientCertMapOutputWithContext(context.Background())
}

func (i GatewaySslClientCertMap) ToGatewaySslClientCertMapOutputWithContext(ctx context.Context) GatewaySslClientCertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySslClientCertMapOutput)
}

type GatewaySslClientCertOutput struct{ *pulumi.OutputState }

func (GatewaySslClientCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySslClientCert)(nil)).Elem()
}

func (o GatewaySslClientCertOutput) ToGatewaySslClientCertOutput() GatewaySslClientCertOutput {
	return o
}

func (o GatewaySslClientCertOutput) ToGatewaySslClientCertOutputWithContext(ctx context.Context) GatewaySslClientCertOutput {
	return o
}

// SSL-VPN-CLIENT Instance ID.
func (o GatewaySslClientCertOutput) SslVpnClientId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySslClientCert) pulumi.StringOutput { return v.SslVpnClientId }).(pulumi.StringOutput)
}

// `on`: Enable, `off`: Disable.
func (o GatewaySslClientCertOutput) Switch() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GatewaySslClientCert) pulumi.StringPtrOutput { return v.Switch }).(pulumi.StringPtrOutput)
}

type GatewaySslClientCertArrayOutput struct{ *pulumi.OutputState }

func (GatewaySslClientCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewaySslClientCert)(nil)).Elem()
}

func (o GatewaySslClientCertArrayOutput) ToGatewaySslClientCertArrayOutput() GatewaySslClientCertArrayOutput {
	return o
}

func (o GatewaySslClientCertArrayOutput) ToGatewaySslClientCertArrayOutputWithContext(ctx context.Context) GatewaySslClientCertArrayOutput {
	return o
}

func (o GatewaySslClientCertArrayOutput) Index(i pulumi.IntInput) GatewaySslClientCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewaySslClientCert {
		return vs[0].([]*GatewaySslClientCert)[vs[1].(int)]
	}).(GatewaySslClientCertOutput)
}

type GatewaySslClientCertMapOutput struct{ *pulumi.OutputState }

func (GatewaySslClientCertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewaySslClientCert)(nil)).Elem()
}

func (o GatewaySslClientCertMapOutput) ToGatewaySslClientCertMapOutput() GatewaySslClientCertMapOutput {
	return o
}

func (o GatewaySslClientCertMapOutput) ToGatewaySslClientCertMapOutputWithContext(ctx context.Context) GatewaySslClientCertMapOutput {
	return o
}

func (o GatewaySslClientCertMapOutput) MapIndex(k pulumi.StringInput) GatewaySslClientCertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewaySslClientCert {
		return vs[0].(map[string]*GatewaySslClientCert)[vs[1].(string)]
	}).(GatewaySslClientCertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySslClientCertInput)(nil)).Elem(), &GatewaySslClientCert{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySslClientCertArrayInput)(nil)).Elem(), GatewaySslClientCertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySslClientCertMapInput)(nil)).Elem(), GatewaySslClientCertMap{})
	pulumi.RegisterOutputType(GatewaySslClientCertOutput{})
	pulumi.RegisterOutputType(GatewaySslClientCertArrayOutput{})
	pulumi.RegisterOutputType(GatewaySslClientCertMapOutput{})
}
