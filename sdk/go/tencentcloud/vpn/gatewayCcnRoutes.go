// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpnGatewayCcnRoutes
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewGatewayCcnRoutes(ctx, "vpnGatewayCcnRoutes", &Vpn.GatewayCcnRoutesArgs{
//				DestinationCidrBlock: pulumi.String("192.168.1.0/24"),
//				RouteId:              pulumi.String("vpnr-akdy0757"),
//				Status:               pulumi.String("DISABLE"),
//				VpnGatewayId:         pulumi.String("vpngw-lie1a4u7"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// vpc vpn_gateway_ccn_routes can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpn/gatewayCcnRoutes:GatewayCcnRoutes vpn_gateway_ccn_routes vpn_gateway_id#ccn_routes_id
//
// ```
type GatewayCcnRoutes struct {
	pulumi.CustomResourceState

	// Routing CIDR.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// Route Id.
	RouteId pulumi.StringOutput `pulumi:"routeId"`
	// Whether routing information is enabled. `ENABLE`: Enable Route, `DISABLE`: Disable Route.
	Status pulumi.StringOutput `pulumi:"status"`
	// VPN GATEWAY INSTANCE ID.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewGatewayCcnRoutes registers a new resource with the given unique name, arguments, and options.
func NewGatewayCcnRoutes(ctx *pulumi.Context,
	name string, args *GatewayCcnRoutesArgs, opts ...pulumi.ResourceOption) (*GatewayCcnRoutes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GatewayCcnRoutes
	err := ctx.RegisterResource("tencentcloud:Vpn/gatewayCcnRoutes:GatewayCcnRoutes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayCcnRoutes gets an existing GatewayCcnRoutes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayCcnRoutes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayCcnRoutesState, opts ...pulumi.ResourceOption) (*GatewayCcnRoutes, error) {
	var resource GatewayCcnRoutes
	err := ctx.ReadResource("tencentcloud:Vpn/gatewayCcnRoutes:GatewayCcnRoutes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayCcnRoutes resources.
type gatewayCcnRoutesState struct {
	// Routing CIDR.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// Route Id.
	RouteId *string `pulumi:"routeId"`
	// Whether routing information is enabled. `ENABLE`: Enable Route, `DISABLE`: Disable Route.
	Status *string `pulumi:"status"`
	// VPN GATEWAY INSTANCE ID.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type GatewayCcnRoutesState struct {
	// Routing CIDR.
	DestinationCidrBlock pulumi.StringPtrInput
	// Route Id.
	RouteId pulumi.StringPtrInput
	// Whether routing information is enabled. `ENABLE`: Enable Route, `DISABLE`: Disable Route.
	Status pulumi.StringPtrInput
	// VPN GATEWAY INSTANCE ID.
	VpnGatewayId pulumi.StringPtrInput
}

func (GatewayCcnRoutesState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCcnRoutesState)(nil)).Elem()
}

type gatewayCcnRoutesArgs struct {
	// Routing CIDR.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// Route Id.
	RouteId string `pulumi:"routeId"`
	// Whether routing information is enabled. `ENABLE`: Enable Route, `DISABLE`: Disable Route.
	Status string `pulumi:"status"`
	// VPN GATEWAY INSTANCE ID.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a GatewayCcnRoutes resource.
type GatewayCcnRoutesArgs struct {
	// Routing CIDR.
	DestinationCidrBlock pulumi.StringInput
	// Route Id.
	RouteId pulumi.StringInput
	// Whether routing information is enabled. `ENABLE`: Enable Route, `DISABLE`: Disable Route.
	Status pulumi.StringInput
	// VPN GATEWAY INSTANCE ID.
	VpnGatewayId pulumi.StringInput
}

func (GatewayCcnRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCcnRoutesArgs)(nil)).Elem()
}

type GatewayCcnRoutesInput interface {
	pulumi.Input

	ToGatewayCcnRoutesOutput() GatewayCcnRoutesOutput
	ToGatewayCcnRoutesOutputWithContext(ctx context.Context) GatewayCcnRoutesOutput
}

func (*GatewayCcnRoutes) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCcnRoutes)(nil)).Elem()
}

func (i *GatewayCcnRoutes) ToGatewayCcnRoutesOutput() GatewayCcnRoutesOutput {
	return i.ToGatewayCcnRoutesOutputWithContext(context.Background())
}

func (i *GatewayCcnRoutes) ToGatewayCcnRoutesOutputWithContext(ctx context.Context) GatewayCcnRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCcnRoutesOutput)
}

// GatewayCcnRoutesArrayInput is an input type that accepts GatewayCcnRoutesArray and GatewayCcnRoutesArrayOutput values.
// You can construct a concrete instance of `GatewayCcnRoutesArrayInput` via:
//
//	GatewayCcnRoutesArray{ GatewayCcnRoutesArgs{...} }
type GatewayCcnRoutesArrayInput interface {
	pulumi.Input

	ToGatewayCcnRoutesArrayOutput() GatewayCcnRoutesArrayOutput
	ToGatewayCcnRoutesArrayOutputWithContext(context.Context) GatewayCcnRoutesArrayOutput
}

type GatewayCcnRoutesArray []GatewayCcnRoutesInput

func (GatewayCcnRoutesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCcnRoutes)(nil)).Elem()
}

func (i GatewayCcnRoutesArray) ToGatewayCcnRoutesArrayOutput() GatewayCcnRoutesArrayOutput {
	return i.ToGatewayCcnRoutesArrayOutputWithContext(context.Background())
}

func (i GatewayCcnRoutesArray) ToGatewayCcnRoutesArrayOutputWithContext(ctx context.Context) GatewayCcnRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCcnRoutesArrayOutput)
}

// GatewayCcnRoutesMapInput is an input type that accepts GatewayCcnRoutesMap and GatewayCcnRoutesMapOutput values.
// You can construct a concrete instance of `GatewayCcnRoutesMapInput` via:
//
//	GatewayCcnRoutesMap{ "key": GatewayCcnRoutesArgs{...} }
type GatewayCcnRoutesMapInput interface {
	pulumi.Input

	ToGatewayCcnRoutesMapOutput() GatewayCcnRoutesMapOutput
	ToGatewayCcnRoutesMapOutputWithContext(context.Context) GatewayCcnRoutesMapOutput
}

type GatewayCcnRoutesMap map[string]GatewayCcnRoutesInput

func (GatewayCcnRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCcnRoutes)(nil)).Elem()
}

func (i GatewayCcnRoutesMap) ToGatewayCcnRoutesMapOutput() GatewayCcnRoutesMapOutput {
	return i.ToGatewayCcnRoutesMapOutputWithContext(context.Background())
}

func (i GatewayCcnRoutesMap) ToGatewayCcnRoutesMapOutputWithContext(ctx context.Context) GatewayCcnRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCcnRoutesMapOutput)
}

type GatewayCcnRoutesOutput struct{ *pulumi.OutputState }

func (GatewayCcnRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCcnRoutes)(nil)).Elem()
}

func (o GatewayCcnRoutesOutput) ToGatewayCcnRoutesOutput() GatewayCcnRoutesOutput {
	return o
}

func (o GatewayCcnRoutesOutput) ToGatewayCcnRoutesOutputWithContext(ctx context.Context) GatewayCcnRoutesOutput {
	return o
}

// Routing CIDR.
func (o GatewayCcnRoutesOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCcnRoutes) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// Route Id.
func (o GatewayCcnRoutesOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCcnRoutes) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

// Whether routing information is enabled. `ENABLE`: Enable Route, `DISABLE`: Disable Route.
func (o GatewayCcnRoutesOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCcnRoutes) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// VPN GATEWAY INSTANCE ID.
func (o GatewayCcnRoutesOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCcnRoutes) pulumi.StringOutput { return v.VpnGatewayId }).(pulumi.StringOutput)
}

type GatewayCcnRoutesArrayOutput struct{ *pulumi.OutputState }

func (GatewayCcnRoutesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCcnRoutes)(nil)).Elem()
}

func (o GatewayCcnRoutesArrayOutput) ToGatewayCcnRoutesArrayOutput() GatewayCcnRoutesArrayOutput {
	return o
}

func (o GatewayCcnRoutesArrayOutput) ToGatewayCcnRoutesArrayOutputWithContext(ctx context.Context) GatewayCcnRoutesArrayOutput {
	return o
}

func (o GatewayCcnRoutesArrayOutput) Index(i pulumi.IntInput) GatewayCcnRoutesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayCcnRoutes {
		return vs[0].([]*GatewayCcnRoutes)[vs[1].(int)]
	}).(GatewayCcnRoutesOutput)
}

type GatewayCcnRoutesMapOutput struct{ *pulumi.OutputState }

func (GatewayCcnRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCcnRoutes)(nil)).Elem()
}

func (o GatewayCcnRoutesMapOutput) ToGatewayCcnRoutesMapOutput() GatewayCcnRoutesMapOutput {
	return o
}

func (o GatewayCcnRoutesMapOutput) ToGatewayCcnRoutesMapOutputWithContext(ctx context.Context) GatewayCcnRoutesMapOutput {
	return o
}

func (o GatewayCcnRoutesMapOutput) MapIndex(k pulumi.StringInput) GatewayCcnRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayCcnRoutes {
		return vs[0].(map[string]*GatewayCcnRoutes)[vs[1].(string)]
	}).(GatewayCcnRoutesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCcnRoutesInput)(nil)).Elem(), &GatewayCcnRoutes{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCcnRoutesArrayInput)(nil)).Elem(), GatewayCcnRoutesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCcnRoutesMapInput)(nil)).Elem(), GatewayCcnRoutesMap{})
	pulumi.RegisterOutputType(GatewayCcnRoutesOutput{})
	pulumi.RegisterOutputType(GatewayCcnRoutesArrayOutput{})
	pulumi.RegisterOutputType(GatewayCcnRoutesMapOutput{})
}
