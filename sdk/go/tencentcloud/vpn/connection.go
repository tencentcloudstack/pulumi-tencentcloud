// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a VPN connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewConnection(ctx, "foo", &Vpn.ConnectionArgs{
//				CustomerGatewayId:       pulumi.String("cgw-xfqag"),
//				IkeDhGroupName:          pulumi.String("GROUP2"),
//				IkeExchangeMode:         pulumi.String("AGGRESSIVE"),
//				IkeLocalAddress:         pulumi.String("1.1.1.1"),
//				IkeLocalIdentity:        pulumi.String("ADDRESS"),
//				IkeProtoAuthenAlgorithm: pulumi.String("SHA"),
//				IkeProtoEncryAlgorithm:  pulumi.String("3DES-CBC"),
//				IkeRemoteAddress:        pulumi.String("2.2.2.2"),
//				IkeRemoteIdentity:       pulumi.String("ADDRESS"),
//				IkeSaLifetimeSeconds:    pulumi.Int(86401),
//				IpsecEncryptAlgorithm:   pulumi.String("3DES-CBC"),
//				IpsecIntegrityAlgorithm: pulumi.String("SHA1"),
//				IpsecPfsDhGroup:         pulumi.String("NULL"),
//				IpsecSaLifetimeSeconds:  pulumi.Int(7200),
//				IpsecSaLifetimeTraffic:  pulumi.Int(2570),
//				PreShareKey:             pulumi.String("testt"),
//				SecurityGroupPolicies: vpn.ConnectionSecurityGroupPolicyArray{
//					&vpn.ConnectionSecurityGroupPolicyArgs{
//						LocalCidrBlock: pulumi.String("172.16.0.0/16"),
//						RemoteCidrBlocks: pulumi.StringArray{
//							pulumi.String("2.2.2.0/26"),
//						},
//					},
//				},
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("testt"),
//				},
//				VpcId:        pulumi.String("vpc-dk8zmwuf"),
//				VpnGatewayId: pulumi.String("vpngw-8ccsnclt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPN connection can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpn/connection:Connection foo vpnx-nadifg3s
//
// ```
type Connection struct {
	pulumi.CustomResourceState

	// Create time of the VPN connection.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// ID of the customer gateway.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
	DpdAction pulumi.StringOutput `pulumi:"dpdAction"`
	// Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
	DpdEnable pulumi.IntOutput `pulumi:"dpdEnable"`
	// DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
	DpdTimeout pulumi.IntOutput `pulumi:"dpdTimeout"`
	// Whether intra-tunnel health checks are supported.
	EnableHealthCheck pulumi.BoolOutput `pulumi:"enableHealthCheck"`
	// Encrypt proto of the VPN connection.
	EncryptProto pulumi.StringOutput `pulumi:"encryptProto"`
	// Health check the address of this terminal.
	HealthCheckLocalIp pulumi.StringOutput `pulumi:"healthCheckLocalIp"`
	// Health check peer address.
	HealthCheckRemoteIp pulumi.StringOutput `pulumi:"healthCheckRemoteIp"`
	// DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
	IkeDhGroupName pulumi.StringPtrOutput `pulumi:"ikeDhGroupName"`
	// Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
	IkeExchangeMode pulumi.StringPtrOutput `pulumi:"ikeExchangeMode"`
	// Local address of IKE operation specification, valid when ikeLocalIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related VPN gateway.
	IkeLocalAddress pulumi.StringPtrOutput `pulumi:"ikeLocalAddress"`
	// Local FQDN name of the IKE operation specification.
	IkeLocalFqdnName pulumi.StringPtrOutput `pulumi:"ikeLocalFqdnName"`
	// Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeLocalIdentity pulumi.StringPtrOutput `pulumi:"ikeLocalIdentity"`
	// Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
	IkeProtoAuthenAlgorithm pulumi.StringPtrOutput `pulumi:"ikeProtoAuthenAlgorithm"`
	// Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IkeProtoEncryAlgorithm pulumi.StringPtrOutput `pulumi:"ikeProtoEncryAlgorithm"`
	// Remote address of IKE operation specification, valid when ikeRemoteIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related customer gateway.
	IkeRemoteAddress pulumi.StringPtrOutput `pulumi:"ikeRemoteAddress"`
	// Remote FQDN name of the IKE operation specification.
	IkeRemoteFqdnName pulumi.StringPtrOutput `pulumi:"ikeRemoteFqdnName"`
	// Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeRemoteIdentity pulumi.StringPtrOutput `pulumi:"ikeRemoteIdentity"`
	// SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
	IkeSaLifetimeSeconds pulumi.IntPtrOutput `pulumi:"ikeSaLifetimeSeconds"`
	// Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
	IkeVersion pulumi.StringPtrOutput `pulumi:"ikeVersion"`
	// Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IpsecEncryptAlgorithm pulumi.StringPtrOutput `pulumi:"ipsecEncryptAlgorithm"`
	// Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
	IpsecIntegrityAlgorithm pulumi.StringPtrOutput `pulumi:"ipsecIntegrityAlgorithm"`
	// PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
	IpsecPfsDhGroup pulumi.StringPtrOutput `pulumi:"ipsecPfsDhGroup"`
	// SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
	IpsecSaLifetimeSeconds pulumi.IntPtrOutput `pulumi:"ipsecSaLifetimeSeconds"`
	// SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
	IpsecSaLifetimeTraffic pulumi.IntPtrOutput `pulumi:"ipsecSaLifetimeTraffic"`
	// Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpcId`. If `isCcnType` is true, modification of `vpcId` will be ignored.
	IsCcnType pulumi.BoolOutput `pulumi:"isCcnType"`
	// Name of the VPN connection. The length of character is limited to 1-60.
	Name pulumi.StringOutput `pulumi:"name"`
	// Net status of the VPN connection. Valid value: `AVAILABLE`.
	NetStatus pulumi.StringOutput `pulumi:"netStatus"`
	// Pre-shared key of the VPN connection.
	PreShareKey pulumi.StringOutput `pulumi:"preShareKey"`
	// Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
	RouteType pulumi.StringOutput `pulumi:"routeType"`
	// SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
	SecurityGroupPolicies ConnectionSecurityGroupPolicyArrayOutput `pulumi:"securityGroupPolicies"`
	// State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
	State pulumi.StringOutput `pulumi:"state"`
	// A list of tags used to associate different resources.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
	// ID of the VPN gateway.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
	// Vpn proto of the VPN connection.
	VpnProto pulumi.StringOutput `pulumi:"vpnProto"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.PreShareKey == nil {
		return nil, errors.New("invalid value for required argument 'PreShareKey'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("tencentcloud:Vpn/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("tencentcloud:Vpn/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// Create time of the VPN connection.
	CreateTime *string `pulumi:"createTime"`
	// ID of the customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
	DpdAction *string `pulumi:"dpdAction"`
	// Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
	DpdEnable *int `pulumi:"dpdEnable"`
	// DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
	DpdTimeout *int `pulumi:"dpdTimeout"`
	// Whether intra-tunnel health checks are supported.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// Encrypt proto of the VPN connection.
	EncryptProto *string `pulumi:"encryptProto"`
	// Health check the address of this terminal.
	HealthCheckLocalIp *string `pulumi:"healthCheckLocalIp"`
	// Health check peer address.
	HealthCheckRemoteIp *string `pulumi:"healthCheckRemoteIp"`
	// DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
	IkeDhGroupName *string `pulumi:"ikeDhGroupName"`
	// Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
	IkeExchangeMode *string `pulumi:"ikeExchangeMode"`
	// Local address of IKE operation specification, valid when ikeLocalIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related VPN gateway.
	IkeLocalAddress *string `pulumi:"ikeLocalAddress"`
	// Local FQDN name of the IKE operation specification.
	IkeLocalFqdnName *string `pulumi:"ikeLocalFqdnName"`
	// Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeLocalIdentity *string `pulumi:"ikeLocalIdentity"`
	// Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
	IkeProtoAuthenAlgorithm *string `pulumi:"ikeProtoAuthenAlgorithm"`
	// Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IkeProtoEncryAlgorithm *string `pulumi:"ikeProtoEncryAlgorithm"`
	// Remote address of IKE operation specification, valid when ikeRemoteIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related customer gateway.
	IkeRemoteAddress *string `pulumi:"ikeRemoteAddress"`
	// Remote FQDN name of the IKE operation specification.
	IkeRemoteFqdnName *string `pulumi:"ikeRemoteFqdnName"`
	// Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeRemoteIdentity *string `pulumi:"ikeRemoteIdentity"`
	// SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
	IkeSaLifetimeSeconds *int `pulumi:"ikeSaLifetimeSeconds"`
	// Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
	IkeVersion *string `pulumi:"ikeVersion"`
	// Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IpsecEncryptAlgorithm *string `pulumi:"ipsecEncryptAlgorithm"`
	// Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
	IpsecIntegrityAlgorithm *string `pulumi:"ipsecIntegrityAlgorithm"`
	// PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
	IpsecPfsDhGroup *string `pulumi:"ipsecPfsDhGroup"`
	// SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
	IpsecSaLifetimeSeconds *int `pulumi:"ipsecSaLifetimeSeconds"`
	// SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
	IpsecSaLifetimeTraffic *int `pulumi:"ipsecSaLifetimeTraffic"`
	// Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpcId`. If `isCcnType` is true, modification of `vpcId` will be ignored.
	IsCcnType *bool `pulumi:"isCcnType"`
	// Name of the VPN connection. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Net status of the VPN connection. Valid value: `AVAILABLE`.
	NetStatus *string `pulumi:"netStatus"`
	// Pre-shared key of the VPN connection.
	PreShareKey *string `pulumi:"preShareKey"`
	// Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
	RouteType *string `pulumi:"routeType"`
	// SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
	SecurityGroupPolicies []ConnectionSecurityGroupPolicy `pulumi:"securityGroupPolicies"`
	// State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
	State *string `pulumi:"state"`
	// A list of tags used to associate different resources.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
	VpcId *string `pulumi:"vpcId"`
	// ID of the VPN gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
	// Vpn proto of the VPN connection.
	VpnProto *string `pulumi:"vpnProto"`
}

type ConnectionState struct {
	// Create time of the VPN connection.
	CreateTime pulumi.StringPtrInput
	// ID of the customer gateway.
	CustomerGatewayId pulumi.StringPtrInput
	// The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
	DpdAction pulumi.StringPtrInput
	// Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
	DpdEnable pulumi.IntPtrInput
	// DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
	DpdTimeout pulumi.IntPtrInput
	// Whether intra-tunnel health checks are supported.
	EnableHealthCheck pulumi.BoolPtrInput
	// Encrypt proto of the VPN connection.
	EncryptProto pulumi.StringPtrInput
	// Health check the address of this terminal.
	HealthCheckLocalIp pulumi.StringPtrInput
	// Health check peer address.
	HealthCheckRemoteIp pulumi.StringPtrInput
	// DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
	IkeDhGroupName pulumi.StringPtrInput
	// Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
	IkeExchangeMode pulumi.StringPtrInput
	// Local address of IKE operation specification, valid when ikeLocalIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related VPN gateway.
	IkeLocalAddress pulumi.StringPtrInput
	// Local FQDN name of the IKE operation specification.
	IkeLocalFqdnName pulumi.StringPtrInput
	// Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeLocalIdentity pulumi.StringPtrInput
	// Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
	IkeProtoAuthenAlgorithm pulumi.StringPtrInput
	// Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IkeProtoEncryAlgorithm pulumi.StringPtrInput
	// Remote address of IKE operation specification, valid when ikeRemoteIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related customer gateway.
	IkeRemoteAddress pulumi.StringPtrInput
	// Remote FQDN name of the IKE operation specification.
	IkeRemoteFqdnName pulumi.StringPtrInput
	// Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeRemoteIdentity pulumi.StringPtrInput
	// SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
	IkeSaLifetimeSeconds pulumi.IntPtrInput
	// Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
	IkeVersion pulumi.StringPtrInput
	// Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IpsecEncryptAlgorithm pulumi.StringPtrInput
	// Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
	IpsecIntegrityAlgorithm pulumi.StringPtrInput
	// PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
	IpsecPfsDhGroup pulumi.StringPtrInput
	// SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
	IpsecSaLifetimeSeconds pulumi.IntPtrInput
	// SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
	IpsecSaLifetimeTraffic pulumi.IntPtrInput
	// Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpcId`. If `isCcnType` is true, modification of `vpcId` will be ignored.
	IsCcnType pulumi.BoolPtrInput
	// Name of the VPN connection. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Net status of the VPN connection. Valid value: `AVAILABLE`.
	NetStatus pulumi.StringPtrInput
	// Pre-shared key of the VPN connection.
	PreShareKey pulumi.StringPtrInput
	// Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
	RouteType pulumi.StringPtrInput
	// SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
	SecurityGroupPolicies ConnectionSecurityGroupPolicyArrayInput
	// State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
	State pulumi.StringPtrInput
	// A list of tags used to associate different resources.
	Tags pulumi.MapInput
	// ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
	VpcId pulumi.StringPtrInput
	// ID of the VPN gateway.
	VpnGatewayId pulumi.StringPtrInput
	// Vpn proto of the VPN connection.
	VpnProto pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// ID of the customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
	DpdAction *string `pulumi:"dpdAction"`
	// Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
	DpdEnable *int `pulumi:"dpdEnable"`
	// DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
	DpdTimeout *int `pulumi:"dpdTimeout"`
	// Whether intra-tunnel health checks are supported.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// Health check the address of this terminal.
	HealthCheckLocalIp *string `pulumi:"healthCheckLocalIp"`
	// Health check peer address.
	HealthCheckRemoteIp *string `pulumi:"healthCheckRemoteIp"`
	// DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
	IkeDhGroupName *string `pulumi:"ikeDhGroupName"`
	// Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
	IkeExchangeMode *string `pulumi:"ikeExchangeMode"`
	// Local address of IKE operation specification, valid when ikeLocalIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related VPN gateway.
	IkeLocalAddress *string `pulumi:"ikeLocalAddress"`
	// Local FQDN name of the IKE operation specification.
	IkeLocalFqdnName *string `pulumi:"ikeLocalFqdnName"`
	// Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeLocalIdentity *string `pulumi:"ikeLocalIdentity"`
	// Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
	IkeProtoAuthenAlgorithm *string `pulumi:"ikeProtoAuthenAlgorithm"`
	// Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IkeProtoEncryAlgorithm *string `pulumi:"ikeProtoEncryAlgorithm"`
	// Remote address of IKE operation specification, valid when ikeRemoteIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related customer gateway.
	IkeRemoteAddress *string `pulumi:"ikeRemoteAddress"`
	// Remote FQDN name of the IKE operation specification.
	IkeRemoteFqdnName *string `pulumi:"ikeRemoteFqdnName"`
	// Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeRemoteIdentity *string `pulumi:"ikeRemoteIdentity"`
	// SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
	IkeSaLifetimeSeconds *int `pulumi:"ikeSaLifetimeSeconds"`
	// Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
	IkeVersion *string `pulumi:"ikeVersion"`
	// Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IpsecEncryptAlgorithm *string `pulumi:"ipsecEncryptAlgorithm"`
	// Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
	IpsecIntegrityAlgorithm *string `pulumi:"ipsecIntegrityAlgorithm"`
	// PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
	IpsecPfsDhGroup *string `pulumi:"ipsecPfsDhGroup"`
	// SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
	IpsecSaLifetimeSeconds *int `pulumi:"ipsecSaLifetimeSeconds"`
	// SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
	IpsecSaLifetimeTraffic *int `pulumi:"ipsecSaLifetimeTraffic"`
	// Name of the VPN connection. The length of character is limited to 1-60.
	Name *string `pulumi:"name"`
	// Pre-shared key of the VPN connection.
	PreShareKey string `pulumi:"preShareKey"`
	// Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
	RouteType *string `pulumi:"routeType"`
	// SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
	SecurityGroupPolicies []ConnectionSecurityGroupPolicy `pulumi:"securityGroupPolicies"`
	// A list of tags used to associate different resources.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
	VpcId *string `pulumi:"vpcId"`
	// ID of the VPN gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// ID of the customer gateway.
	CustomerGatewayId pulumi.StringInput
	// The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
	DpdAction pulumi.StringPtrInput
	// Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
	DpdEnable pulumi.IntPtrInput
	// DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
	DpdTimeout pulumi.IntPtrInput
	// Whether intra-tunnel health checks are supported.
	EnableHealthCheck pulumi.BoolPtrInput
	// Health check the address of this terminal.
	HealthCheckLocalIp pulumi.StringPtrInput
	// Health check peer address.
	HealthCheckRemoteIp pulumi.StringPtrInput
	// DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
	IkeDhGroupName pulumi.StringPtrInput
	// Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
	IkeExchangeMode pulumi.StringPtrInput
	// Local address of IKE operation specification, valid when ikeLocalIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related VPN gateway.
	IkeLocalAddress pulumi.StringPtrInput
	// Local FQDN name of the IKE operation specification.
	IkeLocalFqdnName pulumi.StringPtrInput
	// Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeLocalIdentity pulumi.StringPtrInput
	// Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
	IkeProtoAuthenAlgorithm pulumi.StringPtrInput
	// Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IkeProtoEncryAlgorithm pulumi.StringPtrInput
	// Remote address of IKE operation specification, valid when ikeRemoteIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related customer gateway.
	IkeRemoteAddress pulumi.StringPtrInput
	// Remote FQDN name of the IKE operation specification.
	IkeRemoteFqdnName pulumi.StringPtrInput
	// Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
	IkeRemoteIdentity pulumi.StringPtrInput
	// SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
	IkeSaLifetimeSeconds pulumi.IntPtrInput
	// Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
	IkeVersion pulumi.StringPtrInput
	// Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
	IpsecEncryptAlgorithm pulumi.StringPtrInput
	// Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
	IpsecIntegrityAlgorithm pulumi.StringPtrInput
	// PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
	IpsecPfsDhGroup pulumi.StringPtrInput
	// SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
	IpsecSaLifetimeSeconds pulumi.IntPtrInput
	// SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
	IpsecSaLifetimeTraffic pulumi.IntPtrInput
	// Name of the VPN connection. The length of character is limited to 1-60.
	Name pulumi.StringPtrInput
	// Pre-shared key of the VPN connection.
	PreShareKey pulumi.StringInput
	// Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
	RouteType pulumi.StringPtrInput
	// SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
	SecurityGroupPolicies ConnectionSecurityGroupPolicyArrayInput
	// A list of tags used to associate different resources.
	Tags pulumi.MapInput
	// ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
	VpcId pulumi.StringPtrInput
	// ID of the VPN gateway.
	VpnGatewayId pulumi.StringInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// Create time of the VPN connection.
func (o ConnectionOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// ID of the customer gateway.
func (o ConnectionOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// The action after DPD timeout. Valid values: clear (disconnect) and restart (try again). It is valid when DpdEnable is 1.
func (o ConnectionOutput) DpdAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.DpdAction }).(pulumi.StringOutput)
}

// Specifies whether to enable DPD. Valid values: 0 (disable) and 1 (enable).
func (o ConnectionOutput) DpdEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntOutput { return v.DpdEnable }).(pulumi.IntOutput)
}

// DPD timeout period.Valid value ranges: [30~60], Default: 30; unit: second. If the request is not responded within this period, the peer end is considered not exists. This parameter is valid when the value of DpdEnable is 1.
func (o ConnectionOutput) DpdTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntOutput { return v.DpdTimeout }).(pulumi.IntOutput)
}

// Whether intra-tunnel health checks are supported.
func (o ConnectionOutput) EnableHealthCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.EnableHealthCheck }).(pulumi.BoolOutput)
}

// Encrypt proto of the VPN connection.
func (o ConnectionOutput) EncryptProto() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.EncryptProto }).(pulumi.StringOutput)
}

// Health check the address of this terminal.
func (o ConnectionOutput) HealthCheckLocalIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.HealthCheckLocalIp }).(pulumi.StringOutput)
}

// Health check peer address.
func (o ConnectionOutput) HealthCheckRemoteIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.HealthCheckRemoteIp }).(pulumi.StringOutput)
}

// DH group name of the IKE operation specification. Valid values: `GROUP1`, `GROUP2`, `GROUP5`, `GROUP14`, `GROUP24`. Default value is `GROUP1`.
func (o ConnectionOutput) IkeDhGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeDhGroupName }).(pulumi.StringPtrOutput)
}

// Exchange mode of the IKE operation specification. Valid values: `AGGRESSIVE`, `MAIN`. Default value is `MAIN`.
func (o ConnectionOutput) IkeExchangeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeExchangeMode }).(pulumi.StringPtrOutput)
}

// Local address of IKE operation specification, valid when ikeLocalIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related VPN gateway.
func (o ConnectionOutput) IkeLocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeLocalAddress }).(pulumi.StringPtrOutput)
}

// Local FQDN name of the IKE operation specification.
func (o ConnectionOutput) IkeLocalFqdnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeLocalFqdnName }).(pulumi.StringPtrOutput)
}

// Local identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
func (o ConnectionOutput) IkeLocalIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeLocalIdentity }).(pulumi.StringPtrOutput)
}

// Proto authenticate algorithm of the IKE operation specification. Valid values: `MD5`, `SHA`, `SHA-256`. Default Value is `MD5`.
func (o ConnectionOutput) IkeProtoAuthenAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeProtoAuthenAlgorithm }).(pulumi.StringPtrOutput)
}

// Proto encrypt algorithm of the IKE operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`,`AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
func (o ConnectionOutput) IkeProtoEncryAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeProtoEncryAlgorithm }).(pulumi.StringPtrOutput)
}

// Remote address of IKE operation specification, valid when ikeRemoteIdentity is `ADDRESS`, generally the value is `publicIpAddress` of the related customer gateway.
func (o ConnectionOutput) IkeRemoteAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeRemoteAddress }).(pulumi.StringPtrOutput)
}

// Remote FQDN name of the IKE operation specification.
func (o ConnectionOutput) IkeRemoteFqdnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeRemoteFqdnName }).(pulumi.StringPtrOutput)
}

// Remote identity way of IKE operation specification. Valid values: `ADDRESS`, `FQDN`. Default value is `ADDRESS`.
func (o ConnectionOutput) IkeRemoteIdentity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeRemoteIdentity }).(pulumi.StringPtrOutput)
}

// SA lifetime of the IKE operation specification, unit is `second`. The value ranges from 60 to 604800. Default value is 86400 seconds.
func (o ConnectionOutput) IkeSaLifetimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntPtrOutput { return v.IkeSaLifetimeSeconds }).(pulumi.IntPtrOutput)
}

// Version of the IKE operation specification, values: `IKEV1`, `IKEV2`. Default value is `IKEV1`.
func (o ConnectionOutput) IkeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeVersion }).(pulumi.StringPtrOutput)
}

// Encrypt algorithm of the IPSEC operation specification. Valid values: `3DES-CBC`, `AES-CBC-128`, `AES-CBC-192`, `AES-CBC-256`, `DES-CBC`, `SM4`, `NULL`, `AES128GCM128`, `AES192GCM128`, `AES256GCM128`. Default value is `3DES-CBC`.
func (o ConnectionOutput) IpsecEncryptAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IpsecEncryptAlgorithm }).(pulumi.StringPtrOutput)
}

// Integrity algorithm of the IPSEC operation specification. Valid values: `SHA1`, `MD5`, `SHA-256`. Default value is `MD5`.
func (o ConnectionOutput) IpsecIntegrityAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IpsecIntegrityAlgorithm }).(pulumi.StringPtrOutput)
}

// PFS DH group. Valid value: `DH-GROUP1`, `DH-GROUP2`, `DH-GROUP5`, `DH-GROUP14`, `DH-GROUP24`, `NULL`. Default value is `NULL`.
func (o ConnectionOutput) IpsecPfsDhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IpsecPfsDhGroup }).(pulumi.StringPtrOutput)
}

// SA lifetime of the IPSEC operation specification, unit is second. Valid value ranges: [180~604800]. Default value is 3600 seconds.
func (o ConnectionOutput) IpsecSaLifetimeSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntPtrOutput { return v.IpsecSaLifetimeSeconds }).(pulumi.IntPtrOutput)
}

// SA lifetime of the IPSEC operation specification, unit is KB. The value should not be less then 2560. Default value is 1843200.
func (o ConnectionOutput) IpsecSaLifetimeTraffic() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntPtrOutput { return v.IpsecSaLifetimeTraffic }).(pulumi.IntPtrOutput)
}

// Indicate whether is ccn type. Modification of this field only impacts force new logic of `vpcId`. If `isCcnType` is true, modification of `vpcId` will be ignored.
func (o ConnectionOutput) IsCcnType() pulumi.BoolOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolOutput { return v.IsCcnType }).(pulumi.BoolOutput)
}

// Name of the VPN connection. The length of character is limited to 1-60.
func (o ConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Net status of the VPN connection. Valid value: `AVAILABLE`.
func (o ConnectionOutput) NetStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.NetStatus }).(pulumi.StringOutput)
}

// Pre-shared key of the VPN connection.
func (o ConnectionOutput) PreShareKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.PreShareKey }).(pulumi.StringOutput)
}

// Route type of the VPN connection. Valid value: `STATIC`, `StaticRoute`, `Policy`.
func (o ConnectionOutput) RouteType() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.RouteType }).(pulumi.StringOutput)
}

// SPD policy group, for example: {"10.0.0.5/24":["172.123.10.5/16"]}, 10.0.0.5/24 is the vpc intranet segment, and 172.123.10.5/16 is the IDC network segment. Users specify which network segments in the VPC can communicate with which network segments in your IDC.
func (o ConnectionOutput) SecurityGroupPolicies() ConnectionSecurityGroupPolicyArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionSecurityGroupPolicyArrayOutput { return v.SecurityGroupPolicies }).(ConnectionSecurityGroupPolicyArrayOutput)
}

// State of the connection. Valid value: `PENDING`, `AVAILABLE`, `DELETING`.
func (o ConnectionOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// A list of tags used to associate different resources.
func (o ConnectionOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Connection) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// ID of the VPC. Required if vpn gateway is not in `CCN` type, and doesn't make sense for `CCN` vpn gateway.
func (o ConnectionOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

// ID of the VPN gateway.
func (o ConnectionOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.VpnGatewayId }).(pulumi.StringOutput)
}

// Vpn proto of the VPN connection.
func (o ConnectionOutput) VpnProto() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.VpnProto }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
