// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a VPN SSL Server.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpn.NewSslServer(ctx, "server", &Vpn.SslServerArgs{
//				Compress:           pulumi.Bool(true),
//				EncryptAlgorithm:   pulumi.String("AES-128-CBC"),
//				IntegrityAlgorithm: pulumi.String("MD5"),
//				LocalAddresses: pulumi.StringArray{
//					pulumi.String("10.0.0.0/17"),
//				},
//				RemoteAddress:    pulumi.String("11.0.0.0/16"),
//				SslVpnPort:       pulumi.Int(1194),
//				SslVpnProtocol:   pulumi.String("UDP"),
//				SslVpnServerName: pulumi.String("helloworld"),
//				VpnGatewayId:     pulumi.String("vpngw-335lwf7d"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPN SSL Server can be imported, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpn/sslServer:SslServer server vpn-server-id
//
// ```
type SslServer struct {
	pulumi.CustomResourceState

	// need compressed. Default value: False.
	Compress pulumi.BoolPtrOutput `pulumi:"compress"`
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
	EncryptAlgorithm pulumi.StringPtrOutput `pulumi:"encryptAlgorithm"`
	// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
	IntegrityAlgorithm pulumi.StringPtrOutput `pulumi:"integrityAlgorithm"`
	// List of local CIDR.
	LocalAddresses pulumi.StringArrayOutput `pulumi:"localAddresses"`
	// Remote CIDR for client.
	RemoteAddress pulumi.StringOutput `pulumi:"remoteAddress"`
	// The port of ssl vpn. Default value: 1194.
	SslVpnPort pulumi.IntPtrOutput `pulumi:"sslVpnPort"`
	// The protocol of ssl vpn. Default value: UDP.
	SslVpnProtocol pulumi.StringPtrOutput `pulumi:"sslVpnProtocol"`
	// The name of ssl vpn server to be created.
	SslVpnServerName pulumi.StringOutput `pulumi:"sslVpnServerName"`
	// VPN gateway ID.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewSslServer registers a new resource with the given unique name, arguments, and options.
func NewSslServer(ctx *pulumi.Context,
	name string, args *SslServerArgs, opts ...pulumi.ResourceOption) (*SslServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LocalAddresses == nil {
		return nil, errors.New("invalid value for required argument 'LocalAddresses'")
	}
	if args.RemoteAddress == nil {
		return nil, errors.New("invalid value for required argument 'RemoteAddress'")
	}
	if args.SslVpnServerName == nil {
		return nil, errors.New("invalid value for required argument 'SslVpnServerName'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SslServer
	err := ctx.RegisterResource("tencentcloud:Vpn/sslServer:SslServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslServer gets an existing SslServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslServerState, opts ...pulumi.ResourceOption) (*SslServer, error) {
	var resource SslServer
	err := ctx.ReadResource("tencentcloud:Vpn/sslServer:SslServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslServer resources.
type sslServerState struct {
	// need compressed. Default value: False.
	Compress *bool `pulumi:"compress"`
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
	EncryptAlgorithm *string `pulumi:"encryptAlgorithm"`
	// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
	IntegrityAlgorithm *string `pulumi:"integrityAlgorithm"`
	// List of local CIDR.
	LocalAddresses []string `pulumi:"localAddresses"`
	// Remote CIDR for client.
	RemoteAddress *string `pulumi:"remoteAddress"`
	// The port of ssl vpn. Default value: 1194.
	SslVpnPort *int `pulumi:"sslVpnPort"`
	// The protocol of ssl vpn. Default value: UDP.
	SslVpnProtocol *string `pulumi:"sslVpnProtocol"`
	// The name of ssl vpn server to be created.
	SslVpnServerName *string `pulumi:"sslVpnServerName"`
	// VPN gateway ID.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type SslServerState struct {
	// need compressed. Default value: False.
	Compress pulumi.BoolPtrInput
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
	EncryptAlgorithm pulumi.StringPtrInput
	// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
	IntegrityAlgorithm pulumi.StringPtrInput
	// List of local CIDR.
	LocalAddresses pulumi.StringArrayInput
	// Remote CIDR for client.
	RemoteAddress pulumi.StringPtrInput
	// The port of ssl vpn. Default value: 1194.
	SslVpnPort pulumi.IntPtrInput
	// The protocol of ssl vpn. Default value: UDP.
	SslVpnProtocol pulumi.StringPtrInput
	// The name of ssl vpn server to be created.
	SslVpnServerName pulumi.StringPtrInput
	// VPN gateway ID.
	VpnGatewayId pulumi.StringPtrInput
}

func (SslServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslServerState)(nil)).Elem()
}

type sslServerArgs struct {
	// need compressed. Default value: False.
	Compress *bool `pulumi:"compress"`
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
	EncryptAlgorithm *string `pulumi:"encryptAlgorithm"`
	// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
	IntegrityAlgorithm *string `pulumi:"integrityAlgorithm"`
	// List of local CIDR.
	LocalAddresses []string `pulumi:"localAddresses"`
	// Remote CIDR for client.
	RemoteAddress string `pulumi:"remoteAddress"`
	// The port of ssl vpn. Default value: 1194.
	SslVpnPort *int `pulumi:"sslVpnPort"`
	// The protocol of ssl vpn. Default value: UDP.
	SslVpnProtocol *string `pulumi:"sslVpnProtocol"`
	// The name of ssl vpn server to be created.
	SslVpnServerName string `pulumi:"sslVpnServerName"`
	// VPN gateway ID.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a SslServer resource.
type SslServerArgs struct {
	// need compressed. Default value: False.
	Compress pulumi.BoolPtrInput
	// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
	EncryptAlgorithm pulumi.StringPtrInput
	// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
	IntegrityAlgorithm pulumi.StringPtrInput
	// List of local CIDR.
	LocalAddresses pulumi.StringArrayInput
	// Remote CIDR for client.
	RemoteAddress pulumi.StringInput
	// The port of ssl vpn. Default value: 1194.
	SslVpnPort pulumi.IntPtrInput
	// The protocol of ssl vpn. Default value: UDP.
	SslVpnProtocol pulumi.StringPtrInput
	// The name of ssl vpn server to be created.
	SslVpnServerName pulumi.StringInput
	// VPN gateway ID.
	VpnGatewayId pulumi.StringInput
}

func (SslServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslServerArgs)(nil)).Elem()
}

type SslServerInput interface {
	pulumi.Input

	ToSslServerOutput() SslServerOutput
	ToSslServerOutputWithContext(ctx context.Context) SslServerOutput
}

func (*SslServer) ElementType() reflect.Type {
	return reflect.TypeOf((**SslServer)(nil)).Elem()
}

func (i *SslServer) ToSslServerOutput() SslServerOutput {
	return i.ToSslServerOutputWithContext(context.Background())
}

func (i *SslServer) ToSslServerOutputWithContext(ctx context.Context) SslServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslServerOutput)
}

// SslServerArrayInput is an input type that accepts SslServerArray and SslServerArrayOutput values.
// You can construct a concrete instance of `SslServerArrayInput` via:
//
//	SslServerArray{ SslServerArgs{...} }
type SslServerArrayInput interface {
	pulumi.Input

	ToSslServerArrayOutput() SslServerArrayOutput
	ToSslServerArrayOutputWithContext(context.Context) SslServerArrayOutput
}

type SslServerArray []SslServerInput

func (SslServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslServer)(nil)).Elem()
}

func (i SslServerArray) ToSslServerArrayOutput() SslServerArrayOutput {
	return i.ToSslServerArrayOutputWithContext(context.Background())
}

func (i SslServerArray) ToSslServerArrayOutputWithContext(ctx context.Context) SslServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslServerArrayOutput)
}

// SslServerMapInput is an input type that accepts SslServerMap and SslServerMapOutput values.
// You can construct a concrete instance of `SslServerMapInput` via:
//
//	SslServerMap{ "key": SslServerArgs{...} }
type SslServerMapInput interface {
	pulumi.Input

	ToSslServerMapOutput() SslServerMapOutput
	ToSslServerMapOutputWithContext(context.Context) SslServerMapOutput
}

type SslServerMap map[string]SslServerInput

func (SslServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslServer)(nil)).Elem()
}

func (i SslServerMap) ToSslServerMapOutput() SslServerMapOutput {
	return i.ToSslServerMapOutputWithContext(context.Background())
}

func (i SslServerMap) ToSslServerMapOutputWithContext(ctx context.Context) SslServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslServerMapOutput)
}

type SslServerOutput struct{ *pulumi.OutputState }

func (SslServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslServer)(nil)).Elem()
}

func (o SslServerOutput) ToSslServerOutput() SslServerOutput {
	return o
}

func (o SslServerOutput) ToSslServerOutputWithContext(ctx context.Context) SslServerOutput {
	return o
}

// need compressed. Default value: False.
func (o SslServerOutput) Compress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslServer) pulumi.BoolPtrOutput { return v.Compress }).(pulumi.BoolPtrOutput)
}

// The encrypt algorithm. Valid values: AES-128-CBC, AES-192-CBC, AES-256-CBC, NONE.Default value: NONE.
func (o SslServerOutput) EncryptAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringPtrOutput { return v.EncryptAlgorithm }).(pulumi.StringPtrOutput)
}

// The integrity algorithm. Valid values: SHA1, MD5 and NONE. Default value: NONE.
func (o SslServerOutput) IntegrityAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringPtrOutput { return v.IntegrityAlgorithm }).(pulumi.StringPtrOutput)
}

// List of local CIDR.
func (o SslServerOutput) LocalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringArrayOutput { return v.LocalAddresses }).(pulumi.StringArrayOutput)
}

// Remote CIDR for client.
func (o SslServerOutput) RemoteAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringOutput { return v.RemoteAddress }).(pulumi.StringOutput)
}

// The port of ssl vpn. Default value: 1194.
func (o SslServerOutput) SslVpnPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SslServer) pulumi.IntPtrOutput { return v.SslVpnPort }).(pulumi.IntPtrOutput)
}

// The protocol of ssl vpn. Default value: UDP.
func (o SslServerOutput) SslVpnProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringPtrOutput { return v.SslVpnProtocol }).(pulumi.StringPtrOutput)
}

// The name of ssl vpn server to be created.
func (o SslServerOutput) SslVpnServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringOutput { return v.SslVpnServerName }).(pulumi.StringOutput)
}

// VPN gateway ID.
func (o SslServerOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *SslServer) pulumi.StringOutput { return v.VpnGatewayId }).(pulumi.StringOutput)
}

type SslServerArrayOutput struct{ *pulumi.OutputState }

func (SslServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslServer)(nil)).Elem()
}

func (o SslServerArrayOutput) ToSslServerArrayOutput() SslServerArrayOutput {
	return o
}

func (o SslServerArrayOutput) ToSslServerArrayOutputWithContext(ctx context.Context) SslServerArrayOutput {
	return o
}

func (o SslServerArrayOutput) Index(i pulumi.IntInput) SslServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SslServer {
		return vs[0].([]*SslServer)[vs[1].(int)]
	}).(SslServerOutput)
}

type SslServerMapOutput struct{ *pulumi.OutputState }

func (SslServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslServer)(nil)).Elem()
}

func (o SslServerMapOutput) ToSslServerMapOutput() SslServerMapOutput {
	return o
}

func (o SslServerMapOutput) ToSslServerMapOutputWithContext(ctx context.Context) SslServerMapOutput {
	return o
}

func (o SslServerMapOutput) MapIndex(k pulumi.StringInput) SslServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SslServer {
		return vs[0].(map[string]*SslServer)[vs[1].(string)]
	}).(SslServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SslServerInput)(nil)).Elem(), &SslServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslServerArrayInput)(nil)).Elem(), SslServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslServerMapInput)(nil)).Elem(), SslServerMap{})
	pulumi.RegisterOutputType(SslServerOutput{})
	pulumi.RegisterOutputType(SslServerArrayOutput{})
	pulumi.RegisterOutputType(SslServerMapOutput{})
}
