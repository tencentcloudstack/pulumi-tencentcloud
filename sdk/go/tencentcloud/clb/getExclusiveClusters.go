// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of clb exclusiveClusters
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clb.GetExclusiveClusters(ctx, &clb.GetExclusiveClustersArgs{
//				Filters: []clb.GetExclusiveClustersFilter{
//					clb.GetExclusiveClustersFilter{
//						Name: "zone",
//						Values: []string{
//							"ap-guangzhou-1",
//						},
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetExclusiveClusters(ctx *pulumi.Context, args *GetExclusiveClustersArgs, opts ...pulumi.InvokeOption) (*GetExclusiveClustersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetExclusiveClustersResult
	err := ctx.Invoke("tencentcloud:Clb/getExclusiveClusters:getExclusiveClusters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getExclusiveClusters.
type GetExclusiveClustersArgs struct {
	// Filter to query the list of AZ resources as detailed below: cluster-type - String - Required: No - (Filter condition) Filter by cluster type, such as TGW. cluster-id - String - Required: No - (Filter condition) Filter by cluster ID, such as tgw-xxxxxxxx. cluster-name - String - Required: No - (Filter condition) Filter by cluster name, such as test-xxxxxx. cluster-tag - String - Required: No - (Filter condition) Filter by cluster tag, such as TAG-xxxxx. vip - String - Required: No - (Filter condition) Filter by vip in the cluster, such as x.x.x.x. network - String - Required: No - (Filter condition) Filter by cluster network type, such as Public or Private. zone - String - Required: No - (Filter condition) Filter by cluster zone, such as ap-guangzhou-1. isp - String - Required: No - (Filter condition) Filter by TGW cluster isp type, such as BGP. loadblancer-id - String - Required: No - (Filter condition) Filter by loadblancer-id in the cluste, such as lb-xxxxxxxx.
	Filters []GetExclusiveClustersFilter `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getExclusiveClusters.
type GetExclusiveClustersResult struct {
	// cluster list.
	ClusterSets []GetExclusiveClustersClusterSet `pulumi:"clusterSets"`
	Filters     []GetExclusiveClustersFilter     `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetExclusiveClustersOutput(ctx *pulumi.Context, args GetExclusiveClustersOutputArgs, opts ...pulumi.InvokeOption) GetExclusiveClustersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetExclusiveClustersResult, error) {
			args := v.(GetExclusiveClustersArgs)
			r, err := GetExclusiveClusters(ctx, &args, opts...)
			var s GetExclusiveClustersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetExclusiveClustersResultOutput)
}

// A collection of arguments for invoking getExclusiveClusters.
type GetExclusiveClustersOutputArgs struct {
	// Filter to query the list of AZ resources as detailed below: cluster-type - String - Required: No - (Filter condition) Filter by cluster type, such as TGW. cluster-id - String - Required: No - (Filter condition) Filter by cluster ID, such as tgw-xxxxxxxx. cluster-name - String - Required: No - (Filter condition) Filter by cluster name, such as test-xxxxxx. cluster-tag - String - Required: No - (Filter condition) Filter by cluster tag, such as TAG-xxxxx. vip - String - Required: No - (Filter condition) Filter by vip in the cluster, such as x.x.x.x. network - String - Required: No - (Filter condition) Filter by cluster network type, such as Public or Private. zone - String - Required: No - (Filter condition) Filter by cluster zone, such as ap-guangzhou-1. isp - String - Required: No - (Filter condition) Filter by TGW cluster isp type, such as BGP. loadblancer-id - String - Required: No - (Filter condition) Filter by loadblancer-id in the cluste, such as lb-xxxxxxxx.
	Filters GetExclusiveClustersFilterArrayInput `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetExclusiveClustersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExclusiveClustersArgs)(nil)).Elem()
}

// A collection of values returned by getExclusiveClusters.
type GetExclusiveClustersResultOutput struct{ *pulumi.OutputState }

func (GetExclusiveClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExclusiveClustersResult)(nil)).Elem()
}

func (o GetExclusiveClustersResultOutput) ToGetExclusiveClustersResultOutput() GetExclusiveClustersResultOutput {
	return o
}

func (o GetExclusiveClustersResultOutput) ToGetExclusiveClustersResultOutputWithContext(ctx context.Context) GetExclusiveClustersResultOutput {
	return o
}

// cluster list.
func (o GetExclusiveClustersResultOutput) ClusterSets() GetExclusiveClustersClusterSetArrayOutput {
	return o.ApplyT(func(v GetExclusiveClustersResult) []GetExclusiveClustersClusterSet { return v.ClusterSets }).(GetExclusiveClustersClusterSetArrayOutput)
}

func (o GetExclusiveClustersResultOutput) Filters() GetExclusiveClustersFilterArrayOutput {
	return o.ApplyT(func(v GetExclusiveClustersResult) []GetExclusiveClustersFilter { return v.Filters }).(GetExclusiveClustersFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetExclusiveClustersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetExclusiveClustersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetExclusiveClustersResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetExclusiveClustersResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetExclusiveClustersResultOutput{})
}
