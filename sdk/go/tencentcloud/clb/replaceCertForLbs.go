// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a clb replaceCertForLbs
//
// ## Example Usage
// ### Replace Server Cert By Cert ID
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clb.NewReplaceCertForLbs(ctx, "replaceCertForLbs", &Clb.ReplaceCertForLbsArgs{
//				Certificate: &clb.ReplaceCertForLbsCertificateArgs{
//					CertId: pulumi.String("6vcK02GC"),
//				},
//				OldCertificateId: pulumi.String("zjUMifFK"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Replace Server Cert By Cert Content
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ssl"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := Ssl.GetCertificates(ctx, &ssl.GetCertificatesArgs{
//				Name: pulumi.StringRef("keep-ssl-ca"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Clb.NewReplaceCertForLbs(ctx, "replaceCertForLbs", &Clb.ReplaceCertForLbsArgs{
//				OldCertificateId: pulumi.String(foo.Certificates[0].Id),
//				Certificate: &clb.ReplaceCertForLbsCertificateArgs{
//					CertName:    pulumi.String("tf-test-cert"),
//					CertContent: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v", "-----BEGIN CERTIFICATE-----\n", "xxxxxxxxxxxxxxxxxxxxxxxxxxx\n", "-----END CERTIFICATE-----\n", "EOT,\n", "    certKey     = <<-EOT\n", "-----BEGIN RSA PRIVATE KEY-----\n", "xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n", "-----END RSA PRIVATE KEY-----\n")),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Replace Client Cert By Cert Content
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clb.NewReplaceCertForLbs(ctx, "replaceCertForLbs", &Clb.ReplaceCertForLbsArgs{
//				OldCertificateId: pulumi.String("zjUMifFK"),
//				Certificate: &clb.ReplaceCertForLbsCertificateArgs{
//					CertCaName:    pulumi.String("tf-test-cert"),
//					CertCaContent: pulumi.String(fmt.Sprintf("%v%v%v", "-----BEGIN CERTIFICATE-----\n", "xxxxxxxxContentxxxxxxxxxxxxxx\n", "-----END CERTIFICATE-----\n")),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
type ReplaceCertForLbs struct {
	pulumi.CustomResourceState

	// Information such as the content of the new certificate.
	Certificate ReplaceCertForLbsCertificateOutput `pulumi:"certificate"`
	// ID of the certificate to be replaced, which can be a server certificate or a client certificate.
	OldCertificateId pulumi.StringOutput `pulumi:"oldCertificateId"`
}

// NewReplaceCertForLbs registers a new resource with the given unique name, arguments, and options.
func NewReplaceCertForLbs(ctx *pulumi.Context,
	name string, args *ReplaceCertForLbsArgs, opts ...pulumi.ResourceOption) (*ReplaceCertForLbs, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Certificate == nil {
		return nil, errors.New("invalid value for required argument 'Certificate'")
	}
	if args.OldCertificateId == nil {
		return nil, errors.New("invalid value for required argument 'OldCertificateId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReplaceCertForLbs
	err := ctx.RegisterResource("tencentcloud:Clb/replaceCertForLbs:ReplaceCertForLbs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplaceCertForLbs gets an existing ReplaceCertForLbs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplaceCertForLbs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplaceCertForLbsState, opts ...pulumi.ResourceOption) (*ReplaceCertForLbs, error) {
	var resource ReplaceCertForLbs
	err := ctx.ReadResource("tencentcloud:Clb/replaceCertForLbs:ReplaceCertForLbs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplaceCertForLbs resources.
type replaceCertForLbsState struct {
	// Information such as the content of the new certificate.
	Certificate *ReplaceCertForLbsCertificate `pulumi:"certificate"`
	// ID of the certificate to be replaced, which can be a server certificate or a client certificate.
	OldCertificateId *string `pulumi:"oldCertificateId"`
}

type ReplaceCertForLbsState struct {
	// Information such as the content of the new certificate.
	Certificate ReplaceCertForLbsCertificatePtrInput
	// ID of the certificate to be replaced, which can be a server certificate or a client certificate.
	OldCertificateId pulumi.StringPtrInput
}

func (ReplaceCertForLbsState) ElementType() reflect.Type {
	return reflect.TypeOf((*replaceCertForLbsState)(nil)).Elem()
}

type replaceCertForLbsArgs struct {
	// Information such as the content of the new certificate.
	Certificate ReplaceCertForLbsCertificate `pulumi:"certificate"`
	// ID of the certificate to be replaced, which can be a server certificate or a client certificate.
	OldCertificateId string `pulumi:"oldCertificateId"`
}

// The set of arguments for constructing a ReplaceCertForLbs resource.
type ReplaceCertForLbsArgs struct {
	// Information such as the content of the new certificate.
	Certificate ReplaceCertForLbsCertificateInput
	// ID of the certificate to be replaced, which can be a server certificate or a client certificate.
	OldCertificateId pulumi.StringInput
}

func (ReplaceCertForLbsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replaceCertForLbsArgs)(nil)).Elem()
}

type ReplaceCertForLbsInput interface {
	pulumi.Input

	ToReplaceCertForLbsOutput() ReplaceCertForLbsOutput
	ToReplaceCertForLbsOutputWithContext(ctx context.Context) ReplaceCertForLbsOutput
}

func (*ReplaceCertForLbs) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplaceCertForLbs)(nil)).Elem()
}

func (i *ReplaceCertForLbs) ToReplaceCertForLbsOutput() ReplaceCertForLbsOutput {
	return i.ToReplaceCertForLbsOutputWithContext(context.Background())
}

func (i *ReplaceCertForLbs) ToReplaceCertForLbsOutputWithContext(ctx context.Context) ReplaceCertForLbsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplaceCertForLbsOutput)
}

// ReplaceCertForLbsArrayInput is an input type that accepts ReplaceCertForLbsArray and ReplaceCertForLbsArrayOutput values.
// You can construct a concrete instance of `ReplaceCertForLbsArrayInput` via:
//
//	ReplaceCertForLbsArray{ ReplaceCertForLbsArgs{...} }
type ReplaceCertForLbsArrayInput interface {
	pulumi.Input

	ToReplaceCertForLbsArrayOutput() ReplaceCertForLbsArrayOutput
	ToReplaceCertForLbsArrayOutputWithContext(context.Context) ReplaceCertForLbsArrayOutput
}

type ReplaceCertForLbsArray []ReplaceCertForLbsInput

func (ReplaceCertForLbsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplaceCertForLbs)(nil)).Elem()
}

func (i ReplaceCertForLbsArray) ToReplaceCertForLbsArrayOutput() ReplaceCertForLbsArrayOutput {
	return i.ToReplaceCertForLbsArrayOutputWithContext(context.Background())
}

func (i ReplaceCertForLbsArray) ToReplaceCertForLbsArrayOutputWithContext(ctx context.Context) ReplaceCertForLbsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplaceCertForLbsArrayOutput)
}

// ReplaceCertForLbsMapInput is an input type that accepts ReplaceCertForLbsMap and ReplaceCertForLbsMapOutput values.
// You can construct a concrete instance of `ReplaceCertForLbsMapInput` via:
//
//	ReplaceCertForLbsMap{ "key": ReplaceCertForLbsArgs{...} }
type ReplaceCertForLbsMapInput interface {
	pulumi.Input

	ToReplaceCertForLbsMapOutput() ReplaceCertForLbsMapOutput
	ToReplaceCertForLbsMapOutputWithContext(context.Context) ReplaceCertForLbsMapOutput
}

type ReplaceCertForLbsMap map[string]ReplaceCertForLbsInput

func (ReplaceCertForLbsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplaceCertForLbs)(nil)).Elem()
}

func (i ReplaceCertForLbsMap) ToReplaceCertForLbsMapOutput() ReplaceCertForLbsMapOutput {
	return i.ToReplaceCertForLbsMapOutputWithContext(context.Background())
}

func (i ReplaceCertForLbsMap) ToReplaceCertForLbsMapOutputWithContext(ctx context.Context) ReplaceCertForLbsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplaceCertForLbsMapOutput)
}

type ReplaceCertForLbsOutput struct{ *pulumi.OutputState }

func (ReplaceCertForLbsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplaceCertForLbs)(nil)).Elem()
}

func (o ReplaceCertForLbsOutput) ToReplaceCertForLbsOutput() ReplaceCertForLbsOutput {
	return o
}

func (o ReplaceCertForLbsOutput) ToReplaceCertForLbsOutputWithContext(ctx context.Context) ReplaceCertForLbsOutput {
	return o
}

// Information such as the content of the new certificate.
func (o ReplaceCertForLbsOutput) Certificate() ReplaceCertForLbsCertificateOutput {
	return o.ApplyT(func(v *ReplaceCertForLbs) ReplaceCertForLbsCertificateOutput { return v.Certificate }).(ReplaceCertForLbsCertificateOutput)
}

// ID of the certificate to be replaced, which can be a server certificate or a client certificate.
func (o ReplaceCertForLbsOutput) OldCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplaceCertForLbs) pulumi.StringOutput { return v.OldCertificateId }).(pulumi.StringOutput)
}

type ReplaceCertForLbsArrayOutput struct{ *pulumi.OutputState }

func (ReplaceCertForLbsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplaceCertForLbs)(nil)).Elem()
}

func (o ReplaceCertForLbsArrayOutput) ToReplaceCertForLbsArrayOutput() ReplaceCertForLbsArrayOutput {
	return o
}

func (o ReplaceCertForLbsArrayOutput) ToReplaceCertForLbsArrayOutputWithContext(ctx context.Context) ReplaceCertForLbsArrayOutput {
	return o
}

func (o ReplaceCertForLbsArrayOutput) Index(i pulumi.IntInput) ReplaceCertForLbsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplaceCertForLbs {
		return vs[0].([]*ReplaceCertForLbs)[vs[1].(int)]
	}).(ReplaceCertForLbsOutput)
}

type ReplaceCertForLbsMapOutput struct{ *pulumi.OutputState }

func (ReplaceCertForLbsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplaceCertForLbs)(nil)).Elem()
}

func (o ReplaceCertForLbsMapOutput) ToReplaceCertForLbsMapOutput() ReplaceCertForLbsMapOutput {
	return o
}

func (o ReplaceCertForLbsMapOutput) ToReplaceCertForLbsMapOutputWithContext(ctx context.Context) ReplaceCertForLbsMapOutput {
	return o
}

func (o ReplaceCertForLbsMapOutput) MapIndex(k pulumi.StringInput) ReplaceCertForLbsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplaceCertForLbs {
		return vs[0].(map[string]*ReplaceCertForLbs)[vs[1].(string)]
	}).(ReplaceCertForLbsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplaceCertForLbsInput)(nil)).Elem(), &ReplaceCertForLbs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplaceCertForLbsArrayInput)(nil)).Elem(), ReplaceCertForLbsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplaceCertForLbsMapInput)(nil)).Elem(), ReplaceCertForLbsMap{})
	pulumi.RegisterOutputType(ReplaceCertForLbsOutput{})
	pulumi.RegisterOutputType(ReplaceCertForLbsArrayOutput{})
	pulumi.RegisterOutputType(ReplaceCertForLbsMapOutput{})
}
