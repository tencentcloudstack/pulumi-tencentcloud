// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a clb instanceMixIpTargetConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clb.NewInstanceMixIpTargetConfig(ctx, "instanceMixIpTargetConfig", &Clb.InstanceMixIpTargetConfigArgs{
//				LoadBalancerId: pulumi.String("lb-5dnrkgry"),
//				MixIpTarget:    pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// clb instance_mix_ip_target_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Clb/instanceMixIpTargetConfig:InstanceMixIpTargetConfig instance_mix_ip_target_config instance_id
//
// ```
type InstanceMixIpTargetConfig struct {
	pulumi.CustomResourceState

	// ID of CLB instances to be queried.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// False: closed True:open.
	MixIpTarget pulumi.BoolOutput `pulumi:"mixIpTarget"`
}

// NewInstanceMixIpTargetConfig registers a new resource with the given unique name, arguments, and options.
func NewInstanceMixIpTargetConfig(ctx *pulumi.Context,
	name string, args *InstanceMixIpTargetConfigArgs, opts ...pulumi.ResourceOption) (*InstanceMixIpTargetConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.MixIpTarget == nil {
		return nil, errors.New("invalid value for required argument 'MixIpTarget'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InstanceMixIpTargetConfig
	err := ctx.RegisterResource("tencentcloud:Clb/instanceMixIpTargetConfig:InstanceMixIpTargetConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceMixIpTargetConfig gets an existing InstanceMixIpTargetConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceMixIpTargetConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceMixIpTargetConfigState, opts ...pulumi.ResourceOption) (*InstanceMixIpTargetConfig, error) {
	var resource InstanceMixIpTargetConfig
	err := ctx.ReadResource("tencentcloud:Clb/instanceMixIpTargetConfig:InstanceMixIpTargetConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceMixIpTargetConfig resources.
type instanceMixIpTargetConfigState struct {
	// ID of CLB instances to be queried.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// False: closed True:open.
	MixIpTarget *bool `pulumi:"mixIpTarget"`
}

type InstanceMixIpTargetConfigState struct {
	// ID of CLB instances to be queried.
	LoadBalancerId pulumi.StringPtrInput
	// False: closed True:open.
	MixIpTarget pulumi.BoolPtrInput
}

func (InstanceMixIpTargetConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceMixIpTargetConfigState)(nil)).Elem()
}

type instanceMixIpTargetConfigArgs struct {
	// ID of CLB instances to be queried.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// False: closed True:open.
	MixIpTarget bool `pulumi:"mixIpTarget"`
}

// The set of arguments for constructing a InstanceMixIpTargetConfig resource.
type InstanceMixIpTargetConfigArgs struct {
	// ID of CLB instances to be queried.
	LoadBalancerId pulumi.StringInput
	// False: closed True:open.
	MixIpTarget pulumi.BoolInput
}

func (InstanceMixIpTargetConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceMixIpTargetConfigArgs)(nil)).Elem()
}

type InstanceMixIpTargetConfigInput interface {
	pulumi.Input

	ToInstanceMixIpTargetConfigOutput() InstanceMixIpTargetConfigOutput
	ToInstanceMixIpTargetConfigOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigOutput
}

func (*InstanceMixIpTargetConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMixIpTargetConfig)(nil)).Elem()
}

func (i *InstanceMixIpTargetConfig) ToInstanceMixIpTargetConfigOutput() InstanceMixIpTargetConfigOutput {
	return i.ToInstanceMixIpTargetConfigOutputWithContext(context.Background())
}

func (i *InstanceMixIpTargetConfig) ToInstanceMixIpTargetConfigOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMixIpTargetConfigOutput)
}

// InstanceMixIpTargetConfigArrayInput is an input type that accepts InstanceMixIpTargetConfigArray and InstanceMixIpTargetConfigArrayOutput values.
// You can construct a concrete instance of `InstanceMixIpTargetConfigArrayInput` via:
//
//	InstanceMixIpTargetConfigArray{ InstanceMixIpTargetConfigArgs{...} }
type InstanceMixIpTargetConfigArrayInput interface {
	pulumi.Input

	ToInstanceMixIpTargetConfigArrayOutput() InstanceMixIpTargetConfigArrayOutput
	ToInstanceMixIpTargetConfigArrayOutputWithContext(context.Context) InstanceMixIpTargetConfigArrayOutput
}

type InstanceMixIpTargetConfigArray []InstanceMixIpTargetConfigInput

func (InstanceMixIpTargetConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceMixIpTargetConfig)(nil)).Elem()
}

func (i InstanceMixIpTargetConfigArray) ToInstanceMixIpTargetConfigArrayOutput() InstanceMixIpTargetConfigArrayOutput {
	return i.ToInstanceMixIpTargetConfigArrayOutputWithContext(context.Background())
}

func (i InstanceMixIpTargetConfigArray) ToInstanceMixIpTargetConfigArrayOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMixIpTargetConfigArrayOutput)
}

// InstanceMixIpTargetConfigMapInput is an input type that accepts InstanceMixIpTargetConfigMap and InstanceMixIpTargetConfigMapOutput values.
// You can construct a concrete instance of `InstanceMixIpTargetConfigMapInput` via:
//
//	InstanceMixIpTargetConfigMap{ "key": InstanceMixIpTargetConfigArgs{...} }
type InstanceMixIpTargetConfigMapInput interface {
	pulumi.Input

	ToInstanceMixIpTargetConfigMapOutput() InstanceMixIpTargetConfigMapOutput
	ToInstanceMixIpTargetConfigMapOutputWithContext(context.Context) InstanceMixIpTargetConfigMapOutput
}

type InstanceMixIpTargetConfigMap map[string]InstanceMixIpTargetConfigInput

func (InstanceMixIpTargetConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceMixIpTargetConfig)(nil)).Elem()
}

func (i InstanceMixIpTargetConfigMap) ToInstanceMixIpTargetConfigMapOutput() InstanceMixIpTargetConfigMapOutput {
	return i.ToInstanceMixIpTargetConfigMapOutputWithContext(context.Background())
}

func (i InstanceMixIpTargetConfigMap) ToInstanceMixIpTargetConfigMapOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMixIpTargetConfigMapOutput)
}

type InstanceMixIpTargetConfigOutput struct{ *pulumi.OutputState }

func (InstanceMixIpTargetConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMixIpTargetConfig)(nil)).Elem()
}

func (o InstanceMixIpTargetConfigOutput) ToInstanceMixIpTargetConfigOutput() InstanceMixIpTargetConfigOutput {
	return o
}

func (o InstanceMixIpTargetConfigOutput) ToInstanceMixIpTargetConfigOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigOutput {
	return o
}

// ID of CLB instances to be queried.
func (o InstanceMixIpTargetConfigOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceMixIpTargetConfig) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// False: closed True:open.
func (o InstanceMixIpTargetConfigOutput) MixIpTarget() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstanceMixIpTargetConfig) pulumi.BoolOutput { return v.MixIpTarget }).(pulumi.BoolOutput)
}

type InstanceMixIpTargetConfigArrayOutput struct{ *pulumi.OutputState }

func (InstanceMixIpTargetConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceMixIpTargetConfig)(nil)).Elem()
}

func (o InstanceMixIpTargetConfigArrayOutput) ToInstanceMixIpTargetConfigArrayOutput() InstanceMixIpTargetConfigArrayOutput {
	return o
}

func (o InstanceMixIpTargetConfigArrayOutput) ToInstanceMixIpTargetConfigArrayOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigArrayOutput {
	return o
}

func (o InstanceMixIpTargetConfigArrayOutput) Index(i pulumi.IntInput) InstanceMixIpTargetConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceMixIpTargetConfig {
		return vs[0].([]*InstanceMixIpTargetConfig)[vs[1].(int)]
	}).(InstanceMixIpTargetConfigOutput)
}

type InstanceMixIpTargetConfigMapOutput struct{ *pulumi.OutputState }

func (InstanceMixIpTargetConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceMixIpTargetConfig)(nil)).Elem()
}

func (o InstanceMixIpTargetConfigMapOutput) ToInstanceMixIpTargetConfigMapOutput() InstanceMixIpTargetConfigMapOutput {
	return o
}

func (o InstanceMixIpTargetConfigMapOutput) ToInstanceMixIpTargetConfigMapOutputWithContext(ctx context.Context) InstanceMixIpTargetConfigMapOutput {
	return o
}

func (o InstanceMixIpTargetConfigMapOutput) MapIndex(k pulumi.StringInput) InstanceMixIpTargetConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceMixIpTargetConfig {
		return vs[0].(map[string]*InstanceMixIpTargetConfig)[vs[1].(string)]
	}).(InstanceMixIpTargetConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMixIpTargetConfigInput)(nil)).Elem(), &InstanceMixIpTargetConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMixIpTargetConfigArrayInput)(nil)).Elem(), InstanceMixIpTargetConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMixIpTargetConfigMapInput)(nil)).Elem(), InstanceMixIpTargetConfigMap{})
	pulumi.RegisterOutputType(InstanceMixIpTargetConfigOutput{})
	pulumi.RegisterOutputType(InstanceMixIpTargetConfigArrayOutput{})
	pulumi.RegisterOutputType(InstanceMixIpTargetConfigMapOutput{})
}
