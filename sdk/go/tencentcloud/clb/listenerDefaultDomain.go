// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to set clb listener default domain
//
// ## Example Usage
//
// ### Set default domain
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clb.NewListenerDefaultDomain(ctx, "example", &Clb.ListenerDefaultDomainArgs{
//				ClbId:      pulumi.String("lb-g1miv1ok"),
//				Domain:     pulumi.String("3.com"),
//				ListenerId: pulumi.String("lbl-duilx5qm"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// CLB listener default domain can be imported using the id (version >= 1.47.0), e.g.
//
// ```sh
// $ pulumi import tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain example lb-k2zjp9lv#lbl-hh141sn9
// ```
type ListenerDefaultDomain struct {
	pulumi.CustomResourceState

	// ID of CLB instance.
	ClbId pulumi.StringOutput `pulumi:"clbId"`
	// Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// ID of CLB listener.
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// ID of this CLB listener rule.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
}

// NewListenerDefaultDomain registers a new resource with the given unique name, arguments, and options.
func NewListenerDefaultDomain(ctx *pulumi.Context,
	name string, args *ListenerDefaultDomainArgs, opts ...pulumi.ResourceOption) (*ListenerDefaultDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClbId == nil {
		return nil, errors.New("invalid value for required argument 'ClbId'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ListenerDefaultDomain
	err := ctx.RegisterResource("tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListenerDefaultDomain gets an existing ListenerDefaultDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListenerDefaultDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerDefaultDomainState, opts ...pulumi.ResourceOption) (*ListenerDefaultDomain, error) {
	var resource ListenerDefaultDomain
	err := ctx.ReadResource("tencentcloud:Clb/listenerDefaultDomain:ListenerDefaultDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ListenerDefaultDomain resources.
type listenerDefaultDomainState struct {
	// ID of CLB instance.
	ClbId *string `pulumi:"clbId"`
	// Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
	Domain *string `pulumi:"domain"`
	// ID of CLB listener.
	ListenerId *string `pulumi:"listenerId"`
	// ID of this CLB listener rule.
	RuleId *string `pulumi:"ruleId"`
}

type ListenerDefaultDomainState struct {
	// ID of CLB instance.
	ClbId pulumi.StringPtrInput
	// Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
	Domain pulumi.StringPtrInput
	// ID of CLB listener.
	ListenerId pulumi.StringPtrInput
	// ID of this CLB listener rule.
	RuleId pulumi.StringPtrInput
}

func (ListenerDefaultDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerDefaultDomainState)(nil)).Elem()
}

type listenerDefaultDomainArgs struct {
	// ID of CLB instance.
	ClbId string `pulumi:"clbId"`
	// Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
	Domain string `pulumi:"domain"`
	// ID of CLB listener.
	ListenerId string `pulumi:"listenerId"`
}

// The set of arguments for constructing a ListenerDefaultDomain resource.
type ListenerDefaultDomainArgs struct {
	// ID of CLB instance.
	ClbId pulumi.StringInput
	// Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
	Domain pulumi.StringInput
	// ID of CLB listener.
	ListenerId pulumi.StringInput
}

func (ListenerDefaultDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerDefaultDomainArgs)(nil)).Elem()
}

type ListenerDefaultDomainInput interface {
	pulumi.Input

	ToListenerDefaultDomainOutput() ListenerDefaultDomainOutput
	ToListenerDefaultDomainOutputWithContext(ctx context.Context) ListenerDefaultDomainOutput
}

func (*ListenerDefaultDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerDefaultDomain)(nil)).Elem()
}

func (i *ListenerDefaultDomain) ToListenerDefaultDomainOutput() ListenerDefaultDomainOutput {
	return i.ToListenerDefaultDomainOutputWithContext(context.Background())
}

func (i *ListenerDefaultDomain) ToListenerDefaultDomainOutputWithContext(ctx context.Context) ListenerDefaultDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultDomainOutput)
}

// ListenerDefaultDomainArrayInput is an input type that accepts ListenerDefaultDomainArray and ListenerDefaultDomainArrayOutput values.
// You can construct a concrete instance of `ListenerDefaultDomainArrayInput` via:
//
//	ListenerDefaultDomainArray{ ListenerDefaultDomainArgs{...} }
type ListenerDefaultDomainArrayInput interface {
	pulumi.Input

	ToListenerDefaultDomainArrayOutput() ListenerDefaultDomainArrayOutput
	ToListenerDefaultDomainArrayOutputWithContext(context.Context) ListenerDefaultDomainArrayOutput
}

type ListenerDefaultDomainArray []ListenerDefaultDomainInput

func (ListenerDefaultDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerDefaultDomain)(nil)).Elem()
}

func (i ListenerDefaultDomainArray) ToListenerDefaultDomainArrayOutput() ListenerDefaultDomainArrayOutput {
	return i.ToListenerDefaultDomainArrayOutputWithContext(context.Background())
}

func (i ListenerDefaultDomainArray) ToListenerDefaultDomainArrayOutputWithContext(ctx context.Context) ListenerDefaultDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultDomainArrayOutput)
}

// ListenerDefaultDomainMapInput is an input type that accepts ListenerDefaultDomainMap and ListenerDefaultDomainMapOutput values.
// You can construct a concrete instance of `ListenerDefaultDomainMapInput` via:
//
//	ListenerDefaultDomainMap{ "key": ListenerDefaultDomainArgs{...} }
type ListenerDefaultDomainMapInput interface {
	pulumi.Input

	ToListenerDefaultDomainMapOutput() ListenerDefaultDomainMapOutput
	ToListenerDefaultDomainMapOutputWithContext(context.Context) ListenerDefaultDomainMapOutput
}

type ListenerDefaultDomainMap map[string]ListenerDefaultDomainInput

func (ListenerDefaultDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerDefaultDomain)(nil)).Elem()
}

func (i ListenerDefaultDomainMap) ToListenerDefaultDomainMapOutput() ListenerDefaultDomainMapOutput {
	return i.ToListenerDefaultDomainMapOutputWithContext(context.Background())
}

func (i ListenerDefaultDomainMap) ToListenerDefaultDomainMapOutputWithContext(ctx context.Context) ListenerDefaultDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerDefaultDomainMapOutput)
}

type ListenerDefaultDomainOutput struct{ *pulumi.OutputState }

func (ListenerDefaultDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerDefaultDomain)(nil)).Elem()
}

func (o ListenerDefaultDomainOutput) ToListenerDefaultDomainOutput() ListenerDefaultDomainOutput {
	return o
}

func (o ListenerDefaultDomainOutput) ToListenerDefaultDomainOutputWithContext(ctx context.Context) ListenerDefaultDomainOutput {
	return o
}

// ID of CLB instance.
func (o ListenerDefaultDomainOutput) ClbId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDefaultDomain) pulumi.StringOutput { return v.ClbId }).(pulumi.StringOutput)
}

// Domain name of the listener rule. Single domain rules are passed to `domain`, and multi domain rules are passed to `domains`.
func (o ListenerDefaultDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDefaultDomain) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// ID of CLB listener.
func (o ListenerDefaultDomainOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDefaultDomain) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// ID of this CLB listener rule.
func (o ListenerDefaultDomainOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *ListenerDefaultDomain) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

type ListenerDefaultDomainArrayOutput struct{ *pulumi.OutputState }

func (ListenerDefaultDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ListenerDefaultDomain)(nil)).Elem()
}

func (o ListenerDefaultDomainArrayOutput) ToListenerDefaultDomainArrayOutput() ListenerDefaultDomainArrayOutput {
	return o
}

func (o ListenerDefaultDomainArrayOutput) ToListenerDefaultDomainArrayOutputWithContext(ctx context.Context) ListenerDefaultDomainArrayOutput {
	return o
}

func (o ListenerDefaultDomainArrayOutput) Index(i pulumi.IntInput) ListenerDefaultDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ListenerDefaultDomain {
		return vs[0].([]*ListenerDefaultDomain)[vs[1].(int)]
	}).(ListenerDefaultDomainOutput)
}

type ListenerDefaultDomainMapOutput struct{ *pulumi.OutputState }

func (ListenerDefaultDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ListenerDefaultDomain)(nil)).Elem()
}

func (o ListenerDefaultDomainMapOutput) ToListenerDefaultDomainMapOutput() ListenerDefaultDomainMapOutput {
	return o
}

func (o ListenerDefaultDomainMapOutput) ToListenerDefaultDomainMapOutputWithContext(ctx context.Context) ListenerDefaultDomainMapOutput {
	return o
}

func (o ListenerDefaultDomainMapOutput) MapIndex(k pulumi.StringInput) ListenerDefaultDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ListenerDefaultDomain {
		return vs[0].(map[string]*ListenerDefaultDomain)[vs[1].(string)]
	}).(ListenerDefaultDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDefaultDomainInput)(nil)).Elem(), &ListenerDefaultDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDefaultDomainArrayInput)(nil)).Elem(), ListenerDefaultDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerDefaultDomainMapInput)(nil)).Elem(), ListenerDefaultDomainMap{})
	pulumi.RegisterOutputType(ListenerDefaultDomainOutput{})
	pulumi.RegisterOutputType(ListenerDefaultDomainArrayOutput{})
	pulumi.RegisterOutputType(ListenerDefaultDomainMapOutput{})
}
