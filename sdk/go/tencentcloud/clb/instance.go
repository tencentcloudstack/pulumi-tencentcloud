// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a CLB instance.
//
// ## Example Usage
//
// ### Create INTERNAL CLB
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "example", &Clb.InstanceArgs{
//				NetworkType: pulumi.String("INTERNAL"),
//				ClbName:     pulumi.String("tf-example"),
//				ProjectId:   pulumi.Int(0),
//				VpcId:       vpc.ID(),
//				SubnetId:    subnet.ID(),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create dedicated cluster clb
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				CdcId:            pulumi.String("cluster-lchwgxhs"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "example", &Clb.InstanceArgs{
//				NetworkType: pulumi.String("INTERNAL"),
//				ClbName:     pulumi.String("tf-example"),
//				ProjectId:   pulumi.Int(0),
//				ClusterId:   pulumi.String("cluster-lchwgxhs"),
//				VpcId:       vpc.ID(),
//				SubnetId:    subnet.ID(),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create LCU-supported CLB
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "example", &Clb.InstanceArgs{
//				NetworkType: pulumi.String("INTERNAL"),
//				ClbName:     pulumi.String("tf-example"),
//				ProjectId:   pulumi.Int(0),
//				SlaType:     pulumi.String("clb.c3.medium"),
//				VpcId:       vpc.ID(),
//				SubnetId:    subnet.ID(),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create OPEN CLB
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType: pulumi.String("OPEN"),
//				ClbName:     pulumi.String("tf-example"),
//				ProjectId:   pulumi.Int(0),
//				VpcId:       vpc.ID(),
//				SecurityGroups: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Support CORS
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			zone := "ap-guangzhou"
//			if param := cfg.Get("zone"); param != "" {
//				zone = param
//			}
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType: pulumi.String("OPEN"),
//				ClbName:     pulumi.String("tf-example"),
//				ProjectId:   pulumi.Int(0),
//				VpcId:       vpc.ID(),
//				SecurityGroups: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				TargetRegionInfoRegion: pulumi.String(zone),
//				TargetRegionInfoVpcId:  vpc.ID(),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Open CLB with VipIsp
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create vpc bandwidth package
//			exampleBandwidthPackage, err := Vpc.NewBandwidthPackage(ctx, "exampleBandwidthPackage", &Vpc.BandwidthPackageArgs{
//				NetworkType:          pulumi.String("SINGLEISP_CMCC"),
//				ChargeType:           pulumi.String("ENHANCED95_POSTPAID_BY_MONTH"),
//				BandwidthPackageName: pulumi.String("tf-example"),
//				InternetMaxBandwidth: pulumi.Int(300),
//				Egress:               pulumi.String("center_egress1"),
//				Tags: pulumi.Map{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType:        pulumi.String("OPEN"),
//				ClbName:            pulumi.String("tf-example"),
//				ProjectId:          pulumi.Int(0),
//				VipIsp:             pulumi.String("CMCC"),
//				InternetChargeType: pulumi.String("BANDWIDTH_PACKAGE"),
//				BandwidthPackageId: exampleBandwidthPackage.ID(),
//				VpcId:              vpc.ID(),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Dynamic Vip Instance
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			zone := "ap-guangzhou"
//			if param := cfg.Get("zone"); param != "" {
//				zone = param
//			}
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			_, err = Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			exampleInstance, err := Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType:            pulumi.String("OPEN"),
//				ClbName:                pulumi.String("tf-example"),
//				ProjectId:              pulumi.Int(0),
//				VpcId:                  vpc.ID(),
//				TargetRegionInfoRegion: pulumi.String(zone),
//				TargetRegionInfoVpcId:  vpc.ID(),
//				SecurityGroups: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				DynamicVip: pulumi.Bool(true),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("domain", exampleInstance.Domain)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Specified Vip Instance
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			exampleInstance, err := Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType: pulumi.String("OPEN"),
//				ClbName:     pulumi.String("tf-example"),
//				ProjectId:   pulumi.Int(0),
//				VpcId:       vpc.ID(),
//				SecurityGroups: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				Vip: pulumi.String("111.230.4.204"),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("domain", exampleInstance.Domain)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Default enable
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			zone := "ap-guangzhou"
//			if param := cfg.Get("zone"); param != "" {
//				zone = param
//			}
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			_, err = Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.String(availabilityZone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType:              pulumi.String("OPEN"),
//				ClbName:                  pulumi.String("tf-example"),
//				ProjectId:                pulumi.Int(0),
//				LoadBalancerPassToTarget: pulumi.Bool(true),
//				VpcId:                    vpc.ID(),
//				SecurityGroups: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				TargetRegionInfoVpcId:  vpc.ID(),
//				TargetRegionInfoRegion: pulumi.String(zone),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create multiple instance
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			_, err := Clb.NewInstance(ctx, "example", &Clb.InstanceArgs{
//				NetworkType:  pulumi.String("OPEN"),
//				ClbName:      pulumi.String("tf-example"),
//				MasterZoneId: pulumi.String(availabilityZone),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create instance with log
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Route"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				AvailabilityZone: pulumi.Any(_var.Availability_zone),
//				CidrBlock:        pulumi.String("10.0.1.0/24"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create route table
//			_, err = Route.NewTable(ctx, "route", &Route.TableArgs{
//				VpcId: vpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			log, err := Clb.NewLogSet(ctx, "log", &Clb.LogSetArgs{
//				Period: pulumi.Int(7),
//			})
//			if err != nil {
//				return err
//			}
//			// create topic
//			topic, err := Clb.NewLogTopic(ctx, "topic", &Clb.LogTopicArgs{
//				LogSetId:  log.ID(),
//				TopicName: pulumi.String("clb-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			// create clb
//			_, err = Clb.NewInstance(ctx, "exampleInstance", &Clb.InstanceArgs{
//				NetworkType:              pulumi.String("INTERNAL"),
//				ClbName:                  pulumi.String("tf-example"),
//				ProjectId:                pulumi.Int(0),
//				LoadBalancerPassToTarget: pulumi.Bool(true),
//				VpcId:                    vpc.ID(),
//				SubnetId:                 subnet.ID(),
//				SecurityGroups: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				LogSetId:   log.ID(),
//				LogTopicId: topic.ID(),
//				Tags: pulumi.Map{
//					"tagKey": pulumi.Any("tagValue"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// CLB instance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Clb/instance:Instance example lb-7a0t6zqb
// ```
type Instance struct {
	pulumi.CustomResourceState

	// It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
	AddressIpVersion pulumi.StringOutput `pulumi:"addressIpVersion"`
	// The IPv6 address of the load balancing instance.
	AddressIpv6 pulumi.StringOutput `pulumi:"addressIpv6"`
	// Bandwidth package id. If set, the `internetChargeType` must be `BANDWIDTH_PACKAGE`.
	BandwidthPackageId pulumi.StringPtrOutput `pulumi:"bandwidthPackageId"`
	// Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ClbName pulumi.StringOutput `pulumi:"clbName"`
	// The virtual service address table of the CLB.
	ClbVips pulumi.StringArrayOutput `pulumi:"clbVips"`
	// Cluster ID.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// Whether to enable delete protection.
	DeleteProtect pulumi.BoolPtrOutput `pulumi:"deleteProtect"`
	// Domain name of the CLB instance.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// If create dynamic vip CLB instance, `true` or `false`.
	DynamicVip pulumi.BoolPtrOutput `pulumi:"dynamicVip"`
	// Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
	InternetBandwidthMaxOut pulumi.IntOutput `pulumi:"internetBandwidthMaxOut"`
	// Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
	InternetChargeType pulumi.StringOutput `pulumi:"internetChargeType"`
	// This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
	Ipv6Mode pulumi.StringOutput `pulumi:"ipv6Mode"`
	// Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
	LoadBalancerPassToTarget pulumi.BoolPtrOutput `pulumi:"loadBalancerPassToTarget"`
	// The id of log set.
	LogSetId pulumi.StringPtrOutput `pulumi:"logSetId"`
	// The id of log topic.
	LogTopicId pulumi.StringPtrOutput `pulumi:"logTopicId"`
	// Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
	MasterZoneId pulumi.StringOutput `pulumi:"masterZoneId"`
	// Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// ID of the project within the CLB instance, `0` - Default Project.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
	SecurityGroups pulumi.StringArrayOutput `pulumi:"securityGroups"`
	// This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
	SlaType pulumi.StringOutput `pulumi:"slaType"`
	// Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
	SlaveZoneId pulumi.StringOutput `pulumi:"slaveZoneId"`
	// Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
	SnatIps InstanceSnatIpArrayOutput `pulumi:"snatIps"`
	// Indicates whether Binding IPs of other VPCs feature switch.
	SnatPro pulumi.BoolPtrOutput `pulumi:"snatPro"`
	// In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// The available tags within this CLB.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoRegion pulumi.StringOutput `pulumi:"targetRegionInfoRegion"`
	// Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoVpcId pulumi.StringOutput `pulumi:"targetRegionInfoVpcId"`
	// Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
	Vip pulumi.StringOutput `pulumi:"vip"`
	// Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
	VipIsp pulumi.StringOutput `pulumi:"vipIsp"`
	// VPC ID of the CLB.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Available zone id, only applicable to open CLB.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClbName == nil {
		return nil, errors.New("invalid value for required argument 'ClbName'")
	}
	if args.NetworkType == nil {
		return nil, errors.New("invalid value for required argument 'NetworkType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Clb/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Clb/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
	AddressIpVersion *string `pulumi:"addressIpVersion"`
	// The IPv6 address of the load balancing instance.
	AddressIpv6 *string `pulumi:"addressIpv6"`
	// Bandwidth package id. If set, the `internetChargeType` must be `BANDWIDTH_PACKAGE`.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ClbName *string `pulumi:"clbName"`
	// The virtual service address table of the CLB.
	ClbVips []string `pulumi:"clbVips"`
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Whether to enable delete protection.
	DeleteProtect *bool `pulumi:"deleteProtect"`
	// Domain name of the CLB instance.
	Domain *string `pulumi:"domain"`
	// If create dynamic vip CLB instance, `true` or `false`.
	DynamicVip *bool `pulumi:"dynamicVip"`
	// Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
	InternetBandwidthMaxOut *int `pulumi:"internetBandwidthMaxOut"`
	// Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
	Ipv6Mode *string `pulumi:"ipv6Mode"`
	// Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
	LoadBalancerPassToTarget *bool `pulumi:"loadBalancerPassToTarget"`
	// The id of log set.
	LogSetId *string `pulumi:"logSetId"`
	// The id of log topic.
	LogTopicId *string `pulumi:"logTopicId"`
	// Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
	MasterZoneId *string `pulumi:"masterZoneId"`
	// Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
	NetworkType *string `pulumi:"networkType"`
	// ID of the project within the CLB instance, `0` - Default Project.
	ProjectId *int `pulumi:"projectId"`
	// Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
	SecurityGroups []string `pulumi:"securityGroups"`
	// This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
	SlaType *string `pulumi:"slaType"`
	// Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
	SlaveZoneId *string `pulumi:"slaveZoneId"`
	// Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
	SnatIps []InstanceSnatIp `pulumi:"snatIps"`
	// Indicates whether Binding IPs of other VPCs feature switch.
	SnatPro *bool `pulumi:"snatPro"`
	// In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
	SubnetId *string `pulumi:"subnetId"`
	// The available tags within this CLB.
	Tags map[string]interface{} `pulumi:"tags"`
	// Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoRegion *string `pulumi:"targetRegionInfoRegion"`
	// Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoVpcId *string `pulumi:"targetRegionInfoVpcId"`
	// Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
	Vip *string `pulumi:"vip"`
	// Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
	VipIsp *string `pulumi:"vipIsp"`
	// VPC ID of the CLB.
	VpcId *string `pulumi:"vpcId"`
	// Available zone id, only applicable to open CLB.
	ZoneId *string `pulumi:"zoneId"`
}

type InstanceState struct {
	// It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
	AddressIpVersion pulumi.StringPtrInput
	// The IPv6 address of the load balancing instance.
	AddressIpv6 pulumi.StringPtrInput
	// Bandwidth package id. If set, the `internetChargeType` must be `BANDWIDTH_PACKAGE`.
	BandwidthPackageId pulumi.StringPtrInput
	// Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ClbName pulumi.StringPtrInput
	// The virtual service address table of the CLB.
	ClbVips pulumi.StringArrayInput
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Whether to enable delete protection.
	DeleteProtect pulumi.BoolPtrInput
	// Domain name of the CLB instance.
	Domain pulumi.StringPtrInput
	// If create dynamic vip CLB instance, `true` or `false`.
	DynamicVip pulumi.BoolPtrInput
	// Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
	InternetBandwidthMaxOut pulumi.IntPtrInput
	// Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
	InternetChargeType pulumi.StringPtrInput
	// This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
	Ipv6Mode pulumi.StringPtrInput
	// Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
	LoadBalancerPassToTarget pulumi.BoolPtrInput
	// The id of log set.
	LogSetId pulumi.StringPtrInput
	// The id of log topic.
	LogTopicId pulumi.StringPtrInput
	// Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
	MasterZoneId pulumi.StringPtrInput
	// Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
	NetworkType pulumi.StringPtrInput
	// ID of the project within the CLB instance, `0` - Default Project.
	ProjectId pulumi.IntPtrInput
	// Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
	SecurityGroups pulumi.StringArrayInput
	// This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
	SlaType pulumi.StringPtrInput
	// Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
	SlaveZoneId pulumi.StringPtrInput
	// Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
	SnatIps InstanceSnatIpArrayInput
	// Indicates whether Binding IPs of other VPCs feature switch.
	SnatPro pulumi.BoolPtrInput
	// In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
	SubnetId pulumi.StringPtrInput
	// The available tags within this CLB.
	Tags pulumi.MapInput
	// Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoRegion pulumi.StringPtrInput
	// Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoVpcId pulumi.StringPtrInput
	// Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
	Vip pulumi.StringPtrInput
	// Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
	VipIsp pulumi.StringPtrInput
	// VPC ID of the CLB.
	VpcId pulumi.StringPtrInput
	// Available zone id, only applicable to open CLB.
	ZoneId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
	AddressIpVersion *string `pulumi:"addressIpVersion"`
	// Bandwidth package id. If set, the `internetChargeType` must be `BANDWIDTH_PACKAGE`.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ClbName string `pulumi:"clbName"`
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Whether to enable delete protection.
	DeleteProtect *bool `pulumi:"deleteProtect"`
	// If create dynamic vip CLB instance, `true` or `false`.
	DynamicVip *bool `pulumi:"dynamicVip"`
	// Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
	InternetBandwidthMaxOut *int `pulumi:"internetBandwidthMaxOut"`
	// Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
	InternetChargeType *string `pulumi:"internetChargeType"`
	// Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
	LoadBalancerPassToTarget *bool `pulumi:"loadBalancerPassToTarget"`
	// The id of log set.
	LogSetId *string `pulumi:"logSetId"`
	// The id of log topic.
	LogTopicId *string `pulumi:"logTopicId"`
	// Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
	MasterZoneId *string `pulumi:"masterZoneId"`
	// Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
	NetworkType string `pulumi:"networkType"`
	// ID of the project within the CLB instance, `0` - Default Project.
	ProjectId *int `pulumi:"projectId"`
	// Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
	SecurityGroups []string `pulumi:"securityGroups"`
	// This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
	SlaType *string `pulumi:"slaType"`
	// Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
	SlaveZoneId *string `pulumi:"slaveZoneId"`
	// Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
	SnatIps []InstanceSnatIp `pulumi:"snatIps"`
	// Indicates whether Binding IPs of other VPCs feature switch.
	SnatPro *bool `pulumi:"snatPro"`
	// In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
	SubnetId *string `pulumi:"subnetId"`
	// The available tags within this CLB.
	Tags map[string]interface{} `pulumi:"tags"`
	// Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoRegion *string `pulumi:"targetRegionInfoRegion"`
	// Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoVpcId *string `pulumi:"targetRegionInfoVpcId"`
	// Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
	Vip *string `pulumi:"vip"`
	// Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
	VipIsp *string `pulumi:"vipIsp"`
	// VPC ID of the CLB.
	VpcId *string `pulumi:"vpcId"`
	// Available zone id, only applicable to open CLB.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
	AddressIpVersion pulumi.StringPtrInput
	// Bandwidth package id. If set, the `internetChargeType` must be `BANDWIDTH_PACKAGE`.
	BandwidthPackageId pulumi.StringPtrInput
	// Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
	ClbName pulumi.StringInput
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Whether to enable delete protection.
	DeleteProtect pulumi.BoolPtrInput
	// If create dynamic vip CLB instance, `true` or `false`.
	DynamicVip pulumi.BoolPtrInput
	// Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
	InternetBandwidthMaxOut pulumi.IntPtrInput
	// Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
	InternetChargeType pulumi.StringPtrInput
	// Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
	LoadBalancerPassToTarget pulumi.BoolPtrInput
	// The id of log set.
	LogSetId pulumi.StringPtrInput
	// The id of log topic.
	LogTopicId pulumi.StringPtrInput
	// Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
	MasterZoneId pulumi.StringPtrInput
	// Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
	NetworkType pulumi.StringInput
	// ID of the project within the CLB instance, `0` - Default Project.
	ProjectId pulumi.IntPtrInput
	// Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
	SecurityGroups pulumi.StringArrayInput
	// This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
	SlaType pulumi.StringPtrInput
	// Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
	SlaveZoneId pulumi.StringPtrInput
	// Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
	SnatIps InstanceSnatIpArrayInput
	// Indicates whether Binding IPs of other VPCs feature switch.
	SnatPro pulumi.BoolPtrInput
	// In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
	SubnetId pulumi.StringPtrInput
	// The available tags within this CLB.
	Tags pulumi.MapInput
	// Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoRegion pulumi.StringPtrInput
	// Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
	TargetRegionInfoVpcId pulumi.StringPtrInput
	// Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
	Vip pulumi.StringPtrInput
	// Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
	VipIsp pulumi.StringPtrInput
	// VPC ID of the CLB.
	VpcId pulumi.StringPtrInput
	// Available zone id, only applicable to open CLB.
	ZoneId pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// It's only applicable to public network CLB instances. IP version. Values: `IPV4`, `IPV6` and `IPv6FullChain` (case-insensitive). Default: `IPV4`. Note: IPV6 indicates IPv6 NAT64, while IPv6FullChain indicates IPv6.
func (o InstanceOutput) AddressIpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AddressIpVersion }).(pulumi.StringOutput)
}

// The IPv6 address of the load balancing instance.
func (o InstanceOutput) AddressIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AddressIpv6 }).(pulumi.StringOutput)
}

// Bandwidth package id. If set, the `internetChargeType` must be `BANDWIDTH_PACKAGE`.
func (o InstanceOutput) BandwidthPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.BandwidthPackageId }).(pulumi.StringPtrOutput)
}

// Name of the CLB. The name can only contain Chinese characters, English letters, numbers, underscore and hyphen '-'.
func (o InstanceOutput) ClbName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ClbName }).(pulumi.StringOutput)
}

// The virtual service address table of the CLB.
func (o InstanceOutput) ClbVips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.ClbVips }).(pulumi.StringArrayOutput)
}

// Cluster ID.
func (o InstanceOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// Whether to enable delete protection.
func (o InstanceOutput) DeleteProtect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.DeleteProtect }).(pulumi.BoolPtrOutput)
}

// Domain name of the CLB instance.
func (o InstanceOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// If create dynamic vip CLB instance, `true` or `false`.
func (o InstanceOutput) DynamicVip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.DynamicVip }).(pulumi.BoolPtrOutput)
}

// Max bandwidth out, only applicable to open CLB. Valid value ranges is [1, 2048]. Unit is MB.
func (o InstanceOutput) InternetBandwidthMaxOut() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.InternetBandwidthMaxOut }).(pulumi.IntOutput)
}

// Internet charge type, only applicable to open CLB. Valid values are `TRAFFIC_POSTPAID_BY_HOUR`, `BANDWIDTH_POSTPAID_BY_HOUR` and `BANDWIDTH_PACKAGE`.
func (o InstanceOutput) InternetChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InternetChargeType }).(pulumi.StringOutput)
}

// This field is meaningful when the IP address version is ipv6, `IPv6Nat64` | `IPv6FullChain`.
func (o InstanceOutput) Ipv6Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Ipv6Mode }).(pulumi.StringOutput)
}

// Whether the target allow flow come from clb. If value is true, only check security group of clb, or check both clb and backend instance security group.
func (o InstanceOutput) LoadBalancerPassToTarget() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.LoadBalancerPassToTarget }).(pulumi.BoolPtrOutput)
}

// The id of log set.
func (o InstanceOutput) LogSetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.LogSetId }).(pulumi.StringPtrOutput)
}

// The id of log topic.
func (o InstanceOutput) LogTopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.LogTopicId }).(pulumi.StringPtrOutput)
}

// Setting master zone id of cross available zone disaster recovery, only applicable to open CLB.
func (o InstanceOutput) MasterZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.MasterZoneId }).(pulumi.StringOutput)
}

// Type of CLB instance. Valid values: `OPEN` and `INTERNAL`.
func (o InstanceOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// ID of the project within the CLB instance, `0` - Default Project.
func (o InstanceOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Security groups of the CLB instance. Supports both `OPEN` and `INTERNAL` CLBs.
func (o InstanceOutput) SecurityGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.SecurityGroups }).(pulumi.StringArrayOutput)
}

// This parameter is required to create LCU-supported instances. Values:`SLA`: Super Large 4. When you have activated Super Large models, `SLA` refers to Super Large 4; `clb.c2.medium`: Standard; `clb.c3.small`: Advanced 1; `clb.c3.medium`: Advanced 1; `clb.c4.small`: Super Large 1; `clb.c4.medium`: Super Large 2; `clb.c4.large`: Super Large 3; `clb.c4.xlarge`: Super Large 4. For more details, see [Instance Specifications](https://intl.cloud.tencent.com/document/product/214/84689?from_cn_redirect=1).
func (o InstanceOutput) SlaType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SlaType }).(pulumi.StringOutput)
}

// Setting slave zone id of cross available zone disaster recovery, only applicable to open CLB. this zone will undertake traffic when the master is down.
func (o InstanceOutput) SlaveZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SlaveZoneId }).(pulumi.StringOutput)
}

// Snat Ip List, required with `snat_pro=true`. NOTE: This argument cannot be read and modified here because dynamic ip is untraceable, please import resource `Clb.SnatIp` to handle fixed ips.
func (o InstanceOutput) SnatIps() InstanceSnatIpArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceSnatIpArrayOutput { return v.SnatIps }).(InstanceSnatIpArrayOutput)
}

// Indicates whether Binding IPs of other VPCs feature switch.
func (o InstanceOutput) SnatPro() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.SnatPro }).(pulumi.BoolPtrOutput)
}

// In the case of purchasing a `INTERNAL` clb instance, the subnet id must be specified. The VIP of the `INTERNAL` clb instance will be generated from this subnet.
func (o InstanceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The available tags within this CLB.
func (o InstanceOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Instance) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Region information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
func (o InstanceOutput) TargetRegionInfoRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.TargetRegionInfoRegion }).(pulumi.StringOutput)
}

// Vpc information of backend services are attached the CLB instance. Only supports `OPEN` CLBs.
func (o InstanceOutput) TargetRegionInfoVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.TargetRegionInfoVpcId }).(pulumi.StringOutput)
}

// Specifies the VIP for the application of a CLB instance. This parameter is optional. If you do not specify this parameter, the system automatically assigns a value for the parameter. IPv4 and IPv6 CLB instances support this parameter, but IPv6 NAT64 CLB instances do not.
func (o InstanceOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Vip }).(pulumi.StringOutput)
}

// Network operator, only applicable to open CLB. Valid values are `CMCC`(China Mobile), `CTCC`(Telecom), `CUCC`(China Unicom) and `BGP`. If this ISP is specified, network billing method can only use the bandwidth package billing (BANDWIDTH_PACKAGE).
func (o InstanceOutput) VipIsp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VipIsp }).(pulumi.StringOutput)
}

// VPC ID of the CLB.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Available zone id, only applicable to open CLB.
func (o InstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
