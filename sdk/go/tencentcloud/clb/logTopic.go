// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a CLB instance topic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Clb.NewLogTopic(ctx, "topic", &Clb.LogTopicArgs{
//				LogSetId:  pulumi.Any(tencentcloud_clb_log_set.Set.Id),
//				TopicName: pulumi.String("clb-topic"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CLB log topic can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Clb/logTopic:LogTopic topic lb-7a0t6zqb
//
// ```
type LogTopic struct {
	pulumi.CustomResourceState

	// Log topic creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Log topic of CLB instance.
	LogSetId pulumi.StringOutput `pulumi:"logSetId"`
	// The status of log topic.
	Status pulumi.BoolOutput `pulumi:"status"`
	// Log topic of CLB instance.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewLogTopic registers a new resource with the given unique name, arguments, and options.
func NewLogTopic(ctx *pulumi.Context,
	name string, args *LogTopicArgs, opts ...pulumi.ResourceOption) (*LogTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LogSetId == nil {
		return nil, errors.New("invalid value for required argument 'LogSetId'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LogTopic
	err := ctx.RegisterResource("tencentcloud:Clb/logTopic:LogTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogTopic gets an existing LogTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogTopicState, opts ...pulumi.ResourceOption) (*LogTopic, error) {
	var resource LogTopic
	err := ctx.ReadResource("tencentcloud:Clb/logTopic:LogTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogTopic resources.
type logTopicState struct {
	// Log topic creation time.
	CreateTime *string `pulumi:"createTime"`
	// Log topic of CLB instance.
	LogSetId *string `pulumi:"logSetId"`
	// The status of log topic.
	Status *bool `pulumi:"status"`
	// Log topic of CLB instance.
	TopicName *string `pulumi:"topicName"`
}

type LogTopicState struct {
	// Log topic creation time.
	CreateTime pulumi.StringPtrInput
	// Log topic of CLB instance.
	LogSetId pulumi.StringPtrInput
	// The status of log topic.
	Status pulumi.BoolPtrInput
	// Log topic of CLB instance.
	TopicName pulumi.StringPtrInput
}

func (LogTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*logTopicState)(nil)).Elem()
}

type logTopicArgs struct {
	// Log topic of CLB instance.
	LogSetId string `pulumi:"logSetId"`
	// Log topic of CLB instance.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a LogTopic resource.
type LogTopicArgs struct {
	// Log topic of CLB instance.
	LogSetId pulumi.StringInput
	// Log topic of CLB instance.
	TopicName pulumi.StringInput
}

func (LogTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logTopicArgs)(nil)).Elem()
}

type LogTopicInput interface {
	pulumi.Input

	ToLogTopicOutput() LogTopicOutput
	ToLogTopicOutputWithContext(ctx context.Context) LogTopicOutput
}

func (*LogTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTopic)(nil)).Elem()
}

func (i *LogTopic) ToLogTopicOutput() LogTopicOutput {
	return i.ToLogTopicOutputWithContext(context.Background())
}

func (i *LogTopic) ToLogTopicOutputWithContext(ctx context.Context) LogTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTopicOutput)
}

// LogTopicArrayInput is an input type that accepts LogTopicArray and LogTopicArrayOutput values.
// You can construct a concrete instance of `LogTopicArrayInput` via:
//
//	LogTopicArray{ LogTopicArgs{...} }
type LogTopicArrayInput interface {
	pulumi.Input

	ToLogTopicArrayOutput() LogTopicArrayOutput
	ToLogTopicArrayOutputWithContext(context.Context) LogTopicArrayOutput
}

type LogTopicArray []LogTopicInput

func (LogTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTopic)(nil)).Elem()
}

func (i LogTopicArray) ToLogTopicArrayOutput() LogTopicArrayOutput {
	return i.ToLogTopicArrayOutputWithContext(context.Background())
}

func (i LogTopicArray) ToLogTopicArrayOutputWithContext(ctx context.Context) LogTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTopicArrayOutput)
}

// LogTopicMapInput is an input type that accepts LogTopicMap and LogTopicMapOutput values.
// You can construct a concrete instance of `LogTopicMapInput` via:
//
//	LogTopicMap{ "key": LogTopicArgs{...} }
type LogTopicMapInput interface {
	pulumi.Input

	ToLogTopicMapOutput() LogTopicMapOutput
	ToLogTopicMapOutputWithContext(context.Context) LogTopicMapOutput
}

type LogTopicMap map[string]LogTopicInput

func (LogTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTopic)(nil)).Elem()
}

func (i LogTopicMap) ToLogTopicMapOutput() LogTopicMapOutput {
	return i.ToLogTopicMapOutputWithContext(context.Background())
}

func (i LogTopicMap) ToLogTopicMapOutputWithContext(ctx context.Context) LogTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogTopicMapOutput)
}

type LogTopicOutput struct{ *pulumi.OutputState }

func (LogTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogTopic)(nil)).Elem()
}

func (o LogTopicOutput) ToLogTopicOutput() LogTopicOutput {
	return o
}

func (o LogTopicOutput) ToLogTopicOutputWithContext(ctx context.Context) LogTopicOutput {
	return o
}

// Log topic creation time.
func (o LogTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTopic) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Log topic of CLB instance.
func (o LogTopicOutput) LogSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTopic) pulumi.StringOutput { return v.LogSetId }).(pulumi.StringOutput)
}

// The status of log topic.
func (o LogTopicOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogTopic) pulumi.BoolOutput { return v.Status }).(pulumi.BoolOutput)
}

// Log topic of CLB instance.
func (o LogTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogTopic) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type LogTopicArrayOutput struct{ *pulumi.OutputState }

func (LogTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogTopic)(nil)).Elem()
}

func (o LogTopicArrayOutput) ToLogTopicArrayOutput() LogTopicArrayOutput {
	return o
}

func (o LogTopicArrayOutput) ToLogTopicArrayOutputWithContext(ctx context.Context) LogTopicArrayOutput {
	return o
}

func (o LogTopicArrayOutput) Index(i pulumi.IntInput) LogTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogTopic {
		return vs[0].([]*LogTopic)[vs[1].(int)]
	}).(LogTopicOutput)
}

type LogTopicMapOutput struct{ *pulumi.OutputState }

func (LogTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogTopic)(nil)).Elem()
}

func (o LogTopicMapOutput) ToLogTopicMapOutput() LogTopicMapOutput {
	return o
}

func (o LogTopicMapOutput) ToLogTopicMapOutputWithContext(ctx context.Context) LogTopicMapOutput {
	return o
}

func (o LogTopicMapOutput) MapIndex(k pulumi.StringInput) LogTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogTopic {
		return vs[0].(map[string]*LogTopic)[vs[1].(string)]
	}).(LogTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogTopicInput)(nil)).Elem(), &LogTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTopicArrayInput)(nil)).Elem(), LogTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogTopicMapInput)(nil)).Elem(), LogTopicMap{})
	pulumi.RegisterOutputType(LogTopicOutput{})
	pulumi.RegisterOutputType(LogTopicArrayOutput{})
	pulumi.RegisterOutputType(LogTopicMapOutput{})
}
