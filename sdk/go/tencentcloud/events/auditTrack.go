// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create events audit track
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Events"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Events.NewAuditTrack(ctx, "example", &Events.AuditTrackArgs{
//				Filters: &events.AuditTrackFiltersArgs{
//					ResourceFields: events.AuditTrackFiltersResourceFieldArray{
//						&events.AuditTrackFiltersResourceFieldArgs{
//							ActionType: pulumi.String("*"),
//							EventNames: pulumi.StringArray{
//								pulumi.String("AddSubAccount"),
//								pulumi.String("AddSubAccountCheckingMFA"),
//							},
//							ResourceType: pulumi.String("cam"),
//						},
//						&events.AuditTrackFiltersResourceFieldArgs{
//							ActionType: pulumi.String("*"),
//							EventNames: pulumi.StringArray{
//								pulumi.String("*"),
//							},
//							ResourceType: pulumi.String("cvm"),
//						},
//						&events.AuditTrackFiltersResourceFieldArgs{
//							ActionType: pulumi.String("*"),
//							EventNames: pulumi.StringArray{
//								pulumi.String("*"),
//							},
//							ResourceType: pulumi.String("tke"),
//						},
//					},
//				},
//				Status: pulumi.Int(1),
//				Storage: &events.AuditTrackStorageArgs{
//					StorageName:   pulumi.String("393953ac-5c1b-457d-911d-376271b1b4f2"),
//					StoragePrefix: pulumi.String("cloudaudit"),
//					StorageRegion: pulumi.String("ap-guangzhou"),
//					StorageType:   pulumi.String("cls"),
//				},
//				TrackForAllMembers: pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// events audit track can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Events/auditTrack:AuditTrack example 24283
// ```
type AuditTrack struct {
	pulumi.CustomResourceState

	// Data filtering criteria.
	Filters AuditTrackFiltersOutput `pulumi:"filters"`
	// Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
	Name pulumi.StringOutput `pulumi:"name"`
	// Tracking set status (0: Not enabled; 1: Enabled).
	Status pulumi.IntOutput `pulumi:"status"`
	// Storage type of shipped data. Valid values: `cos`, `cls`.
	Storage AuditTrackStorageOutput `pulumi:"storage"`
	// Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
	TrackForAllMembers pulumi.IntPtrOutput `pulumi:"trackForAllMembers"`
	// Whether the log list has come to an end. `true`: Yes. Pagination is not required.
	TrackId pulumi.IntOutput `pulumi:"trackId"`
}

// NewAuditTrack registers a new resource with the given unique name, arguments, and options.
func NewAuditTrack(ctx *pulumi.Context,
	name string, args *AuditTrackArgs, opts ...pulumi.ResourceOption) (*AuditTrack, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Storage == nil {
		return nil, errors.New("invalid value for required argument 'Storage'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AuditTrack
	err := ctx.RegisterResource("tencentcloud:Events/auditTrack:AuditTrack", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuditTrack gets an existing AuditTrack resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuditTrack(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuditTrackState, opts ...pulumi.ResourceOption) (*AuditTrack, error) {
	var resource AuditTrack
	err := ctx.ReadResource("tencentcloud:Events/auditTrack:AuditTrack", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AuditTrack resources.
type auditTrackState struct {
	// Data filtering criteria.
	Filters *AuditTrackFilters `pulumi:"filters"`
	// Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
	Name *string `pulumi:"name"`
	// Tracking set status (0: Not enabled; 1: Enabled).
	Status *int `pulumi:"status"`
	// Storage type of shipped data. Valid values: `cos`, `cls`.
	Storage *AuditTrackStorage `pulumi:"storage"`
	// Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
	TrackForAllMembers *int `pulumi:"trackForAllMembers"`
	// Whether the log list has come to an end. `true`: Yes. Pagination is not required.
	TrackId *int `pulumi:"trackId"`
}

type AuditTrackState struct {
	// Data filtering criteria.
	Filters AuditTrackFiltersPtrInput
	// Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
	Name pulumi.StringPtrInput
	// Tracking set status (0: Not enabled; 1: Enabled).
	Status pulumi.IntPtrInput
	// Storage type of shipped data. Valid values: `cos`, `cls`.
	Storage AuditTrackStoragePtrInput
	// Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
	TrackForAllMembers pulumi.IntPtrInput
	// Whether the log list has come to an end. `true`: Yes. Pagination is not required.
	TrackId pulumi.IntPtrInput
}

func (AuditTrackState) ElementType() reflect.Type {
	return reflect.TypeOf((*auditTrackState)(nil)).Elem()
}

type auditTrackArgs struct {
	// Data filtering criteria.
	Filters AuditTrackFilters `pulumi:"filters"`
	// Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
	Name *string `pulumi:"name"`
	// Tracking set status (0: Not enabled; 1: Enabled).
	Status int `pulumi:"status"`
	// Storage type of shipped data. Valid values: `cos`, `cls`.
	Storage AuditTrackStorage `pulumi:"storage"`
	// Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
	TrackForAllMembers *int `pulumi:"trackForAllMembers"`
}

// The set of arguments for constructing a AuditTrack resource.
type AuditTrackArgs struct {
	// Data filtering criteria.
	Filters AuditTrackFiltersInput
	// Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
	Name pulumi.StringPtrInput
	// Tracking set status (0: Not enabled; 1: Enabled).
	Status pulumi.IntInput
	// Storage type of shipped data. Valid values: `cos`, `cls`.
	Storage AuditTrackStorageInput
	// Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
	TrackForAllMembers pulumi.IntPtrInput
}

func (AuditTrackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*auditTrackArgs)(nil)).Elem()
}

type AuditTrackInput interface {
	pulumi.Input

	ToAuditTrackOutput() AuditTrackOutput
	ToAuditTrackOutputWithContext(ctx context.Context) AuditTrackOutput
}

func (*AuditTrack) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditTrack)(nil)).Elem()
}

func (i *AuditTrack) ToAuditTrackOutput() AuditTrackOutput {
	return i.ToAuditTrackOutputWithContext(context.Background())
}

func (i *AuditTrack) ToAuditTrackOutputWithContext(ctx context.Context) AuditTrackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackOutput)
}

// AuditTrackArrayInput is an input type that accepts AuditTrackArray and AuditTrackArrayOutput values.
// You can construct a concrete instance of `AuditTrackArrayInput` via:
//
//	AuditTrackArray{ AuditTrackArgs{...} }
type AuditTrackArrayInput interface {
	pulumi.Input

	ToAuditTrackArrayOutput() AuditTrackArrayOutput
	ToAuditTrackArrayOutputWithContext(context.Context) AuditTrackArrayOutput
}

type AuditTrackArray []AuditTrackInput

func (AuditTrackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditTrack)(nil)).Elem()
}

func (i AuditTrackArray) ToAuditTrackArrayOutput() AuditTrackArrayOutput {
	return i.ToAuditTrackArrayOutputWithContext(context.Background())
}

func (i AuditTrackArray) ToAuditTrackArrayOutputWithContext(ctx context.Context) AuditTrackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackArrayOutput)
}

// AuditTrackMapInput is an input type that accepts AuditTrackMap and AuditTrackMapOutput values.
// You can construct a concrete instance of `AuditTrackMapInput` via:
//
//	AuditTrackMap{ "key": AuditTrackArgs{...} }
type AuditTrackMapInput interface {
	pulumi.Input

	ToAuditTrackMapOutput() AuditTrackMapOutput
	ToAuditTrackMapOutputWithContext(context.Context) AuditTrackMapOutput
}

type AuditTrackMap map[string]AuditTrackInput

func (AuditTrackMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditTrack)(nil)).Elem()
}

func (i AuditTrackMap) ToAuditTrackMapOutput() AuditTrackMapOutput {
	return i.ToAuditTrackMapOutputWithContext(context.Background())
}

func (i AuditTrackMap) ToAuditTrackMapOutputWithContext(ctx context.Context) AuditTrackMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackMapOutput)
}

type AuditTrackOutput struct{ *pulumi.OutputState }

func (AuditTrackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditTrack)(nil)).Elem()
}

func (o AuditTrackOutput) ToAuditTrackOutput() AuditTrackOutput {
	return o
}

func (o AuditTrackOutput) ToAuditTrackOutputWithContext(ctx context.Context) AuditTrackOutput {
	return o
}

// Data filtering criteria.
func (o AuditTrackOutput) Filters() AuditTrackFiltersOutput {
	return o.ApplyT(func(v *AuditTrack) AuditTrackFiltersOutput { return v.Filters }).(AuditTrackFiltersOutput)
}

// Tracking set name, which can only contain 3-48 letters, digits, hyphens, and underscores.
func (o AuditTrackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AuditTrack) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Tracking set status (0: Not enabled; 1: Enabled).
func (o AuditTrackOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *AuditTrack) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Storage type of shipped data. Valid values: `cos`, `cls`.
func (o AuditTrackOutput) Storage() AuditTrackStorageOutput {
	return o.ApplyT(func(v *AuditTrack) AuditTrackStorageOutput { return v.Storage }).(AuditTrackStorageOutput)
}

// Whether to enable the feature of shipping organization members operation logs to the organization admin account or the trusted service admin account (0: Not enabled; 1: Enabled. This feature can only be enabled by the organization admin account or the trusted service admin account).
func (o AuditTrackOutput) TrackForAllMembers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AuditTrack) pulumi.IntPtrOutput { return v.TrackForAllMembers }).(pulumi.IntPtrOutput)
}

// Whether the log list has come to an end. `true`: Yes. Pagination is not required.
func (o AuditTrackOutput) TrackId() pulumi.IntOutput {
	return o.ApplyT(func(v *AuditTrack) pulumi.IntOutput { return v.TrackId }).(pulumi.IntOutput)
}

type AuditTrackArrayOutput struct{ *pulumi.OutputState }

func (AuditTrackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AuditTrack)(nil)).Elem()
}

func (o AuditTrackArrayOutput) ToAuditTrackArrayOutput() AuditTrackArrayOutput {
	return o
}

func (o AuditTrackArrayOutput) ToAuditTrackArrayOutputWithContext(ctx context.Context) AuditTrackArrayOutput {
	return o
}

func (o AuditTrackArrayOutput) Index(i pulumi.IntInput) AuditTrackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AuditTrack {
		return vs[0].([]*AuditTrack)[vs[1].(int)]
	}).(AuditTrackOutput)
}

type AuditTrackMapOutput struct{ *pulumi.OutputState }

func (AuditTrackMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AuditTrack)(nil)).Elem()
}

func (o AuditTrackMapOutput) ToAuditTrackMapOutput() AuditTrackMapOutput {
	return o
}

func (o AuditTrackMapOutput) ToAuditTrackMapOutputWithContext(ctx context.Context) AuditTrackMapOutput {
	return o
}

func (o AuditTrackMapOutput) MapIndex(k pulumi.StringInput) AuditTrackOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AuditTrack {
		return vs[0].(map[string]*AuditTrack)[vs[1].(string)]
	}).(AuditTrackOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackInput)(nil)).Elem(), &AuditTrack{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackArrayInput)(nil)).Elem(), AuditTrackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackMapInput)(nil)).Elem(), AuditTrackMap{})
	pulumi.RegisterOutputType(AuditTrackOutput{})
	pulumi.RegisterOutputType(AuditTrackArrayOutput{})
	pulumi.RegisterOutputType(AuditTrackMapOutput{})
}
