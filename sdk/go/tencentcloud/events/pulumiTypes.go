// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package events

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

var _ = internal.GetEnvOrDefault

type AuditTrackFilters struct {
	// Resource filtering conditions.
	ResourceFields []AuditTrackFiltersResourceField `pulumi:"resourceFields"`
}

// AuditTrackFiltersInput is an input type that accepts AuditTrackFiltersArgs and AuditTrackFiltersOutput values.
// You can construct a concrete instance of `AuditTrackFiltersInput` via:
//
//	AuditTrackFiltersArgs{...}
type AuditTrackFiltersInput interface {
	pulumi.Input

	ToAuditTrackFiltersOutput() AuditTrackFiltersOutput
	ToAuditTrackFiltersOutputWithContext(context.Context) AuditTrackFiltersOutput
}

type AuditTrackFiltersArgs struct {
	// Resource filtering conditions.
	ResourceFields AuditTrackFiltersResourceFieldArrayInput `pulumi:"resourceFields"`
}

func (AuditTrackFiltersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditTrackFilters)(nil)).Elem()
}

func (i AuditTrackFiltersArgs) ToAuditTrackFiltersOutput() AuditTrackFiltersOutput {
	return i.ToAuditTrackFiltersOutputWithContext(context.Background())
}

func (i AuditTrackFiltersArgs) ToAuditTrackFiltersOutputWithContext(ctx context.Context) AuditTrackFiltersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackFiltersOutput)
}

func (i AuditTrackFiltersArgs) ToAuditTrackFiltersPtrOutput() AuditTrackFiltersPtrOutput {
	return i.ToAuditTrackFiltersPtrOutputWithContext(context.Background())
}

func (i AuditTrackFiltersArgs) ToAuditTrackFiltersPtrOutputWithContext(ctx context.Context) AuditTrackFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackFiltersOutput).ToAuditTrackFiltersPtrOutputWithContext(ctx)
}

// AuditTrackFiltersPtrInput is an input type that accepts AuditTrackFiltersArgs, AuditTrackFiltersPtr and AuditTrackFiltersPtrOutput values.
// You can construct a concrete instance of `AuditTrackFiltersPtrInput` via:
//
//	        AuditTrackFiltersArgs{...}
//
//	or:
//
//	        nil
type AuditTrackFiltersPtrInput interface {
	pulumi.Input

	ToAuditTrackFiltersPtrOutput() AuditTrackFiltersPtrOutput
	ToAuditTrackFiltersPtrOutputWithContext(context.Context) AuditTrackFiltersPtrOutput
}

type auditTrackFiltersPtrType AuditTrackFiltersArgs

func AuditTrackFiltersPtr(v *AuditTrackFiltersArgs) AuditTrackFiltersPtrInput {
	return (*auditTrackFiltersPtrType)(v)
}

func (*auditTrackFiltersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditTrackFilters)(nil)).Elem()
}

func (i *auditTrackFiltersPtrType) ToAuditTrackFiltersPtrOutput() AuditTrackFiltersPtrOutput {
	return i.ToAuditTrackFiltersPtrOutputWithContext(context.Background())
}

func (i *auditTrackFiltersPtrType) ToAuditTrackFiltersPtrOutputWithContext(ctx context.Context) AuditTrackFiltersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackFiltersPtrOutput)
}

type AuditTrackFiltersOutput struct{ *pulumi.OutputState }

func (AuditTrackFiltersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditTrackFilters)(nil)).Elem()
}

func (o AuditTrackFiltersOutput) ToAuditTrackFiltersOutput() AuditTrackFiltersOutput {
	return o
}

func (o AuditTrackFiltersOutput) ToAuditTrackFiltersOutputWithContext(ctx context.Context) AuditTrackFiltersOutput {
	return o
}

func (o AuditTrackFiltersOutput) ToAuditTrackFiltersPtrOutput() AuditTrackFiltersPtrOutput {
	return o.ToAuditTrackFiltersPtrOutputWithContext(context.Background())
}

func (o AuditTrackFiltersOutput) ToAuditTrackFiltersPtrOutputWithContext(ctx context.Context) AuditTrackFiltersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditTrackFilters) *AuditTrackFilters {
		return &v
	}).(AuditTrackFiltersPtrOutput)
}

// Resource filtering conditions.
func (o AuditTrackFiltersOutput) ResourceFields() AuditTrackFiltersResourceFieldArrayOutput {
	return o.ApplyT(func(v AuditTrackFilters) []AuditTrackFiltersResourceField { return v.ResourceFields }).(AuditTrackFiltersResourceFieldArrayOutput)
}

type AuditTrackFiltersPtrOutput struct{ *pulumi.OutputState }

func (AuditTrackFiltersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditTrackFilters)(nil)).Elem()
}

func (o AuditTrackFiltersPtrOutput) ToAuditTrackFiltersPtrOutput() AuditTrackFiltersPtrOutput {
	return o
}

func (o AuditTrackFiltersPtrOutput) ToAuditTrackFiltersPtrOutputWithContext(ctx context.Context) AuditTrackFiltersPtrOutput {
	return o
}

func (o AuditTrackFiltersPtrOutput) Elem() AuditTrackFiltersOutput {
	return o.ApplyT(func(v *AuditTrackFilters) AuditTrackFilters {
		if v != nil {
			return *v
		}
		var ret AuditTrackFilters
		return ret
	}).(AuditTrackFiltersOutput)
}

// Resource filtering conditions.
func (o AuditTrackFiltersPtrOutput) ResourceFields() AuditTrackFiltersResourceFieldArrayOutput {
	return o.ApplyT(func(v *AuditTrackFilters) []AuditTrackFiltersResourceField {
		if v == nil {
			return nil
		}
		return v.ResourceFields
	}).(AuditTrackFiltersResourceFieldArrayOutput)
}

type AuditTrackFiltersResourceField struct {
	// Tracking set event type (`Read`: Read; `Write`: Write; `*`: All).
	ActionType string `pulumi:"actionType"`
	// The list of API names of tracking set events. When `ResourceType` is `*`, the value of `EventNames` must be `*`. When `ResourceType` is a specified product, the value of `EventNames` can be `*`. When `ResourceType` is `cos` or `cls`, up to 10 APIs are supported.
	EventNames []string `pulumi:"eventNames"`
	// The product to which the tracking set event belongs. The value can be a single product such as `cos`, or `*` that indicates all products.
	ResourceType string `pulumi:"resourceType"`
}

// AuditTrackFiltersResourceFieldInput is an input type that accepts AuditTrackFiltersResourceFieldArgs and AuditTrackFiltersResourceFieldOutput values.
// You can construct a concrete instance of `AuditTrackFiltersResourceFieldInput` via:
//
//	AuditTrackFiltersResourceFieldArgs{...}
type AuditTrackFiltersResourceFieldInput interface {
	pulumi.Input

	ToAuditTrackFiltersResourceFieldOutput() AuditTrackFiltersResourceFieldOutput
	ToAuditTrackFiltersResourceFieldOutputWithContext(context.Context) AuditTrackFiltersResourceFieldOutput
}

type AuditTrackFiltersResourceFieldArgs struct {
	// Tracking set event type (`Read`: Read; `Write`: Write; `*`: All).
	ActionType pulumi.StringInput `pulumi:"actionType"`
	// The list of API names of tracking set events. When `ResourceType` is `*`, the value of `EventNames` must be `*`. When `ResourceType` is a specified product, the value of `EventNames` can be `*`. When `ResourceType` is `cos` or `cls`, up to 10 APIs are supported.
	EventNames pulumi.StringArrayInput `pulumi:"eventNames"`
	// The product to which the tracking set event belongs. The value can be a single product such as `cos`, or `*` that indicates all products.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (AuditTrackFiltersResourceFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditTrackFiltersResourceField)(nil)).Elem()
}

func (i AuditTrackFiltersResourceFieldArgs) ToAuditTrackFiltersResourceFieldOutput() AuditTrackFiltersResourceFieldOutput {
	return i.ToAuditTrackFiltersResourceFieldOutputWithContext(context.Background())
}

func (i AuditTrackFiltersResourceFieldArgs) ToAuditTrackFiltersResourceFieldOutputWithContext(ctx context.Context) AuditTrackFiltersResourceFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackFiltersResourceFieldOutput)
}

// AuditTrackFiltersResourceFieldArrayInput is an input type that accepts AuditTrackFiltersResourceFieldArray and AuditTrackFiltersResourceFieldArrayOutput values.
// You can construct a concrete instance of `AuditTrackFiltersResourceFieldArrayInput` via:
//
//	AuditTrackFiltersResourceFieldArray{ AuditTrackFiltersResourceFieldArgs{...} }
type AuditTrackFiltersResourceFieldArrayInput interface {
	pulumi.Input

	ToAuditTrackFiltersResourceFieldArrayOutput() AuditTrackFiltersResourceFieldArrayOutput
	ToAuditTrackFiltersResourceFieldArrayOutputWithContext(context.Context) AuditTrackFiltersResourceFieldArrayOutput
}

type AuditTrackFiltersResourceFieldArray []AuditTrackFiltersResourceFieldInput

func (AuditTrackFiltersResourceFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditTrackFiltersResourceField)(nil)).Elem()
}

func (i AuditTrackFiltersResourceFieldArray) ToAuditTrackFiltersResourceFieldArrayOutput() AuditTrackFiltersResourceFieldArrayOutput {
	return i.ToAuditTrackFiltersResourceFieldArrayOutputWithContext(context.Background())
}

func (i AuditTrackFiltersResourceFieldArray) ToAuditTrackFiltersResourceFieldArrayOutputWithContext(ctx context.Context) AuditTrackFiltersResourceFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackFiltersResourceFieldArrayOutput)
}

type AuditTrackFiltersResourceFieldOutput struct{ *pulumi.OutputState }

func (AuditTrackFiltersResourceFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditTrackFiltersResourceField)(nil)).Elem()
}

func (o AuditTrackFiltersResourceFieldOutput) ToAuditTrackFiltersResourceFieldOutput() AuditTrackFiltersResourceFieldOutput {
	return o
}

func (o AuditTrackFiltersResourceFieldOutput) ToAuditTrackFiltersResourceFieldOutputWithContext(ctx context.Context) AuditTrackFiltersResourceFieldOutput {
	return o
}

// Tracking set event type (`Read`: Read; `Write`: Write; `*`: All).
func (o AuditTrackFiltersResourceFieldOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditTrackFiltersResourceField) string { return v.ActionType }).(pulumi.StringOutput)
}

// The list of API names of tracking set events. When `ResourceType` is `*`, the value of `EventNames` must be `*`. When `ResourceType` is a specified product, the value of `EventNames` can be `*`. When `ResourceType` is `cos` or `cls`, up to 10 APIs are supported.
func (o AuditTrackFiltersResourceFieldOutput) EventNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AuditTrackFiltersResourceField) []string { return v.EventNames }).(pulumi.StringArrayOutput)
}

// The product to which the tracking set event belongs. The value can be a single product such as `cos`, or `*` that indicates all products.
func (o AuditTrackFiltersResourceFieldOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditTrackFiltersResourceField) string { return v.ResourceType }).(pulumi.StringOutput)
}

type AuditTrackFiltersResourceFieldArrayOutput struct{ *pulumi.OutputState }

func (AuditTrackFiltersResourceFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuditTrackFiltersResourceField)(nil)).Elem()
}

func (o AuditTrackFiltersResourceFieldArrayOutput) ToAuditTrackFiltersResourceFieldArrayOutput() AuditTrackFiltersResourceFieldArrayOutput {
	return o
}

func (o AuditTrackFiltersResourceFieldArrayOutput) ToAuditTrackFiltersResourceFieldArrayOutputWithContext(ctx context.Context) AuditTrackFiltersResourceFieldArrayOutput {
	return o
}

func (o AuditTrackFiltersResourceFieldArrayOutput) Index(i pulumi.IntInput) AuditTrackFiltersResourceFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuditTrackFiltersResourceField {
		return vs[0].([]AuditTrackFiltersResourceField)[vs[1].(int)]
	}).(AuditTrackFiltersResourceFieldOutput)
}

type AuditTrackStorage struct {
	// Designated to store user ID.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Designated to store user app ID.
	StorageAppId *string `pulumi:"storageAppId"`
	// Storage name. For COS, the storage name is the custom bucket name, which can contain up to 50 lowercase letters, digits, and hyphens. It cannot contain "-APPID" and cannot start or end with a hyphen. For CLS, the storage name is the log topic ID, which can contain 1-50 characters.
	StorageName string `pulumi:"storageName"`
	// Storage directory prefix. The COS log file prefix can only contain 3-40 letters and digits.
	StoragePrefix string `pulumi:"storagePrefix"`
	// StorageRegion *string `json:'StorageRegion,omitnil,omitempty' name: 'StorageRegion'`.
	StorageRegion string `pulumi:"storageRegion"`
	// Storage type (Valid values: cos, cls).
	StorageType string `pulumi:"storageType"`
}

// AuditTrackStorageInput is an input type that accepts AuditTrackStorageArgs and AuditTrackStorageOutput values.
// You can construct a concrete instance of `AuditTrackStorageInput` via:
//
//	AuditTrackStorageArgs{...}
type AuditTrackStorageInput interface {
	pulumi.Input

	ToAuditTrackStorageOutput() AuditTrackStorageOutput
	ToAuditTrackStorageOutputWithContext(context.Context) AuditTrackStorageOutput
}

type AuditTrackStorageArgs struct {
	// Designated to store user ID.
	StorageAccountId pulumi.StringPtrInput `pulumi:"storageAccountId"`
	// Designated to store user app ID.
	StorageAppId pulumi.StringPtrInput `pulumi:"storageAppId"`
	// Storage name. For COS, the storage name is the custom bucket name, which can contain up to 50 lowercase letters, digits, and hyphens. It cannot contain "-APPID" and cannot start or end with a hyphen. For CLS, the storage name is the log topic ID, which can contain 1-50 characters.
	StorageName pulumi.StringInput `pulumi:"storageName"`
	// Storage directory prefix. The COS log file prefix can only contain 3-40 letters and digits.
	StoragePrefix pulumi.StringInput `pulumi:"storagePrefix"`
	// StorageRegion *string `json:'StorageRegion,omitnil,omitempty' name: 'StorageRegion'`.
	StorageRegion pulumi.StringInput `pulumi:"storageRegion"`
	// Storage type (Valid values: cos, cls).
	StorageType pulumi.StringInput `pulumi:"storageType"`
}

func (AuditTrackStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditTrackStorage)(nil)).Elem()
}

func (i AuditTrackStorageArgs) ToAuditTrackStorageOutput() AuditTrackStorageOutput {
	return i.ToAuditTrackStorageOutputWithContext(context.Background())
}

func (i AuditTrackStorageArgs) ToAuditTrackStorageOutputWithContext(ctx context.Context) AuditTrackStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackStorageOutput)
}

func (i AuditTrackStorageArgs) ToAuditTrackStoragePtrOutput() AuditTrackStoragePtrOutput {
	return i.ToAuditTrackStoragePtrOutputWithContext(context.Background())
}

func (i AuditTrackStorageArgs) ToAuditTrackStoragePtrOutputWithContext(ctx context.Context) AuditTrackStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackStorageOutput).ToAuditTrackStoragePtrOutputWithContext(ctx)
}

// AuditTrackStoragePtrInput is an input type that accepts AuditTrackStorageArgs, AuditTrackStoragePtr and AuditTrackStoragePtrOutput values.
// You can construct a concrete instance of `AuditTrackStoragePtrInput` via:
//
//	        AuditTrackStorageArgs{...}
//
//	or:
//
//	        nil
type AuditTrackStoragePtrInput interface {
	pulumi.Input

	ToAuditTrackStoragePtrOutput() AuditTrackStoragePtrOutput
	ToAuditTrackStoragePtrOutputWithContext(context.Context) AuditTrackStoragePtrOutput
}

type auditTrackStoragePtrType AuditTrackStorageArgs

func AuditTrackStoragePtr(v *AuditTrackStorageArgs) AuditTrackStoragePtrInput {
	return (*auditTrackStoragePtrType)(v)
}

func (*auditTrackStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditTrackStorage)(nil)).Elem()
}

func (i *auditTrackStoragePtrType) ToAuditTrackStoragePtrOutput() AuditTrackStoragePtrOutput {
	return i.ToAuditTrackStoragePtrOutputWithContext(context.Background())
}

func (i *auditTrackStoragePtrType) ToAuditTrackStoragePtrOutputWithContext(ctx context.Context) AuditTrackStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuditTrackStoragePtrOutput)
}

type AuditTrackStorageOutput struct{ *pulumi.OutputState }

func (AuditTrackStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuditTrackStorage)(nil)).Elem()
}

func (o AuditTrackStorageOutput) ToAuditTrackStorageOutput() AuditTrackStorageOutput {
	return o
}

func (o AuditTrackStorageOutput) ToAuditTrackStorageOutputWithContext(ctx context.Context) AuditTrackStorageOutput {
	return o
}

func (o AuditTrackStorageOutput) ToAuditTrackStoragePtrOutput() AuditTrackStoragePtrOutput {
	return o.ToAuditTrackStoragePtrOutputWithContext(context.Background())
}

func (o AuditTrackStorageOutput) ToAuditTrackStoragePtrOutputWithContext(ctx context.Context) AuditTrackStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AuditTrackStorage) *AuditTrackStorage {
		return &v
	}).(AuditTrackStoragePtrOutput)
}

// Designated to store user ID.
func (o AuditTrackStorageOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditTrackStorage) *string { return v.StorageAccountId }).(pulumi.StringPtrOutput)
}

// Designated to store user app ID.
func (o AuditTrackStorageOutput) StorageAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AuditTrackStorage) *string { return v.StorageAppId }).(pulumi.StringPtrOutput)
}

// Storage name. For COS, the storage name is the custom bucket name, which can contain up to 50 lowercase letters, digits, and hyphens. It cannot contain "-APPID" and cannot start or end with a hyphen. For CLS, the storage name is the log topic ID, which can contain 1-50 characters.
func (o AuditTrackStorageOutput) StorageName() pulumi.StringOutput {
	return o.ApplyT(func(v AuditTrackStorage) string { return v.StorageName }).(pulumi.StringOutput)
}

// Storage directory prefix. The COS log file prefix can only contain 3-40 letters and digits.
func (o AuditTrackStorageOutput) StoragePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v AuditTrackStorage) string { return v.StoragePrefix }).(pulumi.StringOutput)
}

// StorageRegion *string `json:'StorageRegion,omitnil,omitempty' name: 'StorageRegion'`.
func (o AuditTrackStorageOutput) StorageRegion() pulumi.StringOutput {
	return o.ApplyT(func(v AuditTrackStorage) string { return v.StorageRegion }).(pulumi.StringOutput)
}

// Storage type (Valid values: cos, cls).
func (o AuditTrackStorageOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v AuditTrackStorage) string { return v.StorageType }).(pulumi.StringOutput)
}

type AuditTrackStoragePtrOutput struct{ *pulumi.OutputState }

func (AuditTrackStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AuditTrackStorage)(nil)).Elem()
}

func (o AuditTrackStoragePtrOutput) ToAuditTrackStoragePtrOutput() AuditTrackStoragePtrOutput {
	return o
}

func (o AuditTrackStoragePtrOutput) ToAuditTrackStoragePtrOutputWithContext(ctx context.Context) AuditTrackStoragePtrOutput {
	return o
}

func (o AuditTrackStoragePtrOutput) Elem() AuditTrackStorageOutput {
	return o.ApplyT(func(v *AuditTrackStorage) AuditTrackStorage {
		if v != nil {
			return *v
		}
		var ret AuditTrackStorage
		return ret
	}).(AuditTrackStorageOutput)
}

// Designated to store user ID.
func (o AuditTrackStoragePtrOutput) StorageAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditTrackStorage) *string {
		if v == nil {
			return nil
		}
		return v.StorageAccountId
	}).(pulumi.StringPtrOutput)
}

// Designated to store user app ID.
func (o AuditTrackStoragePtrOutput) StorageAppId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditTrackStorage) *string {
		if v == nil {
			return nil
		}
		return v.StorageAppId
	}).(pulumi.StringPtrOutput)
}

// Storage name. For COS, the storage name is the custom bucket name, which can contain up to 50 lowercase letters, digits, and hyphens. It cannot contain "-APPID" and cannot start or end with a hyphen. For CLS, the storage name is the log topic ID, which can contain 1-50 characters.
func (o AuditTrackStoragePtrOutput) StorageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditTrackStorage) *string {
		if v == nil {
			return nil
		}
		return &v.StorageName
	}).(pulumi.StringPtrOutput)
}

// Storage directory prefix. The COS log file prefix can only contain 3-40 letters and digits.
func (o AuditTrackStoragePtrOutput) StoragePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditTrackStorage) *string {
		if v == nil {
			return nil
		}
		return &v.StoragePrefix
	}).(pulumi.StringPtrOutput)
}

// StorageRegion *string `json:'StorageRegion,omitnil,omitempty' name: 'StorageRegion'`.
func (o AuditTrackStoragePtrOutput) StorageRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditTrackStorage) *string {
		if v == nil {
			return nil
		}
		return &v.StorageRegion
	}).(pulumi.StringPtrOutput)
}

// Storage type (Valid values: cos, cls).
func (o AuditTrackStoragePtrOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AuditTrackStorage) *string {
		if v == nil {
			return nil
		}
		return &v.StorageType
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackFiltersInput)(nil)).Elem(), AuditTrackFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackFiltersPtrInput)(nil)).Elem(), AuditTrackFiltersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackFiltersResourceFieldInput)(nil)).Elem(), AuditTrackFiltersResourceFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackFiltersResourceFieldArrayInput)(nil)).Elem(), AuditTrackFiltersResourceFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackStorageInput)(nil)).Elem(), AuditTrackStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuditTrackStoragePtrInput)(nil)).Elem(), AuditTrackStorageArgs{})
	pulumi.RegisterOutputType(AuditTrackFiltersOutput{})
	pulumi.RegisterOutputType(AuditTrackFiltersPtrOutput{})
	pulumi.RegisterOutputType(AuditTrackFiltersResourceFieldOutput{})
	pulumi.RegisterOutputType(AuditTrackFiltersResourceFieldArrayOutput{})
	pulumi.RegisterOutputType(AuditTrackStorageOutput{})
	pulumi.RegisterOutputType(AuditTrackStoragePtrOutput{})
}
