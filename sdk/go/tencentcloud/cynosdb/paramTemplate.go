// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cynosdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cynosdb paramTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cynosdb.NewParamTemplate(ctx, "paramTemplate", &Cynosdb.ParamTemplateArgs{
//				DbMode:        pulumi.String("SERVERLESS"),
//				EngineVersion: pulumi.String("5.7"),
//				ParamLists: cynosdb.ParamTemplateParamListArray{
//					&cynosdb.ParamTemplateParamListArgs{
//						CurrentValue: pulumi.String("-1"),
//						ParamName:    pulumi.String("optimizer_trace_offset"),
//					},
//				},
//				TemplateDescription: pulumi.String("terraform-template"),
//				TemplateName:        pulumi.String("terraform-template"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ParamTemplate struct {
	pulumi.CustomResourceState

	// Database type, optional values: NORMAL (default), SERVERLESS.
	DbMode pulumi.StringPtrOutput `pulumi:"dbMode"`
	// MySQL version number.
	EngineVersion pulumi.StringOutput `pulumi:"engineVersion"`
	// parameter list.
	ParamLists ParamTemplateParamListArrayOutput `pulumi:"paramLists"`
	// Template Description.
	TemplateDescription pulumi.StringPtrOutput `pulumi:"templateDescription"`
	// Optional parameter, template ID to be copied.
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
	// Template Name.
	TemplateName pulumi.StringOutput `pulumi:"templateName"`
}

// NewParamTemplate registers a new resource with the given unique name, arguments, and options.
func NewParamTemplate(ctx *pulumi.Context,
	name string, args *ParamTemplateArgs, opts ...pulumi.ResourceOption) (*ParamTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'EngineVersion'")
	}
	if args.TemplateName == nil {
		return nil, errors.New("invalid value for required argument 'TemplateName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ParamTemplate
	err := ctx.RegisterResource("tencentcloud:Cynosdb/paramTemplate:ParamTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetParamTemplate gets an existing ParamTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetParamTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ParamTemplateState, opts ...pulumi.ResourceOption) (*ParamTemplate, error) {
	var resource ParamTemplate
	err := ctx.ReadResource("tencentcloud:Cynosdb/paramTemplate:ParamTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ParamTemplate resources.
type paramTemplateState struct {
	// Database type, optional values: NORMAL (default), SERVERLESS.
	DbMode *string `pulumi:"dbMode"`
	// MySQL version number.
	EngineVersion *string `pulumi:"engineVersion"`
	// parameter list.
	ParamLists []ParamTemplateParamList `pulumi:"paramLists"`
	// Template Description.
	TemplateDescription *string `pulumi:"templateDescription"`
	// Optional parameter, template ID to be copied.
	TemplateId *int `pulumi:"templateId"`
	// Template Name.
	TemplateName *string `pulumi:"templateName"`
}

type ParamTemplateState struct {
	// Database type, optional values: NORMAL (default), SERVERLESS.
	DbMode pulumi.StringPtrInput
	// MySQL version number.
	EngineVersion pulumi.StringPtrInput
	// parameter list.
	ParamLists ParamTemplateParamListArrayInput
	// Template Description.
	TemplateDescription pulumi.StringPtrInput
	// Optional parameter, template ID to be copied.
	TemplateId pulumi.IntPtrInput
	// Template Name.
	TemplateName pulumi.StringPtrInput
}

func (ParamTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*paramTemplateState)(nil)).Elem()
}

type paramTemplateArgs struct {
	// Database type, optional values: NORMAL (default), SERVERLESS.
	DbMode *string `pulumi:"dbMode"`
	// MySQL version number.
	EngineVersion string `pulumi:"engineVersion"`
	// parameter list.
	ParamLists []ParamTemplateParamList `pulumi:"paramLists"`
	// Template Description.
	TemplateDescription *string `pulumi:"templateDescription"`
	// Optional parameter, template ID to be copied.
	TemplateId *int `pulumi:"templateId"`
	// Template Name.
	TemplateName string `pulumi:"templateName"`
}

// The set of arguments for constructing a ParamTemplate resource.
type ParamTemplateArgs struct {
	// Database type, optional values: NORMAL (default), SERVERLESS.
	DbMode pulumi.StringPtrInput
	// MySQL version number.
	EngineVersion pulumi.StringInput
	// parameter list.
	ParamLists ParamTemplateParamListArrayInput
	// Template Description.
	TemplateDescription pulumi.StringPtrInput
	// Optional parameter, template ID to be copied.
	TemplateId pulumi.IntPtrInput
	// Template Name.
	TemplateName pulumi.StringInput
}

func (ParamTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*paramTemplateArgs)(nil)).Elem()
}

type ParamTemplateInput interface {
	pulumi.Input

	ToParamTemplateOutput() ParamTemplateOutput
	ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput
}

func (*ParamTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamTemplate)(nil)).Elem()
}

func (i *ParamTemplate) ToParamTemplateOutput() ParamTemplateOutput {
	return i.ToParamTemplateOutputWithContext(context.Background())
}

func (i *ParamTemplate) ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateOutput)
}

// ParamTemplateArrayInput is an input type that accepts ParamTemplateArray and ParamTemplateArrayOutput values.
// You can construct a concrete instance of `ParamTemplateArrayInput` via:
//
//	ParamTemplateArray{ ParamTemplateArgs{...} }
type ParamTemplateArrayInput interface {
	pulumi.Input

	ToParamTemplateArrayOutput() ParamTemplateArrayOutput
	ToParamTemplateArrayOutputWithContext(context.Context) ParamTemplateArrayOutput
}

type ParamTemplateArray []ParamTemplateInput

func (ParamTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ParamTemplate)(nil)).Elem()
}

func (i ParamTemplateArray) ToParamTemplateArrayOutput() ParamTemplateArrayOutput {
	return i.ToParamTemplateArrayOutputWithContext(context.Background())
}

func (i ParamTemplateArray) ToParamTemplateArrayOutputWithContext(ctx context.Context) ParamTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateArrayOutput)
}

// ParamTemplateMapInput is an input type that accepts ParamTemplateMap and ParamTemplateMapOutput values.
// You can construct a concrete instance of `ParamTemplateMapInput` via:
//
//	ParamTemplateMap{ "key": ParamTemplateArgs{...} }
type ParamTemplateMapInput interface {
	pulumi.Input

	ToParamTemplateMapOutput() ParamTemplateMapOutput
	ToParamTemplateMapOutputWithContext(context.Context) ParamTemplateMapOutput
}

type ParamTemplateMap map[string]ParamTemplateInput

func (ParamTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ParamTemplate)(nil)).Elem()
}

func (i ParamTemplateMap) ToParamTemplateMapOutput() ParamTemplateMapOutput {
	return i.ToParamTemplateMapOutputWithContext(context.Background())
}

func (i ParamTemplateMap) ToParamTemplateMapOutputWithContext(ctx context.Context) ParamTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParamTemplateMapOutput)
}

type ParamTemplateOutput struct{ *pulumi.OutputState }

func (ParamTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateOutput) ToParamTemplateOutput() ParamTemplateOutput {
	return o
}

func (o ParamTemplateOutput) ToParamTemplateOutputWithContext(ctx context.Context) ParamTemplateOutput {
	return o
}

// Database type, optional values: NORMAL (default), SERVERLESS.
func (o ParamTemplateOutput) DbMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.DbMode }).(pulumi.StringPtrOutput)
}

// MySQL version number.
func (o ParamTemplateOutput) EngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringOutput { return v.EngineVersion }).(pulumi.StringOutput)
}

// parameter list.
func (o ParamTemplateOutput) ParamLists() ParamTemplateParamListArrayOutput {
	return o.ApplyT(func(v *ParamTemplate) ParamTemplateParamListArrayOutput { return v.ParamLists }).(ParamTemplateParamListArrayOutput)
}

// Template Description.
func (o ParamTemplateOutput) TemplateDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringPtrOutput { return v.TemplateDescription }).(pulumi.StringPtrOutput)
}

// Optional parameter, template ID to be copied.
func (o ParamTemplateOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

// Template Name.
func (o ParamTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *ParamTemplate) pulumi.StringOutput { return v.TemplateName }).(pulumi.StringOutput)
}

type ParamTemplateArrayOutput struct{ *pulumi.OutputState }

func (ParamTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateArrayOutput) ToParamTemplateArrayOutput() ParamTemplateArrayOutput {
	return o
}

func (o ParamTemplateArrayOutput) ToParamTemplateArrayOutputWithContext(ctx context.Context) ParamTemplateArrayOutput {
	return o
}

func (o ParamTemplateArrayOutput) Index(i pulumi.IntInput) ParamTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ParamTemplate {
		return vs[0].([]*ParamTemplate)[vs[1].(int)]
	}).(ParamTemplateOutput)
}

type ParamTemplateMapOutput struct{ *pulumi.OutputState }

func (ParamTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ParamTemplate)(nil)).Elem()
}

func (o ParamTemplateMapOutput) ToParamTemplateMapOutput() ParamTemplateMapOutput {
	return o
}

func (o ParamTemplateMapOutput) ToParamTemplateMapOutputWithContext(ctx context.Context) ParamTemplateMapOutput {
	return o
}

func (o ParamTemplateMapOutput) MapIndex(k pulumi.StringInput) ParamTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ParamTemplate {
		return vs[0].(map[string]*ParamTemplate)[vs[1].(string)]
	}).(ParamTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateInput)(nil)).Elem(), &ParamTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateArrayInput)(nil)).Elem(), ParamTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParamTemplateMapInput)(nil)).Elem(), ParamTemplateMap{})
	pulumi.RegisterOutputType(ParamTemplateOutput{})
	pulumi.RegisterOutputType(ParamTemplateArrayOutput{})
	pulumi.RegisterOutputType(ParamTemplateMapOutput{})
}
