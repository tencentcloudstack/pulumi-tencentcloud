// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cynosdb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provide a resource to create a CynosDB cluster.
//
// ## Example Usage
//
// ### Create a single availability zone NORMAL CynosDB cluster
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.20.0/28"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create cynosdb cluster
//			_, err = Cynosdb.NewCluster(ctx, "exampleCluster", &Cynosdb.ClusterArgs{
//				AvailableZone:             pulumi.String(availabilityZone),
//				VpcId:                     vpc.ID(),
//				SubnetId:                  subnet.ID(),
//				DbMode:                    pulumi.String("NORMAL"),
//				DbType:                    pulumi.String("MYSQL"),
//				DbVersion:                 pulumi.String("5.7"),
//				Port:                      pulumi.Int(3306),
//				StorageLimit:              pulumi.Int(1000),
//				ClusterName:               pulumi.String("tf-example"),
//				Password:                  pulumi.String("cynosDB@123"),
//				InstanceMaintainDuration:  pulumi.Int(7200),
//				InstanceMaintainStartTime: pulumi.Int(10800),
//				InstanceCpuCore:           pulumi.Int(2),
//				InstanceMemorySize:        pulumi.Int(4),
//				ForceDelete:               pulumi.Bool(false),
//				InstanceMaintainWeekdays: pulumi.StringArray{
//					pulumi.String("Fri"),
//					pulumi.String("Mon"),
//					pulumi.String("Sat"),
//					pulumi.String("Sun"),
//					pulumi.String("Thu"),
//					pulumi.String("Wed"),
//					pulumi.String("Tue"),
//				},
//				ParamItems: cynosdb.ClusterParamItemArray{
//					&cynosdb.ClusterParamItemArgs{
//						Name:         pulumi.String("character_set_server"),
//						CurrentValue: pulumi.String("utf8mb4"),
//					},
//					&cynosdb.ClusterParamItemArgs{
//						Name:         pulumi.String("lower_case_table_names"),
//						CurrentValue: pulumi.String("0"),
//					},
//				},
//				RwGroupSgs: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				RoGroupSgs: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Create a multiple availability zone SERVERLESS CynosDB cluster
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Security"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-4"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			slaveZone := "ap-guangzhou-6"
//			if param := cfg.Get("slaveZone"); param != "" {
//				slaveZone = param
//			}
//			// create vpc
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			subnet, err := Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.20.0/28"),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			exampleGroup, err := Security.NewGroup(ctx, "exampleGroup", &Security.GroupArgs{
//				Description: pulumi.String("sg desc."),
//				ProjectId:   pulumi.Int(0),
//				Tags: pulumi.Map{
//					"example": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create param template
//			exampleParamTemplate, err := Cynosdb.NewParamTemplate(ctx, "exampleParamTemplate", &Cynosdb.ParamTemplateArgs{
//				DbMode:              pulumi.String("SERVERLESS"),
//				EngineVersion:       pulumi.String("8.0"),
//				TemplateName:        pulumi.String("tf-example"),
//				TemplateDescription: pulumi.String("terraform-template"),
//				ParamLists: cynosdb.ParamTemplateParamListArray{
//					&cynosdb.ParamTemplateParamListArgs{
//						CurrentValue: pulumi.String("-1"),
//						ParamName:    pulumi.String("optimizer_trace_offset"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// create cynosdb cluster
//			_, err = Cynosdb.NewCluster(ctx, "exampleCluster", &Cynosdb.ClusterArgs{
//				AvailableZone:             pulumi.String(availabilityZone),
//				SlaveZone:                 pulumi.String(slaveZone),
//				VpcId:                     vpc.ID(),
//				SubnetId:                  subnet.ID(),
//				DbMode:                    pulumi.String("SERVERLESS"),
//				DbType:                    pulumi.String("MYSQL"),
//				DbVersion:                 pulumi.String("8.0"),
//				Port:                      pulumi.Int(3306),
//				StorageLimit:              pulumi.Int(1000),
//				ClusterName:               pulumi.String("tf-example"),
//				Password:                  pulumi.String("cynosDB@123"),
//				InstanceMaintainDuration:  pulumi.Int(7200),
//				InstanceMaintainStartTime: pulumi.Int(10800),
//				MinCpu:                    pulumi.Float64(2),
//				MaxCpu:                    pulumi.Float64(4),
//				ParamTemplateId:           exampleParamTemplate.TemplateId,
//				ForceDelete:               pulumi.Bool(false),
//				InstanceMaintainWeekdays: pulumi.StringArray{
//					pulumi.String("Fri"),
//					pulumi.String("Mon"),
//					pulumi.String("Sat"),
//					pulumi.String("Sun"),
//					pulumi.String("Thu"),
//					pulumi.String("Wed"),
//					pulumi.String("Tue"),
//				},
//				RwGroupSgs: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				RoGroupSgs: pulumi.StringArray{
//					exampleGroup.ID(),
//				},
//				Tags: pulumi.Map{
//					"createBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// CynosDB cluster can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Cynosdb/cluster:Cluster example cynosdbmysql-dzj5l8gz
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Specify whether the cluster can auto-pause while `dbMode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause pulumi.StringPtrOutput `pulumi:"autoPause"`
	// Specify auto-pause delay in second while `dbMode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay pulumi.IntPtrOutput `pulumi:"autoPauseDelay"`
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag pulumi.IntPtrOutput `pulumi:"autoRenewFlag"`
	// The available zone of the CynosDB Cluster.
	AvailableZone pulumi.StringOutput `pulumi:"availableZone"`
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrOutput `pulumi:"chargeType"`
	// Charset used by CynosDB cluster.
	Charset pulumi.StringOutput `pulumi:"charset"`
	// Name of CynosDB cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Status of the Cynosdb cluster.
	ClusterStatus pulumi.StringOutput `pulumi:"clusterStatus"`
	// Creation time of the CynosDB cluster.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Specify DB mode, only available when `dbType` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DbMode pulumi.StringPtrOutput `pulumi:"dbMode"`
	// Type of CynosDB, and available values include `MYSQL`.
	DbType pulumi.StringOutput `pulumi:"dbType"`
	// Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`, `8.0`.
	DbVersion pulumi.StringOutput `pulumi:"dbVersion"`
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCpuCore pulumi.IntPtrOutput `pulumi:"instanceCpuCore"`
	// ID of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration pulumi.IntPtrOutput `pulumi:"instanceMaintainDuration"`
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime pulumi.IntPtrOutput `pulumi:"instanceMaintainStartTime"`
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	InstanceMaintainWeekdays pulumi.StringArrayOutput `pulumi:"instanceMaintainWeekdays"`
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize pulumi.IntPtrOutput `pulumi:"instanceMemorySize"`
	// Name of instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Status of the instance.
	InstanceStatus pulumi.StringOutput `pulumi:"instanceStatus"`
	// Storage size of the instance, unit in GB.
	InstanceStorageSize pulumi.IntOutput `pulumi:"instanceStorageSize"`
	// Maximum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCpu pulumi.Float64PtrOutput `pulumi:"maxCpu"`
	// Minimum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCpu pulumi.Float64PtrOutput `pulumi:"minCpu"`
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIpReserveHours pulumi.IntPtrOutput `pulumi:"oldIpReserveHours"`
	// Specify parameter list of database. It is valid when `paramTemplateId` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems ClusterParamItemArrayOutput `pulumi:"paramItems"`
	// The ID of the parameter template.
	ParamTemplateId pulumi.IntOutput `pulumi:"paramTemplateId"`
	// Password of `root` account.
	Password pulumi.StringOutput `pulumi:"password"`
	// Port of CynosDB cluster.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// It will be deprecated. Use `paramTemplateId` instead. The ID of the parameter template.
	//
	// Deprecated: It will be deprecated. Use `paramTemplateId` instead.
	PrarmTemplateId pulumi.IntOutput `pulumi:"prarmTemplateId"`
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod pulumi.IntPtrOutput `pulumi:"prepaidPeriod"`
	// ID of the project. `0` by default.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Readonly addresses. Each element contains the following attributes:
	RoGroupAddrs ClusterRoGroupAddrArrayOutput `pulumi:"roGroupAddrs"`
	// ID of read-only instance group.
	RoGroupId pulumi.StringOutput `pulumi:"roGroupId"`
	// List of instances in the read-only instance group.
	RoGroupInstances ClusterRoGroupInstanceArrayOutput `pulumi:"roGroupInstances"`
	// IDs of security group for `roGroup`.
	RoGroupSgs pulumi.StringArrayOutput `pulumi:"roGroupSgs"`
	// Read-write addresses. Each element contains the following attributes:
	RwGroupAddrs ClusterRwGroupAddrArrayOutput `pulumi:"rwGroupAddrs"`
	// ID of read-write instance group.
	RwGroupId pulumi.StringOutput `pulumi:"rwGroupId"`
	// List of instances in the read-write instance group.
	RwGroupInstances ClusterRwGroupInstanceArrayOutput `pulumi:"rwGroupInstances"`
	// IDs of security group for `rwGroup`.
	RwGroupSgs pulumi.StringArrayOutput `pulumi:"rwGroupSgs"`
	// Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverlessStatusFlag`.
	ServerlessStatus pulumi.StringOutput `pulumi:"serverlessStatus"`
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag pulumi.StringPtrOutput `pulumi:"serverlessStatusFlag"`
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone pulumi.StringPtrOutput `pulumi:"slaveZone"`
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If dbType is `MYSQL` and chargeType is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when chargeType is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit pulumi.IntPtrOutput `pulumi:"storageLimit"`
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode pulumi.IntOutput `pulumi:"storagePayMode"`
	// Used storage of CynosDB cluster, unit in MB.
	StorageUsed pulumi.IntOutput `pulumi:"storageUsed"`
	// ID of the subnet within this VPC.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The tags of the CynosDB cluster.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailableZone == nil {
		return nil, errors.New("invalid value for required argument 'AvailableZone'")
	}
	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.DbType == nil {
		return nil, errors.New("invalid value for required argument 'DbType'")
	}
	if args.DbVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbVersion'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("tencentcloud:Cynosdb/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("tencentcloud:Cynosdb/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Specify whether the cluster can auto-pause while `dbMode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause *string `pulumi:"autoPause"`
	// Specify auto-pause delay in second while `dbMode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay *int `pulumi:"autoPauseDelay"`
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// The available zone of the CynosDB Cluster.
	AvailableZone *string `pulumi:"availableZone"`
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// Charset used by CynosDB cluster.
	Charset *string `pulumi:"charset"`
	// Name of CynosDB cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Status of the Cynosdb cluster.
	ClusterStatus *string `pulumi:"clusterStatus"`
	// Creation time of the CynosDB cluster.
	CreateTime *string `pulumi:"createTime"`
	// Specify DB mode, only available when `dbType` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DbMode *string `pulumi:"dbMode"`
	// Type of CynosDB, and available values include `MYSQL`.
	DbType *string `pulumi:"dbType"`
	// Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`, `8.0`.
	DbVersion *string `pulumi:"dbVersion"`
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCpuCore *int `pulumi:"instanceCpuCore"`
	// ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration *int `pulumi:"instanceMaintainDuration"`
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime *int `pulumi:"instanceMaintainStartTime"`
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	InstanceMaintainWeekdays []string `pulumi:"instanceMaintainWeekdays"`
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize *int `pulumi:"instanceMemorySize"`
	// Name of instance.
	InstanceName *string `pulumi:"instanceName"`
	// Status of the instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// Storage size of the instance, unit in GB.
	InstanceStorageSize *int `pulumi:"instanceStorageSize"`
	// Maximum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCpu *float64 `pulumi:"maxCpu"`
	// Minimum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCpu *float64 `pulumi:"minCpu"`
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIpReserveHours *int `pulumi:"oldIpReserveHours"`
	// Specify parameter list of database. It is valid when `paramTemplateId` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems []ClusterParamItem `pulumi:"paramItems"`
	// The ID of the parameter template.
	ParamTemplateId *int `pulumi:"paramTemplateId"`
	// Password of `root` account.
	Password *string `pulumi:"password"`
	// Port of CynosDB cluster.
	Port *int `pulumi:"port"`
	// It will be deprecated. Use `paramTemplateId` instead. The ID of the parameter template.
	//
	// Deprecated: It will be deprecated. Use `paramTemplateId` instead.
	PrarmTemplateId *int `pulumi:"prarmTemplateId"`
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// ID of the project. `0` by default.
	ProjectId *int `pulumi:"projectId"`
	// Readonly addresses. Each element contains the following attributes:
	RoGroupAddrs []ClusterRoGroupAddr `pulumi:"roGroupAddrs"`
	// ID of read-only instance group.
	RoGroupId *string `pulumi:"roGroupId"`
	// List of instances in the read-only instance group.
	RoGroupInstances []ClusterRoGroupInstance `pulumi:"roGroupInstances"`
	// IDs of security group for `roGroup`.
	RoGroupSgs []string `pulumi:"roGroupSgs"`
	// Read-write addresses. Each element contains the following attributes:
	RwGroupAddrs []ClusterRwGroupAddr `pulumi:"rwGroupAddrs"`
	// ID of read-write instance group.
	RwGroupId *string `pulumi:"rwGroupId"`
	// List of instances in the read-write instance group.
	RwGroupInstances []ClusterRwGroupInstance `pulumi:"rwGroupInstances"`
	// IDs of security group for `rwGroup`.
	RwGroupSgs []string `pulumi:"rwGroupSgs"`
	// Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverlessStatusFlag`.
	ServerlessStatus *string `pulumi:"serverlessStatus"`
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag *string `pulumi:"serverlessStatusFlag"`
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone *string `pulumi:"slaveZone"`
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If dbType is `MYSQL` and chargeType is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when chargeType is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit *int `pulumi:"storageLimit"`
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode *int `pulumi:"storagePayMode"`
	// Used storage of CynosDB cluster, unit in MB.
	StorageUsed *int `pulumi:"storageUsed"`
	// ID of the subnet within this VPC.
	SubnetId *string `pulumi:"subnetId"`
	// The tags of the CynosDB cluster.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// Specify whether the cluster can auto-pause while `dbMode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause pulumi.StringPtrInput
	// Specify auto-pause delay in second while `dbMode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay pulumi.IntPtrInput
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag pulumi.IntPtrInput
	// The available zone of the CynosDB Cluster.
	AvailableZone pulumi.StringPtrInput
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// Charset used by CynosDB cluster.
	Charset pulumi.StringPtrInput
	// Name of CynosDB cluster.
	ClusterName pulumi.StringPtrInput
	// Status of the Cynosdb cluster.
	ClusterStatus pulumi.StringPtrInput
	// Creation time of the CynosDB cluster.
	CreateTime pulumi.StringPtrInput
	// Specify DB mode, only available when `dbType` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DbMode pulumi.StringPtrInput
	// Type of CynosDB, and available values include `MYSQL`.
	DbType pulumi.StringPtrInput
	// Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`, `8.0`.
	DbVersion pulumi.StringPtrInput
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete pulumi.BoolPtrInput
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCpuCore pulumi.IntPtrInput
	// ID of instance.
	InstanceId pulumi.StringPtrInput
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration pulumi.IntPtrInput
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime pulumi.IntPtrInput
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	InstanceMaintainWeekdays pulumi.StringArrayInput
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize pulumi.IntPtrInput
	// Name of instance.
	InstanceName pulumi.StringPtrInput
	// Status of the instance.
	InstanceStatus pulumi.StringPtrInput
	// Storage size of the instance, unit in GB.
	InstanceStorageSize pulumi.IntPtrInput
	// Maximum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCpu pulumi.Float64PtrInput
	// Minimum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCpu pulumi.Float64PtrInput
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIpReserveHours pulumi.IntPtrInput
	// Specify parameter list of database. It is valid when `paramTemplateId` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems ClusterParamItemArrayInput
	// The ID of the parameter template.
	ParamTemplateId pulumi.IntPtrInput
	// Password of `root` account.
	Password pulumi.StringPtrInput
	// Port of CynosDB cluster.
	Port pulumi.IntPtrInput
	// It will be deprecated. Use `paramTemplateId` instead. The ID of the parameter template.
	//
	// Deprecated: It will be deprecated. Use `paramTemplateId` instead.
	PrarmTemplateId pulumi.IntPtrInput
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod pulumi.IntPtrInput
	// ID of the project. `0` by default.
	ProjectId pulumi.IntPtrInput
	// Readonly addresses. Each element contains the following attributes:
	RoGroupAddrs ClusterRoGroupAddrArrayInput
	// ID of read-only instance group.
	RoGroupId pulumi.StringPtrInput
	// List of instances in the read-only instance group.
	RoGroupInstances ClusterRoGroupInstanceArrayInput
	// IDs of security group for `roGroup`.
	RoGroupSgs pulumi.StringArrayInput
	// Read-write addresses. Each element contains the following attributes:
	RwGroupAddrs ClusterRwGroupAddrArrayInput
	// ID of read-write instance group.
	RwGroupId pulumi.StringPtrInput
	// List of instances in the read-write instance group.
	RwGroupInstances ClusterRwGroupInstanceArrayInput
	// IDs of security group for `rwGroup`.
	RwGroupSgs pulumi.StringArrayInput
	// Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverlessStatusFlag`.
	ServerlessStatus pulumi.StringPtrInput
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag pulumi.StringPtrInput
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone pulumi.StringPtrInput
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If dbType is `MYSQL` and chargeType is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when chargeType is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit pulumi.IntPtrInput
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode pulumi.IntPtrInput
	// Used storage of CynosDB cluster, unit in MB.
	StorageUsed pulumi.IntPtrInput
	// ID of the subnet within this VPC.
	SubnetId pulumi.StringPtrInput
	// The tags of the CynosDB cluster.
	Tags pulumi.MapInput
	// ID of the VPC.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// Specify whether the cluster can auto-pause while `dbMode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause *string `pulumi:"autoPause"`
	// Specify auto-pause delay in second while `dbMode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay *int `pulumi:"autoPauseDelay"`
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag *int `pulumi:"autoRenewFlag"`
	// The available zone of the CynosDB Cluster.
	AvailableZone string `pulumi:"availableZone"`
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType *string `pulumi:"chargeType"`
	// Name of CynosDB cluster.
	ClusterName string `pulumi:"clusterName"`
	// Specify DB mode, only available when `dbType` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DbMode *string `pulumi:"dbMode"`
	// Type of CynosDB, and available values include `MYSQL`.
	DbType string `pulumi:"dbType"`
	// Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`, `8.0`.
	DbVersion string `pulumi:"dbVersion"`
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete *bool `pulumi:"forceDelete"`
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCpuCore *int `pulumi:"instanceCpuCore"`
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration *int `pulumi:"instanceMaintainDuration"`
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime *int `pulumi:"instanceMaintainStartTime"`
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	InstanceMaintainWeekdays []string `pulumi:"instanceMaintainWeekdays"`
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize *int `pulumi:"instanceMemorySize"`
	// Maximum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCpu *float64 `pulumi:"maxCpu"`
	// Minimum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCpu *float64 `pulumi:"minCpu"`
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIpReserveHours *int `pulumi:"oldIpReserveHours"`
	// Specify parameter list of database. It is valid when `paramTemplateId` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems []ClusterParamItem `pulumi:"paramItems"`
	// The ID of the parameter template.
	ParamTemplateId *int `pulumi:"paramTemplateId"`
	// Password of `root` account.
	Password string `pulumi:"password"`
	// Port of CynosDB cluster.
	Port *int `pulumi:"port"`
	// It will be deprecated. Use `paramTemplateId` instead. The ID of the parameter template.
	//
	// Deprecated: It will be deprecated. Use `paramTemplateId` instead.
	PrarmTemplateId *int `pulumi:"prarmTemplateId"`
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod *int `pulumi:"prepaidPeriod"`
	// ID of the project. `0` by default.
	ProjectId *int `pulumi:"projectId"`
	// IDs of security group for `roGroup`.
	RoGroupSgs []string `pulumi:"roGroupSgs"`
	// IDs of security group for `rwGroup`.
	RwGroupSgs []string `pulumi:"rwGroupSgs"`
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag *string `pulumi:"serverlessStatusFlag"`
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone *string `pulumi:"slaveZone"`
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If dbType is `MYSQL` and chargeType is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when chargeType is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit *int `pulumi:"storageLimit"`
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode *int `pulumi:"storagePayMode"`
	// ID of the subnet within this VPC.
	SubnetId string `pulumi:"subnetId"`
	// The tags of the CynosDB cluster.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// Specify whether the cluster can auto-pause while `dbMode` is `SERVERLESS`. Values: `yes` (default), `no`.
	AutoPause pulumi.StringPtrInput
	// Specify auto-pause delay in second while `dbMode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
	AutoPauseDelay pulumi.IntPtrInput
	// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
	AutoRenewFlag pulumi.IntPtrInput
	// The available zone of the CynosDB Cluster.
	AvailableZone pulumi.StringInput
	// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
	ChargeType pulumi.StringPtrInput
	// Name of CynosDB cluster.
	ClusterName pulumi.StringInput
	// Specify DB mode, only available when `dbType` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
	DbMode pulumi.StringPtrInput
	// Type of CynosDB, and available values include `MYSQL`.
	DbType pulumi.StringInput
	// Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`, `8.0`.
	DbVersion pulumi.StringInput
	// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
	ForceDelete pulumi.BoolPtrInput
	// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceCpuCore pulumi.IntPtrInput
	// Duration time for maintenance, unit in second. `3600` by default.
	InstanceMaintainDuration pulumi.IntPtrInput
	// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
	InstanceMaintainStartTime pulumi.IntPtrInput
	// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
	InstanceMaintainWeekdays pulumi.StringArrayInput
	// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
	InstanceMemorySize pulumi.IntPtrInput
	// Maximum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MaxCpu pulumi.Float64PtrInput
	// Minimum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
	MinCpu pulumi.Float64PtrInput
	// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
	OldIpReserveHours pulumi.IntPtrInput
	// Specify parameter list of database. It is valid when `paramTemplateId` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
	ParamItems ClusterParamItemArrayInput
	// The ID of the parameter template.
	ParamTemplateId pulumi.IntPtrInput
	// Password of `root` account.
	Password pulumi.StringInput
	// Port of CynosDB cluster.
	Port pulumi.IntPtrInput
	// It will be deprecated. Use `paramTemplateId` instead. The ID of the parameter template.
	//
	// Deprecated: It will be deprecated. Use `paramTemplateId` instead.
	PrarmTemplateId pulumi.IntPtrInput
	// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when chargeType is set to `PREPAID`.
	PrepaidPeriod pulumi.IntPtrInput
	// ID of the project. `0` by default.
	ProjectId pulumi.IntPtrInput
	// IDs of security group for `roGroup`.
	RoGroupSgs pulumi.StringArrayInput
	// IDs of security group for `rwGroup`.
	RwGroupSgs pulumi.StringArrayInput
	// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
	ServerlessStatusFlag pulumi.StringPtrInput
	// Multi zone Addresses of the CynosDB Cluster.
	SlaveZone pulumi.StringPtrInput
	// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If dbType is `MYSQL` and chargeType is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when chargeType is `POSTPAID_BY_HOUR`, this argument is unnecessary.
	StorageLimit pulumi.IntPtrInput
	// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
	StoragePayMode pulumi.IntPtrInput
	// ID of the subnet within this VPC.
	SubnetId pulumi.StringInput
	// The tags of the CynosDB cluster.
	Tags pulumi.MapInput
	// ID of the VPC.
	VpcId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Specify whether the cluster can auto-pause while `dbMode` is `SERVERLESS`. Values: `yes` (default), `no`.
func (o ClusterOutput) AutoPause() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.AutoPause }).(pulumi.StringPtrOutput)
}

// Specify auto-pause delay in second while `dbMode` is `SERVERLESS`. Value range: `[600, 691200]`. Default: `600`.
func (o ClusterOutput) AutoPauseDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.AutoPauseDelay }).(pulumi.IntPtrOutput)
}

// Auto renew flag. Valid values are `0`(MANUAL_RENEW), `1`(AUTO_RENEW). Default value is `0`. Only works for PREPAID cluster.
func (o ClusterOutput) AutoRenewFlag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.AutoRenewFlag }).(pulumi.IntPtrOutput)
}

// The available zone of the CynosDB Cluster.
func (o ClusterOutput) AvailableZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.AvailableZone }).(pulumi.StringOutput)
}

// The charge type of instance. Valid values are `PREPAID` and `POSTPAID_BY_HOUR`. Default value is `POSTPAID_BY_HOUR`.
func (o ClusterOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Charset used by CynosDB cluster.
func (o ClusterOutput) Charset() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Charset }).(pulumi.StringOutput)
}

// Name of CynosDB cluster.
func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Status of the Cynosdb cluster.
func (o ClusterOutput) ClusterStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterStatus }).(pulumi.StringOutput)
}

// Creation time of the CynosDB cluster.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Specify DB mode, only available when `dbType` is `MYSQL`. Values: `NORMAL` (Default), `SERVERLESS`.
func (o ClusterOutput) DbMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DbMode }).(pulumi.StringPtrOutput)
}

// Type of CynosDB, and available values include `MYSQL`.
func (o ClusterOutput) DbType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DbType }).(pulumi.StringOutput)
}

// Version of CynosDB, which is related to `dbType`. For `MYSQL`, available value is `5.7`, `8.0`.
func (o ClusterOutput) DbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DbVersion }).(pulumi.StringOutput)
}

// Indicate whether to delete cluster instance directly or not. Default is false. If set true, the cluster and its `All RELATED INSTANCES` will be deleted instead of staying recycle bin. Note: works for both `PREPAID` and `POSTPAID_BY_HOUR` cluster.
func (o ClusterOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// The number of CPU cores of read-write type instance in the CynosDB cluster. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
func (o ClusterOutput) InstanceCpuCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.InstanceCpuCore }).(pulumi.IntPtrOutput)
}

// ID of instance.
func (o ClusterOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Duration time for maintenance, unit in second. `3600` by default.
func (o ClusterOutput) InstanceMaintainDuration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.InstanceMaintainDuration }).(pulumi.IntPtrOutput)
}

// Offset time from 00:00, unit in second. For example, 03:00am should be `10800`. `10800` by default.
func (o ClusterOutput) InstanceMaintainStartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.InstanceMaintainStartTime }).(pulumi.IntPtrOutput)
}

// Weekdays for maintenance. `["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]` by default.
func (o ClusterOutput) InstanceMaintainWeekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.InstanceMaintainWeekdays }).(pulumi.StringArrayOutput)
}

// Memory capacity of read-write type instance, unit in GB. Required while creating normal cluster. Note: modification of this field will take effect immediately, if want to upgrade on maintenance window, please upgrade from console.
func (o ClusterOutput) InstanceMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.InstanceMemorySize }).(pulumi.IntPtrOutput)
}

// Name of instance.
func (o ClusterOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Status of the instance.
func (o ClusterOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.InstanceStatus }).(pulumi.StringOutput)
}

// Storage size of the instance, unit in GB.
func (o ClusterOutput) InstanceStorageSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.InstanceStorageSize }).(pulumi.IntOutput)
}

// Maximum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
func (o ClusterOutput) MaxCpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.Float64PtrOutput { return v.MaxCpu }).(pulumi.Float64PtrOutput)
}

// Minimum CPU core count, required while `dbMode` is `SERVERLESS`, request DescribeServerlessInstanceSpecs for more reference.
func (o ClusterOutput) MinCpu() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.Float64PtrOutput { return v.MinCpu }).(pulumi.Float64PtrOutput)
}

// Recycling time of the old address, must be filled in when modifying the vpcRecycling time of the old address, must be filled in when modifying the vpc.
func (o ClusterOutput) OldIpReserveHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.OldIpReserveHours }).(pulumi.IntPtrOutput)
}

// Specify parameter list of database. It is valid when `paramTemplateId` is set in create cluster. Use `data.tencentcloud_mysql_default_params` to query available parameter details.
func (o ClusterOutput) ParamItems() ClusterParamItemArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterParamItemArrayOutput { return v.ParamItems }).(ClusterParamItemArrayOutput)
}

// The ID of the parameter template.
func (o ClusterOutput) ParamTemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.ParamTemplateId }).(pulumi.IntOutput)
}

// Password of `root` account.
func (o ClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Port of CynosDB cluster.
func (o ClusterOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// It will be deprecated. Use `paramTemplateId` instead. The ID of the parameter template.
//
// Deprecated: It will be deprecated. Use `paramTemplateId` instead.
func (o ClusterOutput) PrarmTemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.PrarmTemplateId }).(pulumi.IntOutput)
}

// The tenancy (time unit is month) of the prepaid instance. Valid values are `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `10`, `11`, `12`, `24`, `36`. NOTE: it only works when chargeType is set to `PREPAID`.
func (o ClusterOutput) PrepaidPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.PrepaidPeriod }).(pulumi.IntPtrOutput)
}

// ID of the project. `0` by default.
func (o ClusterOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Readonly addresses. Each element contains the following attributes:
func (o ClusterOutput) RoGroupAddrs() ClusterRoGroupAddrArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterRoGroupAddrArrayOutput { return v.RoGroupAddrs }).(ClusterRoGroupAddrArrayOutput)
}

// ID of read-only instance group.
func (o ClusterOutput) RoGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.RoGroupId }).(pulumi.StringOutput)
}

// List of instances in the read-only instance group.
func (o ClusterOutput) RoGroupInstances() ClusterRoGroupInstanceArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterRoGroupInstanceArrayOutput { return v.RoGroupInstances }).(ClusterRoGroupInstanceArrayOutput)
}

// IDs of security group for `roGroup`.
func (o ClusterOutput) RoGroupSgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.RoGroupSgs }).(pulumi.StringArrayOutput)
}

// Read-write addresses. Each element contains the following attributes:
func (o ClusterOutput) RwGroupAddrs() ClusterRwGroupAddrArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterRwGroupAddrArrayOutput { return v.RwGroupAddrs }).(ClusterRwGroupAddrArrayOutput)
}

// ID of read-write instance group.
func (o ClusterOutput) RwGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.RwGroupId }).(pulumi.StringOutput)
}

// List of instances in the read-write instance group.
func (o ClusterOutput) RwGroupInstances() ClusterRwGroupInstanceArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterRwGroupInstanceArrayOutput { return v.RwGroupInstances }).(ClusterRwGroupInstanceArrayOutput)
}

// IDs of security group for `rwGroup`.
func (o ClusterOutput) RwGroupSgs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.RwGroupSgs }).(pulumi.StringArrayOutput)
}

// Serverless cluster status. NOTE: This is a readonly attribute, to modify, please set `serverlessStatusFlag`.
func (o ClusterOutput) ServerlessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ServerlessStatus }).(pulumi.StringOutput)
}

// Specify whether to pause or resume serverless cluster. values: `resume`, `pause`.
func (o ClusterOutput) ServerlessStatusFlag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ServerlessStatusFlag }).(pulumi.StringPtrOutput)
}

// Multi zone Addresses of the CynosDB Cluster.
func (o ClusterOutput) SlaveZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SlaveZone }).(pulumi.StringPtrOutput)
}

// Storage limit of CynosDB cluster instance, unit in GB. The maximum storage of a non-serverless instance in GB. NOTE: If dbType is `MYSQL` and chargeType is `PREPAID`, the value cannot exceed the maximum storage corresponding to the CPU and memory specifications, and the transaction mode is `order and pay`. when chargeType is `POSTPAID_BY_HOUR`, this argument is unnecessary.
func (o ClusterOutput) StorageLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.StorageLimit }).(pulumi.IntPtrOutput)
}

// Cluster storage billing mode, pay-as-you-go: `0`-yearly/monthly: `1`-The default is pay-as-you-go. When the DbType is MYSQL, when the cluster computing billing mode is post-paid (including DbMode is SERVERLESS), the storage billing mode can only be billing by volume; rollback and cloning do not support yearly subscriptions monthly storage.
func (o ClusterOutput) StoragePayMode() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.StoragePayMode }).(pulumi.IntOutput)
}

// Used storage of CynosDB cluster, unit in MB.
func (o ClusterOutput) StorageUsed() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.StorageUsed }).(pulumi.IntOutput)
}

// ID of the subnet within this VPC.
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The tags of the CynosDB cluster.
func (o ClusterOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// ID of the VPC.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
