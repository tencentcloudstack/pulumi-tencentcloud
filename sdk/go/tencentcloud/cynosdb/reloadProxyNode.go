// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cynosdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cynosdb reloadProxyNode
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cynosdb.NewReloadProxyNode(ctx, "reloadProxyNode", &Cynosdb.ReloadProxyNodeArgs{
//				ClusterId:    pulumi.String("cynosdbmysql-cgd2gpwr"),
//				ProxyGroupId: pulumi.String("cynosdbmysql-proxy-8lqtl8pk"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cynosdb reload_proxy_node can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cynosdb/reloadProxyNode:ReloadProxyNode reload_proxy_node reload_proxy_node_id
//
// ```
type ReloadProxyNode struct {
	pulumi.CustomResourceState

	// cluster id.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// proxy group id.
	ProxyGroupId pulumi.StringOutput `pulumi:"proxyGroupId"`
}

// NewReloadProxyNode registers a new resource with the given unique name, arguments, and options.
func NewReloadProxyNode(ctx *pulumi.Context,
	name string, args *ReloadProxyNodeArgs, opts ...pulumi.ResourceOption) (*ReloadProxyNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ProxyGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ProxyGroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ReloadProxyNode
	err := ctx.RegisterResource("tencentcloud:Cynosdb/reloadProxyNode:ReloadProxyNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReloadProxyNode gets an existing ReloadProxyNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReloadProxyNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReloadProxyNodeState, opts ...pulumi.ResourceOption) (*ReloadProxyNode, error) {
	var resource ReloadProxyNode
	err := ctx.ReadResource("tencentcloud:Cynosdb/reloadProxyNode:ReloadProxyNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReloadProxyNode resources.
type reloadProxyNodeState struct {
	// cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// proxy group id.
	ProxyGroupId *string `pulumi:"proxyGroupId"`
}

type ReloadProxyNodeState struct {
	// cluster id.
	ClusterId pulumi.StringPtrInput
	// proxy group id.
	ProxyGroupId pulumi.StringPtrInput
}

func (ReloadProxyNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*reloadProxyNodeState)(nil)).Elem()
}

type reloadProxyNodeArgs struct {
	// cluster id.
	ClusterId string `pulumi:"clusterId"`
	// proxy group id.
	ProxyGroupId string `pulumi:"proxyGroupId"`
}

// The set of arguments for constructing a ReloadProxyNode resource.
type ReloadProxyNodeArgs struct {
	// cluster id.
	ClusterId pulumi.StringInput
	// proxy group id.
	ProxyGroupId pulumi.StringInput
}

func (ReloadProxyNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reloadProxyNodeArgs)(nil)).Elem()
}

type ReloadProxyNodeInput interface {
	pulumi.Input

	ToReloadProxyNodeOutput() ReloadProxyNodeOutput
	ToReloadProxyNodeOutputWithContext(ctx context.Context) ReloadProxyNodeOutput
}

func (*ReloadProxyNode) ElementType() reflect.Type {
	return reflect.TypeOf((**ReloadProxyNode)(nil)).Elem()
}

func (i *ReloadProxyNode) ToReloadProxyNodeOutput() ReloadProxyNodeOutput {
	return i.ToReloadProxyNodeOutputWithContext(context.Background())
}

func (i *ReloadProxyNode) ToReloadProxyNodeOutputWithContext(ctx context.Context) ReloadProxyNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReloadProxyNodeOutput)
}

// ReloadProxyNodeArrayInput is an input type that accepts ReloadProxyNodeArray and ReloadProxyNodeArrayOutput values.
// You can construct a concrete instance of `ReloadProxyNodeArrayInput` via:
//
//	ReloadProxyNodeArray{ ReloadProxyNodeArgs{...} }
type ReloadProxyNodeArrayInput interface {
	pulumi.Input

	ToReloadProxyNodeArrayOutput() ReloadProxyNodeArrayOutput
	ToReloadProxyNodeArrayOutputWithContext(context.Context) ReloadProxyNodeArrayOutput
}

type ReloadProxyNodeArray []ReloadProxyNodeInput

func (ReloadProxyNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReloadProxyNode)(nil)).Elem()
}

func (i ReloadProxyNodeArray) ToReloadProxyNodeArrayOutput() ReloadProxyNodeArrayOutput {
	return i.ToReloadProxyNodeArrayOutputWithContext(context.Background())
}

func (i ReloadProxyNodeArray) ToReloadProxyNodeArrayOutputWithContext(ctx context.Context) ReloadProxyNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReloadProxyNodeArrayOutput)
}

// ReloadProxyNodeMapInput is an input type that accepts ReloadProxyNodeMap and ReloadProxyNodeMapOutput values.
// You can construct a concrete instance of `ReloadProxyNodeMapInput` via:
//
//	ReloadProxyNodeMap{ "key": ReloadProxyNodeArgs{...} }
type ReloadProxyNodeMapInput interface {
	pulumi.Input

	ToReloadProxyNodeMapOutput() ReloadProxyNodeMapOutput
	ToReloadProxyNodeMapOutputWithContext(context.Context) ReloadProxyNodeMapOutput
}

type ReloadProxyNodeMap map[string]ReloadProxyNodeInput

func (ReloadProxyNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReloadProxyNode)(nil)).Elem()
}

func (i ReloadProxyNodeMap) ToReloadProxyNodeMapOutput() ReloadProxyNodeMapOutput {
	return i.ToReloadProxyNodeMapOutputWithContext(context.Background())
}

func (i ReloadProxyNodeMap) ToReloadProxyNodeMapOutputWithContext(ctx context.Context) ReloadProxyNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReloadProxyNodeMapOutput)
}

type ReloadProxyNodeOutput struct{ *pulumi.OutputState }

func (ReloadProxyNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReloadProxyNode)(nil)).Elem()
}

func (o ReloadProxyNodeOutput) ToReloadProxyNodeOutput() ReloadProxyNodeOutput {
	return o
}

func (o ReloadProxyNodeOutput) ToReloadProxyNodeOutputWithContext(ctx context.Context) ReloadProxyNodeOutput {
	return o
}

// cluster id.
func (o ReloadProxyNodeOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReloadProxyNode) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// proxy group id.
func (o ReloadProxyNodeOutput) ProxyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReloadProxyNode) pulumi.StringOutput { return v.ProxyGroupId }).(pulumi.StringOutput)
}

type ReloadProxyNodeArrayOutput struct{ *pulumi.OutputState }

func (ReloadProxyNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReloadProxyNode)(nil)).Elem()
}

func (o ReloadProxyNodeArrayOutput) ToReloadProxyNodeArrayOutput() ReloadProxyNodeArrayOutput {
	return o
}

func (o ReloadProxyNodeArrayOutput) ToReloadProxyNodeArrayOutputWithContext(ctx context.Context) ReloadProxyNodeArrayOutput {
	return o
}

func (o ReloadProxyNodeArrayOutput) Index(i pulumi.IntInput) ReloadProxyNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReloadProxyNode {
		return vs[0].([]*ReloadProxyNode)[vs[1].(int)]
	}).(ReloadProxyNodeOutput)
}

type ReloadProxyNodeMapOutput struct{ *pulumi.OutputState }

func (ReloadProxyNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReloadProxyNode)(nil)).Elem()
}

func (o ReloadProxyNodeMapOutput) ToReloadProxyNodeMapOutput() ReloadProxyNodeMapOutput {
	return o
}

func (o ReloadProxyNodeMapOutput) ToReloadProxyNodeMapOutputWithContext(ctx context.Context) ReloadProxyNodeMapOutput {
	return o
}

func (o ReloadProxyNodeMapOutput) MapIndex(k pulumi.StringInput) ReloadProxyNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReloadProxyNode {
		return vs[0].(map[string]*ReloadProxyNode)[vs[1].(string)]
	}).(ReloadProxyNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReloadProxyNodeInput)(nil)).Elem(), &ReloadProxyNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReloadProxyNodeArrayInput)(nil)).Elem(), ReloadProxyNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReloadProxyNodeMapInput)(nil)).Elem(), ReloadProxyNodeMap{})
	pulumi.RegisterOutputType(ReloadProxyNodeOutput{})
	pulumi.RegisterOutputType(ReloadProxyNodeArrayOutput{})
	pulumi.RegisterOutputType(ReloadProxyNodeMapOutput{})
}
