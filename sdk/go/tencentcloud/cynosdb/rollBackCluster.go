// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cynosdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cynosdb rollBackCluster
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cynosdb.NewRollBackCluster(ctx, "rollBackCluster", &Cynosdb.RollBackClusterArgs{
//				ClusterId:        pulumi.String("cynosdbmysql-bws8h88b"),
//				ExpectTimeThresh: pulumi.Int(0),
//				RollbackDatabases: cynosdb.RollBackClusterRollbackDatabaseArray{
//					&cynosdb.RollBackClusterRollbackDatabaseArgs{
//						NewDatabase: pulumi.String("users_bak_1"),
//						OldDatabase: pulumi.String("users"),
//					},
//				},
//				RollbackId:       pulumi.Int(732725),
//				RollbackMode:     pulumi.String("full"),
//				RollbackStrategy: pulumi.String("snapRollback"),
//				RollbackTables: cynosdb.RollBackClusterRollbackTableArray{
//					&cynosdb.RollBackClusterRollbackTableArgs{
//						Database: pulumi.String("tf_ci_test"),
//						Tables: cynosdb.RollBackClusterRollbackTableTableArray{
//							&cynosdb.RollBackClusterRollbackTableTableArgs{
//								NewTable: pulumi.String("test_bak_111"),
//								OldTable: pulumi.String("test"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RollBackCluster struct {
	pulumi.CustomResourceState

	// The ID of cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Expected rollback Time.
	ExpectTime pulumi.StringPtrOutput `pulumi:"expectTime"`
	// Expected Threshold (Obsolete).
	ExpectTimeThresh pulumi.IntPtrOutput `pulumi:"expectTimeThresh"`
	// Database list.
	RollbackDatabases RollBackClusterRollbackDatabaseArrayOutput `pulumi:"rollbackDatabases"`
	// Rollback ID.
	RollbackId pulumi.IntOutput `pulumi:"rollbackId"`
	// Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
	RollbackMode pulumi.StringPtrOutput `pulumi:"rollbackMode"`
	// Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
	RollbackStrategy pulumi.StringOutput `pulumi:"rollbackStrategy"`
	// Table list.
	RollbackTables RollBackClusterRollbackTableArrayOutput `pulumi:"rollbackTables"`
}

// NewRollBackCluster registers a new resource with the given unique name, arguments, and options.
func NewRollBackCluster(ctx *pulumi.Context,
	name string, args *RollBackClusterArgs, opts ...pulumi.ResourceOption) (*RollBackCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.RollbackId == nil {
		return nil, errors.New("invalid value for required argument 'RollbackId'")
	}
	if args.RollbackStrategy == nil {
		return nil, errors.New("invalid value for required argument 'RollbackStrategy'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RollBackCluster
	err := ctx.RegisterResource("tencentcloud:Cynosdb/rollBackCluster:RollBackCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRollBackCluster gets an existing RollBackCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRollBackCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RollBackClusterState, opts ...pulumi.ResourceOption) (*RollBackCluster, error) {
	var resource RollBackCluster
	err := ctx.ReadResource("tencentcloud:Cynosdb/rollBackCluster:RollBackCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RollBackCluster resources.
type rollBackClusterState struct {
	// The ID of cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Expected rollback Time.
	ExpectTime *string `pulumi:"expectTime"`
	// Expected Threshold (Obsolete).
	ExpectTimeThresh *int `pulumi:"expectTimeThresh"`
	// Database list.
	RollbackDatabases []RollBackClusterRollbackDatabase `pulumi:"rollbackDatabases"`
	// Rollback ID.
	RollbackId *int `pulumi:"rollbackId"`
	// Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
	RollbackMode *string `pulumi:"rollbackMode"`
	// Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
	RollbackStrategy *string `pulumi:"rollbackStrategy"`
	// Table list.
	RollbackTables []RollBackClusterRollbackTable `pulumi:"rollbackTables"`
}

type RollBackClusterState struct {
	// The ID of cluster.
	ClusterId pulumi.StringPtrInput
	// Expected rollback Time.
	ExpectTime pulumi.StringPtrInput
	// Expected Threshold (Obsolete).
	ExpectTimeThresh pulumi.IntPtrInput
	// Database list.
	RollbackDatabases RollBackClusterRollbackDatabaseArrayInput
	// Rollback ID.
	RollbackId pulumi.IntPtrInput
	// Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
	RollbackMode pulumi.StringPtrInput
	// Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
	RollbackStrategy pulumi.StringPtrInput
	// Table list.
	RollbackTables RollBackClusterRollbackTableArrayInput
}

func (RollBackClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*rollBackClusterState)(nil)).Elem()
}

type rollBackClusterArgs struct {
	// The ID of cluster.
	ClusterId string `pulumi:"clusterId"`
	// Expected rollback Time.
	ExpectTime *string `pulumi:"expectTime"`
	// Expected Threshold (Obsolete).
	ExpectTimeThresh *int `pulumi:"expectTimeThresh"`
	// Database list.
	RollbackDatabases []RollBackClusterRollbackDatabase `pulumi:"rollbackDatabases"`
	// Rollback ID.
	RollbackId int `pulumi:"rollbackId"`
	// Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
	RollbackMode *string `pulumi:"rollbackMode"`
	// Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
	RollbackStrategy string `pulumi:"rollbackStrategy"`
	// Table list.
	RollbackTables []RollBackClusterRollbackTable `pulumi:"rollbackTables"`
}

// The set of arguments for constructing a RollBackCluster resource.
type RollBackClusterArgs struct {
	// The ID of cluster.
	ClusterId pulumi.StringInput
	// Expected rollback Time.
	ExpectTime pulumi.StringPtrInput
	// Expected Threshold (Obsolete).
	ExpectTimeThresh pulumi.IntPtrInput
	// Database list.
	RollbackDatabases RollBackClusterRollbackDatabaseArrayInput
	// Rollback ID.
	RollbackId pulumi.IntInput
	// Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
	RollbackMode pulumi.StringPtrInput
	// Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
	RollbackStrategy pulumi.StringInput
	// Table list.
	RollbackTables RollBackClusterRollbackTableArrayInput
}

func (RollBackClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rollBackClusterArgs)(nil)).Elem()
}

type RollBackClusterInput interface {
	pulumi.Input

	ToRollBackClusterOutput() RollBackClusterOutput
	ToRollBackClusterOutputWithContext(ctx context.Context) RollBackClusterOutput
}

func (*RollBackCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**RollBackCluster)(nil)).Elem()
}

func (i *RollBackCluster) ToRollBackClusterOutput() RollBackClusterOutput {
	return i.ToRollBackClusterOutputWithContext(context.Background())
}

func (i *RollBackCluster) ToRollBackClusterOutputWithContext(ctx context.Context) RollBackClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollBackClusterOutput)
}

// RollBackClusterArrayInput is an input type that accepts RollBackClusterArray and RollBackClusterArrayOutput values.
// You can construct a concrete instance of `RollBackClusterArrayInput` via:
//
//	RollBackClusterArray{ RollBackClusterArgs{...} }
type RollBackClusterArrayInput interface {
	pulumi.Input

	ToRollBackClusterArrayOutput() RollBackClusterArrayOutput
	ToRollBackClusterArrayOutputWithContext(context.Context) RollBackClusterArrayOutput
}

type RollBackClusterArray []RollBackClusterInput

func (RollBackClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RollBackCluster)(nil)).Elem()
}

func (i RollBackClusterArray) ToRollBackClusterArrayOutput() RollBackClusterArrayOutput {
	return i.ToRollBackClusterArrayOutputWithContext(context.Background())
}

func (i RollBackClusterArray) ToRollBackClusterArrayOutputWithContext(ctx context.Context) RollBackClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollBackClusterArrayOutput)
}

// RollBackClusterMapInput is an input type that accepts RollBackClusterMap and RollBackClusterMapOutput values.
// You can construct a concrete instance of `RollBackClusterMapInput` via:
//
//	RollBackClusterMap{ "key": RollBackClusterArgs{...} }
type RollBackClusterMapInput interface {
	pulumi.Input

	ToRollBackClusterMapOutput() RollBackClusterMapOutput
	ToRollBackClusterMapOutputWithContext(context.Context) RollBackClusterMapOutput
}

type RollBackClusterMap map[string]RollBackClusterInput

func (RollBackClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RollBackCluster)(nil)).Elem()
}

func (i RollBackClusterMap) ToRollBackClusterMapOutput() RollBackClusterMapOutput {
	return i.ToRollBackClusterMapOutputWithContext(context.Background())
}

func (i RollBackClusterMap) ToRollBackClusterMapOutputWithContext(ctx context.Context) RollBackClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RollBackClusterMapOutput)
}

type RollBackClusterOutput struct{ *pulumi.OutputState }

func (RollBackClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RollBackCluster)(nil)).Elem()
}

func (o RollBackClusterOutput) ToRollBackClusterOutput() RollBackClusterOutput {
	return o
}

func (o RollBackClusterOutput) ToRollBackClusterOutputWithContext(ctx context.Context) RollBackClusterOutput {
	return o
}

// The ID of cluster.
func (o RollBackClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RollBackCluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Expected rollback Time.
func (o RollBackClusterOutput) ExpectTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollBackCluster) pulumi.StringPtrOutput { return v.ExpectTime }).(pulumi.StringPtrOutput)
}

// Expected Threshold (Obsolete).
func (o RollBackClusterOutput) ExpectTimeThresh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RollBackCluster) pulumi.IntPtrOutput { return v.ExpectTimeThresh }).(pulumi.IntPtrOutput)
}

// Database list.
func (o RollBackClusterOutput) RollbackDatabases() RollBackClusterRollbackDatabaseArrayOutput {
	return o.ApplyT(func(v *RollBackCluster) RollBackClusterRollbackDatabaseArrayOutput { return v.RollbackDatabases }).(RollBackClusterRollbackDatabaseArrayOutput)
}

// Rollback ID.
func (o RollBackClusterOutput) RollbackId() pulumi.IntOutput {
	return o.ApplyT(func(v *RollBackCluster) pulumi.IntOutput { return v.RollbackId }).(pulumi.IntOutput)
}

// Rollback mode by time point, full: normal; Db: fast; Table: Extreme speed (default is normal).
func (o RollBackClusterOutput) RollbackMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RollBackCluster) pulumi.StringPtrOutput { return v.RollbackMode }).(pulumi.StringPtrOutput)
}

// Backfile policy timeRollback - Backfile by point in time snapRollback - Backfile by backup file.
func (o RollBackClusterOutput) RollbackStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *RollBackCluster) pulumi.StringOutput { return v.RollbackStrategy }).(pulumi.StringOutput)
}

// Table list.
func (o RollBackClusterOutput) RollbackTables() RollBackClusterRollbackTableArrayOutput {
	return o.ApplyT(func(v *RollBackCluster) RollBackClusterRollbackTableArrayOutput { return v.RollbackTables }).(RollBackClusterRollbackTableArrayOutput)
}

type RollBackClusterArrayOutput struct{ *pulumi.OutputState }

func (RollBackClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RollBackCluster)(nil)).Elem()
}

func (o RollBackClusterArrayOutput) ToRollBackClusterArrayOutput() RollBackClusterArrayOutput {
	return o
}

func (o RollBackClusterArrayOutput) ToRollBackClusterArrayOutputWithContext(ctx context.Context) RollBackClusterArrayOutput {
	return o
}

func (o RollBackClusterArrayOutput) Index(i pulumi.IntInput) RollBackClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RollBackCluster {
		return vs[0].([]*RollBackCluster)[vs[1].(int)]
	}).(RollBackClusterOutput)
}

type RollBackClusterMapOutput struct{ *pulumi.OutputState }

func (RollBackClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RollBackCluster)(nil)).Elem()
}

func (o RollBackClusterMapOutput) ToRollBackClusterMapOutput() RollBackClusterMapOutput {
	return o
}

func (o RollBackClusterMapOutput) ToRollBackClusterMapOutputWithContext(ctx context.Context) RollBackClusterMapOutput {
	return o
}

func (o RollBackClusterMapOutput) MapIndex(k pulumi.StringInput) RollBackClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RollBackCluster {
		return vs[0].(map[string]*RollBackCluster)[vs[1].(string)]
	}).(RollBackClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RollBackClusterInput)(nil)).Elem(), &RollBackCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollBackClusterArrayInput)(nil)).Elem(), RollBackClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RollBackClusterMapInput)(nil)).Elem(), RollBackClusterMap{})
	pulumi.RegisterOutputType(RollBackClusterOutput{})
	pulumi.RegisterOutputType(RollBackClusterArrayOutput{})
	pulumi.RegisterOutputType(RollBackClusterMapOutput{})
}
