// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cynosdb

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cynosdb proxy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cynosdb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cynosdb.NewProxy(ctx, "proxy", &Cynosdb.ProxyArgs{
//				ClusterId:             pulumi.String("cynosdbmysql-bws8h88b"),
//				ConnectionPoolTimeOut: pulumi.Int(30),
//				ConnectionPoolType:    pulumi.String("SessionConnectionPool"),
//				Cpu:                   pulumi.Int(2),
//				Description:           pulumi.String("desc sample"),
//				Mem:                   pulumi.Int(4000),
//				OpenConnectionPool:    pulumi.String("yes"),
//				ProxyZones: cynosdb.ProxyProxyZoneArray{
//					&cynosdb.ProxyProxyZoneArgs{
//						ProxyNodeCount: pulumi.Int(2),
//						ProxyNodeZone:  pulumi.String("ap-guangzhou-7"),
//					},
//				},
//				SecurityGroupIds: pulumi.StringArray{
//					pulumi.String("sg-baxfiao5"),
//				},
//				UniqueSubnetId: pulumi.String("subnet-jdi5xn22"),
//				UniqueVpcId:    pulumi.String("vpc-k1t8ickr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Proxy struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Connection pool threshold: unit (second).
	ConnectionPoolTimeOut pulumi.IntPtrOutput `pulumi:"connectionPoolTimeOut"`
	// Connection pool type: SessionConnectionPool (session level Connection pool).
	ConnectionPoolType pulumi.StringPtrOutput `pulumi:"connectionPoolType"`
	// Number of CPU cores.
	Cpu pulumi.IntOutput `pulumi:"cpu"`
	// Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Memory.
	Mem pulumi.IntOutput `pulumi:"mem"`
	// Whether to enable Connection pool, yes - enable, no - do not enable.
	OpenConnectionPool pulumi.StringPtrOutput `pulumi:"openConnectionPool"`
	// Number of database proxy group nodes. If it is set at the same time as the `proxyZones` field, the `proxyZones` parameter shall prevail.
	ProxyCount pulumi.IntOutput `pulumi:"proxyCount"`
	// Proxy Group Id.
	ProxyGroupId pulumi.StringOutput `pulumi:"proxyGroupId"`
	// Database node information.
	ProxyZones ProxyProxyZoneArrayOutput `pulumi:"proxyZones"`
	// Read only instance list.
	RoInstances ProxyRoInstanceArrayOutput `pulumi:"roInstances"`
	// Security Group ID Array.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// The private network subnet ID is consistent with the cluster subnet ID by default.
	UniqueSubnetId pulumi.StringOutput `pulumi:"uniqueSubnetId"`
	// Private network ID, which is consistent with the cluster private network ID by default.
	UniqueVpcId pulumi.StringOutput `pulumi:"uniqueVpcId"`
}

// NewProxy registers a new resource with the given unique name, arguments, and options.
func NewProxy(ctx *pulumi.Context,
	name string, args *ProxyArgs, opts ...pulumi.ResourceOption) (*Proxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Cpu == nil {
		return nil, errors.New("invalid value for required argument 'Cpu'")
	}
	if args.Mem == nil {
		return nil, errors.New("invalid value for required argument 'Mem'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Proxy
	err := ctx.RegisterResource("tencentcloud:Cynosdb/proxy:Proxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxy gets an existing Proxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyState, opts ...pulumi.ResourceOption) (*Proxy, error) {
	var resource Proxy
	err := ctx.ReadResource("tencentcloud:Cynosdb/proxy:Proxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Proxy resources.
type proxyState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Connection pool threshold: unit (second).
	ConnectionPoolTimeOut *int `pulumi:"connectionPoolTimeOut"`
	// Connection pool type: SessionConnectionPool (session level Connection pool).
	ConnectionPoolType *string `pulumi:"connectionPoolType"`
	// Number of CPU cores.
	Cpu *int `pulumi:"cpu"`
	// Description.
	Description *string `pulumi:"description"`
	// Memory.
	Mem *int `pulumi:"mem"`
	// Whether to enable Connection pool, yes - enable, no - do not enable.
	OpenConnectionPool *string `pulumi:"openConnectionPool"`
	// Number of database proxy group nodes. If it is set at the same time as the `proxyZones` field, the `proxyZones` parameter shall prevail.
	ProxyCount *int `pulumi:"proxyCount"`
	// Proxy Group Id.
	ProxyGroupId *string `pulumi:"proxyGroupId"`
	// Database node information.
	ProxyZones []ProxyProxyZone `pulumi:"proxyZones"`
	// Read only instance list.
	RoInstances []ProxyRoInstance `pulumi:"roInstances"`
	// Security Group ID Array.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID is consistent with the cluster subnet ID by default.
	UniqueSubnetId *string `pulumi:"uniqueSubnetId"`
	// Private network ID, which is consistent with the cluster private network ID by default.
	UniqueVpcId *string `pulumi:"uniqueVpcId"`
}

type ProxyState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Connection pool threshold: unit (second).
	ConnectionPoolTimeOut pulumi.IntPtrInput
	// Connection pool type: SessionConnectionPool (session level Connection pool).
	ConnectionPoolType pulumi.StringPtrInput
	// Number of CPU cores.
	Cpu pulumi.IntPtrInput
	// Description.
	Description pulumi.StringPtrInput
	// Memory.
	Mem pulumi.IntPtrInput
	// Whether to enable Connection pool, yes - enable, no - do not enable.
	OpenConnectionPool pulumi.StringPtrInput
	// Number of database proxy group nodes. If it is set at the same time as the `proxyZones` field, the `proxyZones` parameter shall prevail.
	ProxyCount pulumi.IntPtrInput
	// Proxy Group Id.
	ProxyGroupId pulumi.StringPtrInput
	// Database node information.
	ProxyZones ProxyProxyZoneArrayInput
	// Read only instance list.
	RoInstances ProxyRoInstanceArrayInput
	// Security Group ID Array.
	SecurityGroupIds pulumi.StringArrayInput
	// The private network subnet ID is consistent with the cluster subnet ID by default.
	UniqueSubnetId pulumi.StringPtrInput
	// Private network ID, which is consistent with the cluster private network ID by default.
	UniqueVpcId pulumi.StringPtrInput
}

func (ProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyState)(nil)).Elem()
}

type proxyArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Connection pool threshold: unit (second).
	ConnectionPoolTimeOut *int `pulumi:"connectionPoolTimeOut"`
	// Connection pool type: SessionConnectionPool (session level Connection pool).
	ConnectionPoolType *string `pulumi:"connectionPoolType"`
	// Number of CPU cores.
	Cpu int `pulumi:"cpu"`
	// Description.
	Description *string `pulumi:"description"`
	// Memory.
	Mem int `pulumi:"mem"`
	// Whether to enable Connection pool, yes - enable, no - do not enable.
	OpenConnectionPool *string `pulumi:"openConnectionPool"`
	// Number of database proxy group nodes. If it is set at the same time as the `proxyZones` field, the `proxyZones` parameter shall prevail.
	ProxyCount *int `pulumi:"proxyCount"`
	// Database node information.
	ProxyZones []ProxyProxyZone `pulumi:"proxyZones"`
	// Security Group ID Array.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID is consistent with the cluster subnet ID by default.
	UniqueSubnetId *string `pulumi:"uniqueSubnetId"`
	// Private network ID, which is consistent with the cluster private network ID by default.
	UniqueVpcId *string `pulumi:"uniqueVpcId"`
}

// The set of arguments for constructing a Proxy resource.
type ProxyArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// Connection pool threshold: unit (second).
	ConnectionPoolTimeOut pulumi.IntPtrInput
	// Connection pool type: SessionConnectionPool (session level Connection pool).
	ConnectionPoolType pulumi.StringPtrInput
	// Number of CPU cores.
	Cpu pulumi.IntInput
	// Description.
	Description pulumi.StringPtrInput
	// Memory.
	Mem pulumi.IntInput
	// Whether to enable Connection pool, yes - enable, no - do not enable.
	OpenConnectionPool pulumi.StringPtrInput
	// Number of database proxy group nodes. If it is set at the same time as the `proxyZones` field, the `proxyZones` parameter shall prevail.
	ProxyCount pulumi.IntPtrInput
	// Database node information.
	ProxyZones ProxyProxyZoneArrayInput
	// Security Group ID Array.
	SecurityGroupIds pulumi.StringArrayInput
	// The private network subnet ID is consistent with the cluster subnet ID by default.
	UniqueSubnetId pulumi.StringPtrInput
	// Private network ID, which is consistent with the cluster private network ID by default.
	UniqueVpcId pulumi.StringPtrInput
}

func (ProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyArgs)(nil)).Elem()
}

type ProxyInput interface {
	pulumi.Input

	ToProxyOutput() ProxyOutput
	ToProxyOutputWithContext(ctx context.Context) ProxyOutput
}

func (*Proxy) ElementType() reflect.Type {
	return reflect.TypeOf((**Proxy)(nil)).Elem()
}

func (i *Proxy) ToProxyOutput() ProxyOutput {
	return i.ToProxyOutputWithContext(context.Background())
}

func (i *Proxy) ToProxyOutputWithContext(ctx context.Context) ProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyOutput)
}

// ProxyArrayInput is an input type that accepts ProxyArray and ProxyArrayOutput values.
// You can construct a concrete instance of `ProxyArrayInput` via:
//
//	ProxyArray{ ProxyArgs{...} }
type ProxyArrayInput interface {
	pulumi.Input

	ToProxyArrayOutput() ProxyArrayOutput
	ToProxyArrayOutputWithContext(context.Context) ProxyArrayOutput
}

type ProxyArray []ProxyInput

func (ProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proxy)(nil)).Elem()
}

func (i ProxyArray) ToProxyArrayOutput() ProxyArrayOutput {
	return i.ToProxyArrayOutputWithContext(context.Background())
}

func (i ProxyArray) ToProxyArrayOutputWithContext(ctx context.Context) ProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyArrayOutput)
}

// ProxyMapInput is an input type that accepts ProxyMap and ProxyMapOutput values.
// You can construct a concrete instance of `ProxyMapInput` via:
//
//	ProxyMap{ "key": ProxyArgs{...} }
type ProxyMapInput interface {
	pulumi.Input

	ToProxyMapOutput() ProxyMapOutput
	ToProxyMapOutputWithContext(context.Context) ProxyMapOutput
}

type ProxyMap map[string]ProxyInput

func (ProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proxy)(nil)).Elem()
}

func (i ProxyMap) ToProxyMapOutput() ProxyMapOutput {
	return i.ToProxyMapOutputWithContext(context.Background())
}

func (i ProxyMap) ToProxyMapOutputWithContext(ctx context.Context) ProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyMapOutput)
}

type ProxyOutput struct{ *pulumi.OutputState }

func (ProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Proxy)(nil)).Elem()
}

func (o ProxyOutput) ToProxyOutput() ProxyOutput {
	return o
}

func (o ProxyOutput) ToProxyOutputWithContext(ctx context.Context) ProxyOutput {
	return o
}

// Cluster ID.
func (o ProxyOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Connection pool threshold: unit (second).
func (o ProxyOutput) ConnectionPoolTimeOut() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntPtrOutput { return v.ConnectionPoolTimeOut }).(pulumi.IntPtrOutput)
}

// Connection pool type: SessionConnectionPool (session level Connection pool).
func (o ProxyOutput) ConnectionPoolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringPtrOutput { return v.ConnectionPoolType }).(pulumi.StringPtrOutput)
}

// Number of CPU cores.
func (o ProxyOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntOutput { return v.Cpu }).(pulumi.IntOutput)
}

// Description.
func (o ProxyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Memory.
func (o ProxyOutput) Mem() pulumi.IntOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntOutput { return v.Mem }).(pulumi.IntOutput)
}

// Whether to enable Connection pool, yes - enable, no - do not enable.
func (o ProxyOutput) OpenConnectionPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringPtrOutput { return v.OpenConnectionPool }).(pulumi.StringPtrOutput)
}

// Number of database proxy group nodes. If it is set at the same time as the `proxyZones` field, the `proxyZones` parameter shall prevail.
func (o ProxyOutput) ProxyCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Proxy) pulumi.IntOutput { return v.ProxyCount }).(pulumi.IntOutput)
}

// Proxy Group Id.
func (o ProxyOutput) ProxyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.ProxyGroupId }).(pulumi.StringOutput)
}

// Database node information.
func (o ProxyOutput) ProxyZones() ProxyProxyZoneArrayOutput {
	return o.ApplyT(func(v *Proxy) ProxyProxyZoneArrayOutput { return v.ProxyZones }).(ProxyProxyZoneArrayOutput)
}

// Read only instance list.
func (o ProxyOutput) RoInstances() ProxyRoInstanceArrayOutput {
	return o.ApplyT(func(v *Proxy) ProxyRoInstanceArrayOutput { return v.RoInstances }).(ProxyRoInstanceArrayOutput)
}

// Security Group ID Array.
func (o ProxyOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The private network subnet ID is consistent with the cluster subnet ID by default.
func (o ProxyOutput) UniqueSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.UniqueSubnetId }).(pulumi.StringOutput)
}

// Private network ID, which is consistent with the cluster private network ID by default.
func (o ProxyOutput) UniqueVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Proxy) pulumi.StringOutput { return v.UniqueVpcId }).(pulumi.StringOutput)
}

type ProxyArrayOutput struct{ *pulumi.OutputState }

func (ProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Proxy)(nil)).Elem()
}

func (o ProxyArrayOutput) ToProxyArrayOutput() ProxyArrayOutput {
	return o
}

func (o ProxyArrayOutput) ToProxyArrayOutputWithContext(ctx context.Context) ProxyArrayOutput {
	return o
}

func (o ProxyArrayOutput) Index(i pulumi.IntInput) ProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Proxy {
		return vs[0].([]*Proxy)[vs[1].(int)]
	}).(ProxyOutput)
}

type ProxyMapOutput struct{ *pulumi.OutputState }

func (ProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Proxy)(nil)).Elem()
}

func (o ProxyMapOutput) ToProxyMapOutput() ProxyMapOutput {
	return o
}

func (o ProxyMapOutput) ToProxyMapOutputWithContext(ctx context.Context) ProxyMapOutput {
	return o
}

func (o ProxyMapOutput) MapIndex(k pulumi.StringInput) ProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Proxy {
		return vs[0].(map[string]*Proxy)[vs[1].(string)]
	}).(ProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyInput)(nil)).Elem(), &Proxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyArrayInput)(nil)).Elem(), ProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyMapInput)(nil)).Elem(), ProxyMap{})
	pulumi.RegisterOutputType(ProxyOutput{})
	pulumi.RegisterOutputType(ProxyArrayOutput{})
	pulumi.RegisterOutputType(ProxyMapOutput{})
}
