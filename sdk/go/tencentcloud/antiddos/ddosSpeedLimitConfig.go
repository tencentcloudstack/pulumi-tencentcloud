// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antiddos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a antiddos ddos speed limit config
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Antiddos.NewDdosSpeedLimitConfig(ctx, "ddosSpeedLimitConfig", &Antiddos.DdosSpeedLimitConfigArgs{
//				DdosSpeedLimitConfig: &antiddos.DdosSpeedLimitConfigDdosSpeedLimitConfigArgs{
//					DstPortList:  pulumi.String("8000"),
//					Mode:         pulumi.Int(1),
//					ProtocolList: pulumi.String("ALL"),
//					SpeedValues: antiddos.DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValueArray{
//						&antiddos.DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValueArgs{
//							Type:  pulumi.Int(1),
//							Value: pulumi.Int(1),
//						},
//						&antiddos.DdosSpeedLimitConfigDdosSpeedLimitConfigSpeedValueArgs{
//							Type:  pulumi.Int(2),
//							Value: pulumi.Int(2),
//						},
//					},
//				},
//				InstanceId: pulumi.String("bgp-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// antiddos ddos_speed_limit_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Antiddos/ddosSpeedLimitConfig:DdosSpeedLimitConfig ddos_speed_limit_config ${instanceId}#${configId}s
//
// ```
type DdosSpeedLimitConfig struct {
	pulumi.CustomResourceState

	// Accessing speed limit configuration, the configuration ID cannot be empty when filling in parameters.
	DdosSpeedLimitConfig DdosSpeedLimitConfigDdosSpeedLimitConfigOutput `pulumi:"ddosSpeedLimitConfig"`
	// InstanceId.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewDdosSpeedLimitConfig registers a new resource with the given unique name, arguments, and options.
func NewDdosSpeedLimitConfig(ctx *pulumi.Context,
	name string, args *DdosSpeedLimitConfigArgs, opts ...pulumi.ResourceOption) (*DdosSpeedLimitConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DdosSpeedLimitConfig == nil {
		return nil, errors.New("invalid value for required argument 'DdosSpeedLimitConfig'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DdosSpeedLimitConfig
	err := ctx.RegisterResource("tencentcloud:Antiddos/ddosSpeedLimitConfig:DdosSpeedLimitConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDdosSpeedLimitConfig gets an existing DdosSpeedLimitConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDdosSpeedLimitConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DdosSpeedLimitConfigState, opts ...pulumi.ResourceOption) (*DdosSpeedLimitConfig, error) {
	var resource DdosSpeedLimitConfig
	err := ctx.ReadResource("tencentcloud:Antiddos/ddosSpeedLimitConfig:DdosSpeedLimitConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DdosSpeedLimitConfig resources.
type ddosSpeedLimitConfigState struct {
	// Accessing speed limit configuration, the configuration ID cannot be empty when filling in parameters.
	DdosSpeedLimitConfig *DdosSpeedLimitConfigDdosSpeedLimitConfig `pulumi:"ddosSpeedLimitConfig"`
	// InstanceId.
	InstanceId *string `pulumi:"instanceId"`
}

type DdosSpeedLimitConfigState struct {
	// Accessing speed limit configuration, the configuration ID cannot be empty when filling in parameters.
	DdosSpeedLimitConfig DdosSpeedLimitConfigDdosSpeedLimitConfigPtrInput
	// InstanceId.
	InstanceId pulumi.StringPtrInput
}

func (DdosSpeedLimitConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*ddosSpeedLimitConfigState)(nil)).Elem()
}

type ddosSpeedLimitConfigArgs struct {
	// Accessing speed limit configuration, the configuration ID cannot be empty when filling in parameters.
	DdosSpeedLimitConfig DdosSpeedLimitConfigDdosSpeedLimitConfig `pulumi:"ddosSpeedLimitConfig"`
	// InstanceId.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a DdosSpeedLimitConfig resource.
type DdosSpeedLimitConfigArgs struct {
	// Accessing speed limit configuration, the configuration ID cannot be empty when filling in parameters.
	DdosSpeedLimitConfig DdosSpeedLimitConfigDdosSpeedLimitConfigInput
	// InstanceId.
	InstanceId pulumi.StringInput
}

func (DdosSpeedLimitConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ddosSpeedLimitConfigArgs)(nil)).Elem()
}

type DdosSpeedLimitConfigInput interface {
	pulumi.Input

	ToDdosSpeedLimitConfigOutput() DdosSpeedLimitConfigOutput
	ToDdosSpeedLimitConfigOutputWithContext(ctx context.Context) DdosSpeedLimitConfigOutput
}

func (*DdosSpeedLimitConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosSpeedLimitConfig)(nil)).Elem()
}

func (i *DdosSpeedLimitConfig) ToDdosSpeedLimitConfigOutput() DdosSpeedLimitConfigOutput {
	return i.ToDdosSpeedLimitConfigOutputWithContext(context.Background())
}

func (i *DdosSpeedLimitConfig) ToDdosSpeedLimitConfigOutputWithContext(ctx context.Context) DdosSpeedLimitConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosSpeedLimitConfigOutput)
}

// DdosSpeedLimitConfigArrayInput is an input type that accepts DdosSpeedLimitConfigArray and DdosSpeedLimitConfigArrayOutput values.
// You can construct a concrete instance of `DdosSpeedLimitConfigArrayInput` via:
//
//	DdosSpeedLimitConfigArray{ DdosSpeedLimitConfigArgs{...} }
type DdosSpeedLimitConfigArrayInput interface {
	pulumi.Input

	ToDdosSpeedLimitConfigArrayOutput() DdosSpeedLimitConfigArrayOutput
	ToDdosSpeedLimitConfigArrayOutputWithContext(context.Context) DdosSpeedLimitConfigArrayOutput
}

type DdosSpeedLimitConfigArray []DdosSpeedLimitConfigInput

func (DdosSpeedLimitConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdosSpeedLimitConfig)(nil)).Elem()
}

func (i DdosSpeedLimitConfigArray) ToDdosSpeedLimitConfigArrayOutput() DdosSpeedLimitConfigArrayOutput {
	return i.ToDdosSpeedLimitConfigArrayOutputWithContext(context.Background())
}

func (i DdosSpeedLimitConfigArray) ToDdosSpeedLimitConfigArrayOutputWithContext(ctx context.Context) DdosSpeedLimitConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosSpeedLimitConfigArrayOutput)
}

// DdosSpeedLimitConfigMapInput is an input type that accepts DdosSpeedLimitConfigMap and DdosSpeedLimitConfigMapOutput values.
// You can construct a concrete instance of `DdosSpeedLimitConfigMapInput` via:
//
//	DdosSpeedLimitConfigMap{ "key": DdosSpeedLimitConfigArgs{...} }
type DdosSpeedLimitConfigMapInput interface {
	pulumi.Input

	ToDdosSpeedLimitConfigMapOutput() DdosSpeedLimitConfigMapOutput
	ToDdosSpeedLimitConfigMapOutputWithContext(context.Context) DdosSpeedLimitConfigMapOutput
}

type DdosSpeedLimitConfigMap map[string]DdosSpeedLimitConfigInput

func (DdosSpeedLimitConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdosSpeedLimitConfig)(nil)).Elem()
}

func (i DdosSpeedLimitConfigMap) ToDdosSpeedLimitConfigMapOutput() DdosSpeedLimitConfigMapOutput {
	return i.ToDdosSpeedLimitConfigMapOutputWithContext(context.Background())
}

func (i DdosSpeedLimitConfigMap) ToDdosSpeedLimitConfigMapOutputWithContext(ctx context.Context) DdosSpeedLimitConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosSpeedLimitConfigMapOutput)
}

type DdosSpeedLimitConfigOutput struct{ *pulumi.OutputState }

func (DdosSpeedLimitConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosSpeedLimitConfig)(nil)).Elem()
}

func (o DdosSpeedLimitConfigOutput) ToDdosSpeedLimitConfigOutput() DdosSpeedLimitConfigOutput {
	return o
}

func (o DdosSpeedLimitConfigOutput) ToDdosSpeedLimitConfigOutputWithContext(ctx context.Context) DdosSpeedLimitConfigOutput {
	return o
}

// Accessing speed limit configuration, the configuration ID cannot be empty when filling in parameters.
func (o DdosSpeedLimitConfigOutput) DdosSpeedLimitConfig() DdosSpeedLimitConfigDdosSpeedLimitConfigOutput {
	return o.ApplyT(func(v *DdosSpeedLimitConfig) DdosSpeedLimitConfigDdosSpeedLimitConfigOutput {
		return v.DdosSpeedLimitConfig
	}).(DdosSpeedLimitConfigDdosSpeedLimitConfigOutput)
}

// InstanceId.
func (o DdosSpeedLimitConfigOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosSpeedLimitConfig) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type DdosSpeedLimitConfigArrayOutput struct{ *pulumi.OutputState }

func (DdosSpeedLimitConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdosSpeedLimitConfig)(nil)).Elem()
}

func (o DdosSpeedLimitConfigArrayOutput) ToDdosSpeedLimitConfigArrayOutput() DdosSpeedLimitConfigArrayOutput {
	return o
}

func (o DdosSpeedLimitConfigArrayOutput) ToDdosSpeedLimitConfigArrayOutputWithContext(ctx context.Context) DdosSpeedLimitConfigArrayOutput {
	return o
}

func (o DdosSpeedLimitConfigArrayOutput) Index(i pulumi.IntInput) DdosSpeedLimitConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DdosSpeedLimitConfig {
		return vs[0].([]*DdosSpeedLimitConfig)[vs[1].(int)]
	}).(DdosSpeedLimitConfigOutput)
}

type DdosSpeedLimitConfigMapOutput struct{ *pulumi.OutputState }

func (DdosSpeedLimitConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdosSpeedLimitConfig)(nil)).Elem()
}

func (o DdosSpeedLimitConfigMapOutput) ToDdosSpeedLimitConfigMapOutput() DdosSpeedLimitConfigMapOutput {
	return o
}

func (o DdosSpeedLimitConfigMapOutput) ToDdosSpeedLimitConfigMapOutputWithContext(ctx context.Context) DdosSpeedLimitConfigMapOutput {
	return o
}

func (o DdosSpeedLimitConfigMapOutput) MapIndex(k pulumi.StringInput) DdosSpeedLimitConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DdosSpeedLimitConfig {
		return vs[0].(map[string]*DdosSpeedLimitConfig)[vs[1].(string)]
	}).(DdosSpeedLimitConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DdosSpeedLimitConfigInput)(nil)).Elem(), &DdosSpeedLimitConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosSpeedLimitConfigArrayInput)(nil)).Elem(), DdosSpeedLimitConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosSpeedLimitConfigMapInput)(nil)).Elem(), DdosSpeedLimitConfigMap{})
	pulumi.RegisterOutputType(DdosSpeedLimitConfigOutput{})
	pulumi.RegisterOutputType(DdosSpeedLimitConfigArrayOutput{})
	pulumi.RegisterOutputType(DdosSpeedLimitConfigMapOutput{})
}
