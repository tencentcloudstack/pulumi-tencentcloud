// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antiddos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a antiddos ccPrecisionPolicy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Antiddos.NewCcPrecisionPolicy(ctx, "ccPrecisionPolicy", &Antiddos.CcPrecisionPolicyArgs{
//				Domain:       pulumi.String("t.baidu.com"),
//				InstanceId:   pulumi.String("bgpip-0000078h"),
//				Ip:           pulumi.String("212.64.62.191"),
//				PolicyAction: pulumi.String("drop"),
//				PolicyLists: antiddos.CcPrecisionPolicyPolicyListArray{
//					&antiddos.CcPrecisionPolicyPolicyListArgs{
//						FieldName:     pulumi.String("cgi"),
//						FieldType:     pulumi.String("value"),
//						Value:         pulumi.String("a.com"),
//						ValueOperator: pulumi.String("equal"),
//					},
//					&antiddos.CcPrecisionPolicyPolicyListArgs{
//						FieldName:     pulumi.String("ua"),
//						FieldType:     pulumi.String("value"),
//						Value:         pulumi.String("test"),
//						ValueOperator: pulumi.String("equal"),
//					},
//				},
//				Protocol: pulumi.String("http"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// antiddos cc_precision_policy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy cc_precision_policy ${instanceId}#${policyId}#${instanceIp}#${domain}#${protocol}
//
// ```
type CcPrecisionPolicy struct {
	pulumi.CustomResourceState

	// domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Instance Id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Ip value.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// policy type, alg or drop.
	PolicyAction pulumi.StringOutput `pulumi:"policyAction"`
	// policy list.
	PolicyLists CcPrecisionPolicyPolicyListArrayOutput `pulumi:"policyLists"`
	// protocol http or https.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
}

// NewCcPrecisionPolicy registers a new resource with the given unique name, arguments, and options.
func NewCcPrecisionPolicy(ctx *pulumi.Context,
	name string, args *CcPrecisionPolicyArgs, opts ...pulumi.ResourceOption) (*CcPrecisionPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.PolicyAction == nil {
		return nil, errors.New("invalid value for required argument 'PolicyAction'")
	}
	if args.PolicyLists == nil {
		return nil, errors.New("invalid value for required argument 'PolicyLists'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CcPrecisionPolicy
	err := ctx.RegisterResource("tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcPrecisionPolicy gets an existing CcPrecisionPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcPrecisionPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcPrecisionPolicyState, opts ...pulumi.ResourceOption) (*CcPrecisionPolicy, error) {
	var resource CcPrecisionPolicy
	err := ctx.ReadResource("tencentcloud:Antiddos/ccPrecisionPolicy:CcPrecisionPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CcPrecisionPolicy resources.
type ccPrecisionPolicyState struct {
	// domain.
	Domain *string `pulumi:"domain"`
	// Instance Id.
	InstanceId *string `pulumi:"instanceId"`
	// Ip value.
	Ip *string `pulumi:"ip"`
	// policy type, alg or drop.
	PolicyAction *string `pulumi:"policyAction"`
	// policy list.
	PolicyLists []CcPrecisionPolicyPolicyList `pulumi:"policyLists"`
	// protocol http or https.
	Protocol *string `pulumi:"protocol"`
}

type CcPrecisionPolicyState struct {
	// domain.
	Domain pulumi.StringPtrInput
	// Instance Id.
	InstanceId pulumi.StringPtrInput
	// Ip value.
	Ip pulumi.StringPtrInput
	// policy type, alg or drop.
	PolicyAction pulumi.StringPtrInput
	// policy list.
	PolicyLists CcPrecisionPolicyPolicyListArrayInput
	// protocol http or https.
	Protocol pulumi.StringPtrInput
}

func (CcPrecisionPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccPrecisionPolicyState)(nil)).Elem()
}

type ccPrecisionPolicyArgs struct {
	// domain.
	Domain string `pulumi:"domain"`
	// Instance Id.
	InstanceId string `pulumi:"instanceId"`
	// Ip value.
	Ip string `pulumi:"ip"`
	// policy type, alg or drop.
	PolicyAction string `pulumi:"policyAction"`
	// policy list.
	PolicyLists []CcPrecisionPolicyPolicyList `pulumi:"policyLists"`
	// protocol http or https.
	Protocol string `pulumi:"protocol"`
}

// The set of arguments for constructing a CcPrecisionPolicy resource.
type CcPrecisionPolicyArgs struct {
	// domain.
	Domain pulumi.StringInput
	// Instance Id.
	InstanceId pulumi.StringInput
	// Ip value.
	Ip pulumi.StringInput
	// policy type, alg or drop.
	PolicyAction pulumi.StringInput
	// policy list.
	PolicyLists CcPrecisionPolicyPolicyListArrayInput
	// protocol http or https.
	Protocol pulumi.StringInput
}

func (CcPrecisionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccPrecisionPolicyArgs)(nil)).Elem()
}

type CcPrecisionPolicyInput interface {
	pulumi.Input

	ToCcPrecisionPolicyOutput() CcPrecisionPolicyOutput
	ToCcPrecisionPolicyOutputWithContext(ctx context.Context) CcPrecisionPolicyOutput
}

func (*CcPrecisionPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CcPrecisionPolicy)(nil)).Elem()
}

func (i *CcPrecisionPolicy) ToCcPrecisionPolicyOutput() CcPrecisionPolicyOutput {
	return i.ToCcPrecisionPolicyOutputWithContext(context.Background())
}

func (i *CcPrecisionPolicy) ToCcPrecisionPolicyOutputWithContext(ctx context.Context) CcPrecisionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPrecisionPolicyOutput)
}

// CcPrecisionPolicyArrayInput is an input type that accepts CcPrecisionPolicyArray and CcPrecisionPolicyArrayOutput values.
// You can construct a concrete instance of `CcPrecisionPolicyArrayInput` via:
//
//	CcPrecisionPolicyArray{ CcPrecisionPolicyArgs{...} }
type CcPrecisionPolicyArrayInput interface {
	pulumi.Input

	ToCcPrecisionPolicyArrayOutput() CcPrecisionPolicyArrayOutput
	ToCcPrecisionPolicyArrayOutputWithContext(context.Context) CcPrecisionPolicyArrayOutput
}

type CcPrecisionPolicyArray []CcPrecisionPolicyInput

func (CcPrecisionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcPrecisionPolicy)(nil)).Elem()
}

func (i CcPrecisionPolicyArray) ToCcPrecisionPolicyArrayOutput() CcPrecisionPolicyArrayOutput {
	return i.ToCcPrecisionPolicyArrayOutputWithContext(context.Background())
}

func (i CcPrecisionPolicyArray) ToCcPrecisionPolicyArrayOutputWithContext(ctx context.Context) CcPrecisionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPrecisionPolicyArrayOutput)
}

// CcPrecisionPolicyMapInput is an input type that accepts CcPrecisionPolicyMap and CcPrecisionPolicyMapOutput values.
// You can construct a concrete instance of `CcPrecisionPolicyMapInput` via:
//
//	CcPrecisionPolicyMap{ "key": CcPrecisionPolicyArgs{...} }
type CcPrecisionPolicyMapInput interface {
	pulumi.Input

	ToCcPrecisionPolicyMapOutput() CcPrecisionPolicyMapOutput
	ToCcPrecisionPolicyMapOutputWithContext(context.Context) CcPrecisionPolicyMapOutput
}

type CcPrecisionPolicyMap map[string]CcPrecisionPolicyInput

func (CcPrecisionPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcPrecisionPolicy)(nil)).Elem()
}

func (i CcPrecisionPolicyMap) ToCcPrecisionPolicyMapOutput() CcPrecisionPolicyMapOutput {
	return i.ToCcPrecisionPolicyMapOutputWithContext(context.Background())
}

func (i CcPrecisionPolicyMap) ToCcPrecisionPolicyMapOutputWithContext(ctx context.Context) CcPrecisionPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPrecisionPolicyMapOutput)
}

type CcPrecisionPolicyOutput struct{ *pulumi.OutputState }

func (CcPrecisionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcPrecisionPolicy)(nil)).Elem()
}

func (o CcPrecisionPolicyOutput) ToCcPrecisionPolicyOutput() CcPrecisionPolicyOutput {
	return o
}

func (o CcPrecisionPolicyOutput) ToCcPrecisionPolicyOutputWithContext(ctx context.Context) CcPrecisionPolicyOutput {
	return o
}

// domain.
func (o CcPrecisionPolicyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CcPrecisionPolicy) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Instance Id.
func (o CcPrecisionPolicyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CcPrecisionPolicy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Ip value.
func (o CcPrecisionPolicyOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *CcPrecisionPolicy) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// policy type, alg or drop.
func (o CcPrecisionPolicyOutput) PolicyAction() pulumi.StringOutput {
	return o.ApplyT(func(v *CcPrecisionPolicy) pulumi.StringOutput { return v.PolicyAction }).(pulumi.StringOutput)
}

// policy list.
func (o CcPrecisionPolicyOutput) PolicyLists() CcPrecisionPolicyPolicyListArrayOutput {
	return o.ApplyT(func(v *CcPrecisionPolicy) CcPrecisionPolicyPolicyListArrayOutput { return v.PolicyLists }).(CcPrecisionPolicyPolicyListArrayOutput)
}

// protocol http or https.
func (o CcPrecisionPolicyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *CcPrecisionPolicy) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

type CcPrecisionPolicyArrayOutput struct{ *pulumi.OutputState }

func (CcPrecisionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcPrecisionPolicy)(nil)).Elem()
}

func (o CcPrecisionPolicyArrayOutput) ToCcPrecisionPolicyArrayOutput() CcPrecisionPolicyArrayOutput {
	return o
}

func (o CcPrecisionPolicyArrayOutput) ToCcPrecisionPolicyArrayOutputWithContext(ctx context.Context) CcPrecisionPolicyArrayOutput {
	return o
}

func (o CcPrecisionPolicyArrayOutput) Index(i pulumi.IntInput) CcPrecisionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CcPrecisionPolicy {
		return vs[0].([]*CcPrecisionPolicy)[vs[1].(int)]
	}).(CcPrecisionPolicyOutput)
}

type CcPrecisionPolicyMapOutput struct{ *pulumi.OutputState }

func (CcPrecisionPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcPrecisionPolicy)(nil)).Elem()
}

func (o CcPrecisionPolicyMapOutput) ToCcPrecisionPolicyMapOutput() CcPrecisionPolicyMapOutput {
	return o
}

func (o CcPrecisionPolicyMapOutput) ToCcPrecisionPolicyMapOutputWithContext(ctx context.Context) CcPrecisionPolicyMapOutput {
	return o
}

func (o CcPrecisionPolicyMapOutput) MapIndex(k pulumi.StringInput) CcPrecisionPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CcPrecisionPolicy {
		return vs[0].(map[string]*CcPrecisionPolicy)[vs[1].(string)]
	}).(CcPrecisionPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcPrecisionPolicyInput)(nil)).Elem(), &CcPrecisionPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPrecisionPolicyArrayInput)(nil)).Elem(), CcPrecisionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPrecisionPolicyMapInput)(nil)).Elem(), CcPrecisionPolicyMap{})
	pulumi.RegisterOutputType(CcPrecisionPolicyOutput{})
	pulumi.RegisterOutputType(CcPrecisionPolicyArrayOutput{})
	pulumi.RegisterOutputType(CcPrecisionPolicyMapOutput{})
}
