// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antiddos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a antiddos ddos black white ip
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Antiddos.NewDdosBlackWhiteIp(ctx, "ddosBlackWhiteIp", &Antiddos.DdosBlackWhiteIpArgs{
//				InstanceId: pulumi.String("bgp-xxxxxx"),
//				Ip:         pulumi.String("1.2.3.5"),
//				Mask:       pulumi.Int(0),
//				Type:       pulumi.String("black"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// antiddos ddos_black_white_ip can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Antiddos/ddosBlackWhiteIp:DdosBlackWhiteIp ddos_black_white_ip ${instanceId}#${ip}
//
// ```
type DdosBlackWhiteIp struct {
	pulumi.CustomResourceState

	// instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// ip list.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// ip mask.
	Mask pulumi.IntOutput `pulumi:"mask"`
	// ip type, black: black ip list, white: white ip list.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDdosBlackWhiteIp registers a new resource with the given unique name, arguments, and options.
func NewDdosBlackWhiteIp(ctx *pulumi.Context,
	name string, args *DdosBlackWhiteIpArgs, opts ...pulumi.ResourceOption) (*DdosBlackWhiteIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Mask == nil {
		return nil, errors.New("invalid value for required argument 'Mask'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DdosBlackWhiteIp
	err := ctx.RegisterResource("tencentcloud:Antiddos/ddosBlackWhiteIp:DdosBlackWhiteIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDdosBlackWhiteIp gets an existing DdosBlackWhiteIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDdosBlackWhiteIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DdosBlackWhiteIpState, opts ...pulumi.ResourceOption) (*DdosBlackWhiteIp, error) {
	var resource DdosBlackWhiteIp
	err := ctx.ReadResource("tencentcloud:Antiddos/ddosBlackWhiteIp:DdosBlackWhiteIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DdosBlackWhiteIp resources.
type ddosBlackWhiteIpState struct {
	// instance id.
	InstanceId *string `pulumi:"instanceId"`
	// ip list.
	Ip *string `pulumi:"ip"`
	// ip mask.
	Mask *int `pulumi:"mask"`
	// ip type, black: black ip list, white: white ip list.
	Type *string `pulumi:"type"`
}

type DdosBlackWhiteIpState struct {
	// instance id.
	InstanceId pulumi.StringPtrInput
	// ip list.
	Ip pulumi.StringPtrInput
	// ip mask.
	Mask pulumi.IntPtrInput
	// ip type, black: black ip list, white: white ip list.
	Type pulumi.StringPtrInput
}

func (DdosBlackWhiteIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ddosBlackWhiteIpState)(nil)).Elem()
}

type ddosBlackWhiteIpArgs struct {
	// instance id.
	InstanceId string `pulumi:"instanceId"`
	// ip list.
	Ip string `pulumi:"ip"`
	// ip mask.
	Mask int `pulumi:"mask"`
	// ip type, black: black ip list, white: white ip list.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a DdosBlackWhiteIp resource.
type DdosBlackWhiteIpArgs struct {
	// instance id.
	InstanceId pulumi.StringInput
	// ip list.
	Ip pulumi.StringInput
	// ip mask.
	Mask pulumi.IntInput
	// ip type, black: black ip list, white: white ip list.
	Type pulumi.StringInput
}

func (DdosBlackWhiteIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ddosBlackWhiteIpArgs)(nil)).Elem()
}

type DdosBlackWhiteIpInput interface {
	pulumi.Input

	ToDdosBlackWhiteIpOutput() DdosBlackWhiteIpOutput
	ToDdosBlackWhiteIpOutputWithContext(ctx context.Context) DdosBlackWhiteIpOutput
}

func (*DdosBlackWhiteIp) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosBlackWhiteIp)(nil)).Elem()
}

func (i *DdosBlackWhiteIp) ToDdosBlackWhiteIpOutput() DdosBlackWhiteIpOutput {
	return i.ToDdosBlackWhiteIpOutputWithContext(context.Background())
}

func (i *DdosBlackWhiteIp) ToDdosBlackWhiteIpOutputWithContext(ctx context.Context) DdosBlackWhiteIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosBlackWhiteIpOutput)
}

// DdosBlackWhiteIpArrayInput is an input type that accepts DdosBlackWhiteIpArray and DdosBlackWhiteIpArrayOutput values.
// You can construct a concrete instance of `DdosBlackWhiteIpArrayInput` via:
//
//	DdosBlackWhiteIpArray{ DdosBlackWhiteIpArgs{...} }
type DdosBlackWhiteIpArrayInput interface {
	pulumi.Input

	ToDdosBlackWhiteIpArrayOutput() DdosBlackWhiteIpArrayOutput
	ToDdosBlackWhiteIpArrayOutputWithContext(context.Context) DdosBlackWhiteIpArrayOutput
}

type DdosBlackWhiteIpArray []DdosBlackWhiteIpInput

func (DdosBlackWhiteIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdosBlackWhiteIp)(nil)).Elem()
}

func (i DdosBlackWhiteIpArray) ToDdosBlackWhiteIpArrayOutput() DdosBlackWhiteIpArrayOutput {
	return i.ToDdosBlackWhiteIpArrayOutputWithContext(context.Background())
}

func (i DdosBlackWhiteIpArray) ToDdosBlackWhiteIpArrayOutputWithContext(ctx context.Context) DdosBlackWhiteIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosBlackWhiteIpArrayOutput)
}

// DdosBlackWhiteIpMapInput is an input type that accepts DdosBlackWhiteIpMap and DdosBlackWhiteIpMapOutput values.
// You can construct a concrete instance of `DdosBlackWhiteIpMapInput` via:
//
//	DdosBlackWhiteIpMap{ "key": DdosBlackWhiteIpArgs{...} }
type DdosBlackWhiteIpMapInput interface {
	pulumi.Input

	ToDdosBlackWhiteIpMapOutput() DdosBlackWhiteIpMapOutput
	ToDdosBlackWhiteIpMapOutputWithContext(context.Context) DdosBlackWhiteIpMapOutput
}

type DdosBlackWhiteIpMap map[string]DdosBlackWhiteIpInput

func (DdosBlackWhiteIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdosBlackWhiteIp)(nil)).Elem()
}

func (i DdosBlackWhiteIpMap) ToDdosBlackWhiteIpMapOutput() DdosBlackWhiteIpMapOutput {
	return i.ToDdosBlackWhiteIpMapOutputWithContext(context.Background())
}

func (i DdosBlackWhiteIpMap) ToDdosBlackWhiteIpMapOutputWithContext(ctx context.Context) DdosBlackWhiteIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosBlackWhiteIpMapOutput)
}

type DdosBlackWhiteIpOutput struct{ *pulumi.OutputState }

func (DdosBlackWhiteIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosBlackWhiteIp)(nil)).Elem()
}

func (o DdosBlackWhiteIpOutput) ToDdosBlackWhiteIpOutput() DdosBlackWhiteIpOutput {
	return o
}

func (o DdosBlackWhiteIpOutput) ToDdosBlackWhiteIpOutputWithContext(ctx context.Context) DdosBlackWhiteIpOutput {
	return o
}

// instance id.
func (o DdosBlackWhiteIpOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosBlackWhiteIp) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// ip list.
func (o DdosBlackWhiteIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosBlackWhiteIp) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// ip mask.
func (o DdosBlackWhiteIpOutput) Mask() pulumi.IntOutput {
	return o.ApplyT(func(v *DdosBlackWhiteIp) pulumi.IntOutput { return v.Mask }).(pulumi.IntOutput)
}

// ip type, black: black ip list, white: white ip list.
func (o DdosBlackWhiteIpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DdosBlackWhiteIp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type DdosBlackWhiteIpArrayOutput struct{ *pulumi.OutputState }

func (DdosBlackWhiteIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DdosBlackWhiteIp)(nil)).Elem()
}

func (o DdosBlackWhiteIpArrayOutput) ToDdosBlackWhiteIpArrayOutput() DdosBlackWhiteIpArrayOutput {
	return o
}

func (o DdosBlackWhiteIpArrayOutput) ToDdosBlackWhiteIpArrayOutputWithContext(ctx context.Context) DdosBlackWhiteIpArrayOutput {
	return o
}

func (o DdosBlackWhiteIpArrayOutput) Index(i pulumi.IntInput) DdosBlackWhiteIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DdosBlackWhiteIp {
		return vs[0].([]*DdosBlackWhiteIp)[vs[1].(int)]
	}).(DdosBlackWhiteIpOutput)
}

type DdosBlackWhiteIpMapOutput struct{ *pulumi.OutputState }

func (DdosBlackWhiteIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DdosBlackWhiteIp)(nil)).Elem()
}

func (o DdosBlackWhiteIpMapOutput) ToDdosBlackWhiteIpMapOutput() DdosBlackWhiteIpMapOutput {
	return o
}

func (o DdosBlackWhiteIpMapOutput) ToDdosBlackWhiteIpMapOutputWithContext(ctx context.Context) DdosBlackWhiteIpMapOutput {
	return o
}

func (o DdosBlackWhiteIpMapOutput) MapIndex(k pulumi.StringInput) DdosBlackWhiteIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DdosBlackWhiteIp {
		return vs[0].(map[string]*DdosBlackWhiteIp)[vs[1].(string)]
	}).(DdosBlackWhiteIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DdosBlackWhiteIpInput)(nil)).Elem(), &DdosBlackWhiteIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosBlackWhiteIpArrayInput)(nil)).Elem(), DdosBlackWhiteIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosBlackWhiteIpMapInput)(nil)).Elem(), DdosBlackWhiteIpMap{})
	pulumi.RegisterOutputType(DdosBlackWhiteIpOutput{})
	pulumi.RegisterOutputType(DdosBlackWhiteIpArrayOutput{})
	pulumi.RegisterOutputType(DdosBlackWhiteIpMapOutput{})
}
