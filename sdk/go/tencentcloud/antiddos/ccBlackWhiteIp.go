// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package antiddos

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a antiddos cc black white ip
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Antiddos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Antiddos.NewCcBlackWhiteIp(ctx, "ccBlackWhiteIp", &Antiddos.CcBlackWhiteIpArgs{
//				BlackWhiteIp: &antiddos.CcBlackWhiteIpBlackWhiteIpArgs{
//					Ip:   pulumi.String("1.2.3.5"),
//					Mask: pulumi.Int(0),
//				},
//				Domain:     pulumi.String("t.baidu.com"),
//				InstanceId: pulumi.String("bgpip-xxxxxx"),
//				Ip:         pulumi.String("xxx.xxx.xxx.xxx"),
//				Protocol:   pulumi.String("http"),
//				Type:       pulumi.String("black"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// antiddos cc_black_white_ip can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp cc_black_white_ip ${instanceId}#${policyId}#${instanceIp}#${domain}#${protocol}
//
// ```
type CcBlackWhiteIp struct {
	pulumi.CustomResourceState

	// Black white ip.
	BlackWhiteIp CcBlackWhiteIpBlackWhiteIpOutput `pulumi:"blackWhiteIp"`
	// domain.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// instance id.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// ip address.
	Ip pulumi.StringOutput `pulumi:"ip"`
	// protocol.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// IP type, value [black(blacklist IP), white(whitelist IP)].
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCcBlackWhiteIp registers a new resource with the given unique name, arguments, and options.
func NewCcBlackWhiteIp(ctx *pulumi.Context,
	name string, args *CcBlackWhiteIpArgs, opts ...pulumi.ResourceOption) (*CcBlackWhiteIp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BlackWhiteIp == nil {
		return nil, errors.New("invalid value for required argument 'BlackWhiteIp'")
	}
	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CcBlackWhiteIp
	err := ctx.RegisterResource("tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcBlackWhiteIp gets an existing CcBlackWhiteIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcBlackWhiteIp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcBlackWhiteIpState, opts ...pulumi.ResourceOption) (*CcBlackWhiteIp, error) {
	var resource CcBlackWhiteIp
	err := ctx.ReadResource("tencentcloud:Antiddos/ccBlackWhiteIp:CcBlackWhiteIp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CcBlackWhiteIp resources.
type ccBlackWhiteIpState struct {
	// Black white ip.
	BlackWhiteIp *CcBlackWhiteIpBlackWhiteIp `pulumi:"blackWhiteIp"`
	// domain.
	Domain *string `pulumi:"domain"`
	// instance id.
	InstanceId *string `pulumi:"instanceId"`
	// ip address.
	Ip *string `pulumi:"ip"`
	// protocol.
	Protocol *string `pulumi:"protocol"`
	// IP type, value [black(blacklist IP), white(whitelist IP)].
	Type *string `pulumi:"type"`
}

type CcBlackWhiteIpState struct {
	// Black white ip.
	BlackWhiteIp CcBlackWhiteIpBlackWhiteIpPtrInput
	// domain.
	Domain pulumi.StringPtrInput
	// instance id.
	InstanceId pulumi.StringPtrInput
	// ip address.
	Ip pulumi.StringPtrInput
	// protocol.
	Protocol pulumi.StringPtrInput
	// IP type, value [black(blacklist IP), white(whitelist IP)].
	Type pulumi.StringPtrInput
}

func (CcBlackWhiteIpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccBlackWhiteIpState)(nil)).Elem()
}

type ccBlackWhiteIpArgs struct {
	// Black white ip.
	BlackWhiteIp CcBlackWhiteIpBlackWhiteIp `pulumi:"blackWhiteIp"`
	// domain.
	Domain string `pulumi:"domain"`
	// instance id.
	InstanceId string `pulumi:"instanceId"`
	// ip address.
	Ip string `pulumi:"ip"`
	// protocol.
	Protocol string `pulumi:"protocol"`
	// IP type, value [black(blacklist IP), white(whitelist IP)].
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a CcBlackWhiteIp resource.
type CcBlackWhiteIpArgs struct {
	// Black white ip.
	BlackWhiteIp CcBlackWhiteIpBlackWhiteIpInput
	// domain.
	Domain pulumi.StringInput
	// instance id.
	InstanceId pulumi.StringInput
	// ip address.
	Ip pulumi.StringInput
	// protocol.
	Protocol pulumi.StringInput
	// IP type, value [black(blacklist IP), white(whitelist IP)].
	Type pulumi.StringInput
}

func (CcBlackWhiteIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccBlackWhiteIpArgs)(nil)).Elem()
}

type CcBlackWhiteIpInput interface {
	pulumi.Input

	ToCcBlackWhiteIpOutput() CcBlackWhiteIpOutput
	ToCcBlackWhiteIpOutputWithContext(ctx context.Context) CcBlackWhiteIpOutput
}

func (*CcBlackWhiteIp) ElementType() reflect.Type {
	return reflect.TypeOf((**CcBlackWhiteIp)(nil)).Elem()
}

func (i *CcBlackWhiteIp) ToCcBlackWhiteIpOutput() CcBlackWhiteIpOutput {
	return i.ToCcBlackWhiteIpOutputWithContext(context.Background())
}

func (i *CcBlackWhiteIp) ToCcBlackWhiteIpOutputWithContext(ctx context.Context) CcBlackWhiteIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcBlackWhiteIpOutput)
}

// CcBlackWhiteIpArrayInput is an input type that accepts CcBlackWhiteIpArray and CcBlackWhiteIpArrayOutput values.
// You can construct a concrete instance of `CcBlackWhiteIpArrayInput` via:
//
//	CcBlackWhiteIpArray{ CcBlackWhiteIpArgs{...} }
type CcBlackWhiteIpArrayInput interface {
	pulumi.Input

	ToCcBlackWhiteIpArrayOutput() CcBlackWhiteIpArrayOutput
	ToCcBlackWhiteIpArrayOutputWithContext(context.Context) CcBlackWhiteIpArrayOutput
}

type CcBlackWhiteIpArray []CcBlackWhiteIpInput

func (CcBlackWhiteIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcBlackWhiteIp)(nil)).Elem()
}

func (i CcBlackWhiteIpArray) ToCcBlackWhiteIpArrayOutput() CcBlackWhiteIpArrayOutput {
	return i.ToCcBlackWhiteIpArrayOutputWithContext(context.Background())
}

func (i CcBlackWhiteIpArray) ToCcBlackWhiteIpArrayOutputWithContext(ctx context.Context) CcBlackWhiteIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcBlackWhiteIpArrayOutput)
}

// CcBlackWhiteIpMapInput is an input type that accepts CcBlackWhiteIpMap and CcBlackWhiteIpMapOutput values.
// You can construct a concrete instance of `CcBlackWhiteIpMapInput` via:
//
//	CcBlackWhiteIpMap{ "key": CcBlackWhiteIpArgs{...} }
type CcBlackWhiteIpMapInput interface {
	pulumi.Input

	ToCcBlackWhiteIpMapOutput() CcBlackWhiteIpMapOutput
	ToCcBlackWhiteIpMapOutputWithContext(context.Context) CcBlackWhiteIpMapOutput
}

type CcBlackWhiteIpMap map[string]CcBlackWhiteIpInput

func (CcBlackWhiteIpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcBlackWhiteIp)(nil)).Elem()
}

func (i CcBlackWhiteIpMap) ToCcBlackWhiteIpMapOutput() CcBlackWhiteIpMapOutput {
	return i.ToCcBlackWhiteIpMapOutputWithContext(context.Background())
}

func (i CcBlackWhiteIpMap) ToCcBlackWhiteIpMapOutputWithContext(ctx context.Context) CcBlackWhiteIpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcBlackWhiteIpMapOutput)
}

type CcBlackWhiteIpOutput struct{ *pulumi.OutputState }

func (CcBlackWhiteIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcBlackWhiteIp)(nil)).Elem()
}

func (o CcBlackWhiteIpOutput) ToCcBlackWhiteIpOutput() CcBlackWhiteIpOutput {
	return o
}

func (o CcBlackWhiteIpOutput) ToCcBlackWhiteIpOutputWithContext(ctx context.Context) CcBlackWhiteIpOutput {
	return o
}

// Black white ip.
func (o CcBlackWhiteIpOutput) BlackWhiteIp() CcBlackWhiteIpBlackWhiteIpOutput {
	return o.ApplyT(func(v *CcBlackWhiteIp) CcBlackWhiteIpBlackWhiteIpOutput { return v.BlackWhiteIp }).(CcBlackWhiteIpBlackWhiteIpOutput)
}

// domain.
func (o CcBlackWhiteIpOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *CcBlackWhiteIp) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// instance id.
func (o CcBlackWhiteIpOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *CcBlackWhiteIp) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// ip address.
func (o CcBlackWhiteIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *CcBlackWhiteIp) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// protocol.
func (o CcBlackWhiteIpOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *CcBlackWhiteIp) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// IP type, value [black(blacklist IP), white(whitelist IP)].
func (o CcBlackWhiteIpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CcBlackWhiteIp) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type CcBlackWhiteIpArrayOutput struct{ *pulumi.OutputState }

func (CcBlackWhiteIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcBlackWhiteIp)(nil)).Elem()
}

func (o CcBlackWhiteIpArrayOutput) ToCcBlackWhiteIpArrayOutput() CcBlackWhiteIpArrayOutput {
	return o
}

func (o CcBlackWhiteIpArrayOutput) ToCcBlackWhiteIpArrayOutputWithContext(ctx context.Context) CcBlackWhiteIpArrayOutput {
	return o
}

func (o CcBlackWhiteIpArrayOutput) Index(i pulumi.IntInput) CcBlackWhiteIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CcBlackWhiteIp {
		return vs[0].([]*CcBlackWhiteIp)[vs[1].(int)]
	}).(CcBlackWhiteIpOutput)
}

type CcBlackWhiteIpMapOutput struct{ *pulumi.OutputState }

func (CcBlackWhiteIpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcBlackWhiteIp)(nil)).Elem()
}

func (o CcBlackWhiteIpMapOutput) ToCcBlackWhiteIpMapOutput() CcBlackWhiteIpMapOutput {
	return o
}

func (o CcBlackWhiteIpMapOutput) ToCcBlackWhiteIpMapOutputWithContext(ctx context.Context) CcBlackWhiteIpMapOutput {
	return o
}

func (o CcBlackWhiteIpMapOutput) MapIndex(k pulumi.StringInput) CcBlackWhiteIpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CcBlackWhiteIp {
		return vs[0].(map[string]*CcBlackWhiteIp)[vs[1].(string)]
	}).(CcBlackWhiteIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcBlackWhiteIpInput)(nil)).Elem(), &CcBlackWhiteIp{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcBlackWhiteIpArrayInput)(nil)).Elem(), CcBlackWhiteIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcBlackWhiteIpMapInput)(nil)).Elem(), CcBlackWhiteIpMap{})
	pulumi.RegisterOutputType(CcBlackWhiteIpOutput{})
	pulumi.RegisterOutputType(CcBlackWhiteIpArrayOutput{})
	pulumi.RegisterOutputType(CcBlackWhiteIpMapOutput{})
}
