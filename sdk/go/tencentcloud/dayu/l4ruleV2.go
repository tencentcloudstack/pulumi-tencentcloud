// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dayu

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type L4RuleV2 struct {
	pulumi.CustomResourceState

	// Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	Business pulumi.StringOutput `pulumi:"business"`
	// Resource id.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// A list of layer 4 rules. Each element contains the following attributes:
	Rules L4RuleV2RulesOutput `pulumi:"rules"`
	// The virtual port of the layer 4 rule.
	VirtualPort pulumi.IntOutput `pulumi:"virtualPort"`
	// Resource vpn.
	Vpn pulumi.StringOutput `pulumi:"vpn"`
}

// NewL4RuleV2 registers a new resource with the given unique name, arguments, and options.
func NewL4RuleV2(ctx *pulumi.Context,
	name string, args *L4RuleV2Args, opts ...pulumi.ResourceOption) (*L4RuleV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Business == nil {
		return nil, errors.New("invalid value for required argument 'Business'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	if args.VirtualPort == nil {
		return nil, errors.New("invalid value for required argument 'VirtualPort'")
	}
	if args.Vpn == nil {
		return nil, errors.New("invalid value for required argument 'Vpn'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource L4RuleV2
	err := ctx.RegisterResource("tencentcloud:Dayu/l4RuleV2:L4RuleV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetL4RuleV2 gets an existing L4RuleV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetL4RuleV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *L4RuleV2State, opts ...pulumi.ResourceOption) (*L4RuleV2, error) {
	var resource L4RuleV2
	err := ctx.ReadResource("tencentcloud:Dayu/l4RuleV2:L4RuleV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering L4RuleV2 resources.
type l4ruleV2State struct {
	// Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	Business *string `pulumi:"business"`
	// Resource id.
	ResourceId *string `pulumi:"resourceId"`
	// A list of layer 4 rules. Each element contains the following attributes:
	Rules *L4RuleV2Rules `pulumi:"rules"`
	// The virtual port of the layer 4 rule.
	VirtualPort *int `pulumi:"virtualPort"`
	// Resource vpn.
	Vpn *string `pulumi:"vpn"`
}

type L4RuleV2State struct {
	// Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	Business pulumi.StringPtrInput
	// Resource id.
	ResourceId pulumi.StringPtrInput
	// A list of layer 4 rules. Each element contains the following attributes:
	Rules L4RuleV2RulesPtrInput
	// The virtual port of the layer 4 rule.
	VirtualPort pulumi.IntPtrInput
	// Resource vpn.
	Vpn pulumi.StringPtrInput
}

func (L4RuleV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*l4ruleV2State)(nil)).Elem()
}

type l4ruleV2Args struct {
	// Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	Business string `pulumi:"business"`
	// Resource id.
	ResourceId string `pulumi:"resourceId"`
	// A list of layer 4 rules. Each element contains the following attributes:
	Rules L4RuleV2Rules `pulumi:"rules"`
	// The virtual port of the layer 4 rule.
	VirtualPort int `pulumi:"virtualPort"`
	// Resource vpn.
	Vpn string `pulumi:"vpn"`
}

// The set of arguments for constructing a L4RuleV2 resource.
type L4RuleV2Args struct {
	// Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
	Business pulumi.StringInput
	// Resource id.
	ResourceId pulumi.StringInput
	// A list of layer 4 rules. Each element contains the following attributes:
	Rules L4RuleV2RulesInput
	// The virtual port of the layer 4 rule.
	VirtualPort pulumi.IntInput
	// Resource vpn.
	Vpn pulumi.StringInput
}

func (L4RuleV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*l4ruleV2Args)(nil)).Elem()
}

type L4RuleV2Input interface {
	pulumi.Input

	ToL4RuleV2Output() L4RuleV2Output
	ToL4RuleV2OutputWithContext(ctx context.Context) L4RuleV2Output
}

func (*L4RuleV2) ElementType() reflect.Type {
	return reflect.TypeOf((**L4RuleV2)(nil)).Elem()
}

func (i *L4RuleV2) ToL4RuleV2Output() L4RuleV2Output {
	return i.ToL4RuleV2OutputWithContext(context.Background())
}

func (i *L4RuleV2) ToL4RuleV2OutputWithContext(ctx context.Context) L4RuleV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2Output)
}

// L4RuleV2ArrayInput is an input type that accepts L4RuleV2Array and L4RuleV2ArrayOutput values.
// You can construct a concrete instance of `L4RuleV2ArrayInput` via:
//
//	L4RuleV2Array{ L4RuleV2Args{...} }
type L4RuleV2ArrayInput interface {
	pulumi.Input

	ToL4RuleV2ArrayOutput() L4RuleV2ArrayOutput
	ToL4RuleV2ArrayOutputWithContext(context.Context) L4RuleV2ArrayOutput
}

type L4RuleV2Array []L4RuleV2Input

func (L4RuleV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L4RuleV2)(nil)).Elem()
}

func (i L4RuleV2Array) ToL4RuleV2ArrayOutput() L4RuleV2ArrayOutput {
	return i.ToL4RuleV2ArrayOutputWithContext(context.Background())
}

func (i L4RuleV2Array) ToL4RuleV2ArrayOutputWithContext(ctx context.Context) L4RuleV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2ArrayOutput)
}

// L4RuleV2MapInput is an input type that accepts L4RuleV2Map and L4RuleV2MapOutput values.
// You can construct a concrete instance of `L4RuleV2MapInput` via:
//
//	L4RuleV2Map{ "key": L4RuleV2Args{...} }
type L4RuleV2MapInput interface {
	pulumi.Input

	ToL4RuleV2MapOutput() L4RuleV2MapOutput
	ToL4RuleV2MapOutputWithContext(context.Context) L4RuleV2MapOutput
}

type L4RuleV2Map map[string]L4RuleV2Input

func (L4RuleV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L4RuleV2)(nil)).Elem()
}

func (i L4RuleV2Map) ToL4RuleV2MapOutput() L4RuleV2MapOutput {
	return i.ToL4RuleV2MapOutputWithContext(context.Background())
}

func (i L4RuleV2Map) ToL4RuleV2MapOutputWithContext(ctx context.Context) L4RuleV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2MapOutput)
}

type L4RuleV2Output struct{ *pulumi.OutputState }

func (L4RuleV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**L4RuleV2)(nil)).Elem()
}

func (o L4RuleV2Output) ToL4RuleV2Output() L4RuleV2Output {
	return o
}

func (o L4RuleV2Output) ToL4RuleV2OutputWithContext(ctx context.Context) L4RuleV2Output {
	return o
}

// Business of the resource that the layer 4 rule works for. Valid values: `bgpip` and `net`.
func (o L4RuleV2Output) Business() pulumi.StringOutput {
	return o.ApplyT(func(v *L4RuleV2) pulumi.StringOutput { return v.Business }).(pulumi.StringOutput)
}

// Resource id.
func (o L4RuleV2Output) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *L4RuleV2) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// A list of layer 4 rules. Each element contains the following attributes:
func (o L4RuleV2Output) Rules() L4RuleV2RulesOutput {
	return o.ApplyT(func(v *L4RuleV2) L4RuleV2RulesOutput { return v.Rules }).(L4RuleV2RulesOutput)
}

// The virtual port of the layer 4 rule.
func (o L4RuleV2Output) VirtualPort() pulumi.IntOutput {
	return o.ApplyT(func(v *L4RuleV2) pulumi.IntOutput { return v.VirtualPort }).(pulumi.IntOutput)
}

// Resource vpn.
func (o L4RuleV2Output) Vpn() pulumi.StringOutput {
	return o.ApplyT(func(v *L4RuleV2) pulumi.StringOutput { return v.Vpn }).(pulumi.StringOutput)
}

type L4RuleV2ArrayOutput struct{ *pulumi.OutputState }

func (L4RuleV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*L4RuleV2)(nil)).Elem()
}

func (o L4RuleV2ArrayOutput) ToL4RuleV2ArrayOutput() L4RuleV2ArrayOutput {
	return o
}

func (o L4RuleV2ArrayOutput) ToL4RuleV2ArrayOutputWithContext(ctx context.Context) L4RuleV2ArrayOutput {
	return o
}

func (o L4RuleV2ArrayOutput) Index(i pulumi.IntInput) L4RuleV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *L4RuleV2 {
		return vs[0].([]*L4RuleV2)[vs[1].(int)]
	}).(L4RuleV2Output)
}

type L4RuleV2MapOutput struct{ *pulumi.OutputState }

func (L4RuleV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*L4RuleV2)(nil)).Elem()
}

func (o L4RuleV2MapOutput) ToL4RuleV2MapOutput() L4RuleV2MapOutput {
	return o
}

func (o L4RuleV2MapOutput) ToL4RuleV2MapOutputWithContext(ctx context.Context) L4RuleV2MapOutput {
	return o
}

func (o L4RuleV2MapOutput) MapIndex(k pulumi.StringInput) L4RuleV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *L4RuleV2 {
		return vs[0].(map[string]*L4RuleV2)[vs[1].(string)]
	}).(L4RuleV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2Input)(nil)).Elem(), &L4RuleV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2ArrayInput)(nil)).Elem(), L4RuleV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2MapInput)(nil)).Elem(), L4RuleV2Map{})
	pulumi.RegisterOutputType(L4RuleV2Output{})
	pulumi.RegisterOutputType(L4RuleV2ArrayOutput{})
	pulumi.RegisterOutputType(L4RuleV2MapOutput{})
}
