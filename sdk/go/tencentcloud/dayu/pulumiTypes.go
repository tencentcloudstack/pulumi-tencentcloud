// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dayu

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CcHttpPolicyRuleList struct {
	// Operator of the rule. Valid values: `include`, `notInclude`, `equal`.
	Operator *string `pulumi:"operator"`
	// Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
	Skey *string `pulumi:"skey"`
	// Rule value, then length should be less than 31 bytes.
	Value *string `pulumi:"value"`
}

// CcHttpPolicyRuleListInput is an input type that accepts CcHttpPolicyRuleListArgs and CcHttpPolicyRuleListOutput values.
// You can construct a concrete instance of `CcHttpPolicyRuleListInput` via:
//
//	CcHttpPolicyRuleListArgs{...}
type CcHttpPolicyRuleListInput interface {
	pulumi.Input

	ToCcHttpPolicyRuleListOutput() CcHttpPolicyRuleListOutput
	ToCcHttpPolicyRuleListOutputWithContext(context.Context) CcHttpPolicyRuleListOutput
}

type CcHttpPolicyRuleListArgs struct {
	// Operator of the rule. Valid values: `include`, `notInclude`, `equal`.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
	Skey pulumi.StringPtrInput `pulumi:"skey"`
	// Rule value, then length should be less than 31 bytes.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CcHttpPolicyRuleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcHttpPolicyRuleList)(nil)).Elem()
}

func (i CcHttpPolicyRuleListArgs) ToCcHttpPolicyRuleListOutput() CcHttpPolicyRuleListOutput {
	return i.ToCcHttpPolicyRuleListOutputWithContext(context.Background())
}

func (i CcHttpPolicyRuleListArgs) ToCcHttpPolicyRuleListOutputWithContext(ctx context.Context) CcHttpPolicyRuleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcHttpPolicyRuleListOutput)
}

// CcHttpPolicyRuleListArrayInput is an input type that accepts CcHttpPolicyRuleListArray and CcHttpPolicyRuleListArrayOutput values.
// You can construct a concrete instance of `CcHttpPolicyRuleListArrayInput` via:
//
//	CcHttpPolicyRuleListArray{ CcHttpPolicyRuleListArgs{...} }
type CcHttpPolicyRuleListArrayInput interface {
	pulumi.Input

	ToCcHttpPolicyRuleListArrayOutput() CcHttpPolicyRuleListArrayOutput
	ToCcHttpPolicyRuleListArrayOutputWithContext(context.Context) CcHttpPolicyRuleListArrayOutput
}

type CcHttpPolicyRuleListArray []CcHttpPolicyRuleListInput

func (CcHttpPolicyRuleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcHttpPolicyRuleList)(nil)).Elem()
}

func (i CcHttpPolicyRuleListArray) ToCcHttpPolicyRuleListArrayOutput() CcHttpPolicyRuleListArrayOutput {
	return i.ToCcHttpPolicyRuleListArrayOutputWithContext(context.Background())
}

func (i CcHttpPolicyRuleListArray) ToCcHttpPolicyRuleListArrayOutputWithContext(ctx context.Context) CcHttpPolicyRuleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcHttpPolicyRuleListArrayOutput)
}

type CcHttpPolicyRuleListOutput struct{ *pulumi.OutputState }

func (CcHttpPolicyRuleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcHttpPolicyRuleList)(nil)).Elem()
}

func (o CcHttpPolicyRuleListOutput) ToCcHttpPolicyRuleListOutput() CcHttpPolicyRuleListOutput {
	return o
}

func (o CcHttpPolicyRuleListOutput) ToCcHttpPolicyRuleListOutputWithContext(ctx context.Context) CcHttpPolicyRuleListOutput {
	return o
}

// Operator of the rule. Valid values: `include`, `notInclude`, `equal`.
func (o CcHttpPolicyRuleListOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcHttpPolicyRuleList) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// Key of the rule. Valid values: `host`, `cgi`, `ua`, `referer`.
func (o CcHttpPolicyRuleListOutput) Skey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcHttpPolicyRuleList) *string { return v.Skey }).(pulumi.StringPtrOutput)
}

// Rule value, then length should be less than 31 bytes.
func (o CcHttpPolicyRuleListOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcHttpPolicyRuleList) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CcHttpPolicyRuleListArrayOutput struct{ *pulumi.OutputState }

func (CcHttpPolicyRuleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcHttpPolicyRuleList)(nil)).Elem()
}

func (o CcHttpPolicyRuleListArrayOutput) ToCcHttpPolicyRuleListArrayOutput() CcHttpPolicyRuleListArrayOutput {
	return o
}

func (o CcHttpPolicyRuleListArrayOutput) ToCcHttpPolicyRuleListArrayOutputWithContext(ctx context.Context) CcHttpPolicyRuleListArrayOutput {
	return o
}

func (o CcHttpPolicyRuleListArrayOutput) Index(i pulumi.IntInput) CcHttpPolicyRuleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcHttpPolicyRuleList {
		return vs[0].([]CcHttpPolicyRuleList)[vs[1].(int)]
	}).(CcHttpPolicyRuleListOutput)
}

type CcHttpsPolicyRuleList struct {
	// Operator of the rule. Valid values are `include` and `equal`.
	Operator string `pulumi:"operator"`
	// Key of the rule. Valid values are `cgi`, `ua` and `referer`.
	Skey string `pulumi:"skey"`
	// Rule value, then length should be less than 31 bytes.
	Value string `pulumi:"value"`
}

// CcHttpsPolicyRuleListInput is an input type that accepts CcHttpsPolicyRuleListArgs and CcHttpsPolicyRuleListOutput values.
// You can construct a concrete instance of `CcHttpsPolicyRuleListInput` via:
//
//	CcHttpsPolicyRuleListArgs{...}
type CcHttpsPolicyRuleListInput interface {
	pulumi.Input

	ToCcHttpsPolicyRuleListOutput() CcHttpsPolicyRuleListOutput
	ToCcHttpsPolicyRuleListOutputWithContext(context.Context) CcHttpsPolicyRuleListOutput
}

type CcHttpsPolicyRuleListArgs struct {
	// Operator of the rule. Valid values are `include` and `equal`.
	Operator pulumi.StringInput `pulumi:"operator"`
	// Key of the rule. Valid values are `cgi`, `ua` and `referer`.
	Skey pulumi.StringInput `pulumi:"skey"`
	// Rule value, then length should be less than 31 bytes.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CcHttpsPolicyRuleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcHttpsPolicyRuleList)(nil)).Elem()
}

func (i CcHttpsPolicyRuleListArgs) ToCcHttpsPolicyRuleListOutput() CcHttpsPolicyRuleListOutput {
	return i.ToCcHttpsPolicyRuleListOutputWithContext(context.Background())
}

func (i CcHttpsPolicyRuleListArgs) ToCcHttpsPolicyRuleListOutputWithContext(ctx context.Context) CcHttpsPolicyRuleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcHttpsPolicyRuleListOutput)
}

// CcHttpsPolicyRuleListArrayInput is an input type that accepts CcHttpsPolicyRuleListArray and CcHttpsPolicyRuleListArrayOutput values.
// You can construct a concrete instance of `CcHttpsPolicyRuleListArrayInput` via:
//
//	CcHttpsPolicyRuleListArray{ CcHttpsPolicyRuleListArgs{...} }
type CcHttpsPolicyRuleListArrayInput interface {
	pulumi.Input

	ToCcHttpsPolicyRuleListArrayOutput() CcHttpsPolicyRuleListArrayOutput
	ToCcHttpsPolicyRuleListArrayOutputWithContext(context.Context) CcHttpsPolicyRuleListArrayOutput
}

type CcHttpsPolicyRuleListArray []CcHttpsPolicyRuleListInput

func (CcHttpsPolicyRuleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcHttpsPolicyRuleList)(nil)).Elem()
}

func (i CcHttpsPolicyRuleListArray) ToCcHttpsPolicyRuleListArrayOutput() CcHttpsPolicyRuleListArrayOutput {
	return i.ToCcHttpsPolicyRuleListArrayOutputWithContext(context.Background())
}

func (i CcHttpsPolicyRuleListArray) ToCcHttpsPolicyRuleListArrayOutputWithContext(ctx context.Context) CcHttpsPolicyRuleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcHttpsPolicyRuleListArrayOutput)
}

type CcHttpsPolicyRuleListOutput struct{ *pulumi.OutputState }

func (CcHttpsPolicyRuleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcHttpsPolicyRuleList)(nil)).Elem()
}

func (o CcHttpsPolicyRuleListOutput) ToCcHttpsPolicyRuleListOutput() CcHttpsPolicyRuleListOutput {
	return o
}

func (o CcHttpsPolicyRuleListOutput) ToCcHttpsPolicyRuleListOutputWithContext(ctx context.Context) CcHttpsPolicyRuleListOutput {
	return o
}

// Operator of the rule. Valid values are `include` and `equal`.
func (o CcHttpsPolicyRuleListOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v CcHttpsPolicyRuleList) string { return v.Operator }).(pulumi.StringOutput)
}

// Key of the rule. Valid values are `cgi`, `ua` and `referer`.
func (o CcHttpsPolicyRuleListOutput) Skey() pulumi.StringOutput {
	return o.ApplyT(func(v CcHttpsPolicyRuleList) string { return v.Skey }).(pulumi.StringOutput)
}

// Rule value, then length should be less than 31 bytes.
func (o CcHttpsPolicyRuleListOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CcHttpsPolicyRuleList) string { return v.Value }).(pulumi.StringOutput)
}

type CcHttpsPolicyRuleListArrayOutput struct{ *pulumi.OutputState }

func (CcHttpsPolicyRuleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcHttpsPolicyRuleList)(nil)).Elem()
}

func (o CcHttpsPolicyRuleListArrayOutput) ToCcHttpsPolicyRuleListArrayOutput() CcHttpsPolicyRuleListArrayOutput {
	return o
}

func (o CcHttpsPolicyRuleListArrayOutput) ToCcHttpsPolicyRuleListArrayOutputWithContext(ctx context.Context) CcHttpsPolicyRuleListArrayOutput {
	return o
}

func (o CcHttpsPolicyRuleListArrayOutput) Index(i pulumi.IntInput) CcHttpsPolicyRuleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcHttpsPolicyRuleList {
		return vs[0].([]CcHttpsPolicyRuleList)[vs[1].(int)]
	}).(CcHttpsPolicyRuleListOutput)
}

type CcPolicyV2CcBlackWhiteIp struct {
	// Blacklist and whitelist IP addresses.
	BlackWhiteIp string `pulumi:"blackWhiteIp"`
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Domain.
	Domain string `pulumi:"domain"`
	// Modify time.
	ModifyTime *string `pulumi:"modifyTime"`
	// Protocol.
	Protocol string `pulumi:"protocol"`
	// IP type, value [black(blacklist IP), white (whitelist IP)].
	Type string `pulumi:"type"`
}

// CcPolicyV2CcBlackWhiteIpInput is an input type that accepts CcPolicyV2CcBlackWhiteIpArgs and CcPolicyV2CcBlackWhiteIpOutput values.
// You can construct a concrete instance of `CcPolicyV2CcBlackWhiteIpInput` via:
//
//	CcPolicyV2CcBlackWhiteIpArgs{...}
type CcPolicyV2CcBlackWhiteIpInput interface {
	pulumi.Input

	ToCcPolicyV2CcBlackWhiteIpOutput() CcPolicyV2CcBlackWhiteIpOutput
	ToCcPolicyV2CcBlackWhiteIpOutputWithContext(context.Context) CcPolicyV2CcBlackWhiteIpOutput
}

type CcPolicyV2CcBlackWhiteIpArgs struct {
	// Blacklist and whitelist IP addresses.
	BlackWhiteIp pulumi.StringInput `pulumi:"blackWhiteIp"`
	// Create time.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Modify time.
	ModifyTime pulumi.StringPtrInput `pulumi:"modifyTime"`
	// Protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// IP type, value [black(blacklist IP), white (whitelist IP)].
	Type pulumi.StringInput `pulumi:"type"`
}

func (CcPolicyV2CcBlackWhiteIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcBlackWhiteIp)(nil)).Elem()
}

func (i CcPolicyV2CcBlackWhiteIpArgs) ToCcPolicyV2CcBlackWhiteIpOutput() CcPolicyV2CcBlackWhiteIpOutput {
	return i.ToCcPolicyV2CcBlackWhiteIpOutputWithContext(context.Background())
}

func (i CcPolicyV2CcBlackWhiteIpArgs) ToCcPolicyV2CcBlackWhiteIpOutputWithContext(ctx context.Context) CcPolicyV2CcBlackWhiteIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcBlackWhiteIpOutput)
}

// CcPolicyV2CcBlackWhiteIpArrayInput is an input type that accepts CcPolicyV2CcBlackWhiteIpArray and CcPolicyV2CcBlackWhiteIpArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2CcBlackWhiteIpArrayInput` via:
//
//	CcPolicyV2CcBlackWhiteIpArray{ CcPolicyV2CcBlackWhiteIpArgs{...} }
type CcPolicyV2CcBlackWhiteIpArrayInput interface {
	pulumi.Input

	ToCcPolicyV2CcBlackWhiteIpArrayOutput() CcPolicyV2CcBlackWhiteIpArrayOutput
	ToCcPolicyV2CcBlackWhiteIpArrayOutputWithContext(context.Context) CcPolicyV2CcBlackWhiteIpArrayOutput
}

type CcPolicyV2CcBlackWhiteIpArray []CcPolicyV2CcBlackWhiteIpInput

func (CcPolicyV2CcBlackWhiteIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcBlackWhiteIp)(nil)).Elem()
}

func (i CcPolicyV2CcBlackWhiteIpArray) ToCcPolicyV2CcBlackWhiteIpArrayOutput() CcPolicyV2CcBlackWhiteIpArrayOutput {
	return i.ToCcPolicyV2CcBlackWhiteIpArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2CcBlackWhiteIpArray) ToCcPolicyV2CcBlackWhiteIpArrayOutputWithContext(ctx context.Context) CcPolicyV2CcBlackWhiteIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcBlackWhiteIpArrayOutput)
}

type CcPolicyV2CcBlackWhiteIpOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcBlackWhiteIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcBlackWhiteIp)(nil)).Elem()
}

func (o CcPolicyV2CcBlackWhiteIpOutput) ToCcPolicyV2CcBlackWhiteIpOutput() CcPolicyV2CcBlackWhiteIpOutput {
	return o
}

func (o CcPolicyV2CcBlackWhiteIpOutput) ToCcPolicyV2CcBlackWhiteIpOutputWithContext(ctx context.Context) CcPolicyV2CcBlackWhiteIpOutput {
	return o
}

// Blacklist and whitelist IP addresses.
func (o CcPolicyV2CcBlackWhiteIpOutput) BlackWhiteIp() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcBlackWhiteIp) string { return v.BlackWhiteIp }).(pulumi.StringOutput)
}

// Create time.
func (o CcPolicyV2CcBlackWhiteIpOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcBlackWhiteIp) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Domain.
func (o CcPolicyV2CcBlackWhiteIpOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcBlackWhiteIp) string { return v.Domain }).(pulumi.StringOutput)
}

// Modify time.
func (o CcPolicyV2CcBlackWhiteIpOutput) ModifyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcBlackWhiteIp) *string { return v.ModifyTime }).(pulumi.StringPtrOutput)
}

// Protocol.
func (o CcPolicyV2CcBlackWhiteIpOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcBlackWhiteIp) string { return v.Protocol }).(pulumi.StringOutput)
}

// IP type, value [black(blacklist IP), white (whitelist IP)].
func (o CcPolicyV2CcBlackWhiteIpOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcBlackWhiteIp) string { return v.Type }).(pulumi.StringOutput)
}

type CcPolicyV2CcBlackWhiteIpArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcBlackWhiteIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcBlackWhiteIp)(nil)).Elem()
}

func (o CcPolicyV2CcBlackWhiteIpArrayOutput) ToCcPolicyV2CcBlackWhiteIpArrayOutput() CcPolicyV2CcBlackWhiteIpArrayOutput {
	return o
}

func (o CcPolicyV2CcBlackWhiteIpArrayOutput) ToCcPolicyV2CcBlackWhiteIpArrayOutputWithContext(ctx context.Context) CcPolicyV2CcBlackWhiteIpArrayOutput {
	return o
}

func (o CcPolicyV2CcBlackWhiteIpArrayOutput) Index(i pulumi.IntInput) CcPolicyV2CcBlackWhiteIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2CcBlackWhiteIp {
		return vs[0].([]CcPolicyV2CcBlackWhiteIp)[vs[1].(int)]
	}).(CcPolicyV2CcBlackWhiteIpOutput)
}

type CcPolicyV2CcGeoIpPolicy struct {
	// User action, drop or arg.
	Action string `pulumi:"action"`
	// The list of region IDs that the user selects to block.
	AreaLists []int `pulumi:"areaLists"`
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// domain.
	Domain string `pulumi:"domain"`
	// Modify time.
	ModifyTime *string `pulumi:"modifyTime"`
	// Protocol, preferably HTTP, HTTPS.
	Protocol string `pulumi:"protocol"`
	// Regional types, divided into china, oversea and customized.
	RegionType string `pulumi:"regionType"`
}

// CcPolicyV2CcGeoIpPolicyInput is an input type that accepts CcPolicyV2CcGeoIpPolicyArgs and CcPolicyV2CcGeoIpPolicyOutput values.
// You can construct a concrete instance of `CcPolicyV2CcGeoIpPolicyInput` via:
//
//	CcPolicyV2CcGeoIpPolicyArgs{...}
type CcPolicyV2CcGeoIpPolicyInput interface {
	pulumi.Input

	ToCcPolicyV2CcGeoIpPolicyOutput() CcPolicyV2CcGeoIpPolicyOutput
	ToCcPolicyV2CcGeoIpPolicyOutputWithContext(context.Context) CcPolicyV2CcGeoIpPolicyOutput
}

type CcPolicyV2CcGeoIpPolicyArgs struct {
	// User action, drop or arg.
	Action pulumi.StringInput `pulumi:"action"`
	// The list of region IDs that the user selects to block.
	AreaLists pulumi.IntArrayInput `pulumi:"areaLists"`
	// Create time.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Modify time.
	ModifyTime pulumi.StringPtrInput `pulumi:"modifyTime"`
	// Protocol, preferably HTTP, HTTPS.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Regional types, divided into china, oversea and customized.
	RegionType pulumi.StringInput `pulumi:"regionType"`
}

func (CcPolicyV2CcGeoIpPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcGeoIpPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcGeoIpPolicyArgs) ToCcPolicyV2CcGeoIpPolicyOutput() CcPolicyV2CcGeoIpPolicyOutput {
	return i.ToCcPolicyV2CcGeoIpPolicyOutputWithContext(context.Background())
}

func (i CcPolicyV2CcGeoIpPolicyArgs) ToCcPolicyV2CcGeoIpPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcGeoIpPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcGeoIpPolicyOutput)
}

// CcPolicyV2CcGeoIpPolicyArrayInput is an input type that accepts CcPolicyV2CcGeoIpPolicyArray and CcPolicyV2CcGeoIpPolicyArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2CcGeoIpPolicyArrayInput` via:
//
//	CcPolicyV2CcGeoIpPolicyArray{ CcPolicyV2CcGeoIpPolicyArgs{...} }
type CcPolicyV2CcGeoIpPolicyArrayInput interface {
	pulumi.Input

	ToCcPolicyV2CcGeoIpPolicyArrayOutput() CcPolicyV2CcGeoIpPolicyArrayOutput
	ToCcPolicyV2CcGeoIpPolicyArrayOutputWithContext(context.Context) CcPolicyV2CcGeoIpPolicyArrayOutput
}

type CcPolicyV2CcGeoIpPolicyArray []CcPolicyV2CcGeoIpPolicyInput

func (CcPolicyV2CcGeoIpPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcGeoIpPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcGeoIpPolicyArray) ToCcPolicyV2CcGeoIpPolicyArrayOutput() CcPolicyV2CcGeoIpPolicyArrayOutput {
	return i.ToCcPolicyV2CcGeoIpPolicyArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2CcGeoIpPolicyArray) ToCcPolicyV2CcGeoIpPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcGeoIpPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcGeoIpPolicyArrayOutput)
}

type CcPolicyV2CcGeoIpPolicyOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcGeoIpPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcGeoIpPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcGeoIpPolicyOutput) ToCcPolicyV2CcGeoIpPolicyOutput() CcPolicyV2CcGeoIpPolicyOutput {
	return o
}

func (o CcPolicyV2CcGeoIpPolicyOutput) ToCcPolicyV2CcGeoIpPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcGeoIpPolicyOutput {
	return o
}

// User action, drop or arg.
func (o CcPolicyV2CcGeoIpPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) string { return v.Action }).(pulumi.StringOutput)
}

// The list of region IDs that the user selects to block.
func (o CcPolicyV2CcGeoIpPolicyOutput) AreaLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) []int { return v.AreaLists }).(pulumi.IntArrayOutput)
}

// Create time.
func (o CcPolicyV2CcGeoIpPolicyOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// domain.
func (o CcPolicyV2CcGeoIpPolicyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) string { return v.Domain }).(pulumi.StringOutput)
}

// Modify time.
func (o CcPolicyV2CcGeoIpPolicyOutput) ModifyTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) *string { return v.ModifyTime }).(pulumi.StringPtrOutput)
}

// Protocol, preferably HTTP, HTTPS.
func (o CcPolicyV2CcGeoIpPolicyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) string { return v.Protocol }).(pulumi.StringOutput)
}

// Regional types, divided into china, oversea and customized.
func (o CcPolicyV2CcGeoIpPolicyOutput) RegionType() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcGeoIpPolicy) string { return v.RegionType }).(pulumi.StringOutput)
}

type CcPolicyV2CcGeoIpPolicyArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcGeoIpPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcGeoIpPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcGeoIpPolicyArrayOutput) ToCcPolicyV2CcGeoIpPolicyArrayOutput() CcPolicyV2CcGeoIpPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcGeoIpPolicyArrayOutput) ToCcPolicyV2CcGeoIpPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcGeoIpPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcGeoIpPolicyArrayOutput) Index(i pulumi.IntInput) CcPolicyV2CcGeoIpPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2CcGeoIpPolicy {
		return vs[0].([]CcPolicyV2CcGeoIpPolicy)[vs[1].(int)]
	}).(CcPolicyV2CcGeoIpPolicyOutput)
}

type CcPolicyV2CcPrecisionPolicy struct {
	// Domain.
	Domain string `pulumi:"domain"`
	// Ip address.
	Ip string `pulumi:"ip"`
	// Policy mode (discard or captcha).
	PolicyAction string  `pulumi:"policyAction"`
	PolicyId     *string `pulumi:"policyId"`
	// A list of policies.
	Policys []CcPolicyV2CcPrecisionPolicyPolicy `pulumi:"policys"`
	// Protocol.
	Protocol string `pulumi:"protocol"`
}

// CcPolicyV2CcPrecisionPolicyInput is an input type that accepts CcPolicyV2CcPrecisionPolicyArgs and CcPolicyV2CcPrecisionPolicyOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionPolicyInput` via:
//
//	CcPolicyV2CcPrecisionPolicyArgs{...}
type CcPolicyV2CcPrecisionPolicyInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionPolicyOutput() CcPolicyV2CcPrecisionPolicyOutput
	ToCcPolicyV2CcPrecisionPolicyOutputWithContext(context.Context) CcPolicyV2CcPrecisionPolicyOutput
}

type CcPolicyV2CcPrecisionPolicyArgs struct {
	// Domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Ip address.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Policy mode (discard or captcha).
	PolicyAction pulumi.StringInput    `pulumi:"policyAction"`
	PolicyId     pulumi.StringPtrInput `pulumi:"policyId"`
	// A list of policies.
	Policys CcPolicyV2CcPrecisionPolicyPolicyArrayInput `pulumi:"policys"`
	// Protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (CcPolicyV2CcPrecisionPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionPolicyArgs) ToCcPolicyV2CcPrecisionPolicyOutput() CcPolicyV2CcPrecisionPolicyOutput {
	return i.ToCcPolicyV2CcPrecisionPolicyOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionPolicyArgs) ToCcPolicyV2CcPrecisionPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionPolicyOutput)
}

// CcPolicyV2CcPrecisionPolicyArrayInput is an input type that accepts CcPolicyV2CcPrecisionPolicyArray and CcPolicyV2CcPrecisionPolicyArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionPolicyArrayInput` via:
//
//	CcPolicyV2CcPrecisionPolicyArray{ CcPolicyV2CcPrecisionPolicyArgs{...} }
type CcPolicyV2CcPrecisionPolicyArrayInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionPolicyArrayOutput() CcPolicyV2CcPrecisionPolicyArrayOutput
	ToCcPolicyV2CcPrecisionPolicyArrayOutputWithContext(context.Context) CcPolicyV2CcPrecisionPolicyArrayOutput
}

type CcPolicyV2CcPrecisionPolicyArray []CcPolicyV2CcPrecisionPolicyInput

func (CcPolicyV2CcPrecisionPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionPolicyArray) ToCcPolicyV2CcPrecisionPolicyArrayOutput() CcPolicyV2CcPrecisionPolicyArrayOutput {
	return i.ToCcPolicyV2CcPrecisionPolicyArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionPolicyArray) ToCcPolicyV2CcPrecisionPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionPolicyArrayOutput)
}

type CcPolicyV2CcPrecisionPolicyOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionPolicyOutput) ToCcPolicyV2CcPrecisionPolicyOutput() CcPolicyV2CcPrecisionPolicyOutput {
	return o
}

func (o CcPolicyV2CcPrecisionPolicyOutput) ToCcPolicyV2CcPrecisionPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyOutput {
	return o
}

// Domain.
func (o CcPolicyV2CcPrecisionPolicyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicy) string { return v.Domain }).(pulumi.StringOutput)
}

// Ip address.
func (o CcPolicyV2CcPrecisionPolicyOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicy) string { return v.Ip }).(pulumi.StringOutput)
}

// Policy mode (discard or captcha).
func (o CcPolicyV2CcPrecisionPolicyOutput) PolicyAction() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicy) string { return v.PolicyAction }).(pulumi.StringOutput)
}

func (o CcPolicyV2CcPrecisionPolicyOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicy) *string { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// A list of policies.
func (o CcPolicyV2CcPrecisionPolicyOutput) Policys() CcPolicyV2CcPrecisionPolicyPolicyArrayOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicy) []CcPolicyV2CcPrecisionPolicyPolicy { return v.Policys }).(CcPolicyV2CcPrecisionPolicyPolicyArrayOutput)
}

// Protocol.
func (o CcPolicyV2CcPrecisionPolicyOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicy) string { return v.Protocol }).(pulumi.StringOutput)
}

type CcPolicyV2CcPrecisionPolicyArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionPolicyArrayOutput) ToCcPolicyV2CcPrecisionPolicyArrayOutput() CcPolicyV2CcPrecisionPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionPolicyArrayOutput) ToCcPolicyV2CcPrecisionPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionPolicyArrayOutput) Index(i pulumi.IntInput) CcPolicyV2CcPrecisionPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2CcPrecisionPolicy {
		return vs[0].([]CcPolicyV2CcPrecisionPolicy)[vs[1].(int)]
	}).(CcPolicyV2CcPrecisionPolicyOutput)
}

type CcPolicyV2CcPrecisionPolicyPolicy struct {
	// Configuration item types, currently only support value.
	FieldName string `pulumi:"fieldName"`
	// Configuration fields with the desirable values cgi, ua, cookie, referer, accept, srcip.
	FieldType string `pulumi:"fieldType"`
	// Configure the value.
	Value string `pulumi:"value"`
	// Configure the item-value comparison mode, which can be taken as the value of evaluate, not_equal, include.
	ValueOperator string `pulumi:"valueOperator"`
}

// CcPolicyV2CcPrecisionPolicyPolicyInput is an input type that accepts CcPolicyV2CcPrecisionPolicyPolicyArgs and CcPolicyV2CcPrecisionPolicyPolicyOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionPolicyPolicyInput` via:
//
//	CcPolicyV2CcPrecisionPolicyPolicyArgs{...}
type CcPolicyV2CcPrecisionPolicyPolicyInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionPolicyPolicyOutput() CcPolicyV2CcPrecisionPolicyPolicyOutput
	ToCcPolicyV2CcPrecisionPolicyPolicyOutputWithContext(context.Context) CcPolicyV2CcPrecisionPolicyPolicyOutput
}

type CcPolicyV2CcPrecisionPolicyPolicyArgs struct {
	// Configuration item types, currently only support value.
	FieldName pulumi.StringInput `pulumi:"fieldName"`
	// Configuration fields with the desirable values cgi, ua, cookie, referer, accept, srcip.
	FieldType pulumi.StringInput `pulumi:"fieldType"`
	// Configure the value.
	Value pulumi.StringInput `pulumi:"value"`
	// Configure the item-value comparison mode, which can be taken as the value of evaluate, not_equal, include.
	ValueOperator pulumi.StringInput `pulumi:"valueOperator"`
}

func (CcPolicyV2CcPrecisionPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionPolicyPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionPolicyPolicyArgs) ToCcPolicyV2CcPrecisionPolicyPolicyOutput() CcPolicyV2CcPrecisionPolicyPolicyOutput {
	return i.ToCcPolicyV2CcPrecisionPolicyPolicyOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionPolicyPolicyArgs) ToCcPolicyV2CcPrecisionPolicyPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionPolicyPolicyOutput)
}

// CcPolicyV2CcPrecisionPolicyPolicyArrayInput is an input type that accepts CcPolicyV2CcPrecisionPolicyPolicyArray and CcPolicyV2CcPrecisionPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionPolicyPolicyArrayInput` via:
//
//	CcPolicyV2CcPrecisionPolicyPolicyArray{ CcPolicyV2CcPrecisionPolicyPolicyArgs{...} }
type CcPolicyV2CcPrecisionPolicyPolicyArrayInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutput() CcPolicyV2CcPrecisionPolicyPolicyArrayOutput
	ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutputWithContext(context.Context) CcPolicyV2CcPrecisionPolicyPolicyArrayOutput
}

type CcPolicyV2CcPrecisionPolicyPolicyArray []CcPolicyV2CcPrecisionPolicyPolicyInput

func (CcPolicyV2CcPrecisionPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionPolicyPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionPolicyPolicyArray) ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutput() CcPolicyV2CcPrecisionPolicyPolicyArrayOutput {
	return i.ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionPolicyPolicyArray) ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionPolicyPolicyArrayOutput)
}

type CcPolicyV2CcPrecisionPolicyPolicyOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionPolicyPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionPolicyPolicyOutput) ToCcPolicyV2CcPrecisionPolicyPolicyOutput() CcPolicyV2CcPrecisionPolicyPolicyOutput {
	return o
}

func (o CcPolicyV2CcPrecisionPolicyPolicyOutput) ToCcPolicyV2CcPrecisionPolicyPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyPolicyOutput {
	return o
}

// Configuration item types, currently only support value.
func (o CcPolicyV2CcPrecisionPolicyPolicyOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicyPolicy) string { return v.FieldName }).(pulumi.StringOutput)
}

// Configuration fields with the desirable values cgi, ua, cookie, referer, accept, srcip.
func (o CcPolicyV2CcPrecisionPolicyPolicyOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicyPolicy) string { return v.FieldType }).(pulumi.StringOutput)
}

// Configure the value.
func (o CcPolicyV2CcPrecisionPolicyPolicyOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicyPolicy) string { return v.Value }).(pulumi.StringOutput)
}

// Configure the item-value comparison mode, which can be taken as the value of evaluate, not_equal, include.
func (o CcPolicyV2CcPrecisionPolicyPolicyOutput) ValueOperator() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionPolicyPolicy) string { return v.ValueOperator }).(pulumi.StringOutput)
}

type CcPolicyV2CcPrecisionPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionPolicyPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionPolicyPolicyArrayOutput) ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutput() CcPolicyV2CcPrecisionPolicyPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionPolicyPolicyArrayOutput) ToCcPolicyV2CcPrecisionPolicyPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionPolicyPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionPolicyPolicyArrayOutput) Index(i pulumi.IntInput) CcPolicyV2CcPrecisionPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2CcPrecisionPolicyPolicy {
		return vs[0].([]CcPolicyV2CcPrecisionPolicyPolicy)[vs[1].(int)]
	}).(CcPolicyV2CcPrecisionPolicyPolicyOutput)
}

type CcPolicyV2CcPrecisionReqLimit struct {
	// Domain.
	Domain     string  `pulumi:"domain"`
	InstanceId *string `pulumi:"instanceId"`
	// Ip address.
	Ip *string `pulumi:"ip"`
	// Protection rating, the optional value of default means default policy, loose means loose, and strict means strict.
	Level string `pulumi:"level"`
	// The CC Frequency Limit Policy Item field.
	Policys []CcPolicyV2CcPrecisionReqLimitPolicy `pulumi:"policys"`
	// Protocol, preferably HTTP, HTTPS.
	Protocol string `pulumi:"protocol"`
}

// CcPolicyV2CcPrecisionReqLimitInput is an input type that accepts CcPolicyV2CcPrecisionReqLimitArgs and CcPolicyV2CcPrecisionReqLimitOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionReqLimitInput` via:
//
//	CcPolicyV2CcPrecisionReqLimitArgs{...}
type CcPolicyV2CcPrecisionReqLimitInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionReqLimitOutput() CcPolicyV2CcPrecisionReqLimitOutput
	ToCcPolicyV2CcPrecisionReqLimitOutputWithContext(context.Context) CcPolicyV2CcPrecisionReqLimitOutput
}

type CcPolicyV2CcPrecisionReqLimitArgs struct {
	// Domain.
	Domain     pulumi.StringInput    `pulumi:"domain"`
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Ip address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Protection rating, the optional value of default means default policy, loose means loose, and strict means strict.
	Level pulumi.StringInput `pulumi:"level"`
	// The CC Frequency Limit Policy Item field.
	Policys CcPolicyV2CcPrecisionReqLimitPolicyArrayInput `pulumi:"policys"`
	// Protocol, preferably HTTP, HTTPS.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (CcPolicyV2CcPrecisionReqLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimit)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionReqLimitArgs) ToCcPolicyV2CcPrecisionReqLimitOutput() CcPolicyV2CcPrecisionReqLimitOutput {
	return i.ToCcPolicyV2CcPrecisionReqLimitOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionReqLimitArgs) ToCcPolicyV2CcPrecisionReqLimitOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionReqLimitOutput)
}

// CcPolicyV2CcPrecisionReqLimitArrayInput is an input type that accepts CcPolicyV2CcPrecisionReqLimitArray and CcPolicyV2CcPrecisionReqLimitArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionReqLimitArrayInput` via:
//
//	CcPolicyV2CcPrecisionReqLimitArray{ CcPolicyV2CcPrecisionReqLimitArgs{...} }
type CcPolicyV2CcPrecisionReqLimitArrayInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionReqLimitArrayOutput() CcPolicyV2CcPrecisionReqLimitArrayOutput
	ToCcPolicyV2CcPrecisionReqLimitArrayOutputWithContext(context.Context) CcPolicyV2CcPrecisionReqLimitArrayOutput
}

type CcPolicyV2CcPrecisionReqLimitArray []CcPolicyV2CcPrecisionReqLimitInput

func (CcPolicyV2CcPrecisionReqLimitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionReqLimit)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionReqLimitArray) ToCcPolicyV2CcPrecisionReqLimitArrayOutput() CcPolicyV2CcPrecisionReqLimitArrayOutput {
	return i.ToCcPolicyV2CcPrecisionReqLimitArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionReqLimitArray) ToCcPolicyV2CcPrecisionReqLimitArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionReqLimitArrayOutput)
}

type CcPolicyV2CcPrecisionReqLimitOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionReqLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimit)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionReqLimitOutput) ToCcPolicyV2CcPrecisionReqLimitOutput() CcPolicyV2CcPrecisionReqLimitOutput {
	return o
}

func (o CcPolicyV2CcPrecisionReqLimitOutput) ToCcPolicyV2CcPrecisionReqLimitOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitOutput {
	return o
}

// Domain.
func (o CcPolicyV2CcPrecisionReqLimitOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimit) string { return v.Domain }).(pulumi.StringOutput)
}

func (o CcPolicyV2CcPrecisionReqLimitOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimit) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Ip address.
func (o CcPolicyV2CcPrecisionReqLimitOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimit) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Protection rating, the optional value of default means default policy, loose means loose, and strict means strict.
func (o CcPolicyV2CcPrecisionReqLimitOutput) Level() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimit) string { return v.Level }).(pulumi.StringOutput)
}

// The CC Frequency Limit Policy Item field.
func (o CcPolicyV2CcPrecisionReqLimitOutput) Policys() CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimit) []CcPolicyV2CcPrecisionReqLimitPolicy { return v.Policys }).(CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput)
}

// Protocol, preferably HTTP, HTTPS.
func (o CcPolicyV2CcPrecisionReqLimitOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimit) string { return v.Protocol }).(pulumi.StringOutput)
}

type CcPolicyV2CcPrecisionReqLimitArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionReqLimitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionReqLimit)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionReqLimitArrayOutput) ToCcPolicyV2CcPrecisionReqLimitArrayOutput() CcPolicyV2CcPrecisionReqLimitArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionReqLimitArrayOutput) ToCcPolicyV2CcPrecisionReqLimitArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionReqLimitArrayOutput) Index(i pulumi.IntInput) CcPolicyV2CcPrecisionReqLimitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2CcPrecisionReqLimit {
		return vs[0].([]CcPolicyV2CcPrecisionReqLimit)[vs[1].(int)]
	}).(CcPolicyV2CcPrecisionReqLimitOutput)
}

type CcPolicyV2CcPrecisionReqLimitPolicy struct {
	// The frequency limit policy mode, the optional value of arg indicates the verification code, and drop indicates the discard.
	Action string `pulumi:"action"`
	// Cookies, one of the three policy entries can only be filled in.
	Cookie *string `pulumi:"cookie"`
	// The duration of the frequency limit policy can be taken from 1 to 86400 per second.
	ExecuteDuration int `pulumi:"executeDuration"`
	// The policy item is compared, and the optional value include indicates inclusion, and equal means equal.
	Mode string `pulumi:"mode"`
	// Statistical period, take values 1, 10, 30, 60, in seconds.
	Period int `pulumi:"period"`
	// The number of requests, the value is 1 to 20000.
	RequestNum int `pulumi:"requestNum"`
	// Uri, one of the three policy entries can only be filled in.
	Uri *string `pulumi:"uri"`
	// User-Agent, only one of the three policy entries can be filled in.
	UserAgent *string `pulumi:"userAgent"`
}

// CcPolicyV2CcPrecisionReqLimitPolicyInput is an input type that accepts CcPolicyV2CcPrecisionReqLimitPolicyArgs and CcPolicyV2CcPrecisionReqLimitPolicyOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionReqLimitPolicyInput` via:
//
//	CcPolicyV2CcPrecisionReqLimitPolicyArgs{...}
type CcPolicyV2CcPrecisionReqLimitPolicyInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionReqLimitPolicyOutput() CcPolicyV2CcPrecisionReqLimitPolicyOutput
	ToCcPolicyV2CcPrecisionReqLimitPolicyOutputWithContext(context.Context) CcPolicyV2CcPrecisionReqLimitPolicyOutput
}

type CcPolicyV2CcPrecisionReqLimitPolicyArgs struct {
	// The frequency limit policy mode, the optional value of arg indicates the verification code, and drop indicates the discard.
	Action pulumi.StringInput `pulumi:"action"`
	// Cookies, one of the three policy entries can only be filled in.
	Cookie pulumi.StringPtrInput `pulumi:"cookie"`
	// The duration of the frequency limit policy can be taken from 1 to 86400 per second.
	ExecuteDuration pulumi.IntInput `pulumi:"executeDuration"`
	// The policy item is compared, and the optional value include indicates inclusion, and equal means equal.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Statistical period, take values 1, 10, 30, 60, in seconds.
	Period pulumi.IntInput `pulumi:"period"`
	// The number of requests, the value is 1 to 20000.
	RequestNum pulumi.IntInput `pulumi:"requestNum"`
	// Uri, one of the three policy entries can only be filled in.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
	// User-Agent, only one of the three policy entries can be filled in.
	UserAgent pulumi.StringPtrInput `pulumi:"userAgent"`
}

func (CcPolicyV2CcPrecisionReqLimitPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimitPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionReqLimitPolicyArgs) ToCcPolicyV2CcPrecisionReqLimitPolicyOutput() CcPolicyV2CcPrecisionReqLimitPolicyOutput {
	return i.ToCcPolicyV2CcPrecisionReqLimitPolicyOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionReqLimitPolicyArgs) ToCcPolicyV2CcPrecisionReqLimitPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionReqLimitPolicyOutput)
}

// CcPolicyV2CcPrecisionReqLimitPolicyArrayInput is an input type that accepts CcPolicyV2CcPrecisionReqLimitPolicyArray and CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2CcPrecisionReqLimitPolicyArrayInput` via:
//
//	CcPolicyV2CcPrecisionReqLimitPolicyArray{ CcPolicyV2CcPrecisionReqLimitPolicyArgs{...} }
type CcPolicyV2CcPrecisionReqLimitPolicyArrayInput interface {
	pulumi.Input

	ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutput() CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput
	ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutputWithContext(context.Context) CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput
}

type CcPolicyV2CcPrecisionReqLimitPolicyArray []CcPolicyV2CcPrecisionReqLimitPolicyInput

func (CcPolicyV2CcPrecisionReqLimitPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionReqLimitPolicy)(nil)).Elem()
}

func (i CcPolicyV2CcPrecisionReqLimitPolicyArray) ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutput() CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput {
	return i.ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2CcPrecisionReqLimitPolicyArray) ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput)
}

type CcPolicyV2CcPrecisionReqLimitPolicyOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionReqLimitPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimitPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) ToCcPolicyV2CcPrecisionReqLimitPolicyOutput() CcPolicyV2CcPrecisionReqLimitPolicyOutput {
	return o
}

func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) ToCcPolicyV2CcPrecisionReqLimitPolicyOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitPolicyOutput {
	return o
}

// The frequency limit policy mode, the optional value of arg indicates the verification code, and drop indicates the discard.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) string { return v.Action }).(pulumi.StringOutput)
}

// Cookies, one of the three policy entries can only be filled in.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) Cookie() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) *string { return v.Cookie }).(pulumi.StringPtrOutput)
}

// The duration of the frequency limit policy can be taken from 1 to 86400 per second.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) ExecuteDuration() pulumi.IntOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) int { return v.ExecuteDuration }).(pulumi.IntOutput)
}

// The policy item is compared, and the optional value include indicates inclusion, and equal means equal.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) string { return v.Mode }).(pulumi.StringOutput)
}

// Statistical period, take values 1, 10, 30, 60, in seconds.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) int { return v.Period }).(pulumi.IntOutput)
}

// The number of requests, the value is 1 to 20000.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) RequestNum() pulumi.IntOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) int { return v.RequestNum }).(pulumi.IntOutput)
}

// Uri, one of the three policy entries can only be filled in.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

// User-Agent, only one of the three policy entries can be filled in.
func (o CcPolicyV2CcPrecisionReqLimitPolicyOutput) UserAgent() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CcPolicyV2CcPrecisionReqLimitPolicy) *string { return v.UserAgent }).(pulumi.StringPtrOutput)
}

type CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2CcPrecisionReqLimitPolicy)(nil)).Elem()
}

func (o CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput) ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutput() CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput) ToCcPolicyV2CcPrecisionReqLimitPolicyArrayOutputWithContext(ctx context.Context) CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput {
	return o
}

func (o CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput) Index(i pulumi.IntInput) CcPolicyV2CcPrecisionReqLimitPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2CcPrecisionReqLimitPolicy {
		return vs[0].([]CcPolicyV2CcPrecisionReqLimitPolicy)[vs[1].(int)]
	}).(CcPolicyV2CcPrecisionReqLimitPolicyOutput)
}

type CcPolicyV2Threshold struct {
	// domain.
	Domain string `pulumi:"domain"`
	// Cleaning threshold, -1 indicates that the `default` mode is turned on.
	Threshold int `pulumi:"threshold"`
}

// CcPolicyV2ThresholdInput is an input type that accepts CcPolicyV2ThresholdArgs and CcPolicyV2ThresholdOutput values.
// You can construct a concrete instance of `CcPolicyV2ThresholdInput` via:
//
//	CcPolicyV2ThresholdArgs{...}
type CcPolicyV2ThresholdInput interface {
	pulumi.Input

	ToCcPolicyV2ThresholdOutput() CcPolicyV2ThresholdOutput
	ToCcPolicyV2ThresholdOutputWithContext(context.Context) CcPolicyV2ThresholdOutput
}

type CcPolicyV2ThresholdArgs struct {
	// domain.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Cleaning threshold, -1 indicates that the `default` mode is turned on.
	Threshold pulumi.IntInput `pulumi:"threshold"`
}

func (CcPolicyV2ThresholdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2Threshold)(nil)).Elem()
}

func (i CcPolicyV2ThresholdArgs) ToCcPolicyV2ThresholdOutput() CcPolicyV2ThresholdOutput {
	return i.ToCcPolicyV2ThresholdOutputWithContext(context.Background())
}

func (i CcPolicyV2ThresholdArgs) ToCcPolicyV2ThresholdOutputWithContext(ctx context.Context) CcPolicyV2ThresholdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2ThresholdOutput)
}

// CcPolicyV2ThresholdArrayInput is an input type that accepts CcPolicyV2ThresholdArray and CcPolicyV2ThresholdArrayOutput values.
// You can construct a concrete instance of `CcPolicyV2ThresholdArrayInput` via:
//
//	CcPolicyV2ThresholdArray{ CcPolicyV2ThresholdArgs{...} }
type CcPolicyV2ThresholdArrayInput interface {
	pulumi.Input

	ToCcPolicyV2ThresholdArrayOutput() CcPolicyV2ThresholdArrayOutput
	ToCcPolicyV2ThresholdArrayOutputWithContext(context.Context) CcPolicyV2ThresholdArrayOutput
}

type CcPolicyV2ThresholdArray []CcPolicyV2ThresholdInput

func (CcPolicyV2ThresholdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2Threshold)(nil)).Elem()
}

func (i CcPolicyV2ThresholdArray) ToCcPolicyV2ThresholdArrayOutput() CcPolicyV2ThresholdArrayOutput {
	return i.ToCcPolicyV2ThresholdArrayOutputWithContext(context.Background())
}

func (i CcPolicyV2ThresholdArray) ToCcPolicyV2ThresholdArrayOutputWithContext(ctx context.Context) CcPolicyV2ThresholdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcPolicyV2ThresholdArrayOutput)
}

type CcPolicyV2ThresholdOutput struct{ *pulumi.OutputState }

func (CcPolicyV2ThresholdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CcPolicyV2Threshold)(nil)).Elem()
}

func (o CcPolicyV2ThresholdOutput) ToCcPolicyV2ThresholdOutput() CcPolicyV2ThresholdOutput {
	return o
}

func (o CcPolicyV2ThresholdOutput) ToCcPolicyV2ThresholdOutputWithContext(ctx context.Context) CcPolicyV2ThresholdOutput {
	return o
}

// domain.
func (o CcPolicyV2ThresholdOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v CcPolicyV2Threshold) string { return v.Domain }).(pulumi.StringOutput)
}

// Cleaning threshold, -1 indicates that the `default` mode is turned on.
func (o CcPolicyV2ThresholdOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v CcPolicyV2Threshold) int { return v.Threshold }).(pulumi.IntOutput)
}

type CcPolicyV2ThresholdArrayOutput struct{ *pulumi.OutputState }

func (CcPolicyV2ThresholdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CcPolicyV2Threshold)(nil)).Elem()
}

func (o CcPolicyV2ThresholdArrayOutput) ToCcPolicyV2ThresholdArrayOutput() CcPolicyV2ThresholdArrayOutput {
	return o
}

func (o CcPolicyV2ThresholdArrayOutput) ToCcPolicyV2ThresholdArrayOutputWithContext(ctx context.Context) CcPolicyV2ThresholdArrayOutput {
	return o
}

func (o CcPolicyV2ThresholdArrayOutput) Index(i pulumi.IntInput) CcPolicyV2ThresholdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CcPolicyV2Threshold {
		return vs[0].([]CcPolicyV2Threshold)[vs[1].(int)]
	}).(CcPolicyV2ThresholdOutput)
}

type DdosIpAttachmentV2BoundIpList struct {
	// Category of product that can be bound. Valid values: public (CVM and CLB), bm (BM), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), and other (hosted IP). This field is required when you perform binding.
	BizType *string `pulumi:"bizType"`
	// Sub-product category. Valid values: cvm (CVM), lb (Load balancer), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), eip (BM EIP) and other (managed IP). This field is required when you perform binding.
	DeviceType *string `pulumi:"deviceType"`
	// Anti-DDoS instance ID of the IP. This field is required only when the instance is bound to an IP. For example, this field InstanceId will be eni-* if the instance ID is bound to an ENI IP; none if there is no instance to bind to a managed IP.
	InstanceId *string `pulumi:"instanceId"`
	// IP address.
	Ip string `pulumi:"ip"`
}

// DdosIpAttachmentV2BoundIpListInput is an input type that accepts DdosIpAttachmentV2BoundIpListArgs and DdosIpAttachmentV2BoundIpListOutput values.
// You can construct a concrete instance of `DdosIpAttachmentV2BoundIpListInput` via:
//
//	DdosIpAttachmentV2BoundIpListArgs{...}
type DdosIpAttachmentV2BoundIpListInput interface {
	pulumi.Input

	ToDdosIpAttachmentV2BoundIpListOutput() DdosIpAttachmentV2BoundIpListOutput
	ToDdosIpAttachmentV2BoundIpListOutputWithContext(context.Context) DdosIpAttachmentV2BoundIpListOutput
}

type DdosIpAttachmentV2BoundIpListArgs struct {
	// Category of product that can be bound. Valid values: public (CVM and CLB), bm (BM), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), and other (hosted IP). This field is required when you perform binding.
	BizType pulumi.StringPtrInput `pulumi:"bizType"`
	// Sub-product category. Valid values: cvm (CVM), lb (Load balancer), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), eip (BM EIP) and other (managed IP). This field is required when you perform binding.
	DeviceType pulumi.StringPtrInput `pulumi:"deviceType"`
	// Anti-DDoS instance ID of the IP. This field is required only when the instance is bound to an IP. For example, this field InstanceId will be eni-* if the instance ID is bound to an ENI IP; none if there is no instance to bind to a managed IP.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// IP address.
	Ip pulumi.StringInput `pulumi:"ip"`
}

func (DdosIpAttachmentV2BoundIpListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosIpAttachmentV2BoundIpList)(nil)).Elem()
}

func (i DdosIpAttachmentV2BoundIpListArgs) ToDdosIpAttachmentV2BoundIpListOutput() DdosIpAttachmentV2BoundIpListOutput {
	return i.ToDdosIpAttachmentV2BoundIpListOutputWithContext(context.Background())
}

func (i DdosIpAttachmentV2BoundIpListArgs) ToDdosIpAttachmentV2BoundIpListOutputWithContext(ctx context.Context) DdosIpAttachmentV2BoundIpListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosIpAttachmentV2BoundIpListOutput)
}

// DdosIpAttachmentV2BoundIpListArrayInput is an input type that accepts DdosIpAttachmentV2BoundIpListArray and DdosIpAttachmentV2BoundIpListArrayOutput values.
// You can construct a concrete instance of `DdosIpAttachmentV2BoundIpListArrayInput` via:
//
//	DdosIpAttachmentV2BoundIpListArray{ DdosIpAttachmentV2BoundIpListArgs{...} }
type DdosIpAttachmentV2BoundIpListArrayInput interface {
	pulumi.Input

	ToDdosIpAttachmentV2BoundIpListArrayOutput() DdosIpAttachmentV2BoundIpListArrayOutput
	ToDdosIpAttachmentV2BoundIpListArrayOutputWithContext(context.Context) DdosIpAttachmentV2BoundIpListArrayOutput
}

type DdosIpAttachmentV2BoundIpListArray []DdosIpAttachmentV2BoundIpListInput

func (DdosIpAttachmentV2BoundIpListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosIpAttachmentV2BoundIpList)(nil)).Elem()
}

func (i DdosIpAttachmentV2BoundIpListArray) ToDdosIpAttachmentV2BoundIpListArrayOutput() DdosIpAttachmentV2BoundIpListArrayOutput {
	return i.ToDdosIpAttachmentV2BoundIpListArrayOutputWithContext(context.Background())
}

func (i DdosIpAttachmentV2BoundIpListArray) ToDdosIpAttachmentV2BoundIpListArrayOutputWithContext(ctx context.Context) DdosIpAttachmentV2BoundIpListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosIpAttachmentV2BoundIpListArrayOutput)
}

type DdosIpAttachmentV2BoundIpListOutput struct{ *pulumi.OutputState }

func (DdosIpAttachmentV2BoundIpListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosIpAttachmentV2BoundIpList)(nil)).Elem()
}

func (o DdosIpAttachmentV2BoundIpListOutput) ToDdosIpAttachmentV2BoundIpListOutput() DdosIpAttachmentV2BoundIpListOutput {
	return o
}

func (o DdosIpAttachmentV2BoundIpListOutput) ToDdosIpAttachmentV2BoundIpListOutputWithContext(ctx context.Context) DdosIpAttachmentV2BoundIpListOutput {
	return o
}

// Category of product that can be bound. Valid values: public (CVM and CLB), bm (BM), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), and other (hosted IP). This field is required when you perform binding.
func (o DdosIpAttachmentV2BoundIpListOutput) BizType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosIpAttachmentV2BoundIpList) *string { return v.BizType }).(pulumi.StringPtrOutput)
}

// Sub-product category. Valid values: cvm (CVM), lb (Load balancer), eni (ENI), vpngw (VPN gateway), natgw (NAT gateway), waf (WAF), fpc (financial products), gaap (GAAP), eip (BM EIP) and other (managed IP). This field is required when you perform binding.
func (o DdosIpAttachmentV2BoundIpListOutput) DeviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosIpAttachmentV2BoundIpList) *string { return v.DeviceType }).(pulumi.StringPtrOutput)
}

// Anti-DDoS instance ID of the IP. This field is required only when the instance is bound to an IP. For example, this field InstanceId will be eni-* if the instance ID is bound to an ENI IP; none if there is no instance to bind to a managed IP.
func (o DdosIpAttachmentV2BoundIpListOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosIpAttachmentV2BoundIpList) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// IP address.
func (o DdosIpAttachmentV2BoundIpListOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v DdosIpAttachmentV2BoundIpList) string { return v.Ip }).(pulumi.StringOutput)
}

type DdosIpAttachmentV2BoundIpListArrayOutput struct{ *pulumi.OutputState }

func (DdosIpAttachmentV2BoundIpListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosIpAttachmentV2BoundIpList)(nil)).Elem()
}

func (o DdosIpAttachmentV2BoundIpListArrayOutput) ToDdosIpAttachmentV2BoundIpListArrayOutput() DdosIpAttachmentV2BoundIpListArrayOutput {
	return o
}

func (o DdosIpAttachmentV2BoundIpListArrayOutput) ToDdosIpAttachmentV2BoundIpListArrayOutputWithContext(ctx context.Context) DdosIpAttachmentV2BoundIpListArrayOutput {
	return o
}

func (o DdosIpAttachmentV2BoundIpListArrayOutput) Index(i pulumi.IntInput) DdosIpAttachmentV2BoundIpListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosIpAttachmentV2BoundIpList {
		return vs[0].([]DdosIpAttachmentV2BoundIpList)[vs[1].(int)]
	}).(DdosIpAttachmentV2BoundIpListOutput)
}

type DdosPolicyDropOption struct {
	// The number of new connections based on destination IP that trigger suppression of connections. Valid value ranges: (0~4294967295).
	BadConnThreshold int `pulumi:"badConnThreshold"`
	// Indicate whether to check null connection or not.
	CheckSyncConn bool `pulumi:"checkSyncConn"`
	// Connection timeout of abnormal connection check. Valid value ranges: (0~65535).
	ConnTimeout int `pulumi:"connTimeout"`
	// The limit of concurrent connections based on destination IP. Valid value ranges: (0~4294967295).
	DConnLimit int `pulumi:"dConnLimit"`
	// The limit of new connections based on destination IP. Valid value ranges: (0~4294967295).
	DNewLimit int `pulumi:"dNewLimit"`
	// Indicate whether to drop abroad traffic or not.
	DropAbroad bool `pulumi:"dropAbroad"`
	// Indicate whether to drop ICMP protocol or not.
	DropIcmp bool `pulumi:"dropIcmp"`
	// Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
	DropOther bool `pulumi:"dropOther"`
	// Indicate whether to drop TCP protocol or not.
	DropTcp bool `pulumi:"dropTcp"`
	// Indicate to drop UDP protocol or not.
	DropUdp bool `pulumi:"dropUdp"`
	// The limit of ICMP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
	IcmpMbpsLimit int `pulumi:"icmpMbpsLimit"`
	// Indicate to enable null connection or not.
	NullConnEnable bool `pulumi:"nullConnEnable"`
	// The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate. Valid value ranges: (0~4294967295)(Mbps).
	OtherMbpsLimit int `pulumi:"otherMbpsLimit"`
	// The limit of concurrent connections based on source IP. Valid value ranges: (0~4294967295).
	SConnLimit int `pulumi:"sConnLimit"`
	// The limit of new connections based on source IP. Valid value ranges: (0~4294967295).
	SNewLimit int `pulumi:"sNewLimit"`
	// The limit of syn of abnormal connection check. Valid value ranges: (0~100).
	SynLimit int `pulumi:"synLimit"`
	// The percentage of syn in ack of abnormal connection check. Valid value ranges: (0~100).
	SynRate *int `pulumi:"synRate"`
	// The limit of TCP traffic. Valid value ranges: (0~4294967295)(Mbps).
	TcpMbpsLimit int `pulumi:"tcpMbpsLimit"`
	// The limit of UDP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
	UdpMbpsLimit int `pulumi:"udpMbpsLimit"`
}

// DdosPolicyDropOptionInput is an input type that accepts DdosPolicyDropOptionArgs and DdosPolicyDropOptionOutput values.
// You can construct a concrete instance of `DdosPolicyDropOptionInput` via:
//
//	DdosPolicyDropOptionArgs{...}
type DdosPolicyDropOptionInput interface {
	pulumi.Input

	ToDdosPolicyDropOptionOutput() DdosPolicyDropOptionOutput
	ToDdosPolicyDropOptionOutputWithContext(context.Context) DdosPolicyDropOptionOutput
}

type DdosPolicyDropOptionArgs struct {
	// The number of new connections based on destination IP that trigger suppression of connections. Valid value ranges: (0~4294967295).
	BadConnThreshold pulumi.IntInput `pulumi:"badConnThreshold"`
	// Indicate whether to check null connection or not.
	CheckSyncConn pulumi.BoolInput `pulumi:"checkSyncConn"`
	// Connection timeout of abnormal connection check. Valid value ranges: (0~65535).
	ConnTimeout pulumi.IntInput `pulumi:"connTimeout"`
	// The limit of concurrent connections based on destination IP. Valid value ranges: (0~4294967295).
	DConnLimit pulumi.IntInput `pulumi:"dConnLimit"`
	// The limit of new connections based on destination IP. Valid value ranges: (0~4294967295).
	DNewLimit pulumi.IntInput `pulumi:"dNewLimit"`
	// Indicate whether to drop abroad traffic or not.
	DropAbroad pulumi.BoolInput `pulumi:"dropAbroad"`
	// Indicate whether to drop ICMP protocol or not.
	DropIcmp pulumi.BoolInput `pulumi:"dropIcmp"`
	// Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
	DropOther pulumi.BoolInput `pulumi:"dropOther"`
	// Indicate whether to drop TCP protocol or not.
	DropTcp pulumi.BoolInput `pulumi:"dropTcp"`
	// Indicate to drop UDP protocol or not.
	DropUdp pulumi.BoolInput `pulumi:"dropUdp"`
	// The limit of ICMP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
	IcmpMbpsLimit pulumi.IntInput `pulumi:"icmpMbpsLimit"`
	// Indicate to enable null connection or not.
	NullConnEnable pulumi.BoolInput `pulumi:"nullConnEnable"`
	// The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate. Valid value ranges: (0~4294967295)(Mbps).
	OtherMbpsLimit pulumi.IntInput `pulumi:"otherMbpsLimit"`
	// The limit of concurrent connections based on source IP. Valid value ranges: (0~4294967295).
	SConnLimit pulumi.IntInput `pulumi:"sConnLimit"`
	// The limit of new connections based on source IP. Valid value ranges: (0~4294967295).
	SNewLimit pulumi.IntInput `pulumi:"sNewLimit"`
	// The limit of syn of abnormal connection check. Valid value ranges: (0~100).
	SynLimit pulumi.IntInput `pulumi:"synLimit"`
	// The percentage of syn in ack of abnormal connection check. Valid value ranges: (0~100).
	SynRate pulumi.IntPtrInput `pulumi:"synRate"`
	// The limit of TCP traffic. Valid value ranges: (0~4294967295)(Mbps).
	TcpMbpsLimit pulumi.IntInput `pulumi:"tcpMbpsLimit"`
	// The limit of UDP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
	UdpMbpsLimit pulumi.IntInput `pulumi:"udpMbpsLimit"`
}

func (DdosPolicyDropOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyDropOption)(nil)).Elem()
}

func (i DdosPolicyDropOptionArgs) ToDdosPolicyDropOptionOutput() DdosPolicyDropOptionOutput {
	return i.ToDdosPolicyDropOptionOutputWithContext(context.Background())
}

func (i DdosPolicyDropOptionArgs) ToDdosPolicyDropOptionOutputWithContext(ctx context.Context) DdosPolicyDropOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyDropOptionOutput)
}

// DdosPolicyDropOptionArrayInput is an input type that accepts DdosPolicyDropOptionArray and DdosPolicyDropOptionArrayOutput values.
// You can construct a concrete instance of `DdosPolicyDropOptionArrayInput` via:
//
//	DdosPolicyDropOptionArray{ DdosPolicyDropOptionArgs{...} }
type DdosPolicyDropOptionArrayInput interface {
	pulumi.Input

	ToDdosPolicyDropOptionArrayOutput() DdosPolicyDropOptionArrayOutput
	ToDdosPolicyDropOptionArrayOutputWithContext(context.Context) DdosPolicyDropOptionArrayOutput
}

type DdosPolicyDropOptionArray []DdosPolicyDropOptionInput

func (DdosPolicyDropOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyDropOption)(nil)).Elem()
}

func (i DdosPolicyDropOptionArray) ToDdosPolicyDropOptionArrayOutput() DdosPolicyDropOptionArrayOutput {
	return i.ToDdosPolicyDropOptionArrayOutputWithContext(context.Background())
}

func (i DdosPolicyDropOptionArray) ToDdosPolicyDropOptionArrayOutputWithContext(ctx context.Context) DdosPolicyDropOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyDropOptionArrayOutput)
}

type DdosPolicyDropOptionOutput struct{ *pulumi.OutputState }

func (DdosPolicyDropOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyDropOption)(nil)).Elem()
}

func (o DdosPolicyDropOptionOutput) ToDdosPolicyDropOptionOutput() DdosPolicyDropOptionOutput {
	return o
}

func (o DdosPolicyDropOptionOutput) ToDdosPolicyDropOptionOutputWithContext(ctx context.Context) DdosPolicyDropOptionOutput {
	return o
}

// The number of new connections based on destination IP that trigger suppression of connections. Valid value ranges: (0~4294967295).
func (o DdosPolicyDropOptionOutput) BadConnThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.BadConnThreshold }).(pulumi.IntOutput)
}

// Indicate whether to check null connection or not.
func (o DdosPolicyDropOptionOutput) CheckSyncConn() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.CheckSyncConn }).(pulumi.BoolOutput)
}

// Connection timeout of abnormal connection check. Valid value ranges: (0~65535).
func (o DdosPolicyDropOptionOutput) ConnTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.ConnTimeout }).(pulumi.IntOutput)
}

// The limit of concurrent connections based on destination IP. Valid value ranges: (0~4294967295).
func (o DdosPolicyDropOptionOutput) DConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.DConnLimit }).(pulumi.IntOutput)
}

// The limit of new connections based on destination IP. Valid value ranges: (0~4294967295).
func (o DdosPolicyDropOptionOutput) DNewLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.DNewLimit }).(pulumi.IntOutput)
}

// Indicate whether to drop abroad traffic or not.
func (o DdosPolicyDropOptionOutput) DropAbroad() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.DropAbroad }).(pulumi.BoolOutput)
}

// Indicate whether to drop ICMP protocol or not.
func (o DdosPolicyDropOptionOutput) DropIcmp() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.DropIcmp }).(pulumi.BoolOutput)
}

// Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
func (o DdosPolicyDropOptionOutput) DropOther() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.DropOther }).(pulumi.BoolOutput)
}

// Indicate whether to drop TCP protocol or not.
func (o DdosPolicyDropOptionOutput) DropTcp() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.DropTcp }).(pulumi.BoolOutput)
}

// Indicate to drop UDP protocol or not.
func (o DdosPolicyDropOptionOutput) DropUdp() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.DropUdp }).(pulumi.BoolOutput)
}

// The limit of ICMP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
func (o DdosPolicyDropOptionOutput) IcmpMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.IcmpMbpsLimit }).(pulumi.IntOutput)
}

// Indicate to enable null connection or not.
func (o DdosPolicyDropOptionOutput) NullConnEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) bool { return v.NullConnEnable }).(pulumi.BoolOutput)
}

// The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate. Valid value ranges: (0~4294967295)(Mbps).
func (o DdosPolicyDropOptionOutput) OtherMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.OtherMbpsLimit }).(pulumi.IntOutput)
}

// The limit of concurrent connections based on source IP. Valid value ranges: (0~4294967295).
func (o DdosPolicyDropOptionOutput) SConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.SConnLimit }).(pulumi.IntOutput)
}

// The limit of new connections based on source IP. Valid value ranges: (0~4294967295).
func (o DdosPolicyDropOptionOutput) SNewLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.SNewLimit }).(pulumi.IntOutput)
}

// The limit of syn of abnormal connection check. Valid value ranges: (0~100).
func (o DdosPolicyDropOptionOutput) SynLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.SynLimit }).(pulumi.IntOutput)
}

// The percentage of syn in ack of abnormal connection check. Valid value ranges: (0~100).
func (o DdosPolicyDropOptionOutput) SynRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) *int { return v.SynRate }).(pulumi.IntPtrOutput)
}

// The limit of TCP traffic. Valid value ranges: (0~4294967295)(Mbps).
func (o DdosPolicyDropOptionOutput) TcpMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.TcpMbpsLimit }).(pulumi.IntOutput)
}

// The limit of UDP traffic rate. Valid value ranges: (0~4294967295)(Mbps).
func (o DdosPolicyDropOptionOutput) UdpMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyDropOption) int { return v.UdpMbpsLimit }).(pulumi.IntOutput)
}

type DdosPolicyDropOptionArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyDropOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyDropOption)(nil)).Elem()
}

func (o DdosPolicyDropOptionArrayOutput) ToDdosPolicyDropOptionArrayOutput() DdosPolicyDropOptionArrayOutput {
	return o
}

func (o DdosPolicyDropOptionArrayOutput) ToDdosPolicyDropOptionArrayOutputWithContext(ctx context.Context) DdosPolicyDropOptionArrayOutput {
	return o
}

func (o DdosPolicyDropOptionArrayOutput) Index(i pulumi.IntInput) DdosPolicyDropOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyDropOption {
		return vs[0].([]DdosPolicyDropOption)[vs[1].(int)]
	}).(DdosPolicyDropOptionOutput)
}

type DdosPolicyPacketFilter struct {
	// Action of port to take. Valid values: `drop`, `dropBlack`,`dropRst`,`dropBlackRst`,`transmit`.`drop`(drop the packet), `dropBlack`(drop the packet and black the ip),`dropRst`(drop the packet and disconnect),`dropBlackRst`(drop the packet, black the ip and disconnect),`transmit`(transmit the packet).
	Action *string `pulumi:"action"`
	// End port of the destination. Valid value ranges: (0~65535). It must be greater than `dStartPort`.
	DEndPort *int `pulumi:"dEndPort"`
	// Start port of the destination. Valid value ranges: (0~65535).
	DStartPort *int `pulumi:"dStartPort"`
	// The depth of match. Valid value ranges: (0~1500).
	Depth *int `pulumi:"depth"`
	// Indicate whether to include the key word/regular expression or not.
	IsInclude *bool `pulumi:"isInclude"`
	// Indicate whether to check load or not, `beginL5` means to match and `noMatch` means not.
	MatchBegin *string `pulumi:"matchBegin"`
	// The key word or regular expression.
	MatchStr *string `pulumi:"matchStr"`
	// Match type. Valid values: `sunday` and `pcre`. `sunday` means key word match while `pcre` means regular match.
	MatchType *string `pulumi:"matchType"`
	// The offset of match. Valid value ranges: (0~1500).
	Offset *int `pulumi:"offset"`
	// The max length of the packet. Valid value ranges: (0~1500)(Mbps). It must be greater than `pktLengthMin`.
	PktLengthMax *int `pulumi:"pktLengthMax"`
	// The minimum length of the packet. Valid value ranges: (0~1500)(Mbps).
	PktLengthMin *int `pulumi:"pktLengthMin"`
	// Protocol. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol *string `pulumi:"protocol"`
	// End port of the source. Valid value ranges: (0~65535). It must be greater than `sStartPort`.
	SEndPort *int `pulumi:"sEndPort"`
	// Start port of the source. Valid value ranges: (0~65535).
	SStartPort *int `pulumi:"sStartPort"`
}

// DdosPolicyPacketFilterInput is an input type that accepts DdosPolicyPacketFilterArgs and DdosPolicyPacketFilterOutput values.
// You can construct a concrete instance of `DdosPolicyPacketFilterInput` via:
//
//	DdosPolicyPacketFilterArgs{...}
type DdosPolicyPacketFilterInput interface {
	pulumi.Input

	ToDdosPolicyPacketFilterOutput() DdosPolicyPacketFilterOutput
	ToDdosPolicyPacketFilterOutputWithContext(context.Context) DdosPolicyPacketFilterOutput
}

type DdosPolicyPacketFilterArgs struct {
	// Action of port to take. Valid values: `drop`, `dropBlack`,`dropRst`,`dropBlackRst`,`transmit`.`drop`(drop the packet), `dropBlack`(drop the packet and black the ip),`dropRst`(drop the packet and disconnect),`dropBlackRst`(drop the packet, black the ip and disconnect),`transmit`(transmit the packet).
	Action pulumi.StringPtrInput `pulumi:"action"`
	// End port of the destination. Valid value ranges: (0~65535). It must be greater than `dStartPort`.
	DEndPort pulumi.IntPtrInput `pulumi:"dEndPort"`
	// Start port of the destination. Valid value ranges: (0~65535).
	DStartPort pulumi.IntPtrInput `pulumi:"dStartPort"`
	// The depth of match. Valid value ranges: (0~1500).
	Depth pulumi.IntPtrInput `pulumi:"depth"`
	// Indicate whether to include the key word/regular expression or not.
	IsInclude pulumi.BoolPtrInput `pulumi:"isInclude"`
	// Indicate whether to check load or not, `beginL5` means to match and `noMatch` means not.
	MatchBegin pulumi.StringPtrInput `pulumi:"matchBegin"`
	// The key word or regular expression.
	MatchStr pulumi.StringPtrInput `pulumi:"matchStr"`
	// Match type. Valid values: `sunday` and `pcre`. `sunday` means key word match while `pcre` means regular match.
	MatchType pulumi.StringPtrInput `pulumi:"matchType"`
	// The offset of match. Valid value ranges: (0~1500).
	Offset pulumi.IntPtrInput `pulumi:"offset"`
	// The max length of the packet. Valid value ranges: (0~1500)(Mbps). It must be greater than `pktLengthMin`.
	PktLengthMax pulumi.IntPtrInput `pulumi:"pktLengthMax"`
	// The minimum length of the packet. Valid value ranges: (0~1500)(Mbps).
	PktLengthMin pulumi.IntPtrInput `pulumi:"pktLengthMin"`
	// Protocol. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// End port of the source. Valid value ranges: (0~65535). It must be greater than `sStartPort`.
	SEndPort pulumi.IntPtrInput `pulumi:"sEndPort"`
	// Start port of the source. Valid value ranges: (0~65535).
	SStartPort pulumi.IntPtrInput `pulumi:"sStartPort"`
}

func (DdosPolicyPacketFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyPacketFilter)(nil)).Elem()
}

func (i DdosPolicyPacketFilterArgs) ToDdosPolicyPacketFilterOutput() DdosPolicyPacketFilterOutput {
	return i.ToDdosPolicyPacketFilterOutputWithContext(context.Background())
}

func (i DdosPolicyPacketFilterArgs) ToDdosPolicyPacketFilterOutputWithContext(ctx context.Context) DdosPolicyPacketFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyPacketFilterOutput)
}

// DdosPolicyPacketFilterArrayInput is an input type that accepts DdosPolicyPacketFilterArray and DdosPolicyPacketFilterArrayOutput values.
// You can construct a concrete instance of `DdosPolicyPacketFilterArrayInput` via:
//
//	DdosPolicyPacketFilterArray{ DdosPolicyPacketFilterArgs{...} }
type DdosPolicyPacketFilterArrayInput interface {
	pulumi.Input

	ToDdosPolicyPacketFilterArrayOutput() DdosPolicyPacketFilterArrayOutput
	ToDdosPolicyPacketFilterArrayOutputWithContext(context.Context) DdosPolicyPacketFilterArrayOutput
}

type DdosPolicyPacketFilterArray []DdosPolicyPacketFilterInput

func (DdosPolicyPacketFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyPacketFilter)(nil)).Elem()
}

func (i DdosPolicyPacketFilterArray) ToDdosPolicyPacketFilterArrayOutput() DdosPolicyPacketFilterArrayOutput {
	return i.ToDdosPolicyPacketFilterArrayOutputWithContext(context.Background())
}

func (i DdosPolicyPacketFilterArray) ToDdosPolicyPacketFilterArrayOutputWithContext(ctx context.Context) DdosPolicyPacketFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyPacketFilterArrayOutput)
}

type DdosPolicyPacketFilterOutput struct{ *pulumi.OutputState }

func (DdosPolicyPacketFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyPacketFilter)(nil)).Elem()
}

func (o DdosPolicyPacketFilterOutput) ToDdosPolicyPacketFilterOutput() DdosPolicyPacketFilterOutput {
	return o
}

func (o DdosPolicyPacketFilterOutput) ToDdosPolicyPacketFilterOutputWithContext(ctx context.Context) DdosPolicyPacketFilterOutput {
	return o
}

// Action of port to take. Valid values: `drop`, `dropBlack`,`dropRst`,`dropBlackRst`,`transmit`.`drop`(drop the packet), `dropBlack`(drop the packet and black the ip),`dropRst`(drop the packet and disconnect),`dropBlackRst`(drop the packet, black the ip and disconnect),`transmit`(transmit the packet).
func (o DdosPolicyPacketFilterOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// End port of the destination. Valid value ranges: (0~65535). It must be greater than `dStartPort`.
func (o DdosPolicyPacketFilterOutput) DEndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.DEndPort }).(pulumi.IntPtrOutput)
}

// Start port of the destination. Valid value ranges: (0~65535).
func (o DdosPolicyPacketFilterOutput) DStartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.DStartPort }).(pulumi.IntPtrOutput)
}

// The depth of match. Valid value ranges: (0~1500).
func (o DdosPolicyPacketFilterOutput) Depth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.Depth }).(pulumi.IntPtrOutput)
}

// Indicate whether to include the key word/regular expression or not.
func (o DdosPolicyPacketFilterOutput) IsInclude() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *bool { return v.IsInclude }).(pulumi.BoolPtrOutput)
}

// Indicate whether to check load or not, `beginL5` means to match and `noMatch` means not.
func (o DdosPolicyPacketFilterOutput) MatchBegin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *string { return v.MatchBegin }).(pulumi.StringPtrOutput)
}

// The key word or regular expression.
func (o DdosPolicyPacketFilterOutput) MatchStr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *string { return v.MatchStr }).(pulumi.StringPtrOutput)
}

// Match type. Valid values: `sunday` and `pcre`. `sunday` means key word match while `pcre` means regular match.
func (o DdosPolicyPacketFilterOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *string { return v.MatchType }).(pulumi.StringPtrOutput)
}

// The offset of match. Valid value ranges: (0~1500).
func (o DdosPolicyPacketFilterOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

// The max length of the packet. Valid value ranges: (0~1500)(Mbps). It must be greater than `pktLengthMin`.
func (o DdosPolicyPacketFilterOutput) PktLengthMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.PktLengthMax }).(pulumi.IntPtrOutput)
}

// The minimum length of the packet. Valid value ranges: (0~1500)(Mbps).
func (o DdosPolicyPacketFilterOutput) PktLengthMin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.PktLengthMin }).(pulumi.IntPtrOutput)
}

// Protocol. Valid values: `tcp`, `udp`, `icmp`, `all`.
func (o DdosPolicyPacketFilterOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// End port of the source. Valid value ranges: (0~65535). It must be greater than `sStartPort`.
func (o DdosPolicyPacketFilterOutput) SEndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.SEndPort }).(pulumi.IntPtrOutput)
}

// Start port of the source. Valid value ranges: (0~65535).
func (o DdosPolicyPacketFilterOutput) SStartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPacketFilter) *int { return v.SStartPort }).(pulumi.IntPtrOutput)
}

type DdosPolicyPacketFilterArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyPacketFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyPacketFilter)(nil)).Elem()
}

func (o DdosPolicyPacketFilterArrayOutput) ToDdosPolicyPacketFilterArrayOutput() DdosPolicyPacketFilterArrayOutput {
	return o
}

func (o DdosPolicyPacketFilterArrayOutput) ToDdosPolicyPacketFilterArrayOutputWithContext(ctx context.Context) DdosPolicyPacketFilterArrayOutput {
	return o
}

func (o DdosPolicyPacketFilterArrayOutput) Index(i pulumi.IntInput) DdosPolicyPacketFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyPacketFilter {
		return vs[0].([]DdosPolicyPacketFilter)[vs[1].(int)]
	}).(DdosPolicyPacketFilterOutput)
}

type DdosPolicyPortFilter struct {
	// Action of port to take. Valid values: `drop`, `transmit`.
	Action *string `pulumi:"action"`
	// End port. Valid value ranges: (0~65535). It must be greater than `startPort`.
	EndPort *int `pulumi:"endPort"`
	// The type of forbidden port. Valid values: `0`, `1`, `2`. `0` for destination ports make effect, `1` for source ports make effect. `2` for both destination and source ports.
	Kind *int `pulumi:"kind"`
	// Protocol. Valid values are `tcp`, `udp`, `icmp`, `all`.
	Protocol *string `pulumi:"protocol"`
	// Start port. Valid value ranges: (0~65535).
	StartPort *int `pulumi:"startPort"`
}

// DdosPolicyPortFilterInput is an input type that accepts DdosPolicyPortFilterArgs and DdosPolicyPortFilterOutput values.
// You can construct a concrete instance of `DdosPolicyPortFilterInput` via:
//
//	DdosPolicyPortFilterArgs{...}
type DdosPolicyPortFilterInput interface {
	pulumi.Input

	ToDdosPolicyPortFilterOutput() DdosPolicyPortFilterOutput
	ToDdosPolicyPortFilterOutputWithContext(context.Context) DdosPolicyPortFilterOutput
}

type DdosPolicyPortFilterArgs struct {
	// Action of port to take. Valid values: `drop`, `transmit`.
	Action pulumi.StringPtrInput `pulumi:"action"`
	// End port. Valid value ranges: (0~65535). It must be greater than `startPort`.
	EndPort pulumi.IntPtrInput `pulumi:"endPort"`
	// The type of forbidden port. Valid values: `0`, `1`, `2`. `0` for destination ports make effect, `1` for source ports make effect. `2` for both destination and source ports.
	Kind pulumi.IntPtrInput `pulumi:"kind"`
	// Protocol. Valid values are `tcp`, `udp`, `icmp`, `all`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// Start port. Valid value ranges: (0~65535).
	StartPort pulumi.IntPtrInput `pulumi:"startPort"`
}

func (DdosPolicyPortFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyPortFilter)(nil)).Elem()
}

func (i DdosPolicyPortFilterArgs) ToDdosPolicyPortFilterOutput() DdosPolicyPortFilterOutput {
	return i.ToDdosPolicyPortFilterOutputWithContext(context.Background())
}

func (i DdosPolicyPortFilterArgs) ToDdosPolicyPortFilterOutputWithContext(ctx context.Context) DdosPolicyPortFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyPortFilterOutput)
}

// DdosPolicyPortFilterArrayInput is an input type that accepts DdosPolicyPortFilterArray and DdosPolicyPortFilterArrayOutput values.
// You can construct a concrete instance of `DdosPolicyPortFilterArrayInput` via:
//
//	DdosPolicyPortFilterArray{ DdosPolicyPortFilterArgs{...} }
type DdosPolicyPortFilterArrayInput interface {
	pulumi.Input

	ToDdosPolicyPortFilterArrayOutput() DdosPolicyPortFilterArrayOutput
	ToDdosPolicyPortFilterArrayOutputWithContext(context.Context) DdosPolicyPortFilterArrayOutput
}

type DdosPolicyPortFilterArray []DdosPolicyPortFilterInput

func (DdosPolicyPortFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyPortFilter)(nil)).Elem()
}

func (i DdosPolicyPortFilterArray) ToDdosPolicyPortFilterArrayOutput() DdosPolicyPortFilterArrayOutput {
	return i.ToDdosPolicyPortFilterArrayOutputWithContext(context.Background())
}

func (i DdosPolicyPortFilterArray) ToDdosPolicyPortFilterArrayOutputWithContext(ctx context.Context) DdosPolicyPortFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyPortFilterArrayOutput)
}

type DdosPolicyPortFilterOutput struct{ *pulumi.OutputState }

func (DdosPolicyPortFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyPortFilter)(nil)).Elem()
}

func (o DdosPolicyPortFilterOutput) ToDdosPolicyPortFilterOutput() DdosPolicyPortFilterOutput {
	return o
}

func (o DdosPolicyPortFilterOutput) ToDdosPolicyPortFilterOutputWithContext(ctx context.Context) DdosPolicyPortFilterOutput {
	return o
}

// Action of port to take. Valid values: `drop`, `transmit`.
func (o DdosPolicyPortFilterOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPortFilter) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// End port. Valid value ranges: (0~65535). It must be greater than `startPort`.
func (o DdosPolicyPortFilterOutput) EndPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPortFilter) *int { return v.EndPort }).(pulumi.IntPtrOutput)
}

// The type of forbidden port. Valid values: `0`, `1`, `2`. `0` for destination ports make effect, `1` for source ports make effect. `2` for both destination and source ports.
func (o DdosPolicyPortFilterOutput) Kind() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPortFilter) *int { return v.Kind }).(pulumi.IntPtrOutput)
}

// Protocol. Valid values are `tcp`, `udp`, `icmp`, `all`.
func (o DdosPolicyPortFilterOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyPortFilter) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Start port. Valid value ranges: (0~65535).
func (o DdosPolicyPortFilterOutput) StartPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyPortFilter) *int { return v.StartPort }).(pulumi.IntPtrOutput)
}

type DdosPolicyPortFilterArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyPortFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyPortFilter)(nil)).Elem()
}

func (o DdosPolicyPortFilterArrayOutput) ToDdosPolicyPortFilterArrayOutput() DdosPolicyPortFilterArrayOutput {
	return o
}

func (o DdosPolicyPortFilterArrayOutput) ToDdosPolicyPortFilterArrayOutputWithContext(ctx context.Context) DdosPolicyPortFilterArrayOutput {
	return o
}

func (o DdosPolicyPortFilterArrayOutput) Index(i pulumi.IntInput) DdosPolicyPortFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyPortFilter {
		return vs[0].([]DdosPolicyPortFilter)[vs[1].(int)]
	}).(DdosPolicyPortFilterOutput)
}

type DdosPolicyV2Acl struct {
	// Action, optional values: drop, transmit, forward.
	Action string `pulumi:"action"`
	// The destination port ends, and the value range is 0~65535.
	DPortEnd int `pulumi:"dPortEnd"`
	// The destination port starts, and the value range is 0~65535.
	DPortStart int `pulumi:"dPortStart"`
	// Protocol type, desirable values tcp, udp, all.
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Policy priority, the lower the number, the higher the level, the higher the rule matches, taking a value of 1-1000.Note: This field may return null, indicating that a valid value could not be retrieved.
	Priority int `pulumi:"priority"`
	// The source port ends, and the acceptable value ranges from 0 to 65535.
	SPortEnd int `pulumi:"sPortEnd"`
	// The source port starts, and the value range is 0~65535.
	SPortStart int `pulumi:"sPortStart"`
}

// DdosPolicyV2AclInput is an input type that accepts DdosPolicyV2AclArgs and DdosPolicyV2AclOutput values.
// You can construct a concrete instance of `DdosPolicyV2AclInput` via:
//
//	DdosPolicyV2AclArgs{...}
type DdosPolicyV2AclInput interface {
	pulumi.Input

	ToDdosPolicyV2AclOutput() DdosPolicyV2AclOutput
	ToDdosPolicyV2AclOutputWithContext(context.Context) DdosPolicyV2AclOutput
}

type DdosPolicyV2AclArgs struct {
	// Action, optional values: drop, transmit, forward.
	Action pulumi.StringInput `pulumi:"action"`
	// The destination port ends, and the value range is 0~65535.
	DPortEnd pulumi.IntInput `pulumi:"dPortEnd"`
	// The destination port starts, and the value range is 0~65535.
	DPortStart pulumi.IntInput `pulumi:"dPortStart"`
	// Protocol type, desirable values tcp, udp, all.
	ForwardProtocol pulumi.StringInput `pulumi:"forwardProtocol"`
	// Policy priority, the lower the number, the higher the level, the higher the rule matches, taking a value of 1-1000.Note: This field may return null, indicating that a valid value could not be retrieved.
	Priority pulumi.IntInput `pulumi:"priority"`
	// The source port ends, and the acceptable value ranges from 0 to 65535.
	SPortEnd pulumi.IntInput `pulumi:"sPortEnd"`
	// The source port starts, and the value range is 0~65535.
	SPortStart pulumi.IntInput `pulumi:"sPortStart"`
}

func (DdosPolicyV2AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2Acl)(nil)).Elem()
}

func (i DdosPolicyV2AclArgs) ToDdosPolicyV2AclOutput() DdosPolicyV2AclOutput {
	return i.ToDdosPolicyV2AclOutputWithContext(context.Background())
}

func (i DdosPolicyV2AclArgs) ToDdosPolicyV2AclOutputWithContext(ctx context.Context) DdosPolicyV2AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2AclOutput)
}

// DdosPolicyV2AclArrayInput is an input type that accepts DdosPolicyV2AclArray and DdosPolicyV2AclArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2AclArrayInput` via:
//
//	DdosPolicyV2AclArray{ DdosPolicyV2AclArgs{...} }
type DdosPolicyV2AclArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2AclArrayOutput() DdosPolicyV2AclArrayOutput
	ToDdosPolicyV2AclArrayOutputWithContext(context.Context) DdosPolicyV2AclArrayOutput
}

type DdosPolicyV2AclArray []DdosPolicyV2AclInput

func (DdosPolicyV2AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2Acl)(nil)).Elem()
}

func (i DdosPolicyV2AclArray) ToDdosPolicyV2AclArrayOutput() DdosPolicyV2AclArrayOutput {
	return i.ToDdosPolicyV2AclArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2AclArray) ToDdosPolicyV2AclArrayOutputWithContext(ctx context.Context) DdosPolicyV2AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2AclArrayOutput)
}

type DdosPolicyV2AclOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2Acl)(nil)).Elem()
}

func (o DdosPolicyV2AclOutput) ToDdosPolicyV2AclOutput() DdosPolicyV2AclOutput {
	return o
}

func (o DdosPolicyV2AclOutput) ToDdosPolicyV2AclOutputWithContext(ctx context.Context) DdosPolicyV2AclOutput {
	return o
}

// Action, optional values: drop, transmit, forward.
func (o DdosPolicyV2AclOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) string { return v.Action }).(pulumi.StringOutput)
}

// The destination port ends, and the value range is 0~65535.
func (o DdosPolicyV2AclOutput) DPortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) int { return v.DPortEnd }).(pulumi.IntOutput)
}

// The destination port starts, and the value range is 0~65535.
func (o DdosPolicyV2AclOutput) DPortStart() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) int { return v.DPortStart }).(pulumi.IntOutput)
}

// Protocol type, desirable values tcp, udp, all.
func (o DdosPolicyV2AclOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Policy priority, the lower the number, the higher the level, the higher the rule matches, taking a value of 1-1000.Note: This field may return null, indicating that a valid value could not be retrieved.
func (o DdosPolicyV2AclOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) int { return v.Priority }).(pulumi.IntOutput)
}

// The source port ends, and the acceptable value ranges from 0 to 65535.
func (o DdosPolicyV2AclOutput) SPortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) int { return v.SPortEnd }).(pulumi.IntOutput)
}

// The source port starts, and the value range is 0~65535.
func (o DdosPolicyV2AclOutput) SPortStart() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2Acl) int { return v.SPortStart }).(pulumi.IntOutput)
}

type DdosPolicyV2AclArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2Acl)(nil)).Elem()
}

func (o DdosPolicyV2AclArrayOutput) ToDdosPolicyV2AclArrayOutput() DdosPolicyV2AclArrayOutput {
	return o
}

func (o DdosPolicyV2AclArrayOutput) ToDdosPolicyV2AclArrayOutputWithContext(ctx context.Context) DdosPolicyV2AclArrayOutput {
	return o
}

func (o DdosPolicyV2AclArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2Acl {
		return vs[0].([]DdosPolicyV2Acl)[vs[1].(int)]
	}).(DdosPolicyV2AclOutput)
}

type DdosPolicyV2BlackWhiteIp struct {
	// Ip of resource instance.
	Ip string `pulumi:"ip"`
	// IP type, value [`black`(blacklist IP), `white` (whitelist IP)].
	IpType string `pulumi:"ipType"`
}

// DdosPolicyV2BlackWhiteIpInput is an input type that accepts DdosPolicyV2BlackWhiteIpArgs and DdosPolicyV2BlackWhiteIpOutput values.
// You can construct a concrete instance of `DdosPolicyV2BlackWhiteIpInput` via:
//
//	DdosPolicyV2BlackWhiteIpArgs{...}
type DdosPolicyV2BlackWhiteIpInput interface {
	pulumi.Input

	ToDdosPolicyV2BlackWhiteIpOutput() DdosPolicyV2BlackWhiteIpOutput
	ToDdosPolicyV2BlackWhiteIpOutputWithContext(context.Context) DdosPolicyV2BlackWhiteIpOutput
}

type DdosPolicyV2BlackWhiteIpArgs struct {
	// Ip of resource instance.
	Ip pulumi.StringInput `pulumi:"ip"`
	// IP type, value [`black`(blacklist IP), `white` (whitelist IP)].
	IpType pulumi.StringInput `pulumi:"ipType"`
}

func (DdosPolicyV2BlackWhiteIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2BlackWhiteIp)(nil)).Elem()
}

func (i DdosPolicyV2BlackWhiteIpArgs) ToDdosPolicyV2BlackWhiteIpOutput() DdosPolicyV2BlackWhiteIpOutput {
	return i.ToDdosPolicyV2BlackWhiteIpOutputWithContext(context.Background())
}

func (i DdosPolicyV2BlackWhiteIpArgs) ToDdosPolicyV2BlackWhiteIpOutputWithContext(ctx context.Context) DdosPolicyV2BlackWhiteIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2BlackWhiteIpOutput)
}

// DdosPolicyV2BlackWhiteIpArrayInput is an input type that accepts DdosPolicyV2BlackWhiteIpArray and DdosPolicyV2BlackWhiteIpArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2BlackWhiteIpArrayInput` via:
//
//	DdosPolicyV2BlackWhiteIpArray{ DdosPolicyV2BlackWhiteIpArgs{...} }
type DdosPolicyV2BlackWhiteIpArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2BlackWhiteIpArrayOutput() DdosPolicyV2BlackWhiteIpArrayOutput
	ToDdosPolicyV2BlackWhiteIpArrayOutputWithContext(context.Context) DdosPolicyV2BlackWhiteIpArrayOutput
}

type DdosPolicyV2BlackWhiteIpArray []DdosPolicyV2BlackWhiteIpInput

func (DdosPolicyV2BlackWhiteIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2BlackWhiteIp)(nil)).Elem()
}

func (i DdosPolicyV2BlackWhiteIpArray) ToDdosPolicyV2BlackWhiteIpArrayOutput() DdosPolicyV2BlackWhiteIpArrayOutput {
	return i.ToDdosPolicyV2BlackWhiteIpArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2BlackWhiteIpArray) ToDdosPolicyV2BlackWhiteIpArrayOutputWithContext(ctx context.Context) DdosPolicyV2BlackWhiteIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2BlackWhiteIpArrayOutput)
}

type DdosPolicyV2BlackWhiteIpOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2BlackWhiteIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2BlackWhiteIp)(nil)).Elem()
}

func (o DdosPolicyV2BlackWhiteIpOutput) ToDdosPolicyV2BlackWhiteIpOutput() DdosPolicyV2BlackWhiteIpOutput {
	return o
}

func (o DdosPolicyV2BlackWhiteIpOutput) ToDdosPolicyV2BlackWhiteIpOutputWithContext(ctx context.Context) DdosPolicyV2BlackWhiteIpOutput {
	return o
}

// Ip of resource instance.
func (o DdosPolicyV2BlackWhiteIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2BlackWhiteIp) string { return v.Ip }).(pulumi.StringOutput)
}

// IP type, value [`black`(blacklist IP), `white` (whitelist IP)].
func (o DdosPolicyV2BlackWhiteIpOutput) IpType() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2BlackWhiteIp) string { return v.IpType }).(pulumi.StringOutput)
}

type DdosPolicyV2BlackWhiteIpArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2BlackWhiteIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2BlackWhiteIp)(nil)).Elem()
}

func (o DdosPolicyV2BlackWhiteIpArrayOutput) ToDdosPolicyV2BlackWhiteIpArrayOutput() DdosPolicyV2BlackWhiteIpArrayOutput {
	return o
}

func (o DdosPolicyV2BlackWhiteIpArrayOutput) ToDdosPolicyV2BlackWhiteIpArrayOutputWithContext(ctx context.Context) DdosPolicyV2BlackWhiteIpArrayOutput {
	return o
}

func (o DdosPolicyV2BlackWhiteIpArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2BlackWhiteIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2BlackWhiteIp {
		return vs[0].([]DdosPolicyV2BlackWhiteIp)[vs[1].(int)]
	}).(DdosPolicyV2BlackWhiteIpOutput)
}

type DdosPolicyV2DdosConnectLimit struct {
	// Based on connection suppression trigger threshold, value range [0,4294967295].
	BadConnThreshold int `pulumi:"badConnThreshold"`
	// Abnormal connection detection condition, connection timeout, value range [0,65535].
	ConnTimeout int `pulumi:"connTimeout"`
	// Concurrent connection control based on destination IP+ destination port.
	DstConnLimit int `pulumi:"dstConnLimit"`
	// Limit on the number of news per second based on the destination IP.
	DstNewLimit int `pulumi:"dstNewLimit"`
	// Abnormal connection detection conditions, empty connection guard switch, value range[0,1].
	NullConnEnable int `pulumi:"nullConnEnable"`
	// Concurrent connection control based on source IP + destination IP.
	SdConnLimit int `pulumi:"sdConnLimit"`
	// The limit on the number of news per second based on source IP + destination IP.
	SdNewLimit int `pulumi:"sdNewLimit"`
	// Anomaly connection detection condition, syn threshold, value range [0,100].
	SynLimit int `pulumi:"synLimit"`
	// Anomalous connection detection condition, percentage of syn ack, value range [0,100].
	SynRate int `pulumi:"synRate"`
}

// DdosPolicyV2DdosConnectLimitInput is an input type that accepts DdosPolicyV2DdosConnectLimitArgs and DdosPolicyV2DdosConnectLimitOutput values.
// You can construct a concrete instance of `DdosPolicyV2DdosConnectLimitInput` via:
//
//	DdosPolicyV2DdosConnectLimitArgs{...}
type DdosPolicyV2DdosConnectLimitInput interface {
	pulumi.Input

	ToDdosPolicyV2DdosConnectLimitOutput() DdosPolicyV2DdosConnectLimitOutput
	ToDdosPolicyV2DdosConnectLimitOutputWithContext(context.Context) DdosPolicyV2DdosConnectLimitOutput
}

type DdosPolicyV2DdosConnectLimitArgs struct {
	// Based on connection suppression trigger threshold, value range [0,4294967295].
	BadConnThreshold pulumi.IntInput `pulumi:"badConnThreshold"`
	// Abnormal connection detection condition, connection timeout, value range [0,65535].
	ConnTimeout pulumi.IntInput `pulumi:"connTimeout"`
	// Concurrent connection control based on destination IP+ destination port.
	DstConnLimit pulumi.IntInput `pulumi:"dstConnLimit"`
	// Limit on the number of news per second based on the destination IP.
	DstNewLimit pulumi.IntInput `pulumi:"dstNewLimit"`
	// Abnormal connection detection conditions, empty connection guard switch, value range[0,1].
	NullConnEnable pulumi.IntInput `pulumi:"nullConnEnable"`
	// Concurrent connection control based on source IP + destination IP.
	SdConnLimit pulumi.IntInput `pulumi:"sdConnLimit"`
	// The limit on the number of news per second based on source IP + destination IP.
	SdNewLimit pulumi.IntInput `pulumi:"sdNewLimit"`
	// Anomaly connection detection condition, syn threshold, value range [0,100].
	SynLimit pulumi.IntInput `pulumi:"synLimit"`
	// Anomalous connection detection condition, percentage of syn ack, value range [0,100].
	SynRate pulumi.IntInput `pulumi:"synRate"`
}

func (DdosPolicyV2DdosConnectLimitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2DdosConnectLimit)(nil)).Elem()
}

func (i DdosPolicyV2DdosConnectLimitArgs) ToDdosPolicyV2DdosConnectLimitOutput() DdosPolicyV2DdosConnectLimitOutput {
	return i.ToDdosPolicyV2DdosConnectLimitOutputWithContext(context.Background())
}

func (i DdosPolicyV2DdosConnectLimitArgs) ToDdosPolicyV2DdosConnectLimitOutputWithContext(ctx context.Context) DdosPolicyV2DdosConnectLimitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosConnectLimitOutput)
}

func (i DdosPolicyV2DdosConnectLimitArgs) ToDdosPolicyV2DdosConnectLimitPtrOutput() DdosPolicyV2DdosConnectLimitPtrOutput {
	return i.ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(context.Background())
}

func (i DdosPolicyV2DdosConnectLimitArgs) ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(ctx context.Context) DdosPolicyV2DdosConnectLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosConnectLimitOutput).ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(ctx)
}

// DdosPolicyV2DdosConnectLimitPtrInput is an input type that accepts DdosPolicyV2DdosConnectLimitArgs, DdosPolicyV2DdosConnectLimitPtr and DdosPolicyV2DdosConnectLimitPtrOutput values.
// You can construct a concrete instance of `DdosPolicyV2DdosConnectLimitPtrInput` via:
//
//	        DdosPolicyV2DdosConnectLimitArgs{...}
//
//	or:
//
//	        nil
type DdosPolicyV2DdosConnectLimitPtrInput interface {
	pulumi.Input

	ToDdosPolicyV2DdosConnectLimitPtrOutput() DdosPolicyV2DdosConnectLimitPtrOutput
	ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(context.Context) DdosPolicyV2DdosConnectLimitPtrOutput
}

type ddosPolicyV2DdosConnectLimitPtrType DdosPolicyV2DdosConnectLimitArgs

func DdosPolicyV2DdosConnectLimitPtr(v *DdosPolicyV2DdosConnectLimitArgs) DdosPolicyV2DdosConnectLimitPtrInput {
	return (*ddosPolicyV2DdosConnectLimitPtrType)(v)
}

func (*ddosPolicyV2DdosConnectLimitPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosPolicyV2DdosConnectLimit)(nil)).Elem()
}

func (i *ddosPolicyV2DdosConnectLimitPtrType) ToDdosPolicyV2DdosConnectLimitPtrOutput() DdosPolicyV2DdosConnectLimitPtrOutput {
	return i.ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(context.Background())
}

func (i *ddosPolicyV2DdosConnectLimitPtrType) ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(ctx context.Context) DdosPolicyV2DdosConnectLimitPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosConnectLimitPtrOutput)
}

type DdosPolicyV2DdosConnectLimitOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2DdosConnectLimitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2DdosConnectLimit)(nil)).Elem()
}

func (o DdosPolicyV2DdosConnectLimitOutput) ToDdosPolicyV2DdosConnectLimitOutput() DdosPolicyV2DdosConnectLimitOutput {
	return o
}

func (o DdosPolicyV2DdosConnectLimitOutput) ToDdosPolicyV2DdosConnectLimitOutputWithContext(ctx context.Context) DdosPolicyV2DdosConnectLimitOutput {
	return o
}

func (o DdosPolicyV2DdosConnectLimitOutput) ToDdosPolicyV2DdosConnectLimitPtrOutput() DdosPolicyV2DdosConnectLimitPtrOutput {
	return o.ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(context.Background())
}

func (o DdosPolicyV2DdosConnectLimitOutput) ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(ctx context.Context) DdosPolicyV2DdosConnectLimitPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DdosPolicyV2DdosConnectLimit) *DdosPolicyV2DdosConnectLimit {
		return &v
	}).(DdosPolicyV2DdosConnectLimitPtrOutput)
}

// Based on connection suppression trigger threshold, value range [0,4294967295].
func (o DdosPolicyV2DdosConnectLimitOutput) BadConnThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.BadConnThreshold }).(pulumi.IntOutput)
}

// Abnormal connection detection condition, connection timeout, value range [0,65535].
func (o DdosPolicyV2DdosConnectLimitOutput) ConnTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.ConnTimeout }).(pulumi.IntOutput)
}

// Concurrent connection control based on destination IP+ destination port.
func (o DdosPolicyV2DdosConnectLimitOutput) DstConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.DstConnLimit }).(pulumi.IntOutput)
}

// Limit on the number of news per second based on the destination IP.
func (o DdosPolicyV2DdosConnectLimitOutput) DstNewLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.DstNewLimit }).(pulumi.IntOutput)
}

// Abnormal connection detection conditions, empty connection guard switch, value range[0,1].
func (o DdosPolicyV2DdosConnectLimitOutput) NullConnEnable() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.NullConnEnable }).(pulumi.IntOutput)
}

// Concurrent connection control based on source IP + destination IP.
func (o DdosPolicyV2DdosConnectLimitOutput) SdConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.SdConnLimit }).(pulumi.IntOutput)
}

// The limit on the number of news per second based on source IP + destination IP.
func (o DdosPolicyV2DdosConnectLimitOutput) SdNewLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.SdNewLimit }).(pulumi.IntOutput)
}

// Anomaly connection detection condition, syn threshold, value range [0,100].
func (o DdosPolicyV2DdosConnectLimitOutput) SynLimit() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.SynLimit }).(pulumi.IntOutput)
}

// Anomalous connection detection condition, percentage of syn ack, value range [0,100].
func (o DdosPolicyV2DdosConnectLimitOutput) SynRate() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosConnectLimit) int { return v.SynRate }).(pulumi.IntOutput)
}

type DdosPolicyV2DdosConnectLimitPtrOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2DdosConnectLimitPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DdosPolicyV2DdosConnectLimit)(nil)).Elem()
}

func (o DdosPolicyV2DdosConnectLimitPtrOutput) ToDdosPolicyV2DdosConnectLimitPtrOutput() DdosPolicyV2DdosConnectLimitPtrOutput {
	return o
}

func (o DdosPolicyV2DdosConnectLimitPtrOutput) ToDdosPolicyV2DdosConnectLimitPtrOutputWithContext(ctx context.Context) DdosPolicyV2DdosConnectLimitPtrOutput {
	return o
}

func (o DdosPolicyV2DdosConnectLimitPtrOutput) Elem() DdosPolicyV2DdosConnectLimitOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) DdosPolicyV2DdosConnectLimit {
		if v != nil {
			return *v
		}
		var ret DdosPolicyV2DdosConnectLimit
		return ret
	}).(DdosPolicyV2DdosConnectLimitOutput)
}

// Based on connection suppression trigger threshold, value range [0,4294967295].
func (o DdosPolicyV2DdosConnectLimitPtrOutput) BadConnThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.BadConnThreshold
	}).(pulumi.IntPtrOutput)
}

// Abnormal connection detection condition, connection timeout, value range [0,65535].
func (o DdosPolicyV2DdosConnectLimitPtrOutput) ConnTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.ConnTimeout
	}).(pulumi.IntPtrOutput)
}

// Concurrent connection control based on destination IP+ destination port.
func (o DdosPolicyV2DdosConnectLimitPtrOutput) DstConnLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.DstConnLimit
	}).(pulumi.IntPtrOutput)
}

// Limit on the number of news per second based on the destination IP.
func (o DdosPolicyV2DdosConnectLimitPtrOutput) DstNewLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.DstNewLimit
	}).(pulumi.IntPtrOutput)
}

// Abnormal connection detection conditions, empty connection guard switch, value range[0,1].
func (o DdosPolicyV2DdosConnectLimitPtrOutput) NullConnEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.NullConnEnable
	}).(pulumi.IntPtrOutput)
}

// Concurrent connection control based on source IP + destination IP.
func (o DdosPolicyV2DdosConnectLimitPtrOutput) SdConnLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.SdConnLimit
	}).(pulumi.IntPtrOutput)
}

// The limit on the number of news per second based on source IP + destination IP.
func (o DdosPolicyV2DdosConnectLimitPtrOutput) SdNewLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.SdNewLimit
	}).(pulumi.IntPtrOutput)
}

// Anomaly connection detection condition, syn threshold, value range [0,100].
func (o DdosPolicyV2DdosConnectLimitPtrOutput) SynLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.SynLimit
	}).(pulumi.IntPtrOutput)
}

// Anomalous connection detection condition, percentage of syn ack, value range [0,100].
func (o DdosPolicyV2DdosConnectLimitPtrOutput) SynRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DdosPolicyV2DdosConnectLimit) *int {
		if v == nil {
			return nil
		}
		return &v.SynRate
	}).(pulumi.IntPtrOutput)
}

type DdosPolicyV2DdosGeoIpBlockConfig struct {
	// Block action, take the value [`drop`, `trans`].
	Action string `pulumi:"action"`
	// When the RegionType is customized, the AreaList must be filled in, and a maximum of 128 must be filled in.
	AreaLists []int `pulumi:"areaLists"`
	// Zone type, value [oversea (overseas),china (domestic),customized (custom region)].
	RegionType string `pulumi:"regionType"`
}

// DdosPolicyV2DdosGeoIpBlockConfigInput is an input type that accepts DdosPolicyV2DdosGeoIpBlockConfigArgs and DdosPolicyV2DdosGeoIpBlockConfigOutput values.
// You can construct a concrete instance of `DdosPolicyV2DdosGeoIpBlockConfigInput` via:
//
//	DdosPolicyV2DdosGeoIpBlockConfigArgs{...}
type DdosPolicyV2DdosGeoIpBlockConfigInput interface {
	pulumi.Input

	ToDdosPolicyV2DdosGeoIpBlockConfigOutput() DdosPolicyV2DdosGeoIpBlockConfigOutput
	ToDdosPolicyV2DdosGeoIpBlockConfigOutputWithContext(context.Context) DdosPolicyV2DdosGeoIpBlockConfigOutput
}

type DdosPolicyV2DdosGeoIpBlockConfigArgs struct {
	// Block action, take the value [`drop`, `trans`].
	Action pulumi.StringInput `pulumi:"action"`
	// When the RegionType is customized, the AreaList must be filled in, and a maximum of 128 must be filled in.
	AreaLists pulumi.IntArrayInput `pulumi:"areaLists"`
	// Zone type, value [oversea (overseas),china (domestic),customized (custom region)].
	RegionType pulumi.StringInput `pulumi:"regionType"`
}

func (DdosPolicyV2DdosGeoIpBlockConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2DdosGeoIpBlockConfig)(nil)).Elem()
}

func (i DdosPolicyV2DdosGeoIpBlockConfigArgs) ToDdosPolicyV2DdosGeoIpBlockConfigOutput() DdosPolicyV2DdosGeoIpBlockConfigOutput {
	return i.ToDdosPolicyV2DdosGeoIpBlockConfigOutputWithContext(context.Background())
}

func (i DdosPolicyV2DdosGeoIpBlockConfigArgs) ToDdosPolicyV2DdosGeoIpBlockConfigOutputWithContext(ctx context.Context) DdosPolicyV2DdosGeoIpBlockConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosGeoIpBlockConfigOutput)
}

// DdosPolicyV2DdosGeoIpBlockConfigArrayInput is an input type that accepts DdosPolicyV2DdosGeoIpBlockConfigArray and DdosPolicyV2DdosGeoIpBlockConfigArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2DdosGeoIpBlockConfigArrayInput` via:
//
//	DdosPolicyV2DdosGeoIpBlockConfigArray{ DdosPolicyV2DdosGeoIpBlockConfigArgs{...} }
type DdosPolicyV2DdosGeoIpBlockConfigArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutput() DdosPolicyV2DdosGeoIpBlockConfigArrayOutput
	ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutputWithContext(context.Context) DdosPolicyV2DdosGeoIpBlockConfigArrayOutput
}

type DdosPolicyV2DdosGeoIpBlockConfigArray []DdosPolicyV2DdosGeoIpBlockConfigInput

func (DdosPolicyV2DdosGeoIpBlockConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2DdosGeoIpBlockConfig)(nil)).Elem()
}

func (i DdosPolicyV2DdosGeoIpBlockConfigArray) ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutput() DdosPolicyV2DdosGeoIpBlockConfigArrayOutput {
	return i.ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2DdosGeoIpBlockConfigArray) ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2DdosGeoIpBlockConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosGeoIpBlockConfigArrayOutput)
}

type DdosPolicyV2DdosGeoIpBlockConfigOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2DdosGeoIpBlockConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2DdosGeoIpBlockConfig)(nil)).Elem()
}

func (o DdosPolicyV2DdosGeoIpBlockConfigOutput) ToDdosPolicyV2DdosGeoIpBlockConfigOutput() DdosPolicyV2DdosGeoIpBlockConfigOutput {
	return o
}

func (o DdosPolicyV2DdosGeoIpBlockConfigOutput) ToDdosPolicyV2DdosGeoIpBlockConfigOutputWithContext(ctx context.Context) DdosPolicyV2DdosGeoIpBlockConfigOutput {
	return o
}

// Block action, take the value [`drop`, `trans`].
func (o DdosPolicyV2DdosGeoIpBlockConfigOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosGeoIpBlockConfig) string { return v.Action }).(pulumi.StringOutput)
}

// When the RegionType is customized, the AreaList must be filled in, and a maximum of 128 must be filled in.
func (o DdosPolicyV2DdosGeoIpBlockConfigOutput) AreaLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosGeoIpBlockConfig) []int { return v.AreaLists }).(pulumi.IntArrayOutput)
}

// Zone type, value [oversea (overseas),china (domestic),customized (custom region)].
func (o DdosPolicyV2DdosGeoIpBlockConfigOutput) RegionType() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosGeoIpBlockConfig) string { return v.RegionType }).(pulumi.StringOutput)
}

type DdosPolicyV2DdosGeoIpBlockConfigArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2DdosGeoIpBlockConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2DdosGeoIpBlockConfig)(nil)).Elem()
}

func (o DdosPolicyV2DdosGeoIpBlockConfigArrayOutput) ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutput() DdosPolicyV2DdosGeoIpBlockConfigArrayOutput {
	return o
}

func (o DdosPolicyV2DdosGeoIpBlockConfigArrayOutput) ToDdosPolicyV2DdosGeoIpBlockConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2DdosGeoIpBlockConfigArrayOutput {
	return o
}

func (o DdosPolicyV2DdosGeoIpBlockConfigArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2DdosGeoIpBlockConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2DdosGeoIpBlockConfig {
		return vs[0].([]DdosPolicyV2DdosGeoIpBlockConfig)[vs[1].(int)]
	}).(DdosPolicyV2DdosGeoIpBlockConfigOutput)
}

type DdosPolicyV2DdosSpeedLimitConfig struct {
	// Bandwidth bps.
	Bandwidth int `pulumi:"bandwidth"`
	// List of port ranges, up to 8, multiple; Separated, the range is represented with -; this port range must be filled in; fill in the style 1:0-65535, style 2:80; 443; 1000-2000.
	DstPortList string `pulumi:"dstPortList"`
	// Speed limit mode, take the value [1 (speed limit based on source IP),2 (speed limit based on destination port)].
	Mode int `pulumi:"mode"`
	// Packet rate pps.
	PacketRate int `pulumi:"packetRate"`
	// IP protocol numbers, take the value[ ALL (all protocols),TCP (tcp protocol),UDP (udp protocol),SMP (smp protocol),1; 2-100 (custom protocol number range, up to 8)].
	ProtocolList string `pulumi:"protocolList"`
}

// DdosPolicyV2DdosSpeedLimitConfigInput is an input type that accepts DdosPolicyV2DdosSpeedLimitConfigArgs and DdosPolicyV2DdosSpeedLimitConfigOutput values.
// You can construct a concrete instance of `DdosPolicyV2DdosSpeedLimitConfigInput` via:
//
//	DdosPolicyV2DdosSpeedLimitConfigArgs{...}
type DdosPolicyV2DdosSpeedLimitConfigInput interface {
	pulumi.Input

	ToDdosPolicyV2DdosSpeedLimitConfigOutput() DdosPolicyV2DdosSpeedLimitConfigOutput
	ToDdosPolicyV2DdosSpeedLimitConfigOutputWithContext(context.Context) DdosPolicyV2DdosSpeedLimitConfigOutput
}

type DdosPolicyV2DdosSpeedLimitConfigArgs struct {
	// Bandwidth bps.
	Bandwidth pulumi.IntInput `pulumi:"bandwidth"`
	// List of port ranges, up to 8, multiple; Separated, the range is represented with -; this port range must be filled in; fill in the style 1:0-65535, style 2:80; 443; 1000-2000.
	DstPortList pulumi.StringInput `pulumi:"dstPortList"`
	// Speed limit mode, take the value [1 (speed limit based on source IP),2 (speed limit based on destination port)].
	Mode pulumi.IntInput `pulumi:"mode"`
	// Packet rate pps.
	PacketRate pulumi.IntInput `pulumi:"packetRate"`
	// IP protocol numbers, take the value[ ALL (all protocols),TCP (tcp protocol),UDP (udp protocol),SMP (smp protocol),1; 2-100 (custom protocol number range, up to 8)].
	ProtocolList pulumi.StringInput `pulumi:"protocolList"`
}

func (DdosPolicyV2DdosSpeedLimitConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2DdosSpeedLimitConfig)(nil)).Elem()
}

func (i DdosPolicyV2DdosSpeedLimitConfigArgs) ToDdosPolicyV2DdosSpeedLimitConfigOutput() DdosPolicyV2DdosSpeedLimitConfigOutput {
	return i.ToDdosPolicyV2DdosSpeedLimitConfigOutputWithContext(context.Background())
}

func (i DdosPolicyV2DdosSpeedLimitConfigArgs) ToDdosPolicyV2DdosSpeedLimitConfigOutputWithContext(ctx context.Context) DdosPolicyV2DdosSpeedLimitConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosSpeedLimitConfigOutput)
}

// DdosPolicyV2DdosSpeedLimitConfigArrayInput is an input type that accepts DdosPolicyV2DdosSpeedLimitConfigArray and DdosPolicyV2DdosSpeedLimitConfigArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2DdosSpeedLimitConfigArrayInput` via:
//
//	DdosPolicyV2DdosSpeedLimitConfigArray{ DdosPolicyV2DdosSpeedLimitConfigArgs{...} }
type DdosPolicyV2DdosSpeedLimitConfigArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2DdosSpeedLimitConfigArrayOutput() DdosPolicyV2DdosSpeedLimitConfigArrayOutput
	ToDdosPolicyV2DdosSpeedLimitConfigArrayOutputWithContext(context.Context) DdosPolicyV2DdosSpeedLimitConfigArrayOutput
}

type DdosPolicyV2DdosSpeedLimitConfigArray []DdosPolicyV2DdosSpeedLimitConfigInput

func (DdosPolicyV2DdosSpeedLimitConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2DdosSpeedLimitConfig)(nil)).Elem()
}

func (i DdosPolicyV2DdosSpeedLimitConfigArray) ToDdosPolicyV2DdosSpeedLimitConfigArrayOutput() DdosPolicyV2DdosSpeedLimitConfigArrayOutput {
	return i.ToDdosPolicyV2DdosSpeedLimitConfigArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2DdosSpeedLimitConfigArray) ToDdosPolicyV2DdosSpeedLimitConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2DdosSpeedLimitConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2DdosSpeedLimitConfigArrayOutput)
}

type DdosPolicyV2DdosSpeedLimitConfigOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2DdosSpeedLimitConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2DdosSpeedLimitConfig)(nil)).Elem()
}

func (o DdosPolicyV2DdosSpeedLimitConfigOutput) ToDdosPolicyV2DdosSpeedLimitConfigOutput() DdosPolicyV2DdosSpeedLimitConfigOutput {
	return o
}

func (o DdosPolicyV2DdosSpeedLimitConfigOutput) ToDdosPolicyV2DdosSpeedLimitConfigOutputWithContext(ctx context.Context) DdosPolicyV2DdosSpeedLimitConfigOutput {
	return o
}

// Bandwidth bps.
func (o DdosPolicyV2DdosSpeedLimitConfigOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosSpeedLimitConfig) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// List of port ranges, up to 8, multiple; Separated, the range is represented with -; this port range must be filled in; fill in the style 1:0-65535, style 2:80; 443; 1000-2000.
func (o DdosPolicyV2DdosSpeedLimitConfigOutput) DstPortList() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosSpeedLimitConfig) string { return v.DstPortList }).(pulumi.StringOutput)
}

// Speed limit mode, take the value [1 (speed limit based on source IP),2 (speed limit based on destination port)].
func (o DdosPolicyV2DdosSpeedLimitConfigOutput) Mode() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosSpeedLimitConfig) int { return v.Mode }).(pulumi.IntOutput)
}

// Packet rate pps.
func (o DdosPolicyV2DdosSpeedLimitConfigOutput) PacketRate() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosSpeedLimitConfig) int { return v.PacketRate }).(pulumi.IntOutput)
}

// IP protocol numbers, take the value[ ALL (all protocols),TCP (tcp protocol),UDP (udp protocol),SMP (smp protocol),1; 2-100 (custom protocol number range, up to 8)].
func (o DdosPolicyV2DdosSpeedLimitConfigOutput) ProtocolList() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2DdosSpeedLimitConfig) string { return v.ProtocolList }).(pulumi.StringOutput)
}

type DdosPolicyV2DdosSpeedLimitConfigArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2DdosSpeedLimitConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2DdosSpeedLimitConfig)(nil)).Elem()
}

func (o DdosPolicyV2DdosSpeedLimitConfigArrayOutput) ToDdosPolicyV2DdosSpeedLimitConfigArrayOutput() DdosPolicyV2DdosSpeedLimitConfigArrayOutput {
	return o
}

func (o DdosPolicyV2DdosSpeedLimitConfigArrayOutput) ToDdosPolicyV2DdosSpeedLimitConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2DdosSpeedLimitConfigArrayOutput {
	return o
}

func (o DdosPolicyV2DdosSpeedLimitConfigArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2DdosSpeedLimitConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2DdosSpeedLimitConfig {
		return vs[0].([]DdosPolicyV2DdosSpeedLimitConfig)[vs[1].(int)]
	}).(DdosPolicyV2DdosSpeedLimitConfigOutput)
}

type DdosPolicyV2PacketFilter struct {
	// Action, take the value [drop,transmit,drop_black (discard and black out),drop_rst (Interception),drop_black_rst (intercept and block),forward].
	Action string `pulumi:"action"`
	// The end destination port, take the value 1~65535, which must be greater than or equal to the starting destination port.
	DPortEnd int `pulumi:"dPortEnd"`
	// From the destination port, take the value 0~65535.
	DPortStart int `pulumi:"dPortStart"`
	// Detection depth from the detection position, value [0,1500].
	Depth int `pulumi:"depth"`
	// Second detection depth starting from the second detection position, value [0,1500].
	Depth2 int `pulumi:"depth2"`
	// Whether to include the detected value, take the value [0 (included),1 (not included)].
	IsNot int `pulumi:"isNot"`
	// Whether the second detection contains the detected value, the value [0 (included),1 (not included)].
	IsNot2 int `pulumi:"isNot2"`
	// Detect position, take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
	MatchBegin string `pulumi:"matchBegin"`
	// The second detection position. take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
	MatchBegin2 string `pulumi:"matchBegin2"`
	// When there is a second detection condition, the and/or relationship with the first detection condition, takes the value [And (and relationship),none (fill in this value when there is no second detection condition)].
	MatchLogic string `pulumi:"matchLogic"`
	// Detection type, value [sunday (keyword),pcre (regular expression)].
	MatchType string `pulumi:"matchType"`
	// The second type of detection, takes the value [sunday (keyword),pcre (regular expression)].
	MatchType2 string `pulumi:"matchType2"`
	// Offset from detection position, value range [0, Depth].
	Offset int `pulumi:"offset"`
	// Offset from the second detection position, value range [0,Depth2].
	Offset2 int `pulumi:"offset2"`
	// The maximum message length, taken from 1 to 1500, must be greater than or equal to the minimum message length.
	PktlenMax int `pulumi:"pktlenMax"`
	// Minimum message length, 1-1500.
	PktlenMin int `pulumi:"pktlenMin"`
	// Protocol, value [tcp udp icmp all].
	Protocol string `pulumi:"protocol"`
	// End source port, take the value 1~65535, must be greater than or equal to the starting source port.
	SPortEnd int `pulumi:"sPortEnd"`
	// Start the source port, take the value 0~65535.
	SPortStart int `pulumi:"sPortStart"`
	// Detect values, key strings or regular expressions, take the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
	Str string `pulumi:"str"`
	// The second detection value, the key string or regular expression, takes the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
	Str2 string `pulumi:"str2"`
}

// DdosPolicyV2PacketFilterInput is an input type that accepts DdosPolicyV2PacketFilterArgs and DdosPolicyV2PacketFilterOutput values.
// You can construct a concrete instance of `DdosPolicyV2PacketFilterInput` via:
//
//	DdosPolicyV2PacketFilterArgs{...}
type DdosPolicyV2PacketFilterInput interface {
	pulumi.Input

	ToDdosPolicyV2PacketFilterOutput() DdosPolicyV2PacketFilterOutput
	ToDdosPolicyV2PacketFilterOutputWithContext(context.Context) DdosPolicyV2PacketFilterOutput
}

type DdosPolicyV2PacketFilterArgs struct {
	// Action, take the value [drop,transmit,drop_black (discard and black out),drop_rst (Interception),drop_black_rst (intercept and block),forward].
	Action pulumi.StringInput `pulumi:"action"`
	// The end destination port, take the value 1~65535, which must be greater than or equal to the starting destination port.
	DPortEnd pulumi.IntInput `pulumi:"dPortEnd"`
	// From the destination port, take the value 0~65535.
	DPortStart pulumi.IntInput `pulumi:"dPortStart"`
	// Detection depth from the detection position, value [0,1500].
	Depth pulumi.IntInput `pulumi:"depth"`
	// Second detection depth starting from the second detection position, value [0,1500].
	Depth2 pulumi.IntInput `pulumi:"depth2"`
	// Whether to include the detected value, take the value [0 (included),1 (not included)].
	IsNot pulumi.IntInput `pulumi:"isNot"`
	// Whether the second detection contains the detected value, the value [0 (included),1 (not included)].
	IsNot2 pulumi.IntInput `pulumi:"isNot2"`
	// Detect position, take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
	MatchBegin pulumi.StringInput `pulumi:"matchBegin"`
	// The second detection position. take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
	MatchBegin2 pulumi.StringInput `pulumi:"matchBegin2"`
	// When there is a second detection condition, the and/or relationship with the first detection condition, takes the value [And (and relationship),none (fill in this value when there is no second detection condition)].
	MatchLogic pulumi.StringInput `pulumi:"matchLogic"`
	// Detection type, value [sunday (keyword),pcre (regular expression)].
	MatchType pulumi.StringInput `pulumi:"matchType"`
	// The second type of detection, takes the value [sunday (keyword),pcre (regular expression)].
	MatchType2 pulumi.StringInput `pulumi:"matchType2"`
	// Offset from detection position, value range [0, Depth].
	Offset pulumi.IntInput `pulumi:"offset"`
	// Offset from the second detection position, value range [0,Depth2].
	Offset2 pulumi.IntInput `pulumi:"offset2"`
	// The maximum message length, taken from 1 to 1500, must be greater than or equal to the minimum message length.
	PktlenMax pulumi.IntInput `pulumi:"pktlenMax"`
	// Minimum message length, 1-1500.
	PktlenMin pulumi.IntInput `pulumi:"pktlenMin"`
	// Protocol, value [tcp udp icmp all].
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// End source port, take the value 1~65535, must be greater than or equal to the starting source port.
	SPortEnd pulumi.IntInput `pulumi:"sPortEnd"`
	// Start the source port, take the value 0~65535.
	SPortStart pulumi.IntInput `pulumi:"sPortStart"`
	// Detect values, key strings or regular expressions, take the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
	Str pulumi.StringInput `pulumi:"str"`
	// The second detection value, the key string or regular expression, takes the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
	Str2 pulumi.StringInput `pulumi:"str2"`
}

func (DdosPolicyV2PacketFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2PacketFilter)(nil)).Elem()
}

func (i DdosPolicyV2PacketFilterArgs) ToDdosPolicyV2PacketFilterOutput() DdosPolicyV2PacketFilterOutput {
	return i.ToDdosPolicyV2PacketFilterOutputWithContext(context.Background())
}

func (i DdosPolicyV2PacketFilterArgs) ToDdosPolicyV2PacketFilterOutputWithContext(ctx context.Context) DdosPolicyV2PacketFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2PacketFilterOutput)
}

// DdosPolicyV2PacketFilterArrayInput is an input type that accepts DdosPolicyV2PacketFilterArray and DdosPolicyV2PacketFilterArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2PacketFilterArrayInput` via:
//
//	DdosPolicyV2PacketFilterArray{ DdosPolicyV2PacketFilterArgs{...} }
type DdosPolicyV2PacketFilterArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2PacketFilterArrayOutput() DdosPolicyV2PacketFilterArrayOutput
	ToDdosPolicyV2PacketFilterArrayOutputWithContext(context.Context) DdosPolicyV2PacketFilterArrayOutput
}

type DdosPolicyV2PacketFilterArray []DdosPolicyV2PacketFilterInput

func (DdosPolicyV2PacketFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2PacketFilter)(nil)).Elem()
}

func (i DdosPolicyV2PacketFilterArray) ToDdosPolicyV2PacketFilterArrayOutput() DdosPolicyV2PacketFilterArrayOutput {
	return i.ToDdosPolicyV2PacketFilterArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2PacketFilterArray) ToDdosPolicyV2PacketFilterArrayOutputWithContext(ctx context.Context) DdosPolicyV2PacketFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2PacketFilterArrayOutput)
}

type DdosPolicyV2PacketFilterOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2PacketFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2PacketFilter)(nil)).Elem()
}

func (o DdosPolicyV2PacketFilterOutput) ToDdosPolicyV2PacketFilterOutput() DdosPolicyV2PacketFilterOutput {
	return o
}

func (o DdosPolicyV2PacketFilterOutput) ToDdosPolicyV2PacketFilterOutputWithContext(ctx context.Context) DdosPolicyV2PacketFilterOutput {
	return o
}

// Action, take the value [drop,transmit,drop_black (discard and black out),drop_rst (Interception),drop_black_rst (intercept and block),forward].
func (o DdosPolicyV2PacketFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.Action }).(pulumi.StringOutput)
}

// The end destination port, take the value 1~65535, which must be greater than or equal to the starting destination port.
func (o DdosPolicyV2PacketFilterOutput) DPortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.DPortEnd }).(pulumi.IntOutput)
}

// From the destination port, take the value 0~65535.
func (o DdosPolicyV2PacketFilterOutput) DPortStart() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.DPortStart }).(pulumi.IntOutput)
}

// Detection depth from the detection position, value [0,1500].
func (o DdosPolicyV2PacketFilterOutput) Depth() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.Depth }).(pulumi.IntOutput)
}

// Second detection depth starting from the second detection position, value [0,1500].
func (o DdosPolicyV2PacketFilterOutput) Depth2() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.Depth2 }).(pulumi.IntOutput)
}

// Whether to include the detected value, take the value [0 (included),1 (not included)].
func (o DdosPolicyV2PacketFilterOutput) IsNot() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.IsNot }).(pulumi.IntOutput)
}

// Whether the second detection contains the detected value, the value [0 (included),1 (not included)].
func (o DdosPolicyV2PacketFilterOutput) IsNot2() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.IsNot2 }).(pulumi.IntOutput)
}

// Detect position, take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
func (o DdosPolicyV2PacketFilterOutput) MatchBegin() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.MatchBegin }).(pulumi.StringOutput)
}

// The second detection position. take the value [beginL3 (IP header),begin_l4 (TCP/UDP header),begin_l5 (T load), noMatch (mismatch)].
func (o DdosPolicyV2PacketFilterOutput) MatchBegin2() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.MatchBegin2 }).(pulumi.StringOutput)
}

// When there is a second detection condition, the and/or relationship with the first detection condition, takes the value [And (and relationship),none (fill in this value when there is no second detection condition)].
func (o DdosPolicyV2PacketFilterOutput) MatchLogic() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.MatchLogic }).(pulumi.StringOutput)
}

// Detection type, value [sunday (keyword),pcre (regular expression)].
func (o DdosPolicyV2PacketFilterOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.MatchType }).(pulumi.StringOutput)
}

// The second type of detection, takes the value [sunday (keyword),pcre (regular expression)].
func (o DdosPolicyV2PacketFilterOutput) MatchType2() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.MatchType2 }).(pulumi.StringOutput)
}

// Offset from detection position, value range [0, Depth].
func (o DdosPolicyV2PacketFilterOutput) Offset() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.Offset }).(pulumi.IntOutput)
}

// Offset from the second detection position, value range [0,Depth2].
func (o DdosPolicyV2PacketFilterOutput) Offset2() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.Offset2 }).(pulumi.IntOutput)
}

// The maximum message length, taken from 1 to 1500, must be greater than or equal to the minimum message length.
func (o DdosPolicyV2PacketFilterOutput) PktlenMax() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.PktlenMax }).(pulumi.IntOutput)
}

// Minimum message length, 1-1500.
func (o DdosPolicyV2PacketFilterOutput) PktlenMin() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.PktlenMin }).(pulumi.IntOutput)
}

// Protocol, value [tcp udp icmp all].
func (o DdosPolicyV2PacketFilterOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.Protocol }).(pulumi.StringOutput)
}

// End source port, take the value 1~65535, must be greater than or equal to the starting source port.
func (o DdosPolicyV2PacketFilterOutput) SPortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.SPortEnd }).(pulumi.IntOutput)
}

// Start the source port, take the value 0~65535.
func (o DdosPolicyV2PacketFilterOutput) SPortStart() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) int { return v.SPortStart }).(pulumi.IntOutput)
}

// Detect values, key strings or regular expressions, take the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
func (o DdosPolicyV2PacketFilterOutput) Str() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.Str }).(pulumi.StringOutput)
}

// The second detection value, the key string or regular expression, takes the value [When the detection type is sunday, please fill in the string or hexadecimal bytecode, for example 13233 corresponds to the hexadecimal bytecode of the string `123`;When the detection type is pcre, please fill in the regular expression string;].
func (o DdosPolicyV2PacketFilterOutput) Str2() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2PacketFilter) string { return v.Str2 }).(pulumi.StringOutput)
}

type DdosPolicyV2PacketFilterArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2PacketFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2PacketFilter)(nil)).Elem()
}

func (o DdosPolicyV2PacketFilterArrayOutput) ToDdosPolicyV2PacketFilterArrayOutput() DdosPolicyV2PacketFilterArrayOutput {
	return o
}

func (o DdosPolicyV2PacketFilterArrayOutput) ToDdosPolicyV2PacketFilterArrayOutputWithContext(ctx context.Context) DdosPolicyV2PacketFilterArrayOutput {
	return o
}

func (o DdosPolicyV2PacketFilterArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2PacketFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2PacketFilter {
		return vs[0].([]DdosPolicyV2PacketFilter)[vs[1].(int)]
	}).(DdosPolicyV2PacketFilterOutput)
}

type DdosPolicyV2ProtocolBlockConfig struct {
	// ICMP block, value [0 (block off), 1 (block on)].
	DropIcmp int `pulumi:"dropIcmp"`
	// Other block, value [0 (block off), 1 (block on)].
	DropOther int `pulumi:"dropOther"`
	// TCP block, value [0 (block off), 1 (block on)].
	DropTcp int `pulumi:"dropTcp"`
	// UDP block, value [0 (block off), 1 (block on)].
	DropUdp int `pulumi:"dropUdp"`
}

// DdosPolicyV2ProtocolBlockConfigInput is an input type that accepts DdosPolicyV2ProtocolBlockConfigArgs and DdosPolicyV2ProtocolBlockConfigOutput values.
// You can construct a concrete instance of `DdosPolicyV2ProtocolBlockConfigInput` via:
//
//	DdosPolicyV2ProtocolBlockConfigArgs{...}
type DdosPolicyV2ProtocolBlockConfigInput interface {
	pulumi.Input

	ToDdosPolicyV2ProtocolBlockConfigOutput() DdosPolicyV2ProtocolBlockConfigOutput
	ToDdosPolicyV2ProtocolBlockConfigOutputWithContext(context.Context) DdosPolicyV2ProtocolBlockConfigOutput
}

type DdosPolicyV2ProtocolBlockConfigArgs struct {
	// ICMP block, value [0 (block off), 1 (block on)].
	DropIcmp pulumi.IntInput `pulumi:"dropIcmp"`
	// Other block, value [0 (block off), 1 (block on)].
	DropOther pulumi.IntInput `pulumi:"dropOther"`
	// TCP block, value [0 (block off), 1 (block on)].
	DropTcp pulumi.IntInput `pulumi:"dropTcp"`
	// UDP block, value [0 (block off), 1 (block on)].
	DropUdp pulumi.IntInput `pulumi:"dropUdp"`
}

func (DdosPolicyV2ProtocolBlockConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2ProtocolBlockConfig)(nil)).Elem()
}

func (i DdosPolicyV2ProtocolBlockConfigArgs) ToDdosPolicyV2ProtocolBlockConfigOutput() DdosPolicyV2ProtocolBlockConfigOutput {
	return i.ToDdosPolicyV2ProtocolBlockConfigOutputWithContext(context.Background())
}

func (i DdosPolicyV2ProtocolBlockConfigArgs) ToDdosPolicyV2ProtocolBlockConfigOutputWithContext(ctx context.Context) DdosPolicyV2ProtocolBlockConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2ProtocolBlockConfigOutput)
}

// DdosPolicyV2ProtocolBlockConfigArrayInput is an input type that accepts DdosPolicyV2ProtocolBlockConfigArray and DdosPolicyV2ProtocolBlockConfigArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2ProtocolBlockConfigArrayInput` via:
//
//	DdosPolicyV2ProtocolBlockConfigArray{ DdosPolicyV2ProtocolBlockConfigArgs{...} }
type DdosPolicyV2ProtocolBlockConfigArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2ProtocolBlockConfigArrayOutput() DdosPolicyV2ProtocolBlockConfigArrayOutput
	ToDdosPolicyV2ProtocolBlockConfigArrayOutputWithContext(context.Context) DdosPolicyV2ProtocolBlockConfigArrayOutput
}

type DdosPolicyV2ProtocolBlockConfigArray []DdosPolicyV2ProtocolBlockConfigInput

func (DdosPolicyV2ProtocolBlockConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2ProtocolBlockConfig)(nil)).Elem()
}

func (i DdosPolicyV2ProtocolBlockConfigArray) ToDdosPolicyV2ProtocolBlockConfigArrayOutput() DdosPolicyV2ProtocolBlockConfigArrayOutput {
	return i.ToDdosPolicyV2ProtocolBlockConfigArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2ProtocolBlockConfigArray) ToDdosPolicyV2ProtocolBlockConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2ProtocolBlockConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2ProtocolBlockConfigArrayOutput)
}

type DdosPolicyV2ProtocolBlockConfigOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2ProtocolBlockConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2ProtocolBlockConfig)(nil)).Elem()
}

func (o DdosPolicyV2ProtocolBlockConfigOutput) ToDdosPolicyV2ProtocolBlockConfigOutput() DdosPolicyV2ProtocolBlockConfigOutput {
	return o
}

func (o DdosPolicyV2ProtocolBlockConfigOutput) ToDdosPolicyV2ProtocolBlockConfigOutputWithContext(ctx context.Context) DdosPolicyV2ProtocolBlockConfigOutput {
	return o
}

// ICMP block, value [0 (block off), 1 (block on)].
func (o DdosPolicyV2ProtocolBlockConfigOutput) DropIcmp() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2ProtocolBlockConfig) int { return v.DropIcmp }).(pulumi.IntOutput)
}

// Other block, value [0 (block off), 1 (block on)].
func (o DdosPolicyV2ProtocolBlockConfigOutput) DropOther() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2ProtocolBlockConfig) int { return v.DropOther }).(pulumi.IntOutput)
}

// TCP block, value [0 (block off), 1 (block on)].
func (o DdosPolicyV2ProtocolBlockConfigOutput) DropTcp() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2ProtocolBlockConfig) int { return v.DropTcp }).(pulumi.IntOutput)
}

// UDP block, value [0 (block off), 1 (block on)].
func (o DdosPolicyV2ProtocolBlockConfigOutput) DropUdp() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2ProtocolBlockConfig) int { return v.DropUdp }).(pulumi.IntOutput)
}

type DdosPolicyV2ProtocolBlockConfigArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2ProtocolBlockConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2ProtocolBlockConfig)(nil)).Elem()
}

func (o DdosPolicyV2ProtocolBlockConfigArrayOutput) ToDdosPolicyV2ProtocolBlockConfigArrayOutput() DdosPolicyV2ProtocolBlockConfigArrayOutput {
	return o
}

func (o DdosPolicyV2ProtocolBlockConfigArrayOutput) ToDdosPolicyV2ProtocolBlockConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2ProtocolBlockConfigArrayOutput {
	return o
}

func (o DdosPolicyV2ProtocolBlockConfigArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2ProtocolBlockConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2ProtocolBlockConfig {
		return vs[0].([]DdosPolicyV2ProtocolBlockConfig)[vs[1].(int)]
	}).(DdosPolicyV2ProtocolBlockConfigOutput)
}

type DdosPolicyV2WaterPrintConfig struct {
	// List of forwarding listeners to which the watermark belongs.
	Listeners []DdosPolicyV2WaterPrintConfigListener `pulumi:"listeners"`
	// Watermark offset, value range: [0-100].
	Offset int `pulumi:"offset"`
	// Whether it is enabled, value [0 (manual open), 1 (immediate operation)].
	OpenStatus int `pulumi:"openStatus"`
	// Watermark check mode, value [`checkall`(normal mode), `shortfpcheckall`(simplified mode)].
	Verify string `pulumi:"verify"`
}

// DdosPolicyV2WaterPrintConfigInput is an input type that accepts DdosPolicyV2WaterPrintConfigArgs and DdosPolicyV2WaterPrintConfigOutput values.
// You can construct a concrete instance of `DdosPolicyV2WaterPrintConfigInput` via:
//
//	DdosPolicyV2WaterPrintConfigArgs{...}
type DdosPolicyV2WaterPrintConfigInput interface {
	pulumi.Input

	ToDdosPolicyV2WaterPrintConfigOutput() DdosPolicyV2WaterPrintConfigOutput
	ToDdosPolicyV2WaterPrintConfigOutputWithContext(context.Context) DdosPolicyV2WaterPrintConfigOutput
}

type DdosPolicyV2WaterPrintConfigArgs struct {
	// List of forwarding listeners to which the watermark belongs.
	Listeners DdosPolicyV2WaterPrintConfigListenerArrayInput `pulumi:"listeners"`
	// Watermark offset, value range: [0-100].
	Offset pulumi.IntInput `pulumi:"offset"`
	// Whether it is enabled, value [0 (manual open), 1 (immediate operation)].
	OpenStatus pulumi.IntInput `pulumi:"openStatus"`
	// Watermark check mode, value [`checkall`(normal mode), `shortfpcheckall`(simplified mode)].
	Verify pulumi.StringInput `pulumi:"verify"`
}

func (DdosPolicyV2WaterPrintConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2WaterPrintConfig)(nil)).Elem()
}

func (i DdosPolicyV2WaterPrintConfigArgs) ToDdosPolicyV2WaterPrintConfigOutput() DdosPolicyV2WaterPrintConfigOutput {
	return i.ToDdosPolicyV2WaterPrintConfigOutputWithContext(context.Background())
}

func (i DdosPolicyV2WaterPrintConfigArgs) ToDdosPolicyV2WaterPrintConfigOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2WaterPrintConfigOutput)
}

// DdosPolicyV2WaterPrintConfigArrayInput is an input type that accepts DdosPolicyV2WaterPrintConfigArray and DdosPolicyV2WaterPrintConfigArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2WaterPrintConfigArrayInput` via:
//
//	DdosPolicyV2WaterPrintConfigArray{ DdosPolicyV2WaterPrintConfigArgs{...} }
type DdosPolicyV2WaterPrintConfigArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2WaterPrintConfigArrayOutput() DdosPolicyV2WaterPrintConfigArrayOutput
	ToDdosPolicyV2WaterPrintConfigArrayOutputWithContext(context.Context) DdosPolicyV2WaterPrintConfigArrayOutput
}

type DdosPolicyV2WaterPrintConfigArray []DdosPolicyV2WaterPrintConfigInput

func (DdosPolicyV2WaterPrintConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2WaterPrintConfig)(nil)).Elem()
}

func (i DdosPolicyV2WaterPrintConfigArray) ToDdosPolicyV2WaterPrintConfigArrayOutput() DdosPolicyV2WaterPrintConfigArrayOutput {
	return i.ToDdosPolicyV2WaterPrintConfigArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2WaterPrintConfigArray) ToDdosPolicyV2WaterPrintConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2WaterPrintConfigArrayOutput)
}

type DdosPolicyV2WaterPrintConfigOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2WaterPrintConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2WaterPrintConfig)(nil)).Elem()
}

func (o DdosPolicyV2WaterPrintConfigOutput) ToDdosPolicyV2WaterPrintConfigOutput() DdosPolicyV2WaterPrintConfigOutput {
	return o
}

func (o DdosPolicyV2WaterPrintConfigOutput) ToDdosPolicyV2WaterPrintConfigOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigOutput {
	return o
}

// List of forwarding listeners to which the watermark belongs.
func (o DdosPolicyV2WaterPrintConfigOutput) Listeners() DdosPolicyV2WaterPrintConfigListenerArrayOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfig) []DdosPolicyV2WaterPrintConfigListener { return v.Listeners }).(DdosPolicyV2WaterPrintConfigListenerArrayOutput)
}

// Watermark offset, value range: [0-100].
func (o DdosPolicyV2WaterPrintConfigOutput) Offset() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfig) int { return v.Offset }).(pulumi.IntOutput)
}

// Whether it is enabled, value [0 (manual open), 1 (immediate operation)].
func (o DdosPolicyV2WaterPrintConfigOutput) OpenStatus() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfig) int { return v.OpenStatus }).(pulumi.IntOutput)
}

// Watermark check mode, value [`checkall`(normal mode), `shortfpcheckall`(simplified mode)].
func (o DdosPolicyV2WaterPrintConfigOutput) Verify() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfig) string { return v.Verify }).(pulumi.StringOutput)
}

type DdosPolicyV2WaterPrintConfigArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2WaterPrintConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2WaterPrintConfig)(nil)).Elem()
}

func (o DdosPolicyV2WaterPrintConfigArrayOutput) ToDdosPolicyV2WaterPrintConfigArrayOutput() DdosPolicyV2WaterPrintConfigArrayOutput {
	return o
}

func (o DdosPolicyV2WaterPrintConfigArrayOutput) ToDdosPolicyV2WaterPrintConfigArrayOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigArrayOutput {
	return o
}

func (o DdosPolicyV2WaterPrintConfigArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2WaterPrintConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2WaterPrintConfig {
		return vs[0].([]DdosPolicyV2WaterPrintConfig)[vs[1].(int)]
	}).(DdosPolicyV2WaterPrintConfigOutput)
}

type DdosPolicyV2WaterPrintConfigListener struct {
	// Forwarding protocol, value [TCP, UDP].
	ForwardProtocol string `pulumi:"forwardProtocol"`
	// Lower limit of forwarding listening port. Values: [1-65535].
	FrontendPort int `pulumi:"frontendPort"`
	// Upper limit of forwarding listening port. Values: [1-65535].
	FrontendPortEnd int `pulumi:"frontendPortEnd"`
}

// DdosPolicyV2WaterPrintConfigListenerInput is an input type that accepts DdosPolicyV2WaterPrintConfigListenerArgs and DdosPolicyV2WaterPrintConfigListenerOutput values.
// You can construct a concrete instance of `DdosPolicyV2WaterPrintConfigListenerInput` via:
//
//	DdosPolicyV2WaterPrintConfigListenerArgs{...}
type DdosPolicyV2WaterPrintConfigListenerInput interface {
	pulumi.Input

	ToDdosPolicyV2WaterPrintConfigListenerOutput() DdosPolicyV2WaterPrintConfigListenerOutput
	ToDdosPolicyV2WaterPrintConfigListenerOutputWithContext(context.Context) DdosPolicyV2WaterPrintConfigListenerOutput
}

type DdosPolicyV2WaterPrintConfigListenerArgs struct {
	// Forwarding protocol, value [TCP, UDP].
	ForwardProtocol pulumi.StringInput `pulumi:"forwardProtocol"`
	// Lower limit of forwarding listening port. Values: [1-65535].
	FrontendPort pulumi.IntInput `pulumi:"frontendPort"`
	// Upper limit of forwarding listening port. Values: [1-65535].
	FrontendPortEnd pulumi.IntInput `pulumi:"frontendPortEnd"`
}

func (DdosPolicyV2WaterPrintConfigListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2WaterPrintConfigListener)(nil)).Elem()
}

func (i DdosPolicyV2WaterPrintConfigListenerArgs) ToDdosPolicyV2WaterPrintConfigListenerOutput() DdosPolicyV2WaterPrintConfigListenerOutput {
	return i.ToDdosPolicyV2WaterPrintConfigListenerOutputWithContext(context.Background())
}

func (i DdosPolicyV2WaterPrintConfigListenerArgs) ToDdosPolicyV2WaterPrintConfigListenerOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2WaterPrintConfigListenerOutput)
}

// DdosPolicyV2WaterPrintConfigListenerArrayInput is an input type that accepts DdosPolicyV2WaterPrintConfigListenerArray and DdosPolicyV2WaterPrintConfigListenerArrayOutput values.
// You can construct a concrete instance of `DdosPolicyV2WaterPrintConfigListenerArrayInput` via:
//
//	DdosPolicyV2WaterPrintConfigListenerArray{ DdosPolicyV2WaterPrintConfigListenerArgs{...} }
type DdosPolicyV2WaterPrintConfigListenerArrayInput interface {
	pulumi.Input

	ToDdosPolicyV2WaterPrintConfigListenerArrayOutput() DdosPolicyV2WaterPrintConfigListenerArrayOutput
	ToDdosPolicyV2WaterPrintConfigListenerArrayOutputWithContext(context.Context) DdosPolicyV2WaterPrintConfigListenerArrayOutput
}

type DdosPolicyV2WaterPrintConfigListenerArray []DdosPolicyV2WaterPrintConfigListenerInput

func (DdosPolicyV2WaterPrintConfigListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2WaterPrintConfigListener)(nil)).Elem()
}

func (i DdosPolicyV2WaterPrintConfigListenerArray) ToDdosPolicyV2WaterPrintConfigListenerArrayOutput() DdosPolicyV2WaterPrintConfigListenerArrayOutput {
	return i.ToDdosPolicyV2WaterPrintConfigListenerArrayOutputWithContext(context.Background())
}

func (i DdosPolicyV2WaterPrintConfigListenerArray) ToDdosPolicyV2WaterPrintConfigListenerArrayOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyV2WaterPrintConfigListenerArrayOutput)
}

type DdosPolicyV2WaterPrintConfigListenerOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2WaterPrintConfigListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyV2WaterPrintConfigListener)(nil)).Elem()
}

func (o DdosPolicyV2WaterPrintConfigListenerOutput) ToDdosPolicyV2WaterPrintConfigListenerOutput() DdosPolicyV2WaterPrintConfigListenerOutput {
	return o
}

func (o DdosPolicyV2WaterPrintConfigListenerOutput) ToDdosPolicyV2WaterPrintConfigListenerOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigListenerOutput {
	return o
}

// Forwarding protocol, value [TCP, UDP].
func (o DdosPolicyV2WaterPrintConfigListenerOutput) ForwardProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfigListener) string { return v.ForwardProtocol }).(pulumi.StringOutput)
}

// Lower limit of forwarding listening port. Values: [1-65535].
func (o DdosPolicyV2WaterPrintConfigListenerOutput) FrontendPort() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfigListener) int { return v.FrontendPort }).(pulumi.IntOutput)
}

// Upper limit of forwarding listening port. Values: [1-65535].
func (o DdosPolicyV2WaterPrintConfigListenerOutput) FrontendPortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v DdosPolicyV2WaterPrintConfigListener) int { return v.FrontendPortEnd }).(pulumi.IntOutput)
}

type DdosPolicyV2WaterPrintConfigListenerArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyV2WaterPrintConfigListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyV2WaterPrintConfigListener)(nil)).Elem()
}

func (o DdosPolicyV2WaterPrintConfigListenerArrayOutput) ToDdosPolicyV2WaterPrintConfigListenerArrayOutput() DdosPolicyV2WaterPrintConfigListenerArrayOutput {
	return o
}

func (o DdosPolicyV2WaterPrintConfigListenerArrayOutput) ToDdosPolicyV2WaterPrintConfigListenerArrayOutputWithContext(ctx context.Context) DdosPolicyV2WaterPrintConfigListenerArrayOutput {
	return o
}

func (o DdosPolicyV2WaterPrintConfigListenerArrayOutput) Index(i pulumi.IntInput) DdosPolicyV2WaterPrintConfigListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyV2WaterPrintConfigListener {
		return vs[0].([]DdosPolicyV2WaterPrintConfigListener)[vs[1].(int)]
	}).(DdosPolicyV2WaterPrintConfigListenerOutput)
}

type DdosPolicyWatermarkFilter struct {
	// Indicate whether to auto-remove the watermark or not.
	AutoRemove *bool `pulumi:"autoRemove"`
	// The offset of watermark. Valid value ranges: (0~1500).
	Offset *int `pulumi:"offset"`
	// Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
	OpenSwitch *bool `pulumi:"openSwitch"`
	// Port range of TCP, the format is like `2000-3000`.
	TcpPortLists []string `pulumi:"tcpPortLists"`
	// Port range of TCP, the format is like `2000-3000`.
	UdpPortLists []string `pulumi:"udpPortLists"`
}

// DdosPolicyWatermarkFilterInput is an input type that accepts DdosPolicyWatermarkFilterArgs and DdosPolicyWatermarkFilterOutput values.
// You can construct a concrete instance of `DdosPolicyWatermarkFilterInput` via:
//
//	DdosPolicyWatermarkFilterArgs{...}
type DdosPolicyWatermarkFilterInput interface {
	pulumi.Input

	ToDdosPolicyWatermarkFilterOutput() DdosPolicyWatermarkFilterOutput
	ToDdosPolicyWatermarkFilterOutputWithContext(context.Context) DdosPolicyWatermarkFilterOutput
}

type DdosPolicyWatermarkFilterArgs struct {
	// Indicate whether to auto-remove the watermark or not.
	AutoRemove pulumi.BoolPtrInput `pulumi:"autoRemove"`
	// The offset of watermark. Valid value ranges: (0~1500).
	Offset pulumi.IntPtrInput `pulumi:"offset"`
	// Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
	OpenSwitch pulumi.BoolPtrInput `pulumi:"openSwitch"`
	// Port range of TCP, the format is like `2000-3000`.
	TcpPortLists pulumi.StringArrayInput `pulumi:"tcpPortLists"`
	// Port range of TCP, the format is like `2000-3000`.
	UdpPortLists pulumi.StringArrayInput `pulumi:"udpPortLists"`
}

func (DdosPolicyWatermarkFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyWatermarkFilter)(nil)).Elem()
}

func (i DdosPolicyWatermarkFilterArgs) ToDdosPolicyWatermarkFilterOutput() DdosPolicyWatermarkFilterOutput {
	return i.ToDdosPolicyWatermarkFilterOutputWithContext(context.Background())
}

func (i DdosPolicyWatermarkFilterArgs) ToDdosPolicyWatermarkFilterOutputWithContext(ctx context.Context) DdosPolicyWatermarkFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyWatermarkFilterOutput)
}

// DdosPolicyWatermarkFilterArrayInput is an input type that accepts DdosPolicyWatermarkFilterArray and DdosPolicyWatermarkFilterArrayOutput values.
// You can construct a concrete instance of `DdosPolicyWatermarkFilterArrayInput` via:
//
//	DdosPolicyWatermarkFilterArray{ DdosPolicyWatermarkFilterArgs{...} }
type DdosPolicyWatermarkFilterArrayInput interface {
	pulumi.Input

	ToDdosPolicyWatermarkFilterArrayOutput() DdosPolicyWatermarkFilterArrayOutput
	ToDdosPolicyWatermarkFilterArrayOutputWithContext(context.Context) DdosPolicyWatermarkFilterArrayOutput
}

type DdosPolicyWatermarkFilterArray []DdosPolicyWatermarkFilterInput

func (DdosPolicyWatermarkFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyWatermarkFilter)(nil)).Elem()
}

func (i DdosPolicyWatermarkFilterArray) ToDdosPolicyWatermarkFilterArrayOutput() DdosPolicyWatermarkFilterArrayOutput {
	return i.ToDdosPolicyWatermarkFilterArrayOutputWithContext(context.Background())
}

func (i DdosPolicyWatermarkFilterArray) ToDdosPolicyWatermarkFilterArrayOutputWithContext(ctx context.Context) DdosPolicyWatermarkFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyWatermarkFilterArrayOutput)
}

type DdosPolicyWatermarkFilterOutput struct{ *pulumi.OutputState }

func (DdosPolicyWatermarkFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyWatermarkFilter)(nil)).Elem()
}

func (o DdosPolicyWatermarkFilterOutput) ToDdosPolicyWatermarkFilterOutput() DdosPolicyWatermarkFilterOutput {
	return o
}

func (o DdosPolicyWatermarkFilterOutput) ToDdosPolicyWatermarkFilterOutputWithContext(ctx context.Context) DdosPolicyWatermarkFilterOutput {
	return o
}

// Indicate whether to auto-remove the watermark or not.
func (o DdosPolicyWatermarkFilterOutput) AutoRemove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkFilter) *bool { return v.AutoRemove }).(pulumi.BoolPtrOutput)
}

// The offset of watermark. Valid value ranges: (0~1500).
func (o DdosPolicyWatermarkFilterOutput) Offset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkFilter) *int { return v.Offset }).(pulumi.IntPtrOutput)
}

// Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
func (o DdosPolicyWatermarkFilterOutput) OpenSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkFilter) *bool { return v.OpenSwitch }).(pulumi.BoolPtrOutput)
}

// Port range of TCP, the format is like `2000-3000`.
func (o DdosPolicyWatermarkFilterOutput) TcpPortLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkFilter) []string { return v.TcpPortLists }).(pulumi.StringArrayOutput)
}

// Port range of TCP, the format is like `2000-3000`.
func (o DdosPolicyWatermarkFilterOutput) UdpPortLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkFilter) []string { return v.UdpPortLists }).(pulumi.StringArrayOutput)
}

type DdosPolicyWatermarkFilterArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyWatermarkFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyWatermarkFilter)(nil)).Elem()
}

func (o DdosPolicyWatermarkFilterArrayOutput) ToDdosPolicyWatermarkFilterArrayOutput() DdosPolicyWatermarkFilterArrayOutput {
	return o
}

func (o DdosPolicyWatermarkFilterArrayOutput) ToDdosPolicyWatermarkFilterArrayOutputWithContext(ctx context.Context) DdosPolicyWatermarkFilterArrayOutput {
	return o
}

func (o DdosPolicyWatermarkFilterArrayOutput) Index(i pulumi.IntInput) DdosPolicyWatermarkFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyWatermarkFilter {
		return vs[0].([]DdosPolicyWatermarkFilter)[vs[1].(int)]
	}).(DdosPolicyWatermarkFilterOutput)
}

type DdosPolicyWatermarkKey struct {
	// Content of the watermark.
	Content *string `pulumi:"content"`
	// Create time of the DDoS policy.
	CreateTime *string `pulumi:"createTime"`
	// Id of the watermark.
	Id *string `pulumi:"id"`
	// Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
	OpenSwitch *bool `pulumi:"openSwitch"`
}

// DdosPolicyWatermarkKeyInput is an input type that accepts DdosPolicyWatermarkKeyArgs and DdosPolicyWatermarkKeyOutput values.
// You can construct a concrete instance of `DdosPolicyWatermarkKeyInput` via:
//
//	DdosPolicyWatermarkKeyArgs{...}
type DdosPolicyWatermarkKeyInput interface {
	pulumi.Input

	ToDdosPolicyWatermarkKeyOutput() DdosPolicyWatermarkKeyOutput
	ToDdosPolicyWatermarkKeyOutputWithContext(context.Context) DdosPolicyWatermarkKeyOutput
}

type DdosPolicyWatermarkKeyArgs struct {
	// Content of the watermark.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// Create time of the DDoS policy.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Id of the watermark.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
	OpenSwitch pulumi.BoolPtrInput `pulumi:"openSwitch"`
}

func (DdosPolicyWatermarkKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyWatermarkKey)(nil)).Elem()
}

func (i DdosPolicyWatermarkKeyArgs) ToDdosPolicyWatermarkKeyOutput() DdosPolicyWatermarkKeyOutput {
	return i.ToDdosPolicyWatermarkKeyOutputWithContext(context.Background())
}

func (i DdosPolicyWatermarkKeyArgs) ToDdosPolicyWatermarkKeyOutputWithContext(ctx context.Context) DdosPolicyWatermarkKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyWatermarkKeyOutput)
}

// DdosPolicyWatermarkKeyArrayInput is an input type that accepts DdosPolicyWatermarkKeyArray and DdosPolicyWatermarkKeyArrayOutput values.
// You can construct a concrete instance of `DdosPolicyWatermarkKeyArrayInput` via:
//
//	DdosPolicyWatermarkKeyArray{ DdosPolicyWatermarkKeyArgs{...} }
type DdosPolicyWatermarkKeyArrayInput interface {
	pulumi.Input

	ToDdosPolicyWatermarkKeyArrayOutput() DdosPolicyWatermarkKeyArrayOutput
	ToDdosPolicyWatermarkKeyArrayOutputWithContext(context.Context) DdosPolicyWatermarkKeyArrayOutput
}

type DdosPolicyWatermarkKeyArray []DdosPolicyWatermarkKeyInput

func (DdosPolicyWatermarkKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyWatermarkKey)(nil)).Elem()
}

func (i DdosPolicyWatermarkKeyArray) ToDdosPolicyWatermarkKeyArrayOutput() DdosPolicyWatermarkKeyArrayOutput {
	return i.ToDdosPolicyWatermarkKeyArrayOutputWithContext(context.Background())
}

func (i DdosPolicyWatermarkKeyArray) ToDdosPolicyWatermarkKeyArrayOutputWithContext(ctx context.Context) DdosPolicyWatermarkKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DdosPolicyWatermarkKeyArrayOutput)
}

type DdosPolicyWatermarkKeyOutput struct{ *pulumi.OutputState }

func (DdosPolicyWatermarkKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DdosPolicyWatermarkKey)(nil)).Elem()
}

func (o DdosPolicyWatermarkKeyOutput) ToDdosPolicyWatermarkKeyOutput() DdosPolicyWatermarkKeyOutput {
	return o
}

func (o DdosPolicyWatermarkKeyOutput) ToDdosPolicyWatermarkKeyOutputWithContext(ctx context.Context) DdosPolicyWatermarkKeyOutput {
	return o
}

// Content of the watermark.
func (o DdosPolicyWatermarkKeyOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkKey) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// Create time of the DDoS policy.
func (o DdosPolicyWatermarkKeyOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkKey) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Id of the watermark.
func (o DdosPolicyWatermarkKeyOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkKey) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Indicate whether to open watermark or not. It muse be set `true` when any field of watermark was set.
func (o DdosPolicyWatermarkKeyOutput) OpenSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v DdosPolicyWatermarkKey) *bool { return v.OpenSwitch }).(pulumi.BoolPtrOutput)
}

type DdosPolicyWatermarkKeyArrayOutput struct{ *pulumi.OutputState }

func (DdosPolicyWatermarkKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DdosPolicyWatermarkKey)(nil)).Elem()
}

func (o DdosPolicyWatermarkKeyArrayOutput) ToDdosPolicyWatermarkKeyArrayOutput() DdosPolicyWatermarkKeyArrayOutput {
	return o
}

func (o DdosPolicyWatermarkKeyArrayOutput) ToDdosPolicyWatermarkKeyArrayOutputWithContext(ctx context.Context) DdosPolicyWatermarkKeyArrayOutput {
	return o
}

func (o DdosPolicyWatermarkKeyArrayOutput) Index(i pulumi.IntInput) DdosPolicyWatermarkKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DdosPolicyWatermarkKey {
		return vs[0].([]DdosPolicyWatermarkKey)[vs[1].(int)]
	}).(DdosPolicyWatermarkKeyOutput)
}

type L4RuleSourceList struct {
	// Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
	Source string `pulumi:"source"`
	// Weight of the source, the valid value ranges from 0 to 100.
	Weight int `pulumi:"weight"`
}

// L4RuleSourceListInput is an input type that accepts L4RuleSourceListArgs and L4RuleSourceListOutput values.
// You can construct a concrete instance of `L4RuleSourceListInput` via:
//
//	L4RuleSourceListArgs{...}
type L4RuleSourceListInput interface {
	pulumi.Input

	ToL4RuleSourceListOutput() L4RuleSourceListOutput
	ToL4RuleSourceListOutputWithContext(context.Context) L4RuleSourceListOutput
}

type L4RuleSourceListArgs struct {
	// Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
	Source pulumi.StringInput `pulumi:"source"`
	// Weight of the source, the valid value ranges from 0 to 100.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (L4RuleSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L4RuleSourceList)(nil)).Elem()
}

func (i L4RuleSourceListArgs) ToL4RuleSourceListOutput() L4RuleSourceListOutput {
	return i.ToL4RuleSourceListOutputWithContext(context.Background())
}

func (i L4RuleSourceListArgs) ToL4RuleSourceListOutputWithContext(ctx context.Context) L4RuleSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleSourceListOutput)
}

// L4RuleSourceListArrayInput is an input type that accepts L4RuleSourceListArray and L4RuleSourceListArrayOutput values.
// You can construct a concrete instance of `L4RuleSourceListArrayInput` via:
//
//	L4RuleSourceListArray{ L4RuleSourceListArgs{...} }
type L4RuleSourceListArrayInput interface {
	pulumi.Input

	ToL4RuleSourceListArrayOutput() L4RuleSourceListArrayOutput
	ToL4RuleSourceListArrayOutputWithContext(context.Context) L4RuleSourceListArrayOutput
}

type L4RuleSourceListArray []L4RuleSourceListInput

func (L4RuleSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L4RuleSourceList)(nil)).Elem()
}

func (i L4RuleSourceListArray) ToL4RuleSourceListArrayOutput() L4RuleSourceListArrayOutput {
	return i.ToL4RuleSourceListArrayOutputWithContext(context.Background())
}

func (i L4RuleSourceListArray) ToL4RuleSourceListArrayOutputWithContext(ctx context.Context) L4RuleSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleSourceListArrayOutput)
}

type L4RuleSourceListOutput struct{ *pulumi.OutputState }

func (L4RuleSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L4RuleSourceList)(nil)).Elem()
}

func (o L4RuleSourceListOutput) ToL4RuleSourceListOutput() L4RuleSourceListOutput {
	return o
}

func (o L4RuleSourceListOutput) ToL4RuleSourceListOutputWithContext(ctx context.Context) L4RuleSourceListOutput {
	return o
}

// Source IP or domain, valid format of ip is like `1.1.1.1` and valid format of host source is like `abc.com`.
func (o L4RuleSourceListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v L4RuleSourceList) string { return v.Source }).(pulumi.StringOutput)
}

// Weight of the source, the valid value ranges from 0 to 100.
func (o L4RuleSourceListOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleSourceList) int { return v.Weight }).(pulumi.IntOutput)
}

type L4RuleSourceListArrayOutput struct{ *pulumi.OutputState }

func (L4RuleSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L4RuleSourceList)(nil)).Elem()
}

func (o L4RuleSourceListArrayOutput) ToL4RuleSourceListArrayOutput() L4RuleSourceListArrayOutput {
	return o
}

func (o L4RuleSourceListArrayOutput) ToL4RuleSourceListArrayOutputWithContext(ctx context.Context) L4RuleSourceListArrayOutput {
	return o
}

func (o L4RuleSourceListArrayOutput) Index(i pulumi.IntInput) L4RuleSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L4RuleSourceList {
		return vs[0].([]L4RuleSourceList)[vs[1].(int)]
	}).(L4RuleSourceListOutput)
}

type L4RuleV2Rules struct {
	KeepEnable   bool                      `pulumi:"keepEnable"`
	Keeptime     int                       `pulumi:"keeptime"`
	LbType       int                       `pulumi:"lbType"`
	Protocol     string                    `pulumi:"protocol"`
	Region       int                       `pulumi:"region"`
	RemoveSwitch bool                      `pulumi:"removeSwitch"`
	RuleName     string                    `pulumi:"ruleName"`
	SourceLists  []L4RuleV2RulesSourceList `pulumi:"sourceLists"`
	SourcePort   int                       `pulumi:"sourcePort"`
	SourceType   int                       `pulumi:"sourceType"`
	VirtualPort  int                       `pulumi:"virtualPort"`
}

// L4RuleV2RulesInput is an input type that accepts L4RuleV2RulesArgs and L4RuleV2RulesOutput values.
// You can construct a concrete instance of `L4RuleV2RulesInput` via:
//
//	L4RuleV2RulesArgs{...}
type L4RuleV2RulesInput interface {
	pulumi.Input

	ToL4RuleV2RulesOutput() L4RuleV2RulesOutput
	ToL4RuleV2RulesOutputWithContext(context.Context) L4RuleV2RulesOutput
}

type L4RuleV2RulesArgs struct {
	KeepEnable   pulumi.BoolInput                  `pulumi:"keepEnable"`
	Keeptime     pulumi.IntInput                   `pulumi:"keeptime"`
	LbType       pulumi.IntInput                   `pulumi:"lbType"`
	Protocol     pulumi.StringInput                `pulumi:"protocol"`
	Region       pulumi.IntInput                   `pulumi:"region"`
	RemoveSwitch pulumi.BoolInput                  `pulumi:"removeSwitch"`
	RuleName     pulumi.StringInput                `pulumi:"ruleName"`
	SourceLists  L4RuleV2RulesSourceListArrayInput `pulumi:"sourceLists"`
	SourcePort   pulumi.IntInput                   `pulumi:"sourcePort"`
	SourceType   pulumi.IntInput                   `pulumi:"sourceType"`
	VirtualPort  pulumi.IntInput                   `pulumi:"virtualPort"`
}

func (L4RuleV2RulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L4RuleV2Rules)(nil)).Elem()
}

func (i L4RuleV2RulesArgs) ToL4RuleV2RulesOutput() L4RuleV2RulesOutput {
	return i.ToL4RuleV2RulesOutputWithContext(context.Background())
}

func (i L4RuleV2RulesArgs) ToL4RuleV2RulesOutputWithContext(ctx context.Context) L4RuleV2RulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2RulesOutput)
}

func (i L4RuleV2RulesArgs) ToL4RuleV2RulesPtrOutput() L4RuleV2RulesPtrOutput {
	return i.ToL4RuleV2RulesPtrOutputWithContext(context.Background())
}

func (i L4RuleV2RulesArgs) ToL4RuleV2RulesPtrOutputWithContext(ctx context.Context) L4RuleV2RulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2RulesOutput).ToL4RuleV2RulesPtrOutputWithContext(ctx)
}

// L4RuleV2RulesPtrInput is an input type that accepts L4RuleV2RulesArgs, L4RuleV2RulesPtr and L4RuleV2RulesPtrOutput values.
// You can construct a concrete instance of `L4RuleV2RulesPtrInput` via:
//
//	        L4RuleV2RulesArgs{...}
//
//	or:
//
//	        nil
type L4RuleV2RulesPtrInput interface {
	pulumi.Input

	ToL4RuleV2RulesPtrOutput() L4RuleV2RulesPtrOutput
	ToL4RuleV2RulesPtrOutputWithContext(context.Context) L4RuleV2RulesPtrOutput
}

type l4ruleV2RulesPtrType L4RuleV2RulesArgs

func L4RuleV2RulesPtr(v *L4RuleV2RulesArgs) L4RuleV2RulesPtrInput {
	return (*l4ruleV2RulesPtrType)(v)
}

func (*l4ruleV2RulesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**L4RuleV2Rules)(nil)).Elem()
}

func (i *l4ruleV2RulesPtrType) ToL4RuleV2RulesPtrOutput() L4RuleV2RulesPtrOutput {
	return i.ToL4RuleV2RulesPtrOutputWithContext(context.Background())
}

func (i *l4ruleV2RulesPtrType) ToL4RuleV2RulesPtrOutputWithContext(ctx context.Context) L4RuleV2RulesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2RulesPtrOutput)
}

type L4RuleV2RulesOutput struct{ *pulumi.OutputState }

func (L4RuleV2RulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L4RuleV2Rules)(nil)).Elem()
}

func (o L4RuleV2RulesOutput) ToL4RuleV2RulesOutput() L4RuleV2RulesOutput {
	return o
}

func (o L4RuleV2RulesOutput) ToL4RuleV2RulesOutputWithContext(ctx context.Context) L4RuleV2RulesOutput {
	return o
}

func (o L4RuleV2RulesOutput) ToL4RuleV2RulesPtrOutput() L4RuleV2RulesPtrOutput {
	return o.ToL4RuleV2RulesPtrOutputWithContext(context.Background())
}

func (o L4RuleV2RulesOutput) ToL4RuleV2RulesPtrOutputWithContext(ctx context.Context) L4RuleV2RulesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v L4RuleV2Rules) *L4RuleV2Rules {
		return &v
	}).(L4RuleV2RulesPtrOutput)
}

func (o L4RuleV2RulesOutput) KeepEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v L4RuleV2Rules) bool { return v.KeepEnable }).(pulumi.BoolOutput)
}

func (o L4RuleV2RulesOutput) Keeptime() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2Rules) int { return v.Keeptime }).(pulumi.IntOutput)
}

func (o L4RuleV2RulesOutput) LbType() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2Rules) int { return v.LbType }).(pulumi.IntOutput)
}

func (o L4RuleV2RulesOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v L4RuleV2Rules) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o L4RuleV2RulesOutput) Region() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2Rules) int { return v.Region }).(pulumi.IntOutput)
}

func (o L4RuleV2RulesOutput) RemoveSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v L4RuleV2Rules) bool { return v.RemoveSwitch }).(pulumi.BoolOutput)
}

func (o L4RuleV2RulesOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v L4RuleV2Rules) string { return v.RuleName }).(pulumi.StringOutput)
}

func (o L4RuleV2RulesOutput) SourceLists() L4RuleV2RulesSourceListArrayOutput {
	return o.ApplyT(func(v L4RuleV2Rules) []L4RuleV2RulesSourceList { return v.SourceLists }).(L4RuleV2RulesSourceListArrayOutput)
}

func (o L4RuleV2RulesOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2Rules) int { return v.SourcePort }).(pulumi.IntOutput)
}

func (o L4RuleV2RulesOutput) SourceType() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2Rules) int { return v.SourceType }).(pulumi.IntOutput)
}

func (o L4RuleV2RulesOutput) VirtualPort() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2Rules) int { return v.VirtualPort }).(pulumi.IntOutput)
}

type L4RuleV2RulesPtrOutput struct{ *pulumi.OutputState }

func (L4RuleV2RulesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L4RuleV2Rules)(nil)).Elem()
}

func (o L4RuleV2RulesPtrOutput) ToL4RuleV2RulesPtrOutput() L4RuleV2RulesPtrOutput {
	return o
}

func (o L4RuleV2RulesPtrOutput) ToL4RuleV2RulesPtrOutputWithContext(ctx context.Context) L4RuleV2RulesPtrOutput {
	return o
}

func (o L4RuleV2RulesPtrOutput) Elem() L4RuleV2RulesOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) L4RuleV2Rules {
		if v != nil {
			return *v
		}
		var ret L4RuleV2Rules
		return ret
	}).(L4RuleV2RulesOutput)
}

func (o L4RuleV2RulesPtrOutput) KeepEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *bool {
		if v == nil {
			return nil
		}
		return &v.KeepEnable
	}).(pulumi.BoolPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) Keeptime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *int {
		if v == nil {
			return nil
		}
		return &v.Keeptime
	}).(pulumi.IntPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) LbType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *int {
		if v == nil {
			return nil
		}
		return &v.LbType
	}).(pulumi.IntPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) Region() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *int {
		if v == nil {
			return nil
		}
		return &v.Region
	}).(pulumi.IntPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) RemoveSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *bool {
		if v == nil {
			return nil
		}
		return &v.RemoveSwitch
	}).(pulumi.BoolPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *string {
		if v == nil {
			return nil
		}
		return &v.RuleName
	}).(pulumi.StringPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) SourceLists() L4RuleV2RulesSourceListArrayOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) []L4RuleV2RulesSourceList {
		if v == nil {
			return nil
		}
		return v.SourceLists
	}).(L4RuleV2RulesSourceListArrayOutput)
}

func (o L4RuleV2RulesPtrOutput) SourcePort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *int {
		if v == nil {
			return nil
		}
		return &v.SourcePort
	}).(pulumi.IntPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) SourceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *int {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.IntPtrOutput)
}

func (o L4RuleV2RulesPtrOutput) VirtualPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L4RuleV2Rules) *int {
		if v == nil {
			return nil
		}
		return &v.VirtualPort
	}).(pulumi.IntPtrOutput)
}

type L4RuleV2RulesSourceList struct {
	Source string `pulumi:"source"`
	Weight int    `pulumi:"weight"`
}

// L4RuleV2RulesSourceListInput is an input type that accepts L4RuleV2RulesSourceListArgs and L4RuleV2RulesSourceListOutput values.
// You can construct a concrete instance of `L4RuleV2RulesSourceListInput` via:
//
//	L4RuleV2RulesSourceListArgs{...}
type L4RuleV2RulesSourceListInput interface {
	pulumi.Input

	ToL4RuleV2RulesSourceListOutput() L4RuleV2RulesSourceListOutput
	ToL4RuleV2RulesSourceListOutputWithContext(context.Context) L4RuleV2RulesSourceListOutput
}

type L4RuleV2RulesSourceListArgs struct {
	Source pulumi.StringInput `pulumi:"source"`
	Weight pulumi.IntInput    `pulumi:"weight"`
}

func (L4RuleV2RulesSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L4RuleV2RulesSourceList)(nil)).Elem()
}

func (i L4RuleV2RulesSourceListArgs) ToL4RuleV2RulesSourceListOutput() L4RuleV2RulesSourceListOutput {
	return i.ToL4RuleV2RulesSourceListOutputWithContext(context.Background())
}

func (i L4RuleV2RulesSourceListArgs) ToL4RuleV2RulesSourceListOutputWithContext(ctx context.Context) L4RuleV2RulesSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2RulesSourceListOutput)
}

// L4RuleV2RulesSourceListArrayInput is an input type that accepts L4RuleV2RulesSourceListArray and L4RuleV2RulesSourceListArrayOutput values.
// You can construct a concrete instance of `L4RuleV2RulesSourceListArrayInput` via:
//
//	L4RuleV2RulesSourceListArray{ L4RuleV2RulesSourceListArgs{...} }
type L4RuleV2RulesSourceListArrayInput interface {
	pulumi.Input

	ToL4RuleV2RulesSourceListArrayOutput() L4RuleV2RulesSourceListArrayOutput
	ToL4RuleV2RulesSourceListArrayOutputWithContext(context.Context) L4RuleV2RulesSourceListArrayOutput
}

type L4RuleV2RulesSourceListArray []L4RuleV2RulesSourceListInput

func (L4RuleV2RulesSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L4RuleV2RulesSourceList)(nil)).Elem()
}

func (i L4RuleV2RulesSourceListArray) ToL4RuleV2RulesSourceListArrayOutput() L4RuleV2RulesSourceListArrayOutput {
	return i.ToL4RuleV2RulesSourceListArrayOutputWithContext(context.Background())
}

func (i L4RuleV2RulesSourceListArray) ToL4RuleV2RulesSourceListArrayOutputWithContext(ctx context.Context) L4RuleV2RulesSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L4RuleV2RulesSourceListArrayOutput)
}

type L4RuleV2RulesSourceListOutput struct{ *pulumi.OutputState }

func (L4RuleV2RulesSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L4RuleV2RulesSourceList)(nil)).Elem()
}

func (o L4RuleV2RulesSourceListOutput) ToL4RuleV2RulesSourceListOutput() L4RuleV2RulesSourceListOutput {
	return o
}

func (o L4RuleV2RulesSourceListOutput) ToL4RuleV2RulesSourceListOutputWithContext(ctx context.Context) L4RuleV2RulesSourceListOutput {
	return o
}

func (o L4RuleV2RulesSourceListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v L4RuleV2RulesSourceList) string { return v.Source }).(pulumi.StringOutput)
}

func (o L4RuleV2RulesSourceListOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v L4RuleV2RulesSourceList) int { return v.Weight }).(pulumi.IntOutput)
}

type L4RuleV2RulesSourceListArrayOutput struct{ *pulumi.OutputState }

func (L4RuleV2RulesSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L4RuleV2RulesSourceList)(nil)).Elem()
}

func (o L4RuleV2RulesSourceListArrayOutput) ToL4RuleV2RulesSourceListArrayOutput() L4RuleV2RulesSourceListArrayOutput {
	return o
}

func (o L4RuleV2RulesSourceListArrayOutput) ToL4RuleV2RulesSourceListArrayOutputWithContext(ctx context.Context) L4RuleV2RulesSourceListArrayOutput {
	return o
}

func (o L4RuleV2RulesSourceListArrayOutput) Index(i pulumi.IntInput) L4RuleV2RulesSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L4RuleV2RulesSourceList {
		return vs[0].([]L4RuleV2RulesSourceList)[vs[1].(int)]
	}).(L4RuleV2RulesSourceListOutput)
}

type L7RuleV2Rule struct {
	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	CcEnable *int `pulumi:"ccEnable"`
	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	CertType *int `pulumi:"certType"`
	// Domain of the rule.
	Domain string `pulumi:"domain"`
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	HttpsToHttpEnable *int `pulumi:"httpsToHttpEnable"`
	// session hold switch.
	KeepEnable int `pulumi:"keepEnable"`
	// The keeptime of the layer 4 rule.
	Keeptime int `pulumi:"keeptime"`
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LbType int `pulumi:"lbType"`
	// Protocol of the rule.
	Protocol    string                   `pulumi:"protocol"`
	SourceLists []L7RuleV2RuleSourceList `pulumi:"sourceLists"`
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType int `pulumi:"sourceType"`
	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	SslId *string `pulumi:"sslId"`
}

// L7RuleV2RuleInput is an input type that accepts L7RuleV2RuleArgs and L7RuleV2RuleOutput values.
// You can construct a concrete instance of `L7RuleV2RuleInput` via:
//
//	L7RuleV2RuleArgs{...}
type L7RuleV2RuleInput interface {
	pulumi.Input

	ToL7RuleV2RuleOutput() L7RuleV2RuleOutput
	ToL7RuleV2RuleOutputWithContext(context.Context) L7RuleV2RuleOutput
}

type L7RuleV2RuleArgs struct {
	// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
	CcEnable pulumi.IntPtrInput `pulumi:"ccEnable"`
	// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
	CertType pulumi.IntPtrInput `pulumi:"certType"`
	// Domain of the rule.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
	HttpsToHttpEnable pulumi.IntPtrInput `pulumi:"httpsToHttpEnable"`
	// session hold switch.
	KeepEnable pulumi.IntInput `pulumi:"keepEnable"`
	// The keeptime of the layer 4 rule.
	Keeptime pulumi.IntInput `pulumi:"keeptime"`
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LbType pulumi.IntInput `pulumi:"lbType"`
	// Protocol of the rule.
	Protocol    pulumi.StringInput               `pulumi:"protocol"`
	SourceLists L7RuleV2RuleSourceListArrayInput `pulumi:"sourceLists"`
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType pulumi.IntInput `pulumi:"sourceType"`
	// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
	SslId pulumi.StringPtrInput `pulumi:"sslId"`
}

func (L7RuleV2RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L7RuleV2Rule)(nil)).Elem()
}

func (i L7RuleV2RuleArgs) ToL7RuleV2RuleOutput() L7RuleV2RuleOutput {
	return i.ToL7RuleV2RuleOutputWithContext(context.Background())
}

func (i L7RuleV2RuleArgs) ToL7RuleV2RuleOutputWithContext(ctx context.Context) L7RuleV2RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7RuleV2RuleOutput)
}

func (i L7RuleV2RuleArgs) ToL7RuleV2RulePtrOutput() L7RuleV2RulePtrOutput {
	return i.ToL7RuleV2RulePtrOutputWithContext(context.Background())
}

func (i L7RuleV2RuleArgs) ToL7RuleV2RulePtrOutputWithContext(ctx context.Context) L7RuleV2RulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7RuleV2RuleOutput).ToL7RuleV2RulePtrOutputWithContext(ctx)
}

// L7RuleV2RulePtrInput is an input type that accepts L7RuleV2RuleArgs, L7RuleV2RulePtr and L7RuleV2RulePtrOutput values.
// You can construct a concrete instance of `L7RuleV2RulePtrInput` via:
//
//	        L7RuleV2RuleArgs{...}
//
//	or:
//
//	        nil
type L7RuleV2RulePtrInput interface {
	pulumi.Input

	ToL7RuleV2RulePtrOutput() L7RuleV2RulePtrOutput
	ToL7RuleV2RulePtrOutputWithContext(context.Context) L7RuleV2RulePtrOutput
}

type l7ruleV2RulePtrType L7RuleV2RuleArgs

func L7RuleV2RulePtr(v *L7RuleV2RuleArgs) L7RuleV2RulePtrInput {
	return (*l7ruleV2RulePtrType)(v)
}

func (*l7ruleV2RulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**L7RuleV2Rule)(nil)).Elem()
}

func (i *l7ruleV2RulePtrType) ToL7RuleV2RulePtrOutput() L7RuleV2RulePtrOutput {
	return i.ToL7RuleV2RulePtrOutputWithContext(context.Background())
}

func (i *l7ruleV2RulePtrType) ToL7RuleV2RulePtrOutputWithContext(ctx context.Context) L7RuleV2RulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7RuleV2RulePtrOutput)
}

type L7RuleV2RuleOutput struct{ *pulumi.OutputState }

func (L7RuleV2RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L7RuleV2Rule)(nil)).Elem()
}

func (o L7RuleV2RuleOutput) ToL7RuleV2RuleOutput() L7RuleV2RuleOutput {
	return o
}

func (o L7RuleV2RuleOutput) ToL7RuleV2RuleOutputWithContext(ctx context.Context) L7RuleV2RuleOutput {
	return o
}

func (o L7RuleV2RuleOutput) ToL7RuleV2RulePtrOutput() L7RuleV2RulePtrOutput {
	return o.ToL7RuleV2RulePtrOutputWithContext(context.Background())
}

func (o L7RuleV2RuleOutput) ToL7RuleV2RulePtrOutputWithContext(ctx context.Context) L7RuleV2RulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v L7RuleV2Rule) *L7RuleV2Rule {
		return &v
	}).(L7RuleV2RulePtrOutput)
}

// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
func (o L7RuleV2RuleOutput) CcEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v L7RuleV2Rule) *int { return v.CcEnable }).(pulumi.IntPtrOutput)
}

// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
func (o L7RuleV2RuleOutput) CertType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v L7RuleV2Rule) *int { return v.CertType }).(pulumi.IntPtrOutput)
}

// Domain of the rule.
func (o L7RuleV2RuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v L7RuleV2Rule) string { return v.Domain }).(pulumi.StringOutput)
}

// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
func (o L7RuleV2RuleOutput) HttpsToHttpEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v L7RuleV2Rule) *int { return v.HttpsToHttpEnable }).(pulumi.IntPtrOutput)
}

// session hold switch.
func (o L7RuleV2RuleOutput) KeepEnable() pulumi.IntOutput {
	return o.ApplyT(func(v L7RuleV2Rule) int { return v.KeepEnable }).(pulumi.IntOutput)
}

// The keeptime of the layer 4 rule.
func (o L7RuleV2RuleOutput) Keeptime() pulumi.IntOutput {
	return o.ApplyT(func(v L7RuleV2Rule) int { return v.Keeptime }).(pulumi.IntOutput)
}

// LB type of the rule, `1` for weight cycling and `2` for IP hash.
func (o L7RuleV2RuleOutput) LbType() pulumi.IntOutput {
	return o.ApplyT(func(v L7RuleV2Rule) int { return v.LbType }).(pulumi.IntOutput)
}

// Protocol of the rule.
func (o L7RuleV2RuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v L7RuleV2Rule) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o L7RuleV2RuleOutput) SourceLists() L7RuleV2RuleSourceListArrayOutput {
	return o.ApplyT(func(v L7RuleV2Rule) []L7RuleV2RuleSourceList { return v.SourceLists }).(L7RuleV2RuleSourceListArrayOutput)
}

// Source type, `1` for source of host, `2` for source of IP.
func (o L7RuleV2RuleOutput) SourceType() pulumi.IntOutput {
	return o.ApplyT(func(v L7RuleV2Rule) int { return v.SourceType }).(pulumi.IntOutput)
}

// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
func (o L7RuleV2RuleOutput) SslId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v L7RuleV2Rule) *string { return v.SslId }).(pulumi.StringPtrOutput)
}

type L7RuleV2RulePtrOutput struct{ *pulumi.OutputState }

func (L7RuleV2RulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**L7RuleV2Rule)(nil)).Elem()
}

func (o L7RuleV2RulePtrOutput) ToL7RuleV2RulePtrOutput() L7RuleV2RulePtrOutput {
	return o
}

func (o L7RuleV2RulePtrOutput) ToL7RuleV2RulePtrOutputWithContext(ctx context.Context) L7RuleV2RulePtrOutput {
	return o
}

func (o L7RuleV2RulePtrOutput) Elem() L7RuleV2RuleOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) L7RuleV2Rule {
		if v != nil {
			return *v
		}
		var ret L7RuleV2Rule
		return ret
	}).(L7RuleV2RuleOutput)
}

// HTTPS protocol CC protection status, value [0 (off), 1 (on)], defaule is 0.
func (o L7RuleV2RulePtrOutput) CcEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return v.CcEnable
	}).(pulumi.IntPtrOutput)
}

// The source of the certificate must be filled in when the forwarding protocol is https, the value [2 (Tencent Cloud Hosting Certificate)], and 0 when the forwarding protocol is http.
func (o L7RuleV2RulePtrOutput) CertType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return v.CertType
	}).(pulumi.IntPtrOutput)
}

// Domain of the rule.
func (o L7RuleV2RulePtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *string {
		if v == nil {
			return nil
		}
		return &v.Domain
	}).(pulumi.StringPtrOutput)
}

// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], do not fill in the default is off, defaule is 0.
func (o L7RuleV2RulePtrOutput) HttpsToHttpEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return v.HttpsToHttpEnable
	}).(pulumi.IntPtrOutput)
}

// session hold switch.
func (o L7RuleV2RulePtrOutput) KeepEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return &v.KeepEnable
	}).(pulumi.IntPtrOutput)
}

// The keeptime of the layer 4 rule.
func (o L7RuleV2RulePtrOutput) Keeptime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return &v.Keeptime
	}).(pulumi.IntPtrOutput)
}

// LB type of the rule, `1` for weight cycling and `2` for IP hash.
func (o L7RuleV2RulePtrOutput) LbType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return &v.LbType
	}).(pulumi.IntPtrOutput)
}

// Protocol of the rule.
func (o L7RuleV2RulePtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *string {
		if v == nil {
			return nil
		}
		return &v.Protocol
	}).(pulumi.StringPtrOutput)
}

func (o L7RuleV2RulePtrOutput) SourceLists() L7RuleV2RuleSourceListArrayOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) []L7RuleV2RuleSourceList {
		if v == nil {
			return nil
		}
		return v.SourceLists
	}).(L7RuleV2RuleSourceListArrayOutput)
}

// Source type, `1` for source of host, `2` for source of IP.
func (o L7RuleV2RulePtrOutput) SourceType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *int {
		if v == nil {
			return nil
		}
		return &v.SourceType
	}).(pulumi.IntPtrOutput)
}

// When the certificate source is a Tencent Cloud managed certificate, this field must be filled in with the managed certificate ID.
func (o L7RuleV2RulePtrOutput) SslId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *L7RuleV2Rule) *string {
		if v == nil {
			return nil
		}
		return v.SslId
	}).(pulumi.StringPtrOutput)
}

type L7RuleV2RuleSourceList struct {
	Source string `pulumi:"source"`
	Weight int    `pulumi:"weight"`
}

// L7RuleV2RuleSourceListInput is an input type that accepts L7RuleV2RuleSourceListArgs and L7RuleV2RuleSourceListOutput values.
// You can construct a concrete instance of `L7RuleV2RuleSourceListInput` via:
//
//	L7RuleV2RuleSourceListArgs{...}
type L7RuleV2RuleSourceListInput interface {
	pulumi.Input

	ToL7RuleV2RuleSourceListOutput() L7RuleV2RuleSourceListOutput
	ToL7RuleV2RuleSourceListOutputWithContext(context.Context) L7RuleV2RuleSourceListOutput
}

type L7RuleV2RuleSourceListArgs struct {
	Source pulumi.StringInput `pulumi:"source"`
	Weight pulumi.IntInput    `pulumi:"weight"`
}

func (L7RuleV2RuleSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*L7RuleV2RuleSourceList)(nil)).Elem()
}

func (i L7RuleV2RuleSourceListArgs) ToL7RuleV2RuleSourceListOutput() L7RuleV2RuleSourceListOutput {
	return i.ToL7RuleV2RuleSourceListOutputWithContext(context.Background())
}

func (i L7RuleV2RuleSourceListArgs) ToL7RuleV2RuleSourceListOutputWithContext(ctx context.Context) L7RuleV2RuleSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7RuleV2RuleSourceListOutput)
}

// L7RuleV2RuleSourceListArrayInput is an input type that accepts L7RuleV2RuleSourceListArray and L7RuleV2RuleSourceListArrayOutput values.
// You can construct a concrete instance of `L7RuleV2RuleSourceListArrayInput` via:
//
//	L7RuleV2RuleSourceListArray{ L7RuleV2RuleSourceListArgs{...} }
type L7RuleV2RuleSourceListArrayInput interface {
	pulumi.Input

	ToL7RuleV2RuleSourceListArrayOutput() L7RuleV2RuleSourceListArrayOutput
	ToL7RuleV2RuleSourceListArrayOutputWithContext(context.Context) L7RuleV2RuleSourceListArrayOutput
}

type L7RuleV2RuleSourceListArray []L7RuleV2RuleSourceListInput

func (L7RuleV2RuleSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L7RuleV2RuleSourceList)(nil)).Elem()
}

func (i L7RuleV2RuleSourceListArray) ToL7RuleV2RuleSourceListArrayOutput() L7RuleV2RuleSourceListArrayOutput {
	return i.ToL7RuleV2RuleSourceListArrayOutputWithContext(context.Background())
}

func (i L7RuleV2RuleSourceListArray) ToL7RuleV2RuleSourceListArrayOutputWithContext(ctx context.Context) L7RuleV2RuleSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(L7RuleV2RuleSourceListArrayOutput)
}

type L7RuleV2RuleSourceListOutput struct{ *pulumi.OutputState }

func (L7RuleV2RuleSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*L7RuleV2RuleSourceList)(nil)).Elem()
}

func (o L7RuleV2RuleSourceListOutput) ToL7RuleV2RuleSourceListOutput() L7RuleV2RuleSourceListOutput {
	return o
}

func (o L7RuleV2RuleSourceListOutput) ToL7RuleV2RuleSourceListOutputWithContext(ctx context.Context) L7RuleV2RuleSourceListOutput {
	return o
}

func (o L7RuleV2RuleSourceListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v L7RuleV2RuleSourceList) string { return v.Source }).(pulumi.StringOutput)
}

func (o L7RuleV2RuleSourceListOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v L7RuleV2RuleSourceList) int { return v.Weight }).(pulumi.IntOutput)
}

type L7RuleV2RuleSourceListArrayOutput struct{ *pulumi.OutputState }

func (L7RuleV2RuleSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]L7RuleV2RuleSourceList)(nil)).Elem()
}

func (o L7RuleV2RuleSourceListArrayOutput) ToL7RuleV2RuleSourceListArrayOutput() L7RuleV2RuleSourceListArrayOutput {
	return o
}

func (o L7RuleV2RuleSourceListArrayOutput) ToL7RuleV2RuleSourceListArrayOutputWithContext(ctx context.Context) L7RuleV2RuleSourceListArrayOutput {
	return o
}

func (o L7RuleV2RuleSourceListArrayOutput) Index(i pulumi.IntInput) L7RuleV2RuleSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) L7RuleV2RuleSourceList {
		return vs[0].([]L7RuleV2RuleSourceList)[vs[1].(int)]
	}).(L7RuleV2RuleSourceListOutput)
}

type GetCcHttpPoliciesList struct {
	// Action mode.
	Action string `pulumi:"action"`
	// Create time of the CC self-define http policy.
	CreateTime string `pulumi:"createTime"`
	// Max frequency per minute.
	Frequency int `pulumi:"frequency"`
	// IP of the CC self-define http policy.
	IpLists []string `pulumi:"ipLists"`
	// Name of the CC http policy to be queried.
	Name string `pulumi:"name"`
	// Id of the CC http policy to be queried.
	PolicyId string `pulumi:"policyId"`
	// ID of the resource that the CC http policy works for.
	ResourceId string `pulumi:"resourceId"`
	// Type of the resource that the CC http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType string                          `pulumi:"resourceType"`
	RuleLists    []GetCcHttpPoliciesListRuleList `pulumi:"ruleLists"`
	// Match mode.
	Smode string `pulumi:"smode"`
	// Indicate the CC self-define http policy takes effect or not.
	Switch bool `pulumi:"switch"`
}

// GetCcHttpPoliciesListInput is an input type that accepts GetCcHttpPoliciesListArgs and GetCcHttpPoliciesListOutput values.
// You can construct a concrete instance of `GetCcHttpPoliciesListInput` via:
//
//	GetCcHttpPoliciesListArgs{...}
type GetCcHttpPoliciesListInput interface {
	pulumi.Input

	ToGetCcHttpPoliciesListOutput() GetCcHttpPoliciesListOutput
	ToGetCcHttpPoliciesListOutputWithContext(context.Context) GetCcHttpPoliciesListOutput
}

type GetCcHttpPoliciesListArgs struct {
	// Action mode.
	Action pulumi.StringInput `pulumi:"action"`
	// Create time of the CC self-define http policy.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Max frequency per minute.
	Frequency pulumi.IntInput `pulumi:"frequency"`
	// IP of the CC self-define http policy.
	IpLists pulumi.StringArrayInput `pulumi:"ipLists"`
	// Name of the CC http policy to be queried.
	Name pulumi.StringInput `pulumi:"name"`
	// Id of the CC http policy to be queried.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// ID of the resource that the CC http policy works for.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Type of the resource that the CC http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType pulumi.StringInput                      `pulumi:"resourceType"`
	RuleLists    GetCcHttpPoliciesListRuleListArrayInput `pulumi:"ruleLists"`
	// Match mode.
	Smode pulumi.StringInput `pulumi:"smode"`
	// Indicate the CC self-define http policy takes effect or not.
	Switch pulumi.BoolInput `pulumi:"switch"`
}

func (GetCcHttpPoliciesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpPoliciesList)(nil)).Elem()
}

func (i GetCcHttpPoliciesListArgs) ToGetCcHttpPoliciesListOutput() GetCcHttpPoliciesListOutput {
	return i.ToGetCcHttpPoliciesListOutputWithContext(context.Background())
}

func (i GetCcHttpPoliciesListArgs) ToGetCcHttpPoliciesListOutputWithContext(ctx context.Context) GetCcHttpPoliciesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpPoliciesListOutput)
}

// GetCcHttpPoliciesListArrayInput is an input type that accepts GetCcHttpPoliciesListArray and GetCcHttpPoliciesListArrayOutput values.
// You can construct a concrete instance of `GetCcHttpPoliciesListArrayInput` via:
//
//	GetCcHttpPoliciesListArray{ GetCcHttpPoliciesListArgs{...} }
type GetCcHttpPoliciesListArrayInput interface {
	pulumi.Input

	ToGetCcHttpPoliciesListArrayOutput() GetCcHttpPoliciesListArrayOutput
	ToGetCcHttpPoliciesListArrayOutputWithContext(context.Context) GetCcHttpPoliciesListArrayOutput
}

type GetCcHttpPoliciesListArray []GetCcHttpPoliciesListInput

func (GetCcHttpPoliciesListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpPoliciesList)(nil)).Elem()
}

func (i GetCcHttpPoliciesListArray) ToGetCcHttpPoliciesListArrayOutput() GetCcHttpPoliciesListArrayOutput {
	return i.ToGetCcHttpPoliciesListArrayOutputWithContext(context.Background())
}

func (i GetCcHttpPoliciesListArray) ToGetCcHttpPoliciesListArrayOutputWithContext(ctx context.Context) GetCcHttpPoliciesListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpPoliciesListArrayOutput)
}

type GetCcHttpPoliciesListOutput struct{ *pulumi.OutputState }

func (GetCcHttpPoliciesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpPoliciesList)(nil)).Elem()
}

func (o GetCcHttpPoliciesListOutput) ToGetCcHttpPoliciesListOutput() GetCcHttpPoliciesListOutput {
	return o
}

func (o GetCcHttpPoliciesListOutput) ToGetCcHttpPoliciesListOutputWithContext(ctx context.Context) GetCcHttpPoliciesListOutput {
	return o
}

// Action mode.
func (o GetCcHttpPoliciesListOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.Action }).(pulumi.StringOutput)
}

// Create time of the CC self-define http policy.
func (o GetCcHttpPoliciesListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Max frequency per minute.
func (o GetCcHttpPoliciesListOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) int { return v.Frequency }).(pulumi.IntOutput)
}

// IP of the CC self-define http policy.
func (o GetCcHttpPoliciesListOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) []string { return v.IpLists }).(pulumi.StringArrayOutput)
}

// Name of the CC http policy to be queried.
func (o GetCcHttpPoliciesListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.Name }).(pulumi.StringOutput)
}

// Id of the CC http policy to be queried.
func (o GetCcHttpPoliciesListOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.PolicyId }).(pulumi.StringOutput)
}

// ID of the resource that the CC http policy works for.
func (o GetCcHttpPoliciesListOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Type of the resource that the CC http policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
func (o GetCcHttpPoliciesListOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.ResourceType }).(pulumi.StringOutput)
}

func (o GetCcHttpPoliciesListOutput) RuleLists() GetCcHttpPoliciesListRuleListArrayOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) []GetCcHttpPoliciesListRuleList { return v.RuleLists }).(GetCcHttpPoliciesListRuleListArrayOutput)
}

// Match mode.
func (o GetCcHttpPoliciesListOutput) Smode() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) string { return v.Smode }).(pulumi.StringOutput)
}

// Indicate the CC self-define http policy takes effect or not.
func (o GetCcHttpPoliciesListOutput) Switch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesList) bool { return v.Switch }).(pulumi.BoolOutput)
}

type GetCcHttpPoliciesListArrayOutput struct{ *pulumi.OutputState }

func (GetCcHttpPoliciesListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpPoliciesList)(nil)).Elem()
}

func (o GetCcHttpPoliciesListArrayOutput) ToGetCcHttpPoliciesListArrayOutput() GetCcHttpPoliciesListArrayOutput {
	return o
}

func (o GetCcHttpPoliciesListArrayOutput) ToGetCcHttpPoliciesListArrayOutputWithContext(ctx context.Context) GetCcHttpPoliciesListArrayOutput {
	return o
}

func (o GetCcHttpPoliciesListArrayOutput) Index(i pulumi.IntInput) GetCcHttpPoliciesListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCcHttpPoliciesList {
		return vs[0].([]GetCcHttpPoliciesList)[vs[1].(int)]
	}).(GetCcHttpPoliciesListOutput)
}

type GetCcHttpPoliciesListRuleList struct {
	Operator string `pulumi:"operator"`
	Skey     string `pulumi:"skey"`
	Value    string `pulumi:"value"`
}

// GetCcHttpPoliciesListRuleListInput is an input type that accepts GetCcHttpPoliciesListRuleListArgs and GetCcHttpPoliciesListRuleListOutput values.
// You can construct a concrete instance of `GetCcHttpPoliciesListRuleListInput` via:
//
//	GetCcHttpPoliciesListRuleListArgs{...}
type GetCcHttpPoliciesListRuleListInput interface {
	pulumi.Input

	ToGetCcHttpPoliciesListRuleListOutput() GetCcHttpPoliciesListRuleListOutput
	ToGetCcHttpPoliciesListRuleListOutputWithContext(context.Context) GetCcHttpPoliciesListRuleListOutput
}

type GetCcHttpPoliciesListRuleListArgs struct {
	Operator pulumi.StringInput `pulumi:"operator"`
	Skey     pulumi.StringInput `pulumi:"skey"`
	Value    pulumi.StringInput `pulumi:"value"`
}

func (GetCcHttpPoliciesListRuleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpPoliciesListRuleList)(nil)).Elem()
}

func (i GetCcHttpPoliciesListRuleListArgs) ToGetCcHttpPoliciesListRuleListOutput() GetCcHttpPoliciesListRuleListOutput {
	return i.ToGetCcHttpPoliciesListRuleListOutputWithContext(context.Background())
}

func (i GetCcHttpPoliciesListRuleListArgs) ToGetCcHttpPoliciesListRuleListOutputWithContext(ctx context.Context) GetCcHttpPoliciesListRuleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpPoliciesListRuleListOutput)
}

// GetCcHttpPoliciesListRuleListArrayInput is an input type that accepts GetCcHttpPoliciesListRuleListArray and GetCcHttpPoliciesListRuleListArrayOutput values.
// You can construct a concrete instance of `GetCcHttpPoliciesListRuleListArrayInput` via:
//
//	GetCcHttpPoliciesListRuleListArray{ GetCcHttpPoliciesListRuleListArgs{...} }
type GetCcHttpPoliciesListRuleListArrayInput interface {
	pulumi.Input

	ToGetCcHttpPoliciesListRuleListArrayOutput() GetCcHttpPoliciesListRuleListArrayOutput
	ToGetCcHttpPoliciesListRuleListArrayOutputWithContext(context.Context) GetCcHttpPoliciesListRuleListArrayOutput
}

type GetCcHttpPoliciesListRuleListArray []GetCcHttpPoliciesListRuleListInput

func (GetCcHttpPoliciesListRuleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpPoliciesListRuleList)(nil)).Elem()
}

func (i GetCcHttpPoliciesListRuleListArray) ToGetCcHttpPoliciesListRuleListArrayOutput() GetCcHttpPoliciesListRuleListArrayOutput {
	return i.ToGetCcHttpPoliciesListRuleListArrayOutputWithContext(context.Background())
}

func (i GetCcHttpPoliciesListRuleListArray) ToGetCcHttpPoliciesListRuleListArrayOutputWithContext(ctx context.Context) GetCcHttpPoliciesListRuleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpPoliciesListRuleListArrayOutput)
}

type GetCcHttpPoliciesListRuleListOutput struct{ *pulumi.OutputState }

func (GetCcHttpPoliciesListRuleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpPoliciesListRuleList)(nil)).Elem()
}

func (o GetCcHttpPoliciesListRuleListOutput) ToGetCcHttpPoliciesListRuleListOutput() GetCcHttpPoliciesListRuleListOutput {
	return o
}

func (o GetCcHttpPoliciesListRuleListOutput) ToGetCcHttpPoliciesListRuleListOutputWithContext(ctx context.Context) GetCcHttpPoliciesListRuleListOutput {
	return o
}

func (o GetCcHttpPoliciesListRuleListOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesListRuleList) string { return v.Operator }).(pulumi.StringOutput)
}

func (o GetCcHttpPoliciesListRuleListOutput) Skey() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesListRuleList) string { return v.Skey }).(pulumi.StringOutput)
}

func (o GetCcHttpPoliciesListRuleListOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpPoliciesListRuleList) string { return v.Value }).(pulumi.StringOutput)
}

type GetCcHttpPoliciesListRuleListArrayOutput struct{ *pulumi.OutputState }

func (GetCcHttpPoliciesListRuleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpPoliciesListRuleList)(nil)).Elem()
}

func (o GetCcHttpPoliciesListRuleListArrayOutput) ToGetCcHttpPoliciesListRuleListArrayOutput() GetCcHttpPoliciesListRuleListArrayOutput {
	return o
}

func (o GetCcHttpPoliciesListRuleListArrayOutput) ToGetCcHttpPoliciesListRuleListArrayOutputWithContext(ctx context.Context) GetCcHttpPoliciesListRuleListArrayOutput {
	return o
}

func (o GetCcHttpPoliciesListRuleListArrayOutput) Index(i pulumi.IntInput) GetCcHttpPoliciesListRuleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCcHttpPoliciesListRuleList {
		return vs[0].([]GetCcHttpPoliciesListRuleList)[vs[1].(int)]
	}).(GetCcHttpPoliciesListRuleListOutput)
}

type GetCcHttpsPoliciesList struct {
	// Action mode.
	Action string `pulumi:"action"`
	// Create time of the CC self-define https policy.
	CreateTime string `pulumi:"createTime"`
	// Domain that the CC self-define https policy works for.
	Domain string `pulumi:"domain"`
	// Ip of the CC self-define https policy.
	IpLists []string `pulumi:"ipLists"`
	// Name of the CC https policy to be queried.
	Name string `pulumi:"name"`
	// Id of the CC https policy to be queried.
	PolicyId string `pulumi:"policyId"`
	// Id of the resource that the CC https policy works for.
	ResourceId string `pulumi:"resourceId"`
	// Type of the resource that the CC https policy works for, valid value is `bgpip`.
	ResourceType string `pulumi:"resourceType"`
	// Rule id of the domain that the CC self-define https policy works for.
	RuleId    string                           `pulumi:"ruleId"`
	RuleLists []GetCcHttpsPoliciesListRuleList `pulumi:"ruleLists"`
	// Indicate the CC self-define https policy takes effect or not.
	Switch bool `pulumi:"switch"`
}

// GetCcHttpsPoliciesListInput is an input type that accepts GetCcHttpsPoliciesListArgs and GetCcHttpsPoliciesListOutput values.
// You can construct a concrete instance of `GetCcHttpsPoliciesListInput` via:
//
//	GetCcHttpsPoliciesListArgs{...}
type GetCcHttpsPoliciesListInput interface {
	pulumi.Input

	ToGetCcHttpsPoliciesListOutput() GetCcHttpsPoliciesListOutput
	ToGetCcHttpsPoliciesListOutputWithContext(context.Context) GetCcHttpsPoliciesListOutput
}

type GetCcHttpsPoliciesListArgs struct {
	// Action mode.
	Action pulumi.StringInput `pulumi:"action"`
	// Create time of the CC self-define https policy.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Domain that the CC self-define https policy works for.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Ip of the CC self-define https policy.
	IpLists pulumi.StringArrayInput `pulumi:"ipLists"`
	// Name of the CC https policy to be queried.
	Name pulumi.StringInput `pulumi:"name"`
	// Id of the CC https policy to be queried.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// Id of the resource that the CC https policy works for.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Type of the resource that the CC https policy works for, valid value is `bgpip`.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// Rule id of the domain that the CC self-define https policy works for.
	RuleId    pulumi.StringInput                       `pulumi:"ruleId"`
	RuleLists GetCcHttpsPoliciesListRuleListArrayInput `pulumi:"ruleLists"`
	// Indicate the CC self-define https policy takes effect or not.
	Switch pulumi.BoolInput `pulumi:"switch"`
}

func (GetCcHttpsPoliciesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpsPoliciesList)(nil)).Elem()
}

func (i GetCcHttpsPoliciesListArgs) ToGetCcHttpsPoliciesListOutput() GetCcHttpsPoliciesListOutput {
	return i.ToGetCcHttpsPoliciesListOutputWithContext(context.Background())
}

func (i GetCcHttpsPoliciesListArgs) ToGetCcHttpsPoliciesListOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpsPoliciesListOutput)
}

// GetCcHttpsPoliciesListArrayInput is an input type that accepts GetCcHttpsPoliciesListArray and GetCcHttpsPoliciesListArrayOutput values.
// You can construct a concrete instance of `GetCcHttpsPoliciesListArrayInput` via:
//
//	GetCcHttpsPoliciesListArray{ GetCcHttpsPoliciesListArgs{...} }
type GetCcHttpsPoliciesListArrayInput interface {
	pulumi.Input

	ToGetCcHttpsPoliciesListArrayOutput() GetCcHttpsPoliciesListArrayOutput
	ToGetCcHttpsPoliciesListArrayOutputWithContext(context.Context) GetCcHttpsPoliciesListArrayOutput
}

type GetCcHttpsPoliciesListArray []GetCcHttpsPoliciesListInput

func (GetCcHttpsPoliciesListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpsPoliciesList)(nil)).Elem()
}

func (i GetCcHttpsPoliciesListArray) ToGetCcHttpsPoliciesListArrayOutput() GetCcHttpsPoliciesListArrayOutput {
	return i.ToGetCcHttpsPoliciesListArrayOutputWithContext(context.Background())
}

func (i GetCcHttpsPoliciesListArray) ToGetCcHttpsPoliciesListArrayOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpsPoliciesListArrayOutput)
}

type GetCcHttpsPoliciesListOutput struct{ *pulumi.OutputState }

func (GetCcHttpsPoliciesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpsPoliciesList)(nil)).Elem()
}

func (o GetCcHttpsPoliciesListOutput) ToGetCcHttpsPoliciesListOutput() GetCcHttpsPoliciesListOutput {
	return o
}

func (o GetCcHttpsPoliciesListOutput) ToGetCcHttpsPoliciesListOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListOutput {
	return o
}

// Action mode.
func (o GetCcHttpsPoliciesListOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.Action }).(pulumi.StringOutput)
}

// Create time of the CC self-define https policy.
func (o GetCcHttpsPoliciesListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Domain that the CC self-define https policy works for.
func (o GetCcHttpsPoliciesListOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.Domain }).(pulumi.StringOutput)
}

// Ip of the CC self-define https policy.
func (o GetCcHttpsPoliciesListOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) []string { return v.IpLists }).(pulumi.StringArrayOutput)
}

// Name of the CC https policy to be queried.
func (o GetCcHttpsPoliciesListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.Name }).(pulumi.StringOutput)
}

// Id of the CC https policy to be queried.
func (o GetCcHttpsPoliciesListOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.PolicyId }).(pulumi.StringOutput)
}

// Id of the resource that the CC https policy works for.
func (o GetCcHttpsPoliciesListOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Type of the resource that the CC https policy works for, valid value is `bgpip`.
func (o GetCcHttpsPoliciesListOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.ResourceType }).(pulumi.StringOutput)
}

// Rule id of the domain that the CC self-define https policy works for.
func (o GetCcHttpsPoliciesListOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) string { return v.RuleId }).(pulumi.StringOutput)
}

func (o GetCcHttpsPoliciesListOutput) RuleLists() GetCcHttpsPoliciesListRuleListArrayOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) []GetCcHttpsPoliciesListRuleList { return v.RuleLists }).(GetCcHttpsPoliciesListRuleListArrayOutput)
}

// Indicate the CC self-define https policy takes effect or not.
func (o GetCcHttpsPoliciesListOutput) Switch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesList) bool { return v.Switch }).(pulumi.BoolOutput)
}

type GetCcHttpsPoliciesListArrayOutput struct{ *pulumi.OutputState }

func (GetCcHttpsPoliciesListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpsPoliciesList)(nil)).Elem()
}

func (o GetCcHttpsPoliciesListArrayOutput) ToGetCcHttpsPoliciesListArrayOutput() GetCcHttpsPoliciesListArrayOutput {
	return o
}

func (o GetCcHttpsPoliciesListArrayOutput) ToGetCcHttpsPoliciesListArrayOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListArrayOutput {
	return o
}

func (o GetCcHttpsPoliciesListArrayOutput) Index(i pulumi.IntInput) GetCcHttpsPoliciesListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCcHttpsPoliciesList {
		return vs[0].([]GetCcHttpsPoliciesList)[vs[1].(int)]
	}).(GetCcHttpsPoliciesListOutput)
}

type GetCcHttpsPoliciesListRuleList struct {
	Operator string `pulumi:"operator"`
	Skey     string `pulumi:"skey"`
	Value    string `pulumi:"value"`
}

// GetCcHttpsPoliciesListRuleListInput is an input type that accepts GetCcHttpsPoliciesListRuleListArgs and GetCcHttpsPoliciesListRuleListOutput values.
// You can construct a concrete instance of `GetCcHttpsPoliciesListRuleListInput` via:
//
//	GetCcHttpsPoliciesListRuleListArgs{...}
type GetCcHttpsPoliciesListRuleListInput interface {
	pulumi.Input

	ToGetCcHttpsPoliciesListRuleListOutput() GetCcHttpsPoliciesListRuleListOutput
	ToGetCcHttpsPoliciesListRuleListOutputWithContext(context.Context) GetCcHttpsPoliciesListRuleListOutput
}

type GetCcHttpsPoliciesListRuleListArgs struct {
	Operator pulumi.StringInput `pulumi:"operator"`
	Skey     pulumi.StringInput `pulumi:"skey"`
	Value    pulumi.StringInput `pulumi:"value"`
}

func (GetCcHttpsPoliciesListRuleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpsPoliciesListRuleList)(nil)).Elem()
}

func (i GetCcHttpsPoliciesListRuleListArgs) ToGetCcHttpsPoliciesListRuleListOutput() GetCcHttpsPoliciesListRuleListOutput {
	return i.ToGetCcHttpsPoliciesListRuleListOutputWithContext(context.Background())
}

func (i GetCcHttpsPoliciesListRuleListArgs) ToGetCcHttpsPoliciesListRuleListOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListRuleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpsPoliciesListRuleListOutput)
}

// GetCcHttpsPoliciesListRuleListArrayInput is an input type that accepts GetCcHttpsPoliciesListRuleListArray and GetCcHttpsPoliciesListRuleListArrayOutput values.
// You can construct a concrete instance of `GetCcHttpsPoliciesListRuleListArrayInput` via:
//
//	GetCcHttpsPoliciesListRuleListArray{ GetCcHttpsPoliciesListRuleListArgs{...} }
type GetCcHttpsPoliciesListRuleListArrayInput interface {
	pulumi.Input

	ToGetCcHttpsPoliciesListRuleListArrayOutput() GetCcHttpsPoliciesListRuleListArrayOutput
	ToGetCcHttpsPoliciesListRuleListArrayOutputWithContext(context.Context) GetCcHttpsPoliciesListRuleListArrayOutput
}

type GetCcHttpsPoliciesListRuleListArray []GetCcHttpsPoliciesListRuleListInput

func (GetCcHttpsPoliciesListRuleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpsPoliciesListRuleList)(nil)).Elem()
}

func (i GetCcHttpsPoliciesListRuleListArray) ToGetCcHttpsPoliciesListRuleListArrayOutput() GetCcHttpsPoliciesListRuleListArrayOutput {
	return i.ToGetCcHttpsPoliciesListRuleListArrayOutputWithContext(context.Background())
}

func (i GetCcHttpsPoliciesListRuleListArray) ToGetCcHttpsPoliciesListRuleListArrayOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListRuleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCcHttpsPoliciesListRuleListArrayOutput)
}

type GetCcHttpsPoliciesListRuleListOutput struct{ *pulumi.OutputState }

func (GetCcHttpsPoliciesListRuleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCcHttpsPoliciesListRuleList)(nil)).Elem()
}

func (o GetCcHttpsPoliciesListRuleListOutput) ToGetCcHttpsPoliciesListRuleListOutput() GetCcHttpsPoliciesListRuleListOutput {
	return o
}

func (o GetCcHttpsPoliciesListRuleListOutput) ToGetCcHttpsPoliciesListRuleListOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListRuleListOutput {
	return o
}

func (o GetCcHttpsPoliciesListRuleListOutput) Operator() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesListRuleList) string { return v.Operator }).(pulumi.StringOutput)
}

func (o GetCcHttpsPoliciesListRuleListOutput) Skey() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesListRuleList) string { return v.Skey }).(pulumi.StringOutput)
}

func (o GetCcHttpsPoliciesListRuleListOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCcHttpsPoliciesListRuleList) string { return v.Value }).(pulumi.StringOutput)
}

type GetCcHttpsPoliciesListRuleListArrayOutput struct{ *pulumi.OutputState }

func (GetCcHttpsPoliciesListRuleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCcHttpsPoliciesListRuleList)(nil)).Elem()
}

func (o GetCcHttpsPoliciesListRuleListArrayOutput) ToGetCcHttpsPoliciesListRuleListArrayOutput() GetCcHttpsPoliciesListRuleListArrayOutput {
	return o
}

func (o GetCcHttpsPoliciesListRuleListArrayOutput) ToGetCcHttpsPoliciesListRuleListArrayOutputWithContext(ctx context.Context) GetCcHttpsPoliciesListRuleListArrayOutput {
	return o
}

func (o GetCcHttpsPoliciesListRuleListArrayOutput) Index(i pulumi.IntInput) GetCcHttpsPoliciesListRuleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCcHttpsPoliciesListRuleList {
		return vs[0].([]GetCcHttpsPoliciesListRuleList)[vs[1].(int)]
	}).(GetCcHttpsPoliciesListRuleListOutput)
}

type GetDdosPoliciesList struct {
	BlackIps []string `pulumi:"blackIps"`
	// Create time of the DDoS policy.
	CreateTime string `pulumi:"createTime"`
	// Option list of abnormal check of the DDoS policy.
	DropOptions []GetDdosPoliciesListDropOption `pulumi:"dropOptions"`
	// Name of the DDoS policy.
	Name string `pulumi:"name"`
	// Message filter options list.
	PacketFilters []GetDdosPoliciesListPacketFilter `pulumi:"packetFilters"`
	// ID of the DDoS policy to be query.
	PolicyId string `pulumi:"policyId"`
	// Port limits of abnormal check of the DDoS policy.
	PortFilters []GetDdosPoliciesListPortFilter `pulumi:"portFilters"`
	// Id of policy case that the DDoS policy works for.
	SceneId string `pulumi:"sceneId"`
	// Watermark policy options, and only support one watermark policy at most.
	WatermarkFilters []GetDdosPoliciesListWatermarkFilter `pulumi:"watermarkFilters"`
	// Watermark content.
	WatermarkKeys []GetDdosPoliciesListWatermarkKey `pulumi:"watermarkKeys"`
	WhiteIps      []string                          `pulumi:"whiteIps"`
}

// GetDdosPoliciesListInput is an input type that accepts GetDdosPoliciesListArgs and GetDdosPoliciesListOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListInput` via:
//
//	GetDdosPoliciesListArgs{...}
type GetDdosPoliciesListInput interface {
	pulumi.Input

	ToGetDdosPoliciesListOutput() GetDdosPoliciesListOutput
	ToGetDdosPoliciesListOutputWithContext(context.Context) GetDdosPoliciesListOutput
}

type GetDdosPoliciesListArgs struct {
	BlackIps pulumi.StringArrayInput `pulumi:"blackIps"`
	// Create time of the DDoS policy.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Option list of abnormal check of the DDoS policy.
	DropOptions GetDdosPoliciesListDropOptionArrayInput `pulumi:"dropOptions"`
	// Name of the DDoS policy.
	Name pulumi.StringInput `pulumi:"name"`
	// Message filter options list.
	PacketFilters GetDdosPoliciesListPacketFilterArrayInput `pulumi:"packetFilters"`
	// ID of the DDoS policy to be query.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// Port limits of abnormal check of the DDoS policy.
	PortFilters GetDdosPoliciesListPortFilterArrayInput `pulumi:"portFilters"`
	// Id of policy case that the DDoS policy works for.
	SceneId pulumi.StringInput `pulumi:"sceneId"`
	// Watermark policy options, and only support one watermark policy at most.
	WatermarkFilters GetDdosPoliciesListWatermarkFilterArrayInput `pulumi:"watermarkFilters"`
	// Watermark content.
	WatermarkKeys GetDdosPoliciesListWatermarkKeyArrayInput `pulumi:"watermarkKeys"`
	WhiteIps      pulumi.StringArrayInput                   `pulumi:"whiteIps"`
}

func (GetDdosPoliciesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesList)(nil)).Elem()
}

func (i GetDdosPoliciesListArgs) ToGetDdosPoliciesListOutput() GetDdosPoliciesListOutput {
	return i.ToGetDdosPoliciesListOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListArgs) ToGetDdosPoliciesListOutputWithContext(ctx context.Context) GetDdosPoliciesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListOutput)
}

// GetDdosPoliciesListArrayInput is an input type that accepts GetDdosPoliciesListArray and GetDdosPoliciesListArrayOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListArrayInput` via:
//
//	GetDdosPoliciesListArray{ GetDdosPoliciesListArgs{...} }
type GetDdosPoliciesListArrayInput interface {
	pulumi.Input

	ToGetDdosPoliciesListArrayOutput() GetDdosPoliciesListArrayOutput
	ToGetDdosPoliciesListArrayOutputWithContext(context.Context) GetDdosPoliciesListArrayOutput
}

type GetDdosPoliciesListArray []GetDdosPoliciesListInput

func (GetDdosPoliciesListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesList)(nil)).Elem()
}

func (i GetDdosPoliciesListArray) ToGetDdosPoliciesListArrayOutput() GetDdosPoliciesListArrayOutput {
	return i.ToGetDdosPoliciesListArrayOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListArray) ToGetDdosPoliciesListArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListArrayOutput)
}

type GetDdosPoliciesListOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesList)(nil)).Elem()
}

func (o GetDdosPoliciesListOutput) ToGetDdosPoliciesListOutput() GetDdosPoliciesListOutput {
	return o
}

func (o GetDdosPoliciesListOutput) ToGetDdosPoliciesListOutputWithContext(ctx context.Context) GetDdosPoliciesListOutput {
	return o
}

func (o GetDdosPoliciesListOutput) BlackIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []string { return v.BlackIps }).(pulumi.StringArrayOutput)
}

// Create time of the DDoS policy.
func (o GetDdosPoliciesListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Option list of abnormal check of the DDoS policy.
func (o GetDdosPoliciesListOutput) DropOptions() GetDdosPoliciesListDropOptionArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []GetDdosPoliciesListDropOption { return v.DropOptions }).(GetDdosPoliciesListDropOptionArrayOutput)
}

// Name of the DDoS policy.
func (o GetDdosPoliciesListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) string { return v.Name }).(pulumi.StringOutput)
}

// Message filter options list.
func (o GetDdosPoliciesListOutput) PacketFilters() GetDdosPoliciesListPacketFilterArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []GetDdosPoliciesListPacketFilter { return v.PacketFilters }).(GetDdosPoliciesListPacketFilterArrayOutput)
}

// ID of the DDoS policy to be query.
func (o GetDdosPoliciesListOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) string { return v.PolicyId }).(pulumi.StringOutput)
}

// Port limits of abnormal check of the DDoS policy.
func (o GetDdosPoliciesListOutput) PortFilters() GetDdosPoliciesListPortFilterArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []GetDdosPoliciesListPortFilter { return v.PortFilters }).(GetDdosPoliciesListPortFilterArrayOutput)
}

// Id of policy case that the DDoS policy works for.
func (o GetDdosPoliciesListOutput) SceneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) string { return v.SceneId }).(pulumi.StringOutput)
}

// Watermark policy options, and only support one watermark policy at most.
func (o GetDdosPoliciesListOutput) WatermarkFilters() GetDdosPoliciesListWatermarkFilterArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []GetDdosPoliciesListWatermarkFilter { return v.WatermarkFilters }).(GetDdosPoliciesListWatermarkFilterArrayOutput)
}

// Watermark content.
func (o GetDdosPoliciesListOutput) WatermarkKeys() GetDdosPoliciesListWatermarkKeyArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []GetDdosPoliciesListWatermarkKey { return v.WatermarkKeys }).(GetDdosPoliciesListWatermarkKeyArrayOutput)
}

func (o GetDdosPoliciesListOutput) WhiteIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesList) []string { return v.WhiteIps }).(pulumi.StringArrayOutput)
}

type GetDdosPoliciesListArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesList)(nil)).Elem()
}

func (o GetDdosPoliciesListArrayOutput) ToGetDdosPoliciesListArrayOutput() GetDdosPoliciesListArrayOutput {
	return o
}

func (o GetDdosPoliciesListArrayOutput) ToGetDdosPoliciesListArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListArrayOutput {
	return o
}

func (o GetDdosPoliciesListArrayOutput) Index(i pulumi.IntInput) GetDdosPoliciesListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPoliciesList {
		return vs[0].([]GetDdosPoliciesList)[vs[1].(int)]
	}).(GetDdosPoliciesListOutput)
}

type GetDdosPoliciesListDropOption struct {
	// The number of new connections based on destination IP that trigger suppression of connections.
	BadConnThreshold int `pulumi:"badConnThreshold"`
	// Indicate whether to check null connection or not.
	CheckSyncConn bool `pulumi:"checkSyncConn"`
	// Connection timeout of abnormal connection check.
	ConnTimeout int `pulumi:"connTimeout"`
	// The limit of concurrent connections based on destination IP.
	DConnLimit int `pulumi:"dConnLimit"`
	// The limit of new connections based on destination IP.
	DNewLimit  int  `pulumi:"dNewLimit"`
	DropAbroad bool `pulumi:"dropAbroad"`
	// Indicate whether to drop ICMP protocol or not.
	DropIcmp bool `pulumi:"dropIcmp"`
	// Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
	DropOther bool `pulumi:"dropOther"`
	// Indicate whether to drop TCP protocol or not.
	DropTcp bool `pulumi:"dropTcp"`
	// Indicate to drop UDP protocol or not.
	DropUdp bool `pulumi:"dropUdp"`
	// The limit of ICMP traffic rate.
	IcmpMbpsLimit int `pulumi:"icmpMbpsLimit"`
	// Indicate to enable null connection or not.
	NullConnEnable bool `pulumi:"nullConnEnable"`
	// The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate.
	OtherMbpsLimit int `pulumi:"otherMbpsLimit"`
	// The limit of concurrent connections based on source IP.
	SConnLimit int `pulumi:"sConnLimit"`
	// The limit of new connections based on source IP.
	SNewLimit int `pulumi:"sNewLimit"`
	// The limit of syn of abnormal connection check.
	SynLimit int `pulumi:"synLimit"`
	// The percentage of syn in ack of abnormal connection check.
	SynRate int `pulumi:"synRate"`
	// The limit of TCP traffic.
	TcpMbpsLimit int `pulumi:"tcpMbpsLimit"`
	// The limit of UDP traffic rate.
	UdpMbpsLimit int `pulumi:"udpMbpsLimit"`
}

// GetDdosPoliciesListDropOptionInput is an input type that accepts GetDdosPoliciesListDropOptionArgs and GetDdosPoliciesListDropOptionOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListDropOptionInput` via:
//
//	GetDdosPoliciesListDropOptionArgs{...}
type GetDdosPoliciesListDropOptionInput interface {
	pulumi.Input

	ToGetDdosPoliciesListDropOptionOutput() GetDdosPoliciesListDropOptionOutput
	ToGetDdosPoliciesListDropOptionOutputWithContext(context.Context) GetDdosPoliciesListDropOptionOutput
}

type GetDdosPoliciesListDropOptionArgs struct {
	// The number of new connections based on destination IP that trigger suppression of connections.
	BadConnThreshold pulumi.IntInput `pulumi:"badConnThreshold"`
	// Indicate whether to check null connection or not.
	CheckSyncConn pulumi.BoolInput `pulumi:"checkSyncConn"`
	// Connection timeout of abnormal connection check.
	ConnTimeout pulumi.IntInput `pulumi:"connTimeout"`
	// The limit of concurrent connections based on destination IP.
	DConnLimit pulumi.IntInput `pulumi:"dConnLimit"`
	// The limit of new connections based on destination IP.
	DNewLimit  pulumi.IntInput  `pulumi:"dNewLimit"`
	DropAbroad pulumi.BoolInput `pulumi:"dropAbroad"`
	// Indicate whether to drop ICMP protocol or not.
	DropIcmp pulumi.BoolInput `pulumi:"dropIcmp"`
	// Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
	DropOther pulumi.BoolInput `pulumi:"dropOther"`
	// Indicate whether to drop TCP protocol or not.
	DropTcp pulumi.BoolInput `pulumi:"dropTcp"`
	// Indicate to drop UDP protocol or not.
	DropUdp pulumi.BoolInput `pulumi:"dropUdp"`
	// The limit of ICMP traffic rate.
	IcmpMbpsLimit pulumi.IntInput `pulumi:"icmpMbpsLimit"`
	// Indicate to enable null connection or not.
	NullConnEnable pulumi.BoolInput `pulumi:"nullConnEnable"`
	// The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate.
	OtherMbpsLimit pulumi.IntInput `pulumi:"otherMbpsLimit"`
	// The limit of concurrent connections based on source IP.
	SConnLimit pulumi.IntInput `pulumi:"sConnLimit"`
	// The limit of new connections based on source IP.
	SNewLimit pulumi.IntInput `pulumi:"sNewLimit"`
	// The limit of syn of abnormal connection check.
	SynLimit pulumi.IntInput `pulumi:"synLimit"`
	// The percentage of syn in ack of abnormal connection check.
	SynRate pulumi.IntInput `pulumi:"synRate"`
	// The limit of TCP traffic.
	TcpMbpsLimit pulumi.IntInput `pulumi:"tcpMbpsLimit"`
	// The limit of UDP traffic rate.
	UdpMbpsLimit pulumi.IntInput `pulumi:"udpMbpsLimit"`
}

func (GetDdosPoliciesListDropOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListDropOption)(nil)).Elem()
}

func (i GetDdosPoliciesListDropOptionArgs) ToGetDdosPoliciesListDropOptionOutput() GetDdosPoliciesListDropOptionOutput {
	return i.ToGetDdosPoliciesListDropOptionOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListDropOptionArgs) ToGetDdosPoliciesListDropOptionOutputWithContext(ctx context.Context) GetDdosPoliciesListDropOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListDropOptionOutput)
}

// GetDdosPoliciesListDropOptionArrayInput is an input type that accepts GetDdosPoliciesListDropOptionArray and GetDdosPoliciesListDropOptionArrayOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListDropOptionArrayInput` via:
//
//	GetDdosPoliciesListDropOptionArray{ GetDdosPoliciesListDropOptionArgs{...} }
type GetDdosPoliciesListDropOptionArrayInput interface {
	pulumi.Input

	ToGetDdosPoliciesListDropOptionArrayOutput() GetDdosPoliciesListDropOptionArrayOutput
	ToGetDdosPoliciesListDropOptionArrayOutputWithContext(context.Context) GetDdosPoliciesListDropOptionArrayOutput
}

type GetDdosPoliciesListDropOptionArray []GetDdosPoliciesListDropOptionInput

func (GetDdosPoliciesListDropOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListDropOption)(nil)).Elem()
}

func (i GetDdosPoliciesListDropOptionArray) ToGetDdosPoliciesListDropOptionArrayOutput() GetDdosPoliciesListDropOptionArrayOutput {
	return i.ToGetDdosPoliciesListDropOptionArrayOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListDropOptionArray) ToGetDdosPoliciesListDropOptionArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListDropOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListDropOptionArrayOutput)
}

type GetDdosPoliciesListDropOptionOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListDropOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListDropOption)(nil)).Elem()
}

func (o GetDdosPoliciesListDropOptionOutput) ToGetDdosPoliciesListDropOptionOutput() GetDdosPoliciesListDropOptionOutput {
	return o
}

func (o GetDdosPoliciesListDropOptionOutput) ToGetDdosPoliciesListDropOptionOutputWithContext(ctx context.Context) GetDdosPoliciesListDropOptionOutput {
	return o
}

// The number of new connections based on destination IP that trigger suppression of connections.
func (o GetDdosPoliciesListDropOptionOutput) BadConnThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.BadConnThreshold }).(pulumi.IntOutput)
}

// Indicate whether to check null connection or not.
func (o GetDdosPoliciesListDropOptionOutput) CheckSyncConn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.CheckSyncConn }).(pulumi.BoolOutput)
}

// Connection timeout of abnormal connection check.
func (o GetDdosPoliciesListDropOptionOutput) ConnTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.ConnTimeout }).(pulumi.IntOutput)
}

// The limit of concurrent connections based on destination IP.
func (o GetDdosPoliciesListDropOptionOutput) DConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.DConnLimit }).(pulumi.IntOutput)
}

// The limit of new connections based on destination IP.
func (o GetDdosPoliciesListDropOptionOutput) DNewLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.DNewLimit }).(pulumi.IntOutput)
}

func (o GetDdosPoliciesListDropOptionOutput) DropAbroad() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.DropAbroad }).(pulumi.BoolOutput)
}

// Indicate whether to drop ICMP protocol or not.
func (o GetDdosPoliciesListDropOptionOutput) DropIcmp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.DropIcmp }).(pulumi.BoolOutput)
}

// Indicate whether to drop other protocols(exclude TCP/UDP/ICMP) or not.
func (o GetDdosPoliciesListDropOptionOutput) DropOther() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.DropOther }).(pulumi.BoolOutput)
}

// Indicate whether to drop TCP protocol or not.
func (o GetDdosPoliciesListDropOptionOutput) DropTcp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.DropTcp }).(pulumi.BoolOutput)
}

// Indicate to drop UDP protocol or not.
func (o GetDdosPoliciesListDropOptionOutput) DropUdp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.DropUdp }).(pulumi.BoolOutput)
}

// The limit of ICMP traffic rate.
func (o GetDdosPoliciesListDropOptionOutput) IcmpMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.IcmpMbpsLimit }).(pulumi.IntOutput)
}

// Indicate to enable null connection or not.
func (o GetDdosPoliciesListDropOptionOutput) NullConnEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) bool { return v.NullConnEnable }).(pulumi.BoolOutput)
}

// The limit of other protocols(exclude TCP/UDP/ICMP) traffic rate.
func (o GetDdosPoliciesListDropOptionOutput) OtherMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.OtherMbpsLimit }).(pulumi.IntOutput)
}

// The limit of concurrent connections based on source IP.
func (o GetDdosPoliciesListDropOptionOutput) SConnLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.SConnLimit }).(pulumi.IntOutput)
}

// The limit of new connections based on source IP.
func (o GetDdosPoliciesListDropOptionOutput) SNewLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.SNewLimit }).(pulumi.IntOutput)
}

// The limit of syn of abnormal connection check.
func (o GetDdosPoliciesListDropOptionOutput) SynLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.SynLimit }).(pulumi.IntOutput)
}

// The percentage of syn in ack of abnormal connection check.
func (o GetDdosPoliciesListDropOptionOutput) SynRate() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.SynRate }).(pulumi.IntOutput)
}

// The limit of TCP traffic.
func (o GetDdosPoliciesListDropOptionOutput) TcpMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.TcpMbpsLimit }).(pulumi.IntOutput)
}

// The limit of UDP traffic rate.
func (o GetDdosPoliciesListDropOptionOutput) UdpMbpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListDropOption) int { return v.UdpMbpsLimit }).(pulumi.IntOutput)
}

type GetDdosPoliciesListDropOptionArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListDropOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListDropOption)(nil)).Elem()
}

func (o GetDdosPoliciesListDropOptionArrayOutput) ToGetDdosPoliciesListDropOptionArrayOutput() GetDdosPoliciesListDropOptionArrayOutput {
	return o
}

func (o GetDdosPoliciesListDropOptionArrayOutput) ToGetDdosPoliciesListDropOptionArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListDropOptionArrayOutput {
	return o
}

func (o GetDdosPoliciesListDropOptionArrayOutput) Index(i pulumi.IntInput) GetDdosPoliciesListDropOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPoliciesListDropOption {
		return vs[0].([]GetDdosPoliciesListDropOption)[vs[1].(int)]
	}).(GetDdosPoliciesListDropOptionOutput)
}

type GetDdosPoliciesListPacketFilter struct {
	// Action of port to take.
	Action string `pulumi:"action"`
	// End port of the destination.
	DEndPort int `pulumi:"dEndPort"`
	// Start port of the destination.
	DStartPort int `pulumi:"dStartPort"`
	// The depth of match.
	Depth int `pulumi:"depth"`
	// Indicate whether to include the key word/regular expression or not.
	IsInclude bool `pulumi:"isInclude"`
	// Indicate whether to check load or not.
	MatchBegin string `pulumi:"matchBegin"`
	// The key word or regular expression.
	MatchStr string `pulumi:"matchStr"`
	// Match type.
	MatchType string `pulumi:"matchType"`
	// The offset of watermark.
	Offset int `pulumi:"offset"`
	// The max length of the packet.
	PktLengthMax int `pulumi:"pktLengthMax"`
	// The minimum length of the packet.
	PktLengthMin int `pulumi:"pktLengthMin"`
	// Protocol.
	Protocol string `pulumi:"protocol"`
	// End port of the source.
	SEndPort int `pulumi:"sEndPort"`
	// Start port of the source.
	SStartPort int `pulumi:"sStartPort"`
}

// GetDdosPoliciesListPacketFilterInput is an input type that accepts GetDdosPoliciesListPacketFilterArgs and GetDdosPoliciesListPacketFilterOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListPacketFilterInput` via:
//
//	GetDdosPoliciesListPacketFilterArgs{...}
type GetDdosPoliciesListPacketFilterInput interface {
	pulumi.Input

	ToGetDdosPoliciesListPacketFilterOutput() GetDdosPoliciesListPacketFilterOutput
	ToGetDdosPoliciesListPacketFilterOutputWithContext(context.Context) GetDdosPoliciesListPacketFilterOutput
}

type GetDdosPoliciesListPacketFilterArgs struct {
	// Action of port to take.
	Action pulumi.StringInput `pulumi:"action"`
	// End port of the destination.
	DEndPort pulumi.IntInput `pulumi:"dEndPort"`
	// Start port of the destination.
	DStartPort pulumi.IntInput `pulumi:"dStartPort"`
	// The depth of match.
	Depth pulumi.IntInput `pulumi:"depth"`
	// Indicate whether to include the key word/regular expression or not.
	IsInclude pulumi.BoolInput `pulumi:"isInclude"`
	// Indicate whether to check load or not.
	MatchBegin pulumi.StringInput `pulumi:"matchBegin"`
	// The key word or regular expression.
	MatchStr pulumi.StringInput `pulumi:"matchStr"`
	// Match type.
	MatchType pulumi.StringInput `pulumi:"matchType"`
	// The offset of watermark.
	Offset pulumi.IntInput `pulumi:"offset"`
	// The max length of the packet.
	PktLengthMax pulumi.IntInput `pulumi:"pktLengthMax"`
	// The minimum length of the packet.
	PktLengthMin pulumi.IntInput `pulumi:"pktLengthMin"`
	// Protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// End port of the source.
	SEndPort pulumi.IntInput `pulumi:"sEndPort"`
	// Start port of the source.
	SStartPort pulumi.IntInput `pulumi:"sStartPort"`
}

func (GetDdosPoliciesListPacketFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListPacketFilter)(nil)).Elem()
}

func (i GetDdosPoliciesListPacketFilterArgs) ToGetDdosPoliciesListPacketFilterOutput() GetDdosPoliciesListPacketFilterOutput {
	return i.ToGetDdosPoliciesListPacketFilterOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListPacketFilterArgs) ToGetDdosPoliciesListPacketFilterOutputWithContext(ctx context.Context) GetDdosPoliciesListPacketFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListPacketFilterOutput)
}

// GetDdosPoliciesListPacketFilterArrayInput is an input type that accepts GetDdosPoliciesListPacketFilterArray and GetDdosPoliciesListPacketFilterArrayOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListPacketFilterArrayInput` via:
//
//	GetDdosPoliciesListPacketFilterArray{ GetDdosPoliciesListPacketFilterArgs{...} }
type GetDdosPoliciesListPacketFilterArrayInput interface {
	pulumi.Input

	ToGetDdosPoliciesListPacketFilterArrayOutput() GetDdosPoliciesListPacketFilterArrayOutput
	ToGetDdosPoliciesListPacketFilterArrayOutputWithContext(context.Context) GetDdosPoliciesListPacketFilterArrayOutput
}

type GetDdosPoliciesListPacketFilterArray []GetDdosPoliciesListPacketFilterInput

func (GetDdosPoliciesListPacketFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListPacketFilter)(nil)).Elem()
}

func (i GetDdosPoliciesListPacketFilterArray) ToGetDdosPoliciesListPacketFilterArrayOutput() GetDdosPoliciesListPacketFilterArrayOutput {
	return i.ToGetDdosPoliciesListPacketFilterArrayOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListPacketFilterArray) ToGetDdosPoliciesListPacketFilterArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListPacketFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListPacketFilterArrayOutput)
}

type GetDdosPoliciesListPacketFilterOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListPacketFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListPacketFilter)(nil)).Elem()
}

func (o GetDdosPoliciesListPacketFilterOutput) ToGetDdosPoliciesListPacketFilterOutput() GetDdosPoliciesListPacketFilterOutput {
	return o
}

func (o GetDdosPoliciesListPacketFilterOutput) ToGetDdosPoliciesListPacketFilterOutputWithContext(ctx context.Context) GetDdosPoliciesListPacketFilterOutput {
	return o
}

// Action of port to take.
func (o GetDdosPoliciesListPacketFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) string { return v.Action }).(pulumi.StringOutput)
}

// End port of the destination.
func (o GetDdosPoliciesListPacketFilterOutput) DEndPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.DEndPort }).(pulumi.IntOutput)
}

// Start port of the destination.
func (o GetDdosPoliciesListPacketFilterOutput) DStartPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.DStartPort }).(pulumi.IntOutput)
}

// The depth of match.
func (o GetDdosPoliciesListPacketFilterOutput) Depth() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.Depth }).(pulumi.IntOutput)
}

// Indicate whether to include the key word/regular expression or not.
func (o GetDdosPoliciesListPacketFilterOutput) IsInclude() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) bool { return v.IsInclude }).(pulumi.BoolOutput)
}

// Indicate whether to check load or not.
func (o GetDdosPoliciesListPacketFilterOutput) MatchBegin() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) string { return v.MatchBegin }).(pulumi.StringOutput)
}

// The key word or regular expression.
func (o GetDdosPoliciesListPacketFilterOutput) MatchStr() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) string { return v.MatchStr }).(pulumi.StringOutput)
}

// Match type.
func (o GetDdosPoliciesListPacketFilterOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) string { return v.MatchType }).(pulumi.StringOutput)
}

// The offset of watermark.
func (o GetDdosPoliciesListPacketFilterOutput) Offset() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.Offset }).(pulumi.IntOutput)
}

// The max length of the packet.
func (o GetDdosPoliciesListPacketFilterOutput) PktLengthMax() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.PktLengthMax }).(pulumi.IntOutput)
}

// The minimum length of the packet.
func (o GetDdosPoliciesListPacketFilterOutput) PktLengthMin() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.PktLengthMin }).(pulumi.IntOutput)
}

// Protocol.
func (o GetDdosPoliciesListPacketFilterOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) string { return v.Protocol }).(pulumi.StringOutput)
}

// End port of the source.
func (o GetDdosPoliciesListPacketFilterOutput) SEndPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.SEndPort }).(pulumi.IntOutput)
}

// Start port of the source.
func (o GetDdosPoliciesListPacketFilterOutput) SStartPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPacketFilter) int { return v.SStartPort }).(pulumi.IntOutput)
}

type GetDdosPoliciesListPacketFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListPacketFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListPacketFilter)(nil)).Elem()
}

func (o GetDdosPoliciesListPacketFilterArrayOutput) ToGetDdosPoliciesListPacketFilterArrayOutput() GetDdosPoliciesListPacketFilterArrayOutput {
	return o
}

func (o GetDdosPoliciesListPacketFilterArrayOutput) ToGetDdosPoliciesListPacketFilterArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListPacketFilterArrayOutput {
	return o
}

func (o GetDdosPoliciesListPacketFilterArrayOutput) Index(i pulumi.IntInput) GetDdosPoliciesListPacketFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPoliciesListPacketFilter {
		return vs[0].([]GetDdosPoliciesListPacketFilter)[vs[1].(int)]
	}).(GetDdosPoliciesListPacketFilterOutput)
}

type GetDdosPoliciesListPortFilter struct {
	// Action of port to take.
	Action string `pulumi:"action"`
	// End port.
	EndPort int `pulumi:"endPort"`
	// The type of forbidden port, and valid values are 0, 1, 2. 0 for destination port, 1 for source port and 2 for both destination and source posts.
	Kind int `pulumi:"kind"`
	// Protocol.
	Protocol string `pulumi:"protocol"`
	// Start port.
	StartPort int `pulumi:"startPort"`
}

// GetDdosPoliciesListPortFilterInput is an input type that accepts GetDdosPoliciesListPortFilterArgs and GetDdosPoliciesListPortFilterOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListPortFilterInput` via:
//
//	GetDdosPoliciesListPortFilterArgs{...}
type GetDdosPoliciesListPortFilterInput interface {
	pulumi.Input

	ToGetDdosPoliciesListPortFilterOutput() GetDdosPoliciesListPortFilterOutput
	ToGetDdosPoliciesListPortFilterOutputWithContext(context.Context) GetDdosPoliciesListPortFilterOutput
}

type GetDdosPoliciesListPortFilterArgs struct {
	// Action of port to take.
	Action pulumi.StringInput `pulumi:"action"`
	// End port.
	EndPort pulumi.IntInput `pulumi:"endPort"`
	// The type of forbidden port, and valid values are 0, 1, 2. 0 for destination port, 1 for source port and 2 for both destination and source posts.
	Kind pulumi.IntInput `pulumi:"kind"`
	// Protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Start port.
	StartPort pulumi.IntInput `pulumi:"startPort"`
}

func (GetDdosPoliciesListPortFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListPortFilter)(nil)).Elem()
}

func (i GetDdosPoliciesListPortFilterArgs) ToGetDdosPoliciesListPortFilterOutput() GetDdosPoliciesListPortFilterOutput {
	return i.ToGetDdosPoliciesListPortFilterOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListPortFilterArgs) ToGetDdosPoliciesListPortFilterOutputWithContext(ctx context.Context) GetDdosPoliciesListPortFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListPortFilterOutput)
}

// GetDdosPoliciesListPortFilterArrayInput is an input type that accepts GetDdosPoliciesListPortFilterArray and GetDdosPoliciesListPortFilterArrayOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListPortFilterArrayInput` via:
//
//	GetDdosPoliciesListPortFilterArray{ GetDdosPoliciesListPortFilterArgs{...} }
type GetDdosPoliciesListPortFilterArrayInput interface {
	pulumi.Input

	ToGetDdosPoliciesListPortFilterArrayOutput() GetDdosPoliciesListPortFilterArrayOutput
	ToGetDdosPoliciesListPortFilterArrayOutputWithContext(context.Context) GetDdosPoliciesListPortFilterArrayOutput
}

type GetDdosPoliciesListPortFilterArray []GetDdosPoliciesListPortFilterInput

func (GetDdosPoliciesListPortFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListPortFilter)(nil)).Elem()
}

func (i GetDdosPoliciesListPortFilterArray) ToGetDdosPoliciesListPortFilterArrayOutput() GetDdosPoliciesListPortFilterArrayOutput {
	return i.ToGetDdosPoliciesListPortFilterArrayOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListPortFilterArray) ToGetDdosPoliciesListPortFilterArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListPortFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListPortFilterArrayOutput)
}

type GetDdosPoliciesListPortFilterOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListPortFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListPortFilter)(nil)).Elem()
}

func (o GetDdosPoliciesListPortFilterOutput) ToGetDdosPoliciesListPortFilterOutput() GetDdosPoliciesListPortFilterOutput {
	return o
}

func (o GetDdosPoliciesListPortFilterOutput) ToGetDdosPoliciesListPortFilterOutputWithContext(ctx context.Context) GetDdosPoliciesListPortFilterOutput {
	return o
}

// Action of port to take.
func (o GetDdosPoliciesListPortFilterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPortFilter) string { return v.Action }).(pulumi.StringOutput)
}

// End port.
func (o GetDdosPoliciesListPortFilterOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPortFilter) int { return v.EndPort }).(pulumi.IntOutput)
}

// The type of forbidden port, and valid values are 0, 1, 2. 0 for destination port, 1 for source port and 2 for both destination and source posts.
func (o GetDdosPoliciesListPortFilterOutput) Kind() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPortFilter) int { return v.Kind }).(pulumi.IntOutput)
}

// Protocol.
func (o GetDdosPoliciesListPortFilterOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPortFilter) string { return v.Protocol }).(pulumi.StringOutput)
}

// Start port.
func (o GetDdosPoliciesListPortFilterOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListPortFilter) int { return v.StartPort }).(pulumi.IntOutput)
}

type GetDdosPoliciesListPortFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListPortFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListPortFilter)(nil)).Elem()
}

func (o GetDdosPoliciesListPortFilterArrayOutput) ToGetDdosPoliciesListPortFilterArrayOutput() GetDdosPoliciesListPortFilterArrayOutput {
	return o
}

func (o GetDdosPoliciesListPortFilterArrayOutput) ToGetDdosPoliciesListPortFilterArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListPortFilterArrayOutput {
	return o
}

func (o GetDdosPoliciesListPortFilterArrayOutput) Index(i pulumi.IntInput) GetDdosPoliciesListPortFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPoliciesListPortFilter {
		return vs[0].([]GetDdosPoliciesListPortFilter)[vs[1].(int)]
	}).(GetDdosPoliciesListPortFilterOutput)
}

type GetDdosPoliciesListWatermarkFilter struct {
	// Indicate whether to auto-remove the watermark or not.
	AutoRemove bool `pulumi:"autoRemove"`
	// The offset of watermark.
	Offset int `pulumi:"offset"`
	// Indicate whether to auto-remove the watermark or not.
	OpenSwitch bool `pulumi:"openSwitch"`
	// Port range of TCP.
	TcpPortLists []string `pulumi:"tcpPortLists"`
	// Port range of TCP.
	UdpPortLists []string `pulumi:"udpPortLists"`
}

// GetDdosPoliciesListWatermarkFilterInput is an input type that accepts GetDdosPoliciesListWatermarkFilterArgs and GetDdosPoliciesListWatermarkFilterOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListWatermarkFilterInput` via:
//
//	GetDdosPoliciesListWatermarkFilterArgs{...}
type GetDdosPoliciesListWatermarkFilterInput interface {
	pulumi.Input

	ToGetDdosPoliciesListWatermarkFilterOutput() GetDdosPoliciesListWatermarkFilterOutput
	ToGetDdosPoliciesListWatermarkFilterOutputWithContext(context.Context) GetDdosPoliciesListWatermarkFilterOutput
}

type GetDdosPoliciesListWatermarkFilterArgs struct {
	// Indicate whether to auto-remove the watermark or not.
	AutoRemove pulumi.BoolInput `pulumi:"autoRemove"`
	// The offset of watermark.
	Offset pulumi.IntInput `pulumi:"offset"`
	// Indicate whether to auto-remove the watermark or not.
	OpenSwitch pulumi.BoolInput `pulumi:"openSwitch"`
	// Port range of TCP.
	TcpPortLists pulumi.StringArrayInput `pulumi:"tcpPortLists"`
	// Port range of TCP.
	UdpPortLists pulumi.StringArrayInput `pulumi:"udpPortLists"`
}

func (GetDdosPoliciesListWatermarkFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListWatermarkFilter)(nil)).Elem()
}

func (i GetDdosPoliciesListWatermarkFilterArgs) ToGetDdosPoliciesListWatermarkFilterOutput() GetDdosPoliciesListWatermarkFilterOutput {
	return i.ToGetDdosPoliciesListWatermarkFilterOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListWatermarkFilterArgs) ToGetDdosPoliciesListWatermarkFilterOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListWatermarkFilterOutput)
}

// GetDdosPoliciesListWatermarkFilterArrayInput is an input type that accepts GetDdosPoliciesListWatermarkFilterArray and GetDdosPoliciesListWatermarkFilterArrayOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListWatermarkFilterArrayInput` via:
//
//	GetDdosPoliciesListWatermarkFilterArray{ GetDdosPoliciesListWatermarkFilterArgs{...} }
type GetDdosPoliciesListWatermarkFilterArrayInput interface {
	pulumi.Input

	ToGetDdosPoliciesListWatermarkFilterArrayOutput() GetDdosPoliciesListWatermarkFilterArrayOutput
	ToGetDdosPoliciesListWatermarkFilterArrayOutputWithContext(context.Context) GetDdosPoliciesListWatermarkFilterArrayOutput
}

type GetDdosPoliciesListWatermarkFilterArray []GetDdosPoliciesListWatermarkFilterInput

func (GetDdosPoliciesListWatermarkFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListWatermarkFilter)(nil)).Elem()
}

func (i GetDdosPoliciesListWatermarkFilterArray) ToGetDdosPoliciesListWatermarkFilterArrayOutput() GetDdosPoliciesListWatermarkFilterArrayOutput {
	return i.ToGetDdosPoliciesListWatermarkFilterArrayOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListWatermarkFilterArray) ToGetDdosPoliciesListWatermarkFilterArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListWatermarkFilterArrayOutput)
}

type GetDdosPoliciesListWatermarkFilterOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListWatermarkFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListWatermarkFilter)(nil)).Elem()
}

func (o GetDdosPoliciesListWatermarkFilterOutput) ToGetDdosPoliciesListWatermarkFilterOutput() GetDdosPoliciesListWatermarkFilterOutput {
	return o
}

func (o GetDdosPoliciesListWatermarkFilterOutput) ToGetDdosPoliciesListWatermarkFilterOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkFilterOutput {
	return o
}

// Indicate whether to auto-remove the watermark or not.
func (o GetDdosPoliciesListWatermarkFilterOutput) AutoRemove() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkFilter) bool { return v.AutoRemove }).(pulumi.BoolOutput)
}

// The offset of watermark.
func (o GetDdosPoliciesListWatermarkFilterOutput) Offset() pulumi.IntOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkFilter) int { return v.Offset }).(pulumi.IntOutput)
}

// Indicate whether to auto-remove the watermark or not.
func (o GetDdosPoliciesListWatermarkFilterOutput) OpenSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkFilter) bool { return v.OpenSwitch }).(pulumi.BoolOutput)
}

// Port range of TCP.
func (o GetDdosPoliciesListWatermarkFilterOutput) TcpPortLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkFilter) []string { return v.TcpPortLists }).(pulumi.StringArrayOutput)
}

// Port range of TCP.
func (o GetDdosPoliciesListWatermarkFilterOutput) UdpPortLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkFilter) []string { return v.UdpPortLists }).(pulumi.StringArrayOutput)
}

type GetDdosPoliciesListWatermarkFilterArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListWatermarkFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListWatermarkFilter)(nil)).Elem()
}

func (o GetDdosPoliciesListWatermarkFilterArrayOutput) ToGetDdosPoliciesListWatermarkFilterArrayOutput() GetDdosPoliciesListWatermarkFilterArrayOutput {
	return o
}

func (o GetDdosPoliciesListWatermarkFilterArrayOutput) ToGetDdosPoliciesListWatermarkFilterArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkFilterArrayOutput {
	return o
}

func (o GetDdosPoliciesListWatermarkFilterArrayOutput) Index(i pulumi.IntInput) GetDdosPoliciesListWatermarkFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPoliciesListWatermarkFilter {
		return vs[0].([]GetDdosPoliciesListWatermarkFilter)[vs[1].(int)]
	}).(GetDdosPoliciesListWatermarkFilterOutput)
}

type GetDdosPoliciesListWatermarkKey struct {
	// Content of the watermark.
	Content string `pulumi:"content"`
	// Create time of the DDoS policy.
	CreateTime *string `pulumi:"createTime"`
	// Id of the watermark.
	Id string `pulumi:"id"`
	// Indicate whether to auto-remove the watermark or not.
	OpenSwitch bool `pulumi:"openSwitch"`
}

// GetDdosPoliciesListWatermarkKeyInput is an input type that accepts GetDdosPoliciesListWatermarkKeyArgs and GetDdosPoliciesListWatermarkKeyOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListWatermarkKeyInput` via:
//
//	GetDdosPoliciesListWatermarkKeyArgs{...}
type GetDdosPoliciesListWatermarkKeyInput interface {
	pulumi.Input

	ToGetDdosPoliciesListWatermarkKeyOutput() GetDdosPoliciesListWatermarkKeyOutput
	ToGetDdosPoliciesListWatermarkKeyOutputWithContext(context.Context) GetDdosPoliciesListWatermarkKeyOutput
}

type GetDdosPoliciesListWatermarkKeyArgs struct {
	// Content of the watermark.
	Content pulumi.StringInput `pulumi:"content"`
	// Create time of the DDoS policy.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Id of the watermark.
	Id pulumi.StringInput `pulumi:"id"`
	// Indicate whether to auto-remove the watermark or not.
	OpenSwitch pulumi.BoolInput `pulumi:"openSwitch"`
}

func (GetDdosPoliciesListWatermarkKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListWatermarkKey)(nil)).Elem()
}

func (i GetDdosPoliciesListWatermarkKeyArgs) ToGetDdosPoliciesListWatermarkKeyOutput() GetDdosPoliciesListWatermarkKeyOutput {
	return i.ToGetDdosPoliciesListWatermarkKeyOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListWatermarkKeyArgs) ToGetDdosPoliciesListWatermarkKeyOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListWatermarkKeyOutput)
}

// GetDdosPoliciesListWatermarkKeyArrayInput is an input type that accepts GetDdosPoliciesListWatermarkKeyArray and GetDdosPoliciesListWatermarkKeyArrayOutput values.
// You can construct a concrete instance of `GetDdosPoliciesListWatermarkKeyArrayInput` via:
//
//	GetDdosPoliciesListWatermarkKeyArray{ GetDdosPoliciesListWatermarkKeyArgs{...} }
type GetDdosPoliciesListWatermarkKeyArrayInput interface {
	pulumi.Input

	ToGetDdosPoliciesListWatermarkKeyArrayOutput() GetDdosPoliciesListWatermarkKeyArrayOutput
	ToGetDdosPoliciesListWatermarkKeyArrayOutputWithContext(context.Context) GetDdosPoliciesListWatermarkKeyArrayOutput
}

type GetDdosPoliciesListWatermarkKeyArray []GetDdosPoliciesListWatermarkKeyInput

func (GetDdosPoliciesListWatermarkKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListWatermarkKey)(nil)).Elem()
}

func (i GetDdosPoliciesListWatermarkKeyArray) ToGetDdosPoliciesListWatermarkKeyArrayOutput() GetDdosPoliciesListWatermarkKeyArrayOutput {
	return i.ToGetDdosPoliciesListWatermarkKeyArrayOutputWithContext(context.Background())
}

func (i GetDdosPoliciesListWatermarkKeyArray) ToGetDdosPoliciesListWatermarkKeyArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPoliciesListWatermarkKeyArrayOutput)
}

type GetDdosPoliciesListWatermarkKeyOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListWatermarkKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPoliciesListWatermarkKey)(nil)).Elem()
}

func (o GetDdosPoliciesListWatermarkKeyOutput) ToGetDdosPoliciesListWatermarkKeyOutput() GetDdosPoliciesListWatermarkKeyOutput {
	return o
}

func (o GetDdosPoliciesListWatermarkKeyOutput) ToGetDdosPoliciesListWatermarkKeyOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkKeyOutput {
	return o
}

// Content of the watermark.
func (o GetDdosPoliciesListWatermarkKeyOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkKey) string { return v.Content }).(pulumi.StringOutput)
}

// Create time of the DDoS policy.
func (o GetDdosPoliciesListWatermarkKeyOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkKey) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Id of the watermark.
func (o GetDdosPoliciesListWatermarkKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkKey) string { return v.Id }).(pulumi.StringOutput)
}

// Indicate whether to auto-remove the watermark or not.
func (o GetDdosPoliciesListWatermarkKeyOutput) OpenSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDdosPoliciesListWatermarkKey) bool { return v.OpenSwitch }).(pulumi.BoolOutput)
}

type GetDdosPoliciesListWatermarkKeyArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPoliciesListWatermarkKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPoliciesListWatermarkKey)(nil)).Elem()
}

func (o GetDdosPoliciesListWatermarkKeyArrayOutput) ToGetDdosPoliciesListWatermarkKeyArrayOutput() GetDdosPoliciesListWatermarkKeyArrayOutput {
	return o
}

func (o GetDdosPoliciesListWatermarkKeyArrayOutput) ToGetDdosPoliciesListWatermarkKeyArrayOutputWithContext(ctx context.Context) GetDdosPoliciesListWatermarkKeyArrayOutput {
	return o
}

func (o GetDdosPoliciesListWatermarkKeyArrayOutput) Index(i pulumi.IntInput) GetDdosPoliciesListWatermarkKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPoliciesListWatermarkKey {
		return vs[0].([]GetDdosPoliciesListWatermarkKey)[vs[1].(int)]
	}).(GetDdosPoliciesListWatermarkKeyOutput)
}

type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList struct {
	// Id of the policy to be queried.
	PolicyId string `pulumi:"policyId"`
	// ID of the attached resource to be queried.
	ResourceId string `pulumi:"resourceId"`
	// Type of the resource that the DDoS policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType string `pulumi:"resourceType"`
}

// GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListInput is an input type that accepts GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs and GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput values.
// You can construct a concrete instance of `GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListInput` via:
//
//	GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs{...}
type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListInput interface {
	pulumi.Input

	ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput() GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput
	ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutputWithContext(context.Context) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput
}

type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs struct {
	// Id of the policy to be queried.
	PolicyId pulumi.StringInput `pulumi:"policyId"`
	// ID of the attached resource to be queried.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// Type of the resource that the DDoS policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList)(nil)).Elem()
}

func (i GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput() GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput {
	return i.ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutputWithContext(context.Background())
}

func (i GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutputWithContext(ctx context.Context) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput)
}

// GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayInput is an input type that accepts GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray and GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput values.
// You can construct a concrete instance of `GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayInput` via:
//
//	GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray{ GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs{...} }
type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayInput interface {
	pulumi.Input

	ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput() GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput
	ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutputWithContext(context.Context) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput
}

type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray []GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListInput

func (GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList)(nil)).Elem()
}

func (i GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput() GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput {
	return i.ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutputWithContext(context.Background())
}

func (i GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutputWithContext(ctx context.Context) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput)
}

type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput struct{ *pulumi.OutputState }

func (GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList)(nil)).Elem()
}

func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput() GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput {
	return o
}

func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutputWithContext(ctx context.Context) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput {
	return o
}

// Id of the policy to be queried.
func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList) string { return v.PolicyId }).(pulumi.StringOutput)
}

// ID of the attached resource to be queried.
func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList) string { return v.ResourceId }).(pulumi.StringOutput)
}

// Type of the resource that the DDoS policy works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList) string { return v.ResourceType }).(pulumi.StringOutput)
}

type GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList)(nil)).Elem()
}

func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput() GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput {
	return o
}

func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput) ToGetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutputWithContext(ctx context.Context) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput {
	return o
}

func (o GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput) Index(i pulumi.IntInput) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList {
		return vs[0].([]GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentList)[vs[1].(int)]
	}).(GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput)
}

type GetDdosPolicyCasesList struct {
	// App protocol set of the DDoS policy case.
	AppProtocols []string `pulumi:"appProtocols"`
	// App type of the DDoS policy case.
	AppType string `pulumi:"appType"`
	// Create time of the DDoS policy case.
	CreateTime string `pulumi:"createTime"`
	// Indicate whether the service involves overseas or not.
	HasAbroad string `pulumi:"hasAbroad"`
	// Indicate whether the service actively initiates TCP requests or not.
	HasInitiateTcp string `pulumi:"hasInitiateTcp"`
	// Indicate whether the actively initiate UDP requests or not.
	HasInitiateUdp string `pulumi:"hasInitiateUdp"`
	// Indicate whether the service involves VPN service or not.
	HasVpn string `pulumi:"hasVpn"`
	// The max length of TCP message package.
	MaxTcpPackageLen string `pulumi:"maxTcpPackageLen"`
	// The max length of UDP message package.
	MaxUdpPackageLen string `pulumi:"maxUdpPackageLen"`
	// The minimum length of TCP message package.
	MinTcpPackageLen string `pulumi:"minTcpPackageLen"`
	// The minimum length of UDP message package.
	MinUdpPackageLen string `pulumi:"minUdpPackageLen"`
	// Name of the DDoS policy case.
	Name string `pulumi:"name"`
	// The port that actively initiates TCP requests.
	PeerTcpPort string `pulumi:"peerTcpPort"`
	// The port that actively initiates UDP requests.
	PeerUdpPort string `pulumi:"peerUdpPort"`
	// Platform set of the DDoS policy case.
	PlatformTypes []string `pulumi:"platformTypes"`
	// Type of the resource that the DDoS policy case works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType string `pulumi:"resourceType"`
	// ID of the DDoS policy case to be query.
	SceneId string `pulumi:"sceneId"`
	// End port of the TCP service.
	TcpEndPort string `pulumi:"tcpEndPort"`
	// The fixed signature of TCP protocol load.
	TcpFootprint string `pulumi:"tcpFootprint"`
	// Start port of the TCP service.
	TcpStartPort string `pulumi:"tcpStartPort"`
	// End port of the UDP service.
	UdpEndPort string `pulumi:"udpEndPort"`
	// The fixed signature of TCP protocol load.
	UdpFootprint string `pulumi:"udpFootprint"`
	// Start port of the UDP service.
	UdpStartPort string `pulumi:"udpStartPort"`
	// Web API url set.
	WebApiUrls []string `pulumi:"webApiUrls"`
}

// GetDdosPolicyCasesListInput is an input type that accepts GetDdosPolicyCasesListArgs and GetDdosPolicyCasesListOutput values.
// You can construct a concrete instance of `GetDdosPolicyCasesListInput` via:
//
//	GetDdosPolicyCasesListArgs{...}
type GetDdosPolicyCasesListInput interface {
	pulumi.Input

	ToGetDdosPolicyCasesListOutput() GetDdosPolicyCasesListOutput
	ToGetDdosPolicyCasesListOutputWithContext(context.Context) GetDdosPolicyCasesListOutput
}

type GetDdosPolicyCasesListArgs struct {
	// App protocol set of the DDoS policy case.
	AppProtocols pulumi.StringArrayInput `pulumi:"appProtocols"`
	// App type of the DDoS policy case.
	AppType pulumi.StringInput `pulumi:"appType"`
	// Create time of the DDoS policy case.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Indicate whether the service involves overseas or not.
	HasAbroad pulumi.StringInput `pulumi:"hasAbroad"`
	// Indicate whether the service actively initiates TCP requests or not.
	HasInitiateTcp pulumi.StringInput `pulumi:"hasInitiateTcp"`
	// Indicate whether the actively initiate UDP requests or not.
	HasInitiateUdp pulumi.StringInput `pulumi:"hasInitiateUdp"`
	// Indicate whether the service involves VPN service or not.
	HasVpn pulumi.StringInput `pulumi:"hasVpn"`
	// The max length of TCP message package.
	MaxTcpPackageLen pulumi.StringInput `pulumi:"maxTcpPackageLen"`
	// The max length of UDP message package.
	MaxUdpPackageLen pulumi.StringInput `pulumi:"maxUdpPackageLen"`
	// The minimum length of TCP message package.
	MinTcpPackageLen pulumi.StringInput `pulumi:"minTcpPackageLen"`
	// The minimum length of UDP message package.
	MinUdpPackageLen pulumi.StringInput `pulumi:"minUdpPackageLen"`
	// Name of the DDoS policy case.
	Name pulumi.StringInput `pulumi:"name"`
	// The port that actively initiates TCP requests.
	PeerTcpPort pulumi.StringInput `pulumi:"peerTcpPort"`
	// The port that actively initiates UDP requests.
	PeerUdpPort pulumi.StringInput `pulumi:"peerUdpPort"`
	// Platform set of the DDoS policy case.
	PlatformTypes pulumi.StringArrayInput `pulumi:"platformTypes"`
	// Type of the resource that the DDoS policy case works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
	// ID of the DDoS policy case to be query.
	SceneId pulumi.StringInput `pulumi:"sceneId"`
	// End port of the TCP service.
	TcpEndPort pulumi.StringInput `pulumi:"tcpEndPort"`
	// The fixed signature of TCP protocol load.
	TcpFootprint pulumi.StringInput `pulumi:"tcpFootprint"`
	// Start port of the TCP service.
	TcpStartPort pulumi.StringInput `pulumi:"tcpStartPort"`
	// End port of the UDP service.
	UdpEndPort pulumi.StringInput `pulumi:"udpEndPort"`
	// The fixed signature of TCP protocol load.
	UdpFootprint pulumi.StringInput `pulumi:"udpFootprint"`
	// Start port of the UDP service.
	UdpStartPort pulumi.StringInput `pulumi:"udpStartPort"`
	// Web API url set.
	WebApiUrls pulumi.StringArrayInput `pulumi:"webApiUrls"`
}

func (GetDdosPolicyCasesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPolicyCasesList)(nil)).Elem()
}

func (i GetDdosPolicyCasesListArgs) ToGetDdosPolicyCasesListOutput() GetDdosPolicyCasesListOutput {
	return i.ToGetDdosPolicyCasesListOutputWithContext(context.Background())
}

func (i GetDdosPolicyCasesListArgs) ToGetDdosPolicyCasesListOutputWithContext(ctx context.Context) GetDdosPolicyCasesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPolicyCasesListOutput)
}

// GetDdosPolicyCasesListArrayInput is an input type that accepts GetDdosPolicyCasesListArray and GetDdosPolicyCasesListArrayOutput values.
// You can construct a concrete instance of `GetDdosPolicyCasesListArrayInput` via:
//
//	GetDdosPolicyCasesListArray{ GetDdosPolicyCasesListArgs{...} }
type GetDdosPolicyCasesListArrayInput interface {
	pulumi.Input

	ToGetDdosPolicyCasesListArrayOutput() GetDdosPolicyCasesListArrayOutput
	ToGetDdosPolicyCasesListArrayOutputWithContext(context.Context) GetDdosPolicyCasesListArrayOutput
}

type GetDdosPolicyCasesListArray []GetDdosPolicyCasesListInput

func (GetDdosPolicyCasesListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPolicyCasesList)(nil)).Elem()
}

func (i GetDdosPolicyCasesListArray) ToGetDdosPolicyCasesListArrayOutput() GetDdosPolicyCasesListArrayOutput {
	return i.ToGetDdosPolicyCasesListArrayOutputWithContext(context.Background())
}

func (i GetDdosPolicyCasesListArray) ToGetDdosPolicyCasesListArrayOutputWithContext(ctx context.Context) GetDdosPolicyCasesListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDdosPolicyCasesListArrayOutput)
}

type GetDdosPolicyCasesListOutput struct{ *pulumi.OutputState }

func (GetDdosPolicyCasesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDdosPolicyCasesList)(nil)).Elem()
}

func (o GetDdosPolicyCasesListOutput) ToGetDdosPolicyCasesListOutput() GetDdosPolicyCasesListOutput {
	return o
}

func (o GetDdosPolicyCasesListOutput) ToGetDdosPolicyCasesListOutputWithContext(ctx context.Context) GetDdosPolicyCasesListOutput {
	return o
}

// App protocol set of the DDoS policy case.
func (o GetDdosPolicyCasesListOutput) AppProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) []string { return v.AppProtocols }).(pulumi.StringArrayOutput)
}

// App type of the DDoS policy case.
func (o GetDdosPolicyCasesListOutput) AppType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.AppType }).(pulumi.StringOutput)
}

// Create time of the DDoS policy case.
func (o GetDdosPolicyCasesListOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Indicate whether the service involves overseas or not.
func (o GetDdosPolicyCasesListOutput) HasAbroad() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.HasAbroad }).(pulumi.StringOutput)
}

// Indicate whether the service actively initiates TCP requests or not.
func (o GetDdosPolicyCasesListOutput) HasInitiateTcp() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.HasInitiateTcp }).(pulumi.StringOutput)
}

// Indicate whether the actively initiate UDP requests or not.
func (o GetDdosPolicyCasesListOutput) HasInitiateUdp() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.HasInitiateUdp }).(pulumi.StringOutput)
}

// Indicate whether the service involves VPN service or not.
func (o GetDdosPolicyCasesListOutput) HasVpn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.HasVpn }).(pulumi.StringOutput)
}

// The max length of TCP message package.
func (o GetDdosPolicyCasesListOutput) MaxTcpPackageLen() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.MaxTcpPackageLen }).(pulumi.StringOutput)
}

// The max length of UDP message package.
func (o GetDdosPolicyCasesListOutput) MaxUdpPackageLen() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.MaxUdpPackageLen }).(pulumi.StringOutput)
}

// The minimum length of TCP message package.
func (o GetDdosPolicyCasesListOutput) MinTcpPackageLen() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.MinTcpPackageLen }).(pulumi.StringOutput)
}

// The minimum length of UDP message package.
func (o GetDdosPolicyCasesListOutput) MinUdpPackageLen() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.MinUdpPackageLen }).(pulumi.StringOutput)
}

// Name of the DDoS policy case.
func (o GetDdosPolicyCasesListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.Name }).(pulumi.StringOutput)
}

// The port that actively initiates TCP requests.
func (o GetDdosPolicyCasesListOutput) PeerTcpPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.PeerTcpPort }).(pulumi.StringOutput)
}

// The port that actively initiates UDP requests.
func (o GetDdosPolicyCasesListOutput) PeerUdpPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.PeerUdpPort }).(pulumi.StringOutput)
}

// Platform set of the DDoS policy case.
func (o GetDdosPolicyCasesListOutput) PlatformTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) []string { return v.PlatformTypes }).(pulumi.StringArrayOutput)
}

// Type of the resource that the DDoS policy case works for, valid values are `bgpip`, `bgp`, `bgp-multip` and `net`.
func (o GetDdosPolicyCasesListOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.ResourceType }).(pulumi.StringOutput)
}

// ID of the DDoS policy case to be query.
func (o GetDdosPolicyCasesListOutput) SceneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.SceneId }).(pulumi.StringOutput)
}

// End port of the TCP service.
func (o GetDdosPolicyCasesListOutput) TcpEndPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.TcpEndPort }).(pulumi.StringOutput)
}

// The fixed signature of TCP protocol load.
func (o GetDdosPolicyCasesListOutput) TcpFootprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.TcpFootprint }).(pulumi.StringOutput)
}

// Start port of the TCP service.
func (o GetDdosPolicyCasesListOutput) TcpStartPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.TcpStartPort }).(pulumi.StringOutput)
}

// End port of the UDP service.
func (o GetDdosPolicyCasesListOutput) UdpEndPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.UdpEndPort }).(pulumi.StringOutput)
}

// The fixed signature of TCP protocol load.
func (o GetDdosPolicyCasesListOutput) UdpFootprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.UdpFootprint }).(pulumi.StringOutput)
}

// Start port of the UDP service.
func (o GetDdosPolicyCasesListOutput) UdpStartPort() pulumi.StringOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) string { return v.UdpStartPort }).(pulumi.StringOutput)
}

// Web API url set.
func (o GetDdosPolicyCasesListOutput) WebApiUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDdosPolicyCasesList) []string { return v.WebApiUrls }).(pulumi.StringArrayOutput)
}

type GetDdosPolicyCasesListArrayOutput struct{ *pulumi.OutputState }

func (GetDdosPolicyCasesListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDdosPolicyCasesList)(nil)).Elem()
}

func (o GetDdosPolicyCasesListArrayOutput) ToGetDdosPolicyCasesListArrayOutput() GetDdosPolicyCasesListArrayOutput {
	return o
}

func (o GetDdosPolicyCasesListArrayOutput) ToGetDdosPolicyCasesListArrayOutputWithContext(ctx context.Context) GetDdosPolicyCasesListArrayOutput {
	return o
}

func (o GetDdosPolicyCasesListArrayOutput) Index(i pulumi.IntInput) GetDdosPolicyCasesListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDdosPolicyCasesList {
		return vs[0].([]GetDdosPolicyCasesList)[vs[1].(int)]
	}).(GetDdosPolicyCasesListOutput)
}

type GetEipList struct {
	CreatedTime      string   `pulumi:"createdTime"`
	EipAddressStatus string   `pulumi:"eipAddressStatus"`
	EipBoundRscEni   string   `pulumi:"eipBoundRscEni"`
	EipBoundRscIns   *string  `pulumi:"eipBoundRscIns"`
	EipBoundRscVip   string   `pulumi:"eipBoundRscVip"`
	EipLists         []string `pulumi:"eipLists"`
	ExpiredTime      string   `pulumi:"expiredTime"`
	InstanceId       *string  `pulumi:"instanceId"`
	ModifyTime       string   `pulumi:"modifyTime"`
	ProtectionStatus string   `pulumi:"protectionStatus"`
	Region           string   `pulumi:"region"`
}

// GetEipListInput is an input type that accepts GetEipListArgs and GetEipListOutput values.
// You can construct a concrete instance of `GetEipListInput` via:
//
//	GetEipListArgs{...}
type GetEipListInput interface {
	pulumi.Input

	ToGetEipListOutput() GetEipListOutput
	ToGetEipListOutputWithContext(context.Context) GetEipListOutput
}

type GetEipListArgs struct {
	CreatedTime      pulumi.StringInput      `pulumi:"createdTime"`
	EipAddressStatus pulumi.StringInput      `pulumi:"eipAddressStatus"`
	EipBoundRscEni   pulumi.StringInput      `pulumi:"eipBoundRscEni"`
	EipBoundRscIns   pulumi.StringPtrInput   `pulumi:"eipBoundRscIns"`
	EipBoundRscVip   pulumi.StringInput      `pulumi:"eipBoundRscVip"`
	EipLists         pulumi.StringArrayInput `pulumi:"eipLists"`
	ExpiredTime      pulumi.StringInput      `pulumi:"expiredTime"`
	InstanceId       pulumi.StringPtrInput   `pulumi:"instanceId"`
	ModifyTime       pulumi.StringInput      `pulumi:"modifyTime"`
	ProtectionStatus pulumi.StringInput      `pulumi:"protectionStatus"`
	Region           pulumi.StringInput      `pulumi:"region"`
}

func (GetEipListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipList)(nil)).Elem()
}

func (i GetEipListArgs) ToGetEipListOutput() GetEipListOutput {
	return i.ToGetEipListOutputWithContext(context.Background())
}

func (i GetEipListArgs) ToGetEipListOutputWithContext(ctx context.Context) GetEipListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipListOutput)
}

// GetEipListArrayInput is an input type that accepts GetEipListArray and GetEipListArrayOutput values.
// You can construct a concrete instance of `GetEipListArrayInput` via:
//
//	GetEipListArray{ GetEipListArgs{...} }
type GetEipListArrayInput interface {
	pulumi.Input

	ToGetEipListArrayOutput() GetEipListArrayOutput
	ToGetEipListArrayOutputWithContext(context.Context) GetEipListArrayOutput
}

type GetEipListArray []GetEipListInput

func (GetEipListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipList)(nil)).Elem()
}

func (i GetEipListArray) ToGetEipListArrayOutput() GetEipListArrayOutput {
	return i.ToGetEipListArrayOutputWithContext(context.Background())
}

func (i GetEipListArray) ToGetEipListArrayOutputWithContext(ctx context.Context) GetEipListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipListArrayOutput)
}

type GetEipListOutput struct{ *pulumi.OutputState }

func (GetEipListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipList)(nil)).Elem()
}

func (o GetEipListOutput) ToGetEipListOutput() GetEipListOutput {
	return o
}

func (o GetEipListOutput) ToGetEipListOutputWithContext(ctx context.Context) GetEipListOutput {
	return o
}

func (o GetEipListOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o GetEipListOutput) EipAddressStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.EipAddressStatus }).(pulumi.StringOutput)
}

func (o GetEipListOutput) EipBoundRscEni() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.EipBoundRscEni }).(pulumi.StringOutput)
}

func (o GetEipListOutput) EipBoundRscIns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEipList) *string { return v.EipBoundRscIns }).(pulumi.StringPtrOutput)
}

func (o GetEipListOutput) EipBoundRscVip() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.EipBoundRscVip }).(pulumi.StringOutput)
}

func (o GetEipListOutput) EipLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetEipList) []string { return v.EipLists }).(pulumi.StringArrayOutput)
}

func (o GetEipListOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

func (o GetEipListOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEipList) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o GetEipListOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.ModifyTime }).(pulumi.StringOutput)
}

func (o GetEipListOutput) ProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.ProtectionStatus }).(pulumi.StringOutput)
}

func (o GetEipListOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipList) string { return v.Region }).(pulumi.StringOutput)
}

type GetEipListArrayOutput struct{ *pulumi.OutputState }

func (GetEipListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipList)(nil)).Elem()
}

func (o GetEipListArrayOutput) ToGetEipListArrayOutput() GetEipListArrayOutput {
	return o
}

func (o GetEipListArrayOutput) ToGetEipListArrayOutputWithContext(ctx context.Context) GetEipListArrayOutput {
	return o
}

func (o GetEipListArrayOutput) Index(i pulumi.IntInput) GetEipListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEipList {
		return vs[0].([]GetEipList)[vs[1].(int)]
	}).(GetEipListOutput)
}

type GetL4RulesList struct {
	// The destination port of the layer 4 rule.
	DPort int `pulumi:"dPort"`
	// Health threshold of health check.
	HealthCheckHealthNum int `pulumi:"healthCheckHealthNum"`
	// Interval time of health check.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch bool `pulumi:"healthCheckSwitch"`
	// HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
	HealthCheckTimeout int `pulumi:"healthCheckTimeout"`
	// Unhealthy threshold of health check.
	HealthCheckUnhealthNum int `pulumi:"healthCheckUnhealthNum"`
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LbType int `pulumi:"lbType"`
	// Name of the layer 4 rule to be queried.
	Name string `pulumi:"name"`
	// Protocol of the rule.
	Protocol string `pulumi:"protocol"`
	// Id of the layer 4 rule to be queried.
	RuleId string `pulumi:"ruleId"`
	// The source port of the layer 4 rule.
	SPort int `pulumi:"sPort"`
	// Indicate that the session will keep or not.
	SessionSwitch bool `pulumi:"sessionSwitch"`
	// Session keep time, only valid when `sessionSwitch` is true, the available value ranges from 1 to 300 and unit is second.
	SessionTime int                        `pulumi:"sessionTime"`
	SourceLists []GetL4RulesListSourceList `pulumi:"sourceLists"`
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType int `pulumi:"sourceType"`
}

// GetL4RulesListInput is an input type that accepts GetL4RulesListArgs and GetL4RulesListOutput values.
// You can construct a concrete instance of `GetL4RulesListInput` via:
//
//	GetL4RulesListArgs{...}
type GetL4RulesListInput interface {
	pulumi.Input

	ToGetL4RulesListOutput() GetL4RulesListOutput
	ToGetL4RulesListOutputWithContext(context.Context) GetL4RulesListOutput
}

type GetL4RulesListArgs struct {
	// The destination port of the layer 4 rule.
	DPort pulumi.IntInput `pulumi:"dPort"`
	// Health threshold of health check.
	HealthCheckHealthNum pulumi.IntInput `pulumi:"healthCheckHealthNum"`
	// Interval time of health check.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch pulumi.BoolInput `pulumi:"healthCheckSwitch"`
	// HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
	HealthCheckTimeout pulumi.IntInput `pulumi:"healthCheckTimeout"`
	// Unhealthy threshold of health check.
	HealthCheckUnhealthNum pulumi.IntInput `pulumi:"healthCheckUnhealthNum"`
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LbType pulumi.IntInput `pulumi:"lbType"`
	// Name of the layer 4 rule to be queried.
	Name pulumi.StringInput `pulumi:"name"`
	// Protocol of the rule.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Id of the layer 4 rule to be queried.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// The source port of the layer 4 rule.
	SPort pulumi.IntInput `pulumi:"sPort"`
	// Indicate that the session will keep or not.
	SessionSwitch pulumi.BoolInput `pulumi:"sessionSwitch"`
	// Session keep time, only valid when `sessionSwitch` is true, the available value ranges from 1 to 300 and unit is second.
	SessionTime pulumi.IntInput                    `pulumi:"sessionTime"`
	SourceLists GetL4RulesListSourceListArrayInput `pulumi:"sourceLists"`
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType pulumi.IntInput `pulumi:"sourceType"`
}

func (GetL4RulesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesList)(nil)).Elem()
}

func (i GetL4RulesListArgs) ToGetL4RulesListOutput() GetL4RulesListOutput {
	return i.ToGetL4RulesListOutputWithContext(context.Background())
}

func (i GetL4RulesListArgs) ToGetL4RulesListOutputWithContext(ctx context.Context) GetL4RulesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesListOutput)
}

// GetL4RulesListArrayInput is an input type that accepts GetL4RulesListArray and GetL4RulesListArrayOutput values.
// You can construct a concrete instance of `GetL4RulesListArrayInput` via:
//
//	GetL4RulesListArray{ GetL4RulesListArgs{...} }
type GetL4RulesListArrayInput interface {
	pulumi.Input

	ToGetL4RulesListArrayOutput() GetL4RulesListArrayOutput
	ToGetL4RulesListArrayOutputWithContext(context.Context) GetL4RulesListArrayOutput
}

type GetL4RulesListArray []GetL4RulesListInput

func (GetL4RulesListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesList)(nil)).Elem()
}

func (i GetL4RulesListArray) ToGetL4RulesListArrayOutput() GetL4RulesListArrayOutput {
	return i.ToGetL4RulesListArrayOutputWithContext(context.Background())
}

func (i GetL4RulesListArray) ToGetL4RulesListArrayOutputWithContext(ctx context.Context) GetL4RulesListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesListArrayOutput)
}

type GetL4RulesListOutput struct{ *pulumi.OutputState }

func (GetL4RulesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesList)(nil)).Elem()
}

func (o GetL4RulesListOutput) ToGetL4RulesListOutput() GetL4RulesListOutput {
	return o
}

func (o GetL4RulesListOutput) ToGetL4RulesListOutputWithContext(ctx context.Context) GetL4RulesListOutput {
	return o
}

// The destination port of the layer 4 rule.
func (o GetL4RulesListOutput) DPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.DPort }).(pulumi.IntOutput)
}

// Health threshold of health check.
func (o GetL4RulesListOutput) HealthCheckHealthNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.HealthCheckHealthNum }).(pulumi.IntOutput)
}

// Interval time of health check.
func (o GetL4RulesListOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// Indicates whether health check is enabled.
func (o GetL4RulesListOutput) HealthCheckSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetL4RulesList) bool { return v.HealthCheckSwitch }).(pulumi.BoolOutput)
}

// HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
func (o GetL4RulesListOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// Unhealthy threshold of health check.
func (o GetL4RulesListOutput) HealthCheckUnhealthNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.HealthCheckUnhealthNum }).(pulumi.IntOutput)
}

// LB type of the rule, `1` for weight cycling and `2` for IP hash.
func (o GetL4RulesListOutput) LbType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.LbType }).(pulumi.IntOutput)
}

// Name of the layer 4 rule to be queried.
func (o GetL4RulesListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesList) string { return v.Name }).(pulumi.StringOutput)
}

// Protocol of the rule.
func (o GetL4RulesListOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesList) string { return v.Protocol }).(pulumi.StringOutput)
}

// Id of the layer 4 rule to be queried.
func (o GetL4RulesListOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesList) string { return v.RuleId }).(pulumi.StringOutput)
}

// The source port of the layer 4 rule.
func (o GetL4RulesListOutput) SPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.SPort }).(pulumi.IntOutput)
}

// Indicate that the session will keep or not.
func (o GetL4RulesListOutput) SessionSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetL4RulesList) bool { return v.SessionSwitch }).(pulumi.BoolOutput)
}

// Session keep time, only valid when `sessionSwitch` is true, the available value ranges from 1 to 300 and unit is second.
func (o GetL4RulesListOutput) SessionTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.SessionTime }).(pulumi.IntOutput)
}

func (o GetL4RulesListOutput) SourceLists() GetL4RulesListSourceListArrayOutput {
	return o.ApplyT(func(v GetL4RulesList) []GetL4RulesListSourceList { return v.SourceLists }).(GetL4RulesListSourceListArrayOutput)
}

// Source type, `1` for source of host, `2` for source of IP.
func (o GetL4RulesListOutput) SourceType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesList) int { return v.SourceType }).(pulumi.IntOutput)
}

type GetL4RulesListArrayOutput struct{ *pulumi.OutputState }

func (GetL4RulesListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesList)(nil)).Elem()
}

func (o GetL4RulesListArrayOutput) ToGetL4RulesListArrayOutput() GetL4RulesListArrayOutput {
	return o
}

func (o GetL4RulesListArrayOutput) ToGetL4RulesListArrayOutputWithContext(ctx context.Context) GetL4RulesListArrayOutput {
	return o
}

func (o GetL4RulesListArrayOutput) Index(i pulumi.IntInput) GetL4RulesListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL4RulesList {
		return vs[0].([]GetL4RulesList)[vs[1].(int)]
	}).(GetL4RulesListOutput)
}

type GetL4RulesListSourceList struct {
	Source string `pulumi:"source"`
	Weight int    `pulumi:"weight"`
}

// GetL4RulesListSourceListInput is an input type that accepts GetL4RulesListSourceListArgs and GetL4RulesListSourceListOutput values.
// You can construct a concrete instance of `GetL4RulesListSourceListInput` via:
//
//	GetL4RulesListSourceListArgs{...}
type GetL4RulesListSourceListInput interface {
	pulumi.Input

	ToGetL4RulesListSourceListOutput() GetL4RulesListSourceListOutput
	ToGetL4RulesListSourceListOutputWithContext(context.Context) GetL4RulesListSourceListOutput
}

type GetL4RulesListSourceListArgs struct {
	Source pulumi.StringInput `pulumi:"source"`
	Weight pulumi.IntInput    `pulumi:"weight"`
}

func (GetL4RulesListSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesListSourceList)(nil)).Elem()
}

func (i GetL4RulesListSourceListArgs) ToGetL4RulesListSourceListOutput() GetL4RulesListSourceListOutput {
	return i.ToGetL4RulesListSourceListOutputWithContext(context.Background())
}

func (i GetL4RulesListSourceListArgs) ToGetL4RulesListSourceListOutputWithContext(ctx context.Context) GetL4RulesListSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesListSourceListOutput)
}

// GetL4RulesListSourceListArrayInput is an input type that accepts GetL4RulesListSourceListArray and GetL4RulesListSourceListArrayOutput values.
// You can construct a concrete instance of `GetL4RulesListSourceListArrayInput` via:
//
//	GetL4RulesListSourceListArray{ GetL4RulesListSourceListArgs{...} }
type GetL4RulesListSourceListArrayInput interface {
	pulumi.Input

	ToGetL4RulesListSourceListArrayOutput() GetL4RulesListSourceListArrayOutput
	ToGetL4RulesListSourceListArrayOutputWithContext(context.Context) GetL4RulesListSourceListArrayOutput
}

type GetL4RulesListSourceListArray []GetL4RulesListSourceListInput

func (GetL4RulesListSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesListSourceList)(nil)).Elem()
}

func (i GetL4RulesListSourceListArray) ToGetL4RulesListSourceListArrayOutput() GetL4RulesListSourceListArrayOutput {
	return i.ToGetL4RulesListSourceListArrayOutputWithContext(context.Background())
}

func (i GetL4RulesListSourceListArray) ToGetL4RulesListSourceListArrayOutputWithContext(ctx context.Context) GetL4RulesListSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesListSourceListArrayOutput)
}

type GetL4RulesListSourceListOutput struct{ *pulumi.OutputState }

func (GetL4RulesListSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesListSourceList)(nil)).Elem()
}

func (o GetL4RulesListSourceListOutput) ToGetL4RulesListSourceListOutput() GetL4RulesListSourceListOutput {
	return o
}

func (o GetL4RulesListSourceListOutput) ToGetL4RulesListSourceListOutputWithContext(ctx context.Context) GetL4RulesListSourceListOutput {
	return o
}

func (o GetL4RulesListSourceListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesListSourceList) string { return v.Source }).(pulumi.StringOutput)
}

func (o GetL4RulesListSourceListOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesListSourceList) int { return v.Weight }).(pulumi.IntOutput)
}

type GetL4RulesListSourceListArrayOutput struct{ *pulumi.OutputState }

func (GetL4RulesListSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesListSourceList)(nil)).Elem()
}

func (o GetL4RulesListSourceListArrayOutput) ToGetL4RulesListSourceListArrayOutput() GetL4RulesListSourceListArrayOutput {
	return o
}

func (o GetL4RulesListSourceListArrayOutput) ToGetL4RulesListSourceListArrayOutputWithContext(ctx context.Context) GetL4RulesListSourceListArrayOutput {
	return o
}

func (o GetL4RulesListSourceListArrayOutput) Index(i pulumi.IntInput) GetL4RulesListSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL4RulesListSourceList {
		return vs[0].([]GetL4RulesListSourceList)[vs[1].(int)]
	}).(GetL4RulesListSourceListOutput)
}

type GetL4RulesV2List struct {
	// Bind the resource ID information.
	Id string `pulumi:"id"`
	// Ip of the resource.
	Ip string `pulumi:"ip"`
	// session hold switch.
	KeepEnable bool `pulumi:"keepEnable"`
	// The keeptime of the layer 4 rule.
	Keeptime int `pulumi:"keeptime"`
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LbType int `pulumi:"lbType"`
	// Rule modification time.
	ModifyTime string `pulumi:"modifyTime"`
	// Protocol of the rule.
	Protocol string `pulumi:"protocol"`
	// Corresponding regional information.
	Region int `pulumi:"region"`
	// Remove the watermark state.
	RemoveSwitch bool `pulumi:"removeSwitch"`
	// ID of the 4 layer rule.
	RuleId string `pulumi:"ruleId"`
	// Name of the rule.
	RuleName    string                       `pulumi:"ruleName"`
	SourceLists []GetL4RulesV2ListSourceList `pulumi:"sourceLists"`
	// The source port of the layer 4 rule.
	SourcePort int `pulumi:"sourcePort"`
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType int `pulumi:"sourceType"`
	// Virtual port of resource.
	VirtualPort int `pulumi:"virtualPort"`
}

// GetL4RulesV2ListInput is an input type that accepts GetL4RulesV2ListArgs and GetL4RulesV2ListOutput values.
// You can construct a concrete instance of `GetL4RulesV2ListInput` via:
//
//	GetL4RulesV2ListArgs{...}
type GetL4RulesV2ListInput interface {
	pulumi.Input

	ToGetL4RulesV2ListOutput() GetL4RulesV2ListOutput
	ToGetL4RulesV2ListOutputWithContext(context.Context) GetL4RulesV2ListOutput
}

type GetL4RulesV2ListArgs struct {
	// Bind the resource ID information.
	Id pulumi.StringInput `pulumi:"id"`
	// Ip of the resource.
	Ip pulumi.StringInput `pulumi:"ip"`
	// session hold switch.
	KeepEnable pulumi.BoolInput `pulumi:"keepEnable"`
	// The keeptime of the layer 4 rule.
	Keeptime pulumi.IntInput `pulumi:"keeptime"`
	// LB type of the rule, `1` for weight cycling and `2` for IP hash.
	LbType pulumi.IntInput `pulumi:"lbType"`
	// Rule modification time.
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// Protocol of the rule.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Corresponding regional information.
	Region pulumi.IntInput `pulumi:"region"`
	// Remove the watermark state.
	RemoveSwitch pulumi.BoolInput `pulumi:"removeSwitch"`
	// ID of the 4 layer rule.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// Name of the rule.
	RuleName    pulumi.StringInput                   `pulumi:"ruleName"`
	SourceLists GetL4RulesV2ListSourceListArrayInput `pulumi:"sourceLists"`
	// The source port of the layer 4 rule.
	SourcePort pulumi.IntInput `pulumi:"sourcePort"`
	// Source type, `1` for source of host, `2` for source of IP.
	SourceType pulumi.IntInput `pulumi:"sourceType"`
	// Virtual port of resource.
	VirtualPort pulumi.IntInput `pulumi:"virtualPort"`
}

func (GetL4RulesV2ListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesV2List)(nil)).Elem()
}

func (i GetL4RulesV2ListArgs) ToGetL4RulesV2ListOutput() GetL4RulesV2ListOutput {
	return i.ToGetL4RulesV2ListOutputWithContext(context.Background())
}

func (i GetL4RulesV2ListArgs) ToGetL4RulesV2ListOutputWithContext(ctx context.Context) GetL4RulesV2ListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesV2ListOutput)
}

// GetL4RulesV2ListArrayInput is an input type that accepts GetL4RulesV2ListArray and GetL4RulesV2ListArrayOutput values.
// You can construct a concrete instance of `GetL4RulesV2ListArrayInput` via:
//
//	GetL4RulesV2ListArray{ GetL4RulesV2ListArgs{...} }
type GetL4RulesV2ListArrayInput interface {
	pulumi.Input

	ToGetL4RulesV2ListArrayOutput() GetL4RulesV2ListArrayOutput
	ToGetL4RulesV2ListArrayOutputWithContext(context.Context) GetL4RulesV2ListArrayOutput
}

type GetL4RulesV2ListArray []GetL4RulesV2ListInput

func (GetL4RulesV2ListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesV2List)(nil)).Elem()
}

func (i GetL4RulesV2ListArray) ToGetL4RulesV2ListArrayOutput() GetL4RulesV2ListArrayOutput {
	return i.ToGetL4RulesV2ListArrayOutputWithContext(context.Background())
}

func (i GetL4RulesV2ListArray) ToGetL4RulesV2ListArrayOutputWithContext(ctx context.Context) GetL4RulesV2ListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesV2ListArrayOutput)
}

type GetL4RulesV2ListOutput struct{ *pulumi.OutputState }

func (GetL4RulesV2ListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesV2List)(nil)).Elem()
}

func (o GetL4RulesV2ListOutput) ToGetL4RulesV2ListOutput() GetL4RulesV2ListOutput {
	return o
}

func (o GetL4RulesV2ListOutput) ToGetL4RulesV2ListOutputWithContext(ctx context.Context) GetL4RulesV2ListOutput {
	return o
}

// Bind the resource ID information.
func (o GetL4RulesV2ListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2List) string { return v.Id }).(pulumi.StringOutput)
}

// Ip of the resource.
func (o GetL4RulesV2ListOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2List) string { return v.Ip }).(pulumi.StringOutput)
}

// session hold switch.
func (o GetL4RulesV2ListOutput) KeepEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetL4RulesV2List) bool { return v.KeepEnable }).(pulumi.BoolOutput)
}

// The keeptime of the layer 4 rule.
func (o GetL4RulesV2ListOutput) Keeptime() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2List) int { return v.Keeptime }).(pulumi.IntOutput)
}

// LB type of the rule, `1` for weight cycling and `2` for IP hash.
func (o GetL4RulesV2ListOutput) LbType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2List) int { return v.LbType }).(pulumi.IntOutput)
}

// Rule modification time.
func (o GetL4RulesV2ListOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2List) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// Protocol of the rule.
func (o GetL4RulesV2ListOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2List) string { return v.Protocol }).(pulumi.StringOutput)
}

// Corresponding regional information.
func (o GetL4RulesV2ListOutput) Region() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2List) int { return v.Region }).(pulumi.IntOutput)
}

// Remove the watermark state.
func (o GetL4RulesV2ListOutput) RemoveSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetL4RulesV2List) bool { return v.RemoveSwitch }).(pulumi.BoolOutput)
}

// ID of the 4 layer rule.
func (o GetL4RulesV2ListOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2List) string { return v.RuleId }).(pulumi.StringOutput)
}

// Name of the rule.
func (o GetL4RulesV2ListOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2List) string { return v.RuleName }).(pulumi.StringOutput)
}

func (o GetL4RulesV2ListOutput) SourceLists() GetL4RulesV2ListSourceListArrayOutput {
	return o.ApplyT(func(v GetL4RulesV2List) []GetL4RulesV2ListSourceList { return v.SourceLists }).(GetL4RulesV2ListSourceListArrayOutput)
}

// The source port of the layer 4 rule.
func (o GetL4RulesV2ListOutput) SourcePort() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2List) int { return v.SourcePort }).(pulumi.IntOutput)
}

// Source type, `1` for source of host, `2` for source of IP.
func (o GetL4RulesV2ListOutput) SourceType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2List) int { return v.SourceType }).(pulumi.IntOutput)
}

// Virtual port of resource.
func (o GetL4RulesV2ListOutput) VirtualPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2List) int { return v.VirtualPort }).(pulumi.IntOutput)
}

type GetL4RulesV2ListArrayOutput struct{ *pulumi.OutputState }

func (GetL4RulesV2ListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesV2List)(nil)).Elem()
}

func (o GetL4RulesV2ListArrayOutput) ToGetL4RulesV2ListArrayOutput() GetL4RulesV2ListArrayOutput {
	return o
}

func (o GetL4RulesV2ListArrayOutput) ToGetL4RulesV2ListArrayOutputWithContext(ctx context.Context) GetL4RulesV2ListArrayOutput {
	return o
}

func (o GetL4RulesV2ListArrayOutput) Index(i pulumi.IntInput) GetL4RulesV2ListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL4RulesV2List {
		return vs[0].([]GetL4RulesV2List)[vs[1].(int)]
	}).(GetL4RulesV2ListOutput)
}

type GetL4RulesV2ListSourceList struct {
	Source string `pulumi:"source"`
	Weight int    `pulumi:"weight"`
}

// GetL4RulesV2ListSourceListInput is an input type that accepts GetL4RulesV2ListSourceListArgs and GetL4RulesV2ListSourceListOutput values.
// You can construct a concrete instance of `GetL4RulesV2ListSourceListInput` via:
//
//	GetL4RulesV2ListSourceListArgs{...}
type GetL4RulesV2ListSourceListInput interface {
	pulumi.Input

	ToGetL4RulesV2ListSourceListOutput() GetL4RulesV2ListSourceListOutput
	ToGetL4RulesV2ListSourceListOutputWithContext(context.Context) GetL4RulesV2ListSourceListOutput
}

type GetL4RulesV2ListSourceListArgs struct {
	Source pulumi.StringInput `pulumi:"source"`
	Weight pulumi.IntInput    `pulumi:"weight"`
}

func (GetL4RulesV2ListSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesV2ListSourceList)(nil)).Elem()
}

func (i GetL4RulesV2ListSourceListArgs) ToGetL4RulesV2ListSourceListOutput() GetL4RulesV2ListSourceListOutput {
	return i.ToGetL4RulesV2ListSourceListOutputWithContext(context.Background())
}

func (i GetL4RulesV2ListSourceListArgs) ToGetL4RulesV2ListSourceListOutputWithContext(ctx context.Context) GetL4RulesV2ListSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesV2ListSourceListOutput)
}

// GetL4RulesV2ListSourceListArrayInput is an input type that accepts GetL4RulesV2ListSourceListArray and GetL4RulesV2ListSourceListArrayOutput values.
// You can construct a concrete instance of `GetL4RulesV2ListSourceListArrayInput` via:
//
//	GetL4RulesV2ListSourceListArray{ GetL4RulesV2ListSourceListArgs{...} }
type GetL4RulesV2ListSourceListArrayInput interface {
	pulumi.Input

	ToGetL4RulesV2ListSourceListArrayOutput() GetL4RulesV2ListSourceListArrayOutput
	ToGetL4RulesV2ListSourceListArrayOutputWithContext(context.Context) GetL4RulesV2ListSourceListArrayOutput
}

type GetL4RulesV2ListSourceListArray []GetL4RulesV2ListSourceListInput

func (GetL4RulesV2ListSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesV2ListSourceList)(nil)).Elem()
}

func (i GetL4RulesV2ListSourceListArray) ToGetL4RulesV2ListSourceListArrayOutput() GetL4RulesV2ListSourceListArrayOutput {
	return i.ToGetL4RulesV2ListSourceListArrayOutputWithContext(context.Background())
}

func (i GetL4RulesV2ListSourceListArray) ToGetL4RulesV2ListSourceListArrayOutputWithContext(ctx context.Context) GetL4RulesV2ListSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL4RulesV2ListSourceListArrayOutput)
}

type GetL4RulesV2ListSourceListOutput struct{ *pulumi.OutputState }

func (GetL4RulesV2ListSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL4RulesV2ListSourceList)(nil)).Elem()
}

func (o GetL4RulesV2ListSourceListOutput) ToGetL4RulesV2ListSourceListOutput() GetL4RulesV2ListSourceListOutput {
	return o
}

func (o GetL4RulesV2ListSourceListOutput) ToGetL4RulesV2ListSourceListOutputWithContext(ctx context.Context) GetL4RulesV2ListSourceListOutput {
	return o
}

func (o GetL4RulesV2ListSourceListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetL4RulesV2ListSourceList) string { return v.Source }).(pulumi.StringOutput)
}

func (o GetL4RulesV2ListSourceListOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetL4RulesV2ListSourceList) int { return v.Weight }).(pulumi.IntOutput)
}

type GetL4RulesV2ListSourceListArrayOutput struct{ *pulumi.OutputState }

func (GetL4RulesV2ListSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL4RulesV2ListSourceList)(nil)).Elem()
}

func (o GetL4RulesV2ListSourceListArrayOutput) ToGetL4RulesV2ListSourceListArrayOutput() GetL4RulesV2ListSourceListArrayOutput {
	return o
}

func (o GetL4RulesV2ListSourceListArrayOutput) ToGetL4RulesV2ListSourceListArrayOutputWithContext(ctx context.Context) GetL4RulesV2ListSourceListArrayOutput {
	return o
}

func (o GetL4RulesV2ListSourceListArrayOutput) Index(i pulumi.IntInput) GetL4RulesV2ListSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL4RulesV2ListSourceList {
		return vs[0].([]GetL4RulesV2ListSourceList)[vs[1].(int)]
	}).(GetL4RulesV2ListSourceListOutput)
}

type GetL7RulesList struct {
	// Domain of the layer 7 rule to be queried.
	Domain string `pulumi:"domain"`
	// HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
	HealthCheckCode int `pulumi:"healthCheckCode"`
	// Health threshold of health check.
	HealthCheckHealthNum int `pulumi:"healthCheckHealthNum"`
	// Interval time of health check.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// Methods of health check.
	HealthCheckMethod string `pulumi:"healthCheckMethod"`
	// Path of health check.
	HealthCheckPath string `pulumi:"healthCheckPath"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch bool `pulumi:"healthCheckSwitch"`
	// Unhealthy threshold of health check.
	HealthCheckUnhealthNum int `pulumi:"healthCheckUnhealthNum"`
	// Name of the rule.
	Name string `pulumi:"name"`
	// Protocol of the rule.
	Protocol string `pulumi:"protocol"`
	// Id of the layer 7 rule to be queried.
	RuleId string `pulumi:"ruleId"`
	// Source list of the rule.
	SourceLists []string `pulumi:"sourceLists"`
	// Source type, 1 for source of host, 2 for source of ip.
	SourceType int `pulumi:"sourceType"`
	// SSL id.
	SslId string `pulumi:"sslId"`
	// Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for waiting to be created/modified, `7` for waiting to be deleted and `8` for waiting to get SSL id.
	Status int `pulumi:"status"`
	// Indicate the rule will take effect or not.
	Switch bool `pulumi:"switch"`
	// Threshold of the rule.
	Threshold int `pulumi:"threshold"`
}

// GetL7RulesListInput is an input type that accepts GetL7RulesListArgs and GetL7RulesListOutput values.
// You can construct a concrete instance of `GetL7RulesListInput` via:
//
//	GetL7RulesListArgs{...}
type GetL7RulesListInput interface {
	pulumi.Input

	ToGetL7RulesListOutput() GetL7RulesListOutput
	ToGetL7RulesListOutputWithContext(context.Context) GetL7RulesListOutput
}

type GetL7RulesListArgs struct {
	// Domain of the layer 7 rule to be queried.
	Domain pulumi.StringInput `pulumi:"domain"`
	// HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
	HealthCheckCode pulumi.IntInput `pulumi:"healthCheckCode"`
	// Health threshold of health check.
	HealthCheckHealthNum pulumi.IntInput `pulumi:"healthCheckHealthNum"`
	// Interval time of health check.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// Methods of health check.
	HealthCheckMethod pulumi.StringInput `pulumi:"healthCheckMethod"`
	// Path of health check.
	HealthCheckPath pulumi.StringInput `pulumi:"healthCheckPath"`
	// Indicates whether health check is enabled.
	HealthCheckSwitch pulumi.BoolInput `pulumi:"healthCheckSwitch"`
	// Unhealthy threshold of health check.
	HealthCheckUnhealthNum pulumi.IntInput `pulumi:"healthCheckUnhealthNum"`
	// Name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Protocol of the rule.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// Id of the layer 7 rule to be queried.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// Source list of the rule.
	SourceLists pulumi.StringArrayInput `pulumi:"sourceLists"`
	// Source type, 1 for source of host, 2 for source of ip.
	SourceType pulumi.IntInput `pulumi:"sourceType"`
	// SSL id.
	SslId pulumi.StringInput `pulumi:"sslId"`
	// Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for waiting to be created/modified, `7` for waiting to be deleted and `8` for waiting to get SSL id.
	Status pulumi.IntInput `pulumi:"status"`
	// Indicate the rule will take effect or not.
	Switch pulumi.BoolInput `pulumi:"switch"`
	// Threshold of the rule.
	Threshold pulumi.IntInput `pulumi:"threshold"`
}

func (GetL7RulesListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7RulesList)(nil)).Elem()
}

func (i GetL7RulesListArgs) ToGetL7RulesListOutput() GetL7RulesListOutput {
	return i.ToGetL7RulesListOutputWithContext(context.Background())
}

func (i GetL7RulesListArgs) ToGetL7RulesListOutputWithContext(ctx context.Context) GetL7RulesListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL7RulesListOutput)
}

// GetL7RulesListArrayInput is an input type that accepts GetL7RulesListArray and GetL7RulesListArrayOutput values.
// You can construct a concrete instance of `GetL7RulesListArrayInput` via:
//
//	GetL7RulesListArray{ GetL7RulesListArgs{...} }
type GetL7RulesListArrayInput interface {
	pulumi.Input

	ToGetL7RulesListArrayOutput() GetL7RulesListArrayOutput
	ToGetL7RulesListArrayOutputWithContext(context.Context) GetL7RulesListArrayOutput
}

type GetL7RulesListArray []GetL7RulesListInput

func (GetL7RulesListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL7RulesList)(nil)).Elem()
}

func (i GetL7RulesListArray) ToGetL7RulesListArrayOutput() GetL7RulesListArrayOutput {
	return i.ToGetL7RulesListArrayOutputWithContext(context.Background())
}

func (i GetL7RulesListArray) ToGetL7RulesListArrayOutputWithContext(ctx context.Context) GetL7RulesListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL7RulesListArrayOutput)
}

type GetL7RulesListOutput struct{ *pulumi.OutputState }

func (GetL7RulesListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7RulesList)(nil)).Elem()
}

func (o GetL7RulesListOutput) ToGetL7RulesListOutput() GetL7RulesListOutput {
	return o
}

func (o GetL7RulesListOutput) ToGetL7RulesListOutputWithContext(ctx context.Context) GetL7RulesListOutput {
	return o
}

// Domain of the layer 7 rule to be queried.
func (o GetL7RulesListOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.Domain }).(pulumi.StringOutput)
}

// HTTP Status Code. `1` means the return value `1xx` is health. `2` means the return value `2xx` is health. `4` means the return value `3xx` is health. `8` means the return value `4xx` is health. `16` means the return value `5xx` is health. If you want multiple return codes to indicate health, need to add the corresponding values.
func (o GetL7RulesListOutput) HealthCheckCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.HealthCheckCode }).(pulumi.IntOutput)
}

// Health threshold of health check.
func (o GetL7RulesListOutput) HealthCheckHealthNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.HealthCheckHealthNum }).(pulumi.IntOutput)
}

// Interval time of health check.
func (o GetL7RulesListOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// Methods of health check.
func (o GetL7RulesListOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// Path of health check.
func (o GetL7RulesListOutput) HealthCheckPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.HealthCheckPath }).(pulumi.StringOutput)
}

// Indicates whether health check is enabled.
func (o GetL7RulesListOutput) HealthCheckSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetL7RulesList) bool { return v.HealthCheckSwitch }).(pulumi.BoolOutput)
}

// Unhealthy threshold of health check.
func (o GetL7RulesListOutput) HealthCheckUnhealthNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.HealthCheckUnhealthNum }).(pulumi.IntOutput)
}

// Name of the rule.
func (o GetL7RulesListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.Name }).(pulumi.StringOutput)
}

// Protocol of the rule.
func (o GetL7RulesListOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.Protocol }).(pulumi.StringOutput)
}

// Id of the layer 7 rule to be queried.
func (o GetL7RulesListOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.RuleId }).(pulumi.StringOutput)
}

// Source list of the rule.
func (o GetL7RulesListOutput) SourceLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetL7RulesList) []string { return v.SourceLists }).(pulumi.StringArrayOutput)
}

// Source type, 1 for source of host, 2 for source of ip.
func (o GetL7RulesListOutput) SourceType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.SourceType }).(pulumi.IntOutput)
}

// SSL id.
func (o GetL7RulesListOutput) SslId() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesList) string { return v.SslId }).(pulumi.StringOutput)
}

// Status of the rule. `0` for create/modify success, `2` for create/modify fail, `3` for delete success, `5` for waiting to be created/modified, `7` for waiting to be deleted and `8` for waiting to get SSL id.
func (o GetL7RulesListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.Status }).(pulumi.IntOutput)
}

// Indicate the rule will take effect or not.
func (o GetL7RulesListOutput) Switch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetL7RulesList) bool { return v.Switch }).(pulumi.BoolOutput)
}

// Threshold of the rule.
func (o GetL7RulesListOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesList) int { return v.Threshold }).(pulumi.IntOutput)
}

type GetL7RulesListArrayOutput struct{ *pulumi.OutputState }

func (GetL7RulesListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL7RulesList)(nil)).Elem()
}

func (o GetL7RulesListArrayOutput) ToGetL7RulesListArrayOutput() GetL7RulesListArrayOutput {
	return o
}

func (o GetL7RulesListArrayOutput) ToGetL7RulesListArrayOutputWithContext(ctx context.Context) GetL7RulesListArrayOutput {
	return o
}

func (o GetL7RulesListArrayOutput) Index(i pulumi.IntInput) GetL7RulesListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL7RulesList {
		return vs[0].([]GetL7RulesList)[vs[1].(int)]
	}).(GetL7RulesListOutput)
}

type GetL7RulesV2List struct {
	// CC protection status of HTTPS protocol, the value is [0 (off), 1 (on)].
	CcEnable int `pulumi:"ccEnable"`
	// CC protection level of HTTPS protocol.
	CcLevel string `pulumi:"ccLevel"`
	// CC protection status, value [0(off), 1(on)].
	CcStatus int `pulumi:"ccStatus"`
	// CC protection threshold of HTTPS protocol.
	CcThreshold int `pulumi:"ccThreshold"`
	// The source of the certificate.
	CertType int `pulumi:"certType"`
	// Domain of resource.
	Domain string `pulumi:"domain"`
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], default is off.
	HttpsToHttpEnable int `pulumi:"httpsToHttpEnable"`
	// Id of the resource.
	Id string `pulumi:"id"`
	// Ip of the resource.
	Ip string `pulumi:"ip"`
	// Session keep switch, value [0 (session keep closed), 1 (session keep open)].
	KeepEnable int `pulumi:"keepEnable"`
	// Session hold time, in seconds.
	KeepTime int `pulumi:"keepTime"`
	// Load balancing mode, the value is [1 (weighted round-robin)].
	LbType int `pulumi:"lbType"`
	// Modify time of resource.
	ModifyTime string `pulumi:"modifyTime"`
	// Protocol of resource, value range [`http`, `https`].
	Protocol string `pulumi:"protocol"`
	// The area code.
	Region int `pulumi:"region"`
	// Rule description.
	RuleName string `pulumi:"ruleName"`
	// Source list of the rule.
	SourceLists []GetL7RulesV2ListSourceList `pulumi:"sourceLists"`
	// Back-to-origin method, value [1 (domain name back-to-source), 2 (IP back-to-source)].
	SourceType int `pulumi:"sourceType"`
	// SSL id of the resource.
	SslId string `pulumi:"sslId"`
	// Rule status, value [0 (rule configuration is successful), 1 (rule configuration is in effect), 2 (rule configuration fails), 3 (rule deletion is in effect), 5 (rule deletion fails), 6 (rule is waiting to be configured), 7 (rule pending deletion), 8 (rule pending configuration certificate)].
	Status int `pulumi:"status"`
	// Virtual port of resource.
	VirtualPort int `pulumi:"virtualPort"`
}

// GetL7RulesV2ListInput is an input type that accepts GetL7RulesV2ListArgs and GetL7RulesV2ListOutput values.
// You can construct a concrete instance of `GetL7RulesV2ListInput` via:
//
//	GetL7RulesV2ListArgs{...}
type GetL7RulesV2ListInput interface {
	pulumi.Input

	ToGetL7RulesV2ListOutput() GetL7RulesV2ListOutput
	ToGetL7RulesV2ListOutputWithContext(context.Context) GetL7RulesV2ListOutput
}

type GetL7RulesV2ListArgs struct {
	// CC protection status of HTTPS protocol, the value is [0 (off), 1 (on)].
	CcEnable pulumi.IntInput `pulumi:"ccEnable"`
	// CC protection level of HTTPS protocol.
	CcLevel pulumi.StringInput `pulumi:"ccLevel"`
	// CC protection status, value [0(off), 1(on)].
	CcStatus pulumi.IntInput `pulumi:"ccStatus"`
	// CC protection threshold of HTTPS protocol.
	CcThreshold pulumi.IntInput `pulumi:"ccThreshold"`
	// The source of the certificate.
	CertType pulumi.IntInput `pulumi:"certType"`
	// Domain of resource.
	Domain pulumi.StringInput `pulumi:"domain"`
	// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], default is off.
	HttpsToHttpEnable pulumi.IntInput `pulumi:"httpsToHttpEnable"`
	// Id of the resource.
	Id pulumi.StringInput `pulumi:"id"`
	// Ip of the resource.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Session keep switch, value [0 (session keep closed), 1 (session keep open)].
	KeepEnable pulumi.IntInput `pulumi:"keepEnable"`
	// Session hold time, in seconds.
	KeepTime pulumi.IntInput `pulumi:"keepTime"`
	// Load balancing mode, the value is [1 (weighted round-robin)].
	LbType pulumi.IntInput `pulumi:"lbType"`
	// Modify time of resource.
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// Protocol of resource, value range [`http`, `https`].
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The area code.
	Region pulumi.IntInput `pulumi:"region"`
	// Rule description.
	RuleName pulumi.StringInput `pulumi:"ruleName"`
	// Source list of the rule.
	SourceLists GetL7RulesV2ListSourceListArrayInput `pulumi:"sourceLists"`
	// Back-to-origin method, value [1 (domain name back-to-source), 2 (IP back-to-source)].
	SourceType pulumi.IntInput `pulumi:"sourceType"`
	// SSL id of the resource.
	SslId pulumi.StringInput `pulumi:"sslId"`
	// Rule status, value [0 (rule configuration is successful), 1 (rule configuration is in effect), 2 (rule configuration fails), 3 (rule deletion is in effect), 5 (rule deletion fails), 6 (rule is waiting to be configured), 7 (rule pending deletion), 8 (rule pending configuration certificate)].
	Status pulumi.IntInput `pulumi:"status"`
	// Virtual port of resource.
	VirtualPort pulumi.IntInput `pulumi:"virtualPort"`
}

func (GetL7RulesV2ListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7RulesV2List)(nil)).Elem()
}

func (i GetL7RulesV2ListArgs) ToGetL7RulesV2ListOutput() GetL7RulesV2ListOutput {
	return i.ToGetL7RulesV2ListOutputWithContext(context.Background())
}

func (i GetL7RulesV2ListArgs) ToGetL7RulesV2ListOutputWithContext(ctx context.Context) GetL7RulesV2ListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL7RulesV2ListOutput)
}

// GetL7RulesV2ListArrayInput is an input type that accepts GetL7RulesV2ListArray and GetL7RulesV2ListArrayOutput values.
// You can construct a concrete instance of `GetL7RulesV2ListArrayInput` via:
//
//	GetL7RulesV2ListArray{ GetL7RulesV2ListArgs{...} }
type GetL7RulesV2ListArrayInput interface {
	pulumi.Input

	ToGetL7RulesV2ListArrayOutput() GetL7RulesV2ListArrayOutput
	ToGetL7RulesV2ListArrayOutputWithContext(context.Context) GetL7RulesV2ListArrayOutput
}

type GetL7RulesV2ListArray []GetL7RulesV2ListInput

func (GetL7RulesV2ListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL7RulesV2List)(nil)).Elem()
}

func (i GetL7RulesV2ListArray) ToGetL7RulesV2ListArrayOutput() GetL7RulesV2ListArrayOutput {
	return i.ToGetL7RulesV2ListArrayOutputWithContext(context.Background())
}

func (i GetL7RulesV2ListArray) ToGetL7RulesV2ListArrayOutputWithContext(ctx context.Context) GetL7RulesV2ListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL7RulesV2ListArrayOutput)
}

type GetL7RulesV2ListOutput struct{ *pulumi.OutputState }

func (GetL7RulesV2ListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7RulesV2List)(nil)).Elem()
}

func (o GetL7RulesV2ListOutput) ToGetL7RulesV2ListOutput() GetL7RulesV2ListOutput {
	return o
}

func (o GetL7RulesV2ListOutput) ToGetL7RulesV2ListOutputWithContext(ctx context.Context) GetL7RulesV2ListOutput {
	return o
}

// CC protection status of HTTPS protocol, the value is [0 (off), 1 (on)].
func (o GetL7RulesV2ListOutput) CcEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.CcEnable }).(pulumi.IntOutput)
}

// CC protection level of HTTPS protocol.
func (o GetL7RulesV2ListOutput) CcLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.CcLevel }).(pulumi.StringOutput)
}

// CC protection status, value [0(off), 1(on)].
func (o GetL7RulesV2ListOutput) CcStatus() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.CcStatus }).(pulumi.IntOutput)
}

// CC protection threshold of HTTPS protocol.
func (o GetL7RulesV2ListOutput) CcThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.CcThreshold }).(pulumi.IntOutput)
}

// The source of the certificate.
func (o GetL7RulesV2ListOutput) CertType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.CertType }).(pulumi.IntOutput)
}

// Domain of resource.
func (o GetL7RulesV2ListOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.Domain }).(pulumi.StringOutput)
}

// Whether to enable the Https protocol to use Http back-to-source, take the value [0 (off), 1 (on)], default is off.
func (o GetL7RulesV2ListOutput) HttpsToHttpEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.HttpsToHttpEnable }).(pulumi.IntOutput)
}

// Id of the resource.
func (o GetL7RulesV2ListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.Id }).(pulumi.StringOutput)
}

// Ip of the resource.
func (o GetL7RulesV2ListOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.Ip }).(pulumi.StringOutput)
}

// Session keep switch, value [0 (session keep closed), 1 (session keep open)].
func (o GetL7RulesV2ListOutput) KeepEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.KeepEnable }).(pulumi.IntOutput)
}

// Session hold time, in seconds.
func (o GetL7RulesV2ListOutput) KeepTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.KeepTime }).(pulumi.IntOutput)
}

// Load balancing mode, the value is [1 (weighted round-robin)].
func (o GetL7RulesV2ListOutput) LbType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.LbType }).(pulumi.IntOutput)
}

// Modify time of resource.
func (o GetL7RulesV2ListOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// Protocol of resource, value range [`http`, `https`].
func (o GetL7RulesV2ListOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.Protocol }).(pulumi.StringOutput)
}

// The area code.
func (o GetL7RulesV2ListOutput) Region() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.Region }).(pulumi.IntOutput)
}

// Rule description.
func (o GetL7RulesV2ListOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.RuleName }).(pulumi.StringOutput)
}

// Source list of the rule.
func (o GetL7RulesV2ListOutput) SourceLists() GetL7RulesV2ListSourceListArrayOutput {
	return o.ApplyT(func(v GetL7RulesV2List) []GetL7RulesV2ListSourceList { return v.SourceLists }).(GetL7RulesV2ListSourceListArrayOutput)
}

// Back-to-origin method, value [1 (domain name back-to-source), 2 (IP back-to-source)].
func (o GetL7RulesV2ListOutput) SourceType() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.SourceType }).(pulumi.IntOutput)
}

// SSL id of the resource.
func (o GetL7RulesV2ListOutput) SslId() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2List) string { return v.SslId }).(pulumi.StringOutput)
}

// Rule status, value [0 (rule configuration is successful), 1 (rule configuration is in effect), 2 (rule configuration fails), 3 (rule deletion is in effect), 5 (rule deletion fails), 6 (rule is waiting to be configured), 7 (rule pending deletion), 8 (rule pending configuration certificate)].
func (o GetL7RulesV2ListOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.Status }).(pulumi.IntOutput)
}

// Virtual port of resource.
func (o GetL7RulesV2ListOutput) VirtualPort() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2List) int { return v.VirtualPort }).(pulumi.IntOutput)
}

type GetL7RulesV2ListArrayOutput struct{ *pulumi.OutputState }

func (GetL7RulesV2ListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL7RulesV2List)(nil)).Elem()
}

func (o GetL7RulesV2ListArrayOutput) ToGetL7RulesV2ListArrayOutput() GetL7RulesV2ListArrayOutput {
	return o
}

func (o GetL7RulesV2ListArrayOutput) ToGetL7RulesV2ListArrayOutputWithContext(ctx context.Context) GetL7RulesV2ListArrayOutput {
	return o
}

func (o GetL7RulesV2ListArrayOutput) Index(i pulumi.IntInput) GetL7RulesV2ListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL7RulesV2List {
		return vs[0].([]GetL7RulesV2List)[vs[1].(int)]
	}).(GetL7RulesV2ListOutput)
}

type GetL7RulesV2ListSourceList struct {
	// Back-to-source IP or domain name.
	Source string `pulumi:"source"`
	// Weight value, take value [0,100].
	Weight int `pulumi:"weight"`
}

// GetL7RulesV2ListSourceListInput is an input type that accepts GetL7RulesV2ListSourceListArgs and GetL7RulesV2ListSourceListOutput values.
// You can construct a concrete instance of `GetL7RulesV2ListSourceListInput` via:
//
//	GetL7RulesV2ListSourceListArgs{...}
type GetL7RulesV2ListSourceListInput interface {
	pulumi.Input

	ToGetL7RulesV2ListSourceListOutput() GetL7RulesV2ListSourceListOutput
	ToGetL7RulesV2ListSourceListOutputWithContext(context.Context) GetL7RulesV2ListSourceListOutput
}

type GetL7RulesV2ListSourceListArgs struct {
	// Back-to-source IP or domain name.
	Source pulumi.StringInput `pulumi:"source"`
	// Weight value, take value [0,100].
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetL7RulesV2ListSourceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7RulesV2ListSourceList)(nil)).Elem()
}

func (i GetL7RulesV2ListSourceListArgs) ToGetL7RulesV2ListSourceListOutput() GetL7RulesV2ListSourceListOutput {
	return i.ToGetL7RulesV2ListSourceListOutputWithContext(context.Background())
}

func (i GetL7RulesV2ListSourceListArgs) ToGetL7RulesV2ListSourceListOutputWithContext(ctx context.Context) GetL7RulesV2ListSourceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL7RulesV2ListSourceListOutput)
}

// GetL7RulesV2ListSourceListArrayInput is an input type that accepts GetL7RulesV2ListSourceListArray and GetL7RulesV2ListSourceListArrayOutput values.
// You can construct a concrete instance of `GetL7RulesV2ListSourceListArrayInput` via:
//
//	GetL7RulesV2ListSourceListArray{ GetL7RulesV2ListSourceListArgs{...} }
type GetL7RulesV2ListSourceListArrayInput interface {
	pulumi.Input

	ToGetL7RulesV2ListSourceListArrayOutput() GetL7RulesV2ListSourceListArrayOutput
	ToGetL7RulesV2ListSourceListArrayOutputWithContext(context.Context) GetL7RulesV2ListSourceListArrayOutput
}

type GetL7RulesV2ListSourceListArray []GetL7RulesV2ListSourceListInput

func (GetL7RulesV2ListSourceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL7RulesV2ListSourceList)(nil)).Elem()
}

func (i GetL7RulesV2ListSourceListArray) ToGetL7RulesV2ListSourceListArrayOutput() GetL7RulesV2ListSourceListArrayOutput {
	return i.ToGetL7RulesV2ListSourceListArrayOutputWithContext(context.Background())
}

func (i GetL7RulesV2ListSourceListArray) ToGetL7RulesV2ListSourceListArrayOutputWithContext(ctx context.Context) GetL7RulesV2ListSourceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetL7RulesV2ListSourceListArrayOutput)
}

type GetL7RulesV2ListSourceListOutput struct{ *pulumi.OutputState }

func (GetL7RulesV2ListSourceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetL7RulesV2ListSourceList)(nil)).Elem()
}

func (o GetL7RulesV2ListSourceListOutput) ToGetL7RulesV2ListSourceListOutput() GetL7RulesV2ListSourceListOutput {
	return o
}

func (o GetL7RulesV2ListSourceListOutput) ToGetL7RulesV2ListSourceListOutputWithContext(ctx context.Context) GetL7RulesV2ListSourceListOutput {
	return o
}

// Back-to-source IP or domain name.
func (o GetL7RulesV2ListSourceListOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetL7RulesV2ListSourceList) string { return v.Source }).(pulumi.StringOutput)
}

// Weight value, take value [0,100].
func (o GetL7RulesV2ListSourceListOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetL7RulesV2ListSourceList) int { return v.Weight }).(pulumi.IntOutput)
}

type GetL7RulesV2ListSourceListArrayOutput struct{ *pulumi.OutputState }

func (GetL7RulesV2ListSourceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetL7RulesV2ListSourceList)(nil)).Elem()
}

func (o GetL7RulesV2ListSourceListArrayOutput) ToGetL7RulesV2ListSourceListArrayOutput() GetL7RulesV2ListSourceListArrayOutput {
	return o
}

func (o GetL7RulesV2ListSourceListArrayOutput) ToGetL7RulesV2ListSourceListArrayOutputWithContext(ctx context.Context) GetL7RulesV2ListSourceListArrayOutput {
	return o
}

func (o GetL7RulesV2ListSourceListArrayOutput) Index(i pulumi.IntInput) GetL7RulesV2ListSourceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetL7RulesV2ListSourceList {
		return vs[0].([]GetL7RulesV2ListSourceList)[vs[1].(int)]
	}).(GetL7RulesV2ListSourceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcHttpPolicyRuleListInput)(nil)).Elem(), CcHttpPolicyRuleListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcHttpPolicyRuleListArrayInput)(nil)).Elem(), CcHttpPolicyRuleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcHttpsPolicyRuleListInput)(nil)).Elem(), CcHttpsPolicyRuleListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcHttpsPolicyRuleListArrayInput)(nil)).Elem(), CcHttpsPolicyRuleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcBlackWhiteIpInput)(nil)).Elem(), CcPolicyV2CcBlackWhiteIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcBlackWhiteIpArrayInput)(nil)).Elem(), CcPolicyV2CcBlackWhiteIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcGeoIpPolicyInput)(nil)).Elem(), CcPolicyV2CcGeoIpPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcGeoIpPolicyArrayInput)(nil)).Elem(), CcPolicyV2CcGeoIpPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionPolicyInput)(nil)).Elem(), CcPolicyV2CcPrecisionPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionPolicyArrayInput)(nil)).Elem(), CcPolicyV2CcPrecisionPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionPolicyPolicyInput)(nil)).Elem(), CcPolicyV2CcPrecisionPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionPolicyPolicyArrayInput)(nil)).Elem(), CcPolicyV2CcPrecisionPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimitInput)(nil)).Elem(), CcPolicyV2CcPrecisionReqLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimitArrayInput)(nil)).Elem(), CcPolicyV2CcPrecisionReqLimitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimitPolicyInput)(nil)).Elem(), CcPolicyV2CcPrecisionReqLimitPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2CcPrecisionReqLimitPolicyArrayInput)(nil)).Elem(), CcPolicyV2CcPrecisionReqLimitPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2ThresholdInput)(nil)).Elem(), CcPolicyV2ThresholdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcPolicyV2ThresholdArrayInput)(nil)).Elem(), CcPolicyV2ThresholdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosIpAttachmentV2BoundIpListInput)(nil)).Elem(), DdosIpAttachmentV2BoundIpListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosIpAttachmentV2BoundIpListArrayInput)(nil)).Elem(), DdosIpAttachmentV2BoundIpListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyDropOptionInput)(nil)).Elem(), DdosPolicyDropOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyDropOptionArrayInput)(nil)).Elem(), DdosPolicyDropOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyPacketFilterInput)(nil)).Elem(), DdosPolicyPacketFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyPacketFilterArrayInput)(nil)).Elem(), DdosPolicyPacketFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyPortFilterInput)(nil)).Elem(), DdosPolicyPortFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyPortFilterArrayInput)(nil)).Elem(), DdosPolicyPortFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2AclInput)(nil)).Elem(), DdosPolicyV2AclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2AclArrayInput)(nil)).Elem(), DdosPolicyV2AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2BlackWhiteIpInput)(nil)).Elem(), DdosPolicyV2BlackWhiteIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2BlackWhiteIpArrayInput)(nil)).Elem(), DdosPolicyV2BlackWhiteIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2DdosConnectLimitInput)(nil)).Elem(), DdosPolicyV2DdosConnectLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2DdosConnectLimitPtrInput)(nil)).Elem(), DdosPolicyV2DdosConnectLimitArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2DdosGeoIpBlockConfigInput)(nil)).Elem(), DdosPolicyV2DdosGeoIpBlockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2DdosGeoIpBlockConfigArrayInput)(nil)).Elem(), DdosPolicyV2DdosGeoIpBlockConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2DdosSpeedLimitConfigInput)(nil)).Elem(), DdosPolicyV2DdosSpeedLimitConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2DdosSpeedLimitConfigArrayInput)(nil)).Elem(), DdosPolicyV2DdosSpeedLimitConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2PacketFilterInput)(nil)).Elem(), DdosPolicyV2PacketFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2PacketFilterArrayInput)(nil)).Elem(), DdosPolicyV2PacketFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2ProtocolBlockConfigInput)(nil)).Elem(), DdosPolicyV2ProtocolBlockConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2ProtocolBlockConfigArrayInput)(nil)).Elem(), DdosPolicyV2ProtocolBlockConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2WaterPrintConfigInput)(nil)).Elem(), DdosPolicyV2WaterPrintConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2WaterPrintConfigArrayInput)(nil)).Elem(), DdosPolicyV2WaterPrintConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2WaterPrintConfigListenerInput)(nil)).Elem(), DdosPolicyV2WaterPrintConfigListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyV2WaterPrintConfigListenerArrayInput)(nil)).Elem(), DdosPolicyV2WaterPrintConfigListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyWatermarkFilterInput)(nil)).Elem(), DdosPolicyWatermarkFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyWatermarkFilterArrayInput)(nil)).Elem(), DdosPolicyWatermarkFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyWatermarkKeyInput)(nil)).Elem(), DdosPolicyWatermarkKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DdosPolicyWatermarkKeyArrayInput)(nil)).Elem(), DdosPolicyWatermarkKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleSourceListInput)(nil)).Elem(), L4RuleSourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleSourceListArrayInput)(nil)).Elem(), L4RuleSourceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2RulesInput)(nil)).Elem(), L4RuleV2RulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2RulesPtrInput)(nil)).Elem(), L4RuleV2RulesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2RulesSourceListInput)(nil)).Elem(), L4RuleV2RulesSourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L4RuleV2RulesSourceListArrayInput)(nil)).Elem(), L4RuleV2RulesSourceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7RuleV2RuleInput)(nil)).Elem(), L7RuleV2RuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7RuleV2RulePtrInput)(nil)).Elem(), L7RuleV2RuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7RuleV2RuleSourceListInput)(nil)).Elem(), L7RuleV2RuleSourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*L7RuleV2RuleSourceListArrayInput)(nil)).Elem(), L7RuleV2RuleSourceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpPoliciesListInput)(nil)).Elem(), GetCcHttpPoliciesListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpPoliciesListArrayInput)(nil)).Elem(), GetCcHttpPoliciesListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpPoliciesListRuleListInput)(nil)).Elem(), GetCcHttpPoliciesListRuleListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpPoliciesListRuleListArrayInput)(nil)).Elem(), GetCcHttpPoliciesListRuleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpsPoliciesListInput)(nil)).Elem(), GetCcHttpsPoliciesListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpsPoliciesListArrayInput)(nil)).Elem(), GetCcHttpsPoliciesListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpsPoliciesListRuleListInput)(nil)).Elem(), GetCcHttpsPoliciesListRuleListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCcHttpsPoliciesListRuleListArrayInput)(nil)).Elem(), GetCcHttpsPoliciesListRuleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListInput)(nil)).Elem(), GetDdosPoliciesListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListArrayInput)(nil)).Elem(), GetDdosPoliciesListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListDropOptionInput)(nil)).Elem(), GetDdosPoliciesListDropOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListDropOptionArrayInput)(nil)).Elem(), GetDdosPoliciesListDropOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListPacketFilterInput)(nil)).Elem(), GetDdosPoliciesListPacketFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListPacketFilterArrayInput)(nil)).Elem(), GetDdosPoliciesListPacketFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListPortFilterInput)(nil)).Elem(), GetDdosPoliciesListPortFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListPortFilterArrayInput)(nil)).Elem(), GetDdosPoliciesListPortFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListWatermarkFilterInput)(nil)).Elem(), GetDdosPoliciesListWatermarkFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListWatermarkFilterArrayInput)(nil)).Elem(), GetDdosPoliciesListWatermarkFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListWatermarkKeyInput)(nil)).Elem(), GetDdosPoliciesListWatermarkKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPoliciesListWatermarkKeyArrayInput)(nil)).Elem(), GetDdosPoliciesListWatermarkKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListInput)(nil)).Elem(), GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayInput)(nil)).Elem(), GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPolicyCasesListInput)(nil)).Elem(), GetDdosPolicyCasesListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDdosPolicyCasesListArrayInput)(nil)).Elem(), GetDdosPolicyCasesListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipListInput)(nil)).Elem(), GetEipListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipListArrayInput)(nil)).Elem(), GetEipListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesListInput)(nil)).Elem(), GetL4RulesListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesListArrayInput)(nil)).Elem(), GetL4RulesListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesListSourceListInput)(nil)).Elem(), GetL4RulesListSourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesListSourceListArrayInput)(nil)).Elem(), GetL4RulesListSourceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesV2ListInput)(nil)).Elem(), GetL4RulesV2ListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesV2ListArrayInput)(nil)).Elem(), GetL4RulesV2ListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesV2ListSourceListInput)(nil)).Elem(), GetL4RulesV2ListSourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL4RulesV2ListSourceListArrayInput)(nil)).Elem(), GetL4RulesV2ListSourceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL7RulesListInput)(nil)).Elem(), GetL7RulesListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL7RulesListArrayInput)(nil)).Elem(), GetL7RulesListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL7RulesV2ListInput)(nil)).Elem(), GetL7RulesV2ListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL7RulesV2ListArrayInput)(nil)).Elem(), GetL7RulesV2ListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL7RulesV2ListSourceListInput)(nil)).Elem(), GetL7RulesV2ListSourceListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetL7RulesV2ListSourceListArrayInput)(nil)).Elem(), GetL7RulesV2ListSourceListArray{})
	pulumi.RegisterOutputType(CcHttpPolicyRuleListOutput{})
	pulumi.RegisterOutputType(CcHttpPolicyRuleListArrayOutput{})
	pulumi.RegisterOutputType(CcHttpsPolicyRuleListOutput{})
	pulumi.RegisterOutputType(CcHttpsPolicyRuleListArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcBlackWhiteIpOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcBlackWhiteIpArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcGeoIpPolicyOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcGeoIpPolicyArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionPolicyOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionPolicyArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionPolicyPolicyOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionReqLimitOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionReqLimitArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionReqLimitPolicyOutput{})
	pulumi.RegisterOutputType(CcPolicyV2CcPrecisionReqLimitPolicyArrayOutput{})
	pulumi.RegisterOutputType(CcPolicyV2ThresholdOutput{})
	pulumi.RegisterOutputType(CcPolicyV2ThresholdArrayOutput{})
	pulumi.RegisterOutputType(DdosIpAttachmentV2BoundIpListOutput{})
	pulumi.RegisterOutputType(DdosIpAttachmentV2BoundIpListArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyDropOptionOutput{})
	pulumi.RegisterOutputType(DdosPolicyDropOptionArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyPacketFilterOutput{})
	pulumi.RegisterOutputType(DdosPolicyPacketFilterArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyPortFilterOutput{})
	pulumi.RegisterOutputType(DdosPolicyPortFilterArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2AclOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2AclArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2BlackWhiteIpOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2BlackWhiteIpArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2DdosConnectLimitOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2DdosConnectLimitPtrOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2DdosGeoIpBlockConfigOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2DdosGeoIpBlockConfigArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2DdosSpeedLimitConfigOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2DdosSpeedLimitConfigArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2PacketFilterOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2PacketFilterArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2ProtocolBlockConfigOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2ProtocolBlockConfigArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2WaterPrintConfigOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2WaterPrintConfigArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2WaterPrintConfigListenerOutput{})
	pulumi.RegisterOutputType(DdosPolicyV2WaterPrintConfigListenerArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyWatermarkFilterOutput{})
	pulumi.RegisterOutputType(DdosPolicyWatermarkFilterArrayOutput{})
	pulumi.RegisterOutputType(DdosPolicyWatermarkKeyOutput{})
	pulumi.RegisterOutputType(DdosPolicyWatermarkKeyArrayOutput{})
	pulumi.RegisterOutputType(L4RuleSourceListOutput{})
	pulumi.RegisterOutputType(L4RuleSourceListArrayOutput{})
	pulumi.RegisterOutputType(L4RuleV2RulesOutput{})
	pulumi.RegisterOutputType(L4RuleV2RulesPtrOutput{})
	pulumi.RegisterOutputType(L4RuleV2RulesSourceListOutput{})
	pulumi.RegisterOutputType(L4RuleV2RulesSourceListArrayOutput{})
	pulumi.RegisterOutputType(L7RuleV2RuleOutput{})
	pulumi.RegisterOutputType(L7RuleV2RulePtrOutput{})
	pulumi.RegisterOutputType(L7RuleV2RuleSourceListOutput{})
	pulumi.RegisterOutputType(L7RuleV2RuleSourceListArrayOutput{})
	pulumi.RegisterOutputType(GetCcHttpPoliciesListOutput{})
	pulumi.RegisterOutputType(GetCcHttpPoliciesListArrayOutput{})
	pulumi.RegisterOutputType(GetCcHttpPoliciesListRuleListOutput{})
	pulumi.RegisterOutputType(GetCcHttpPoliciesListRuleListArrayOutput{})
	pulumi.RegisterOutputType(GetCcHttpsPoliciesListOutput{})
	pulumi.RegisterOutputType(GetCcHttpsPoliciesListArrayOutput{})
	pulumi.RegisterOutputType(GetCcHttpsPoliciesListRuleListOutput{})
	pulumi.RegisterOutputType(GetCcHttpsPoliciesListRuleListArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListDropOptionOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListDropOptionArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListPacketFilterOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListPacketFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListPortFilterOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListPortFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListWatermarkFilterOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListWatermarkFilterArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListWatermarkKeyOutput{})
	pulumi.RegisterOutputType(GetDdosPoliciesListWatermarkKeyArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListOutput{})
	pulumi.RegisterOutputType(GetDdosPolicyAttachmentsDayuDdosPolicyAttachmentListArrayOutput{})
	pulumi.RegisterOutputType(GetDdosPolicyCasesListOutput{})
	pulumi.RegisterOutputType(GetDdosPolicyCasesListArrayOutput{})
	pulumi.RegisterOutputType(GetEipListOutput{})
	pulumi.RegisterOutputType(GetEipListArrayOutput{})
	pulumi.RegisterOutputType(GetL4RulesListOutput{})
	pulumi.RegisterOutputType(GetL4RulesListArrayOutput{})
	pulumi.RegisterOutputType(GetL4RulesListSourceListOutput{})
	pulumi.RegisterOutputType(GetL4RulesListSourceListArrayOutput{})
	pulumi.RegisterOutputType(GetL4RulesV2ListOutput{})
	pulumi.RegisterOutputType(GetL4RulesV2ListArrayOutput{})
	pulumi.RegisterOutputType(GetL4RulesV2ListSourceListOutput{})
	pulumi.RegisterOutputType(GetL4RulesV2ListSourceListArrayOutput{})
	pulumi.RegisterOutputType(GetL7RulesListOutput{})
	pulumi.RegisterOutputType(GetL7RulesListArrayOutput{})
	pulumi.RegisterOutputType(GetL7RulesV2ListOutput{})
	pulumi.RegisterOutputType(GetL7RulesV2ListArrayOutput{})
	pulumi.RegisterOutputType(GetL7RulesV2ListSourceListOutput{})
	pulumi.RegisterOutputType(GetL7RulesV2ListSourceListArrayOutput{})
}
