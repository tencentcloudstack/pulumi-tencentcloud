// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cwp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cwp licenseOrder
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cwp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cwp.NewLicenseOrder(ctx, "example", &Cwp.LicenseOrderArgs{
//				Alias:       pulumi.String("tf_example"),
//				LicenseNum:  pulumi.Int(1),
//				LicenseType: pulumi.Int(0),
//				ProjectId:   pulumi.Int(0),
//				RegionId:    pulumi.Int(1),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cwp license_order can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cwp/licenseOrder:LicenseOrder example cwplic-130715d2#1
//
// ```
type LicenseOrder struct {
	pulumi.CustomResourceState

	// Resource alias.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// license id.
	LicenseId pulumi.IntOutput `pulumi:"licenseId"`
	// License quantity, Quantity to be purchased.Default is 1.
	LicenseNum pulumi.IntPtrOutput `pulumi:"licenseNum"`
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType pulumi.IntPtrOutput `pulumi:"licenseType"`
	// Project ID. Default is 0.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Purchase order region, only 1 Guangzhou, 9 Singapore is supported here. Guangzhou is recommended. Singapore is whitelisted. Default is 1.
	RegionId pulumi.IntPtrOutput `pulumi:"regionId"`
	// resource id.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Tags of the license order.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewLicenseOrder registers a new resource with the given unique name, arguments, and options.
func NewLicenseOrder(ctx *pulumi.Context,
	name string, args *LicenseOrderArgs, opts ...pulumi.ResourceOption) (*LicenseOrder, error) {
	if args == nil {
		args = &LicenseOrderArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource LicenseOrder
	err := ctx.RegisterResource("tencentcloud:Cwp/licenseOrder:LicenseOrder", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseOrder gets an existing LicenseOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseOrder(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseOrderState, opts ...pulumi.ResourceOption) (*LicenseOrder, error) {
	var resource LicenseOrder
	err := ctx.ReadResource("tencentcloud:Cwp/licenseOrder:LicenseOrder", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseOrder resources.
type licenseOrderState struct {
	// Resource alias.
	Alias *string `pulumi:"alias"`
	// license id.
	LicenseId *int `pulumi:"licenseId"`
	// License quantity, Quantity to be purchased.Default is 1.
	LicenseNum *int `pulumi:"licenseNum"`
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType *int `pulumi:"licenseType"`
	// Project ID. Default is 0.
	ProjectId *int `pulumi:"projectId"`
	// Purchase order region, only 1 Guangzhou, 9 Singapore is supported here. Guangzhou is recommended. Singapore is whitelisted. Default is 1.
	RegionId *int `pulumi:"regionId"`
	// resource id.
	ResourceId *string `pulumi:"resourceId"`
	// Tags of the license order.
	Tags map[string]interface{} `pulumi:"tags"`
}

type LicenseOrderState struct {
	// Resource alias.
	Alias pulumi.StringPtrInput
	// license id.
	LicenseId pulumi.IntPtrInput
	// License quantity, Quantity to be purchased.Default is 1.
	LicenseNum pulumi.IntPtrInput
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType pulumi.IntPtrInput
	// Project ID. Default is 0.
	ProjectId pulumi.IntPtrInput
	// Purchase order region, only 1 Guangzhou, 9 Singapore is supported here. Guangzhou is recommended. Singapore is whitelisted. Default is 1.
	RegionId pulumi.IntPtrInput
	// resource id.
	ResourceId pulumi.StringPtrInput
	// Tags of the license order.
	Tags pulumi.MapInput
}

func (LicenseOrderState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseOrderState)(nil)).Elem()
}

type licenseOrderArgs struct {
	// Resource alias.
	Alias *string `pulumi:"alias"`
	// License quantity, Quantity to be purchased.Default is 1.
	LicenseNum *int `pulumi:"licenseNum"`
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType *int `pulumi:"licenseType"`
	// Project ID. Default is 0.
	ProjectId *int `pulumi:"projectId"`
	// Purchase order region, only 1 Guangzhou, 9 Singapore is supported here. Guangzhou is recommended. Singapore is whitelisted. Default is 1.
	RegionId *int `pulumi:"regionId"`
	// Tags of the license order.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a LicenseOrder resource.
type LicenseOrderArgs struct {
	// Resource alias.
	Alias pulumi.StringPtrInput
	// License quantity, Quantity to be purchased.Default is 1.
	LicenseNum pulumi.IntPtrInput
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType pulumi.IntPtrInput
	// Project ID. Default is 0.
	ProjectId pulumi.IntPtrInput
	// Purchase order region, only 1 Guangzhou, 9 Singapore is supported here. Guangzhou is recommended. Singapore is whitelisted. Default is 1.
	RegionId pulumi.IntPtrInput
	// Tags of the license order.
	Tags pulumi.MapInput
}

func (LicenseOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseOrderArgs)(nil)).Elem()
}

type LicenseOrderInput interface {
	pulumi.Input

	ToLicenseOrderOutput() LicenseOrderOutput
	ToLicenseOrderOutputWithContext(ctx context.Context) LicenseOrderOutput
}

func (*LicenseOrder) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseOrder)(nil)).Elem()
}

func (i *LicenseOrder) ToLicenseOrderOutput() LicenseOrderOutput {
	return i.ToLicenseOrderOutputWithContext(context.Background())
}

func (i *LicenseOrder) ToLicenseOrderOutputWithContext(ctx context.Context) LicenseOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOrderOutput)
}

// LicenseOrderArrayInput is an input type that accepts LicenseOrderArray and LicenseOrderArrayOutput values.
// You can construct a concrete instance of `LicenseOrderArrayInput` via:
//
//	LicenseOrderArray{ LicenseOrderArgs{...} }
type LicenseOrderArrayInput interface {
	pulumi.Input

	ToLicenseOrderArrayOutput() LicenseOrderArrayOutput
	ToLicenseOrderArrayOutputWithContext(context.Context) LicenseOrderArrayOutput
}

type LicenseOrderArray []LicenseOrderInput

func (LicenseOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseOrder)(nil)).Elem()
}

func (i LicenseOrderArray) ToLicenseOrderArrayOutput() LicenseOrderArrayOutput {
	return i.ToLicenseOrderArrayOutputWithContext(context.Background())
}

func (i LicenseOrderArray) ToLicenseOrderArrayOutputWithContext(ctx context.Context) LicenseOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOrderArrayOutput)
}

// LicenseOrderMapInput is an input type that accepts LicenseOrderMap and LicenseOrderMapOutput values.
// You can construct a concrete instance of `LicenseOrderMapInput` via:
//
//	LicenseOrderMap{ "key": LicenseOrderArgs{...} }
type LicenseOrderMapInput interface {
	pulumi.Input

	ToLicenseOrderMapOutput() LicenseOrderMapOutput
	ToLicenseOrderMapOutputWithContext(context.Context) LicenseOrderMapOutput
}

type LicenseOrderMap map[string]LicenseOrderInput

func (LicenseOrderMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseOrder)(nil)).Elem()
}

func (i LicenseOrderMap) ToLicenseOrderMapOutput() LicenseOrderMapOutput {
	return i.ToLicenseOrderMapOutputWithContext(context.Background())
}

func (i LicenseOrderMap) ToLicenseOrderMapOutputWithContext(ctx context.Context) LicenseOrderMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseOrderMapOutput)
}

type LicenseOrderOutput struct{ *pulumi.OutputState }

func (LicenseOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseOrder)(nil)).Elem()
}

func (o LicenseOrderOutput) ToLicenseOrderOutput() LicenseOrderOutput {
	return o
}

func (o LicenseOrderOutput) ToLicenseOrderOutputWithContext(ctx context.Context) LicenseOrderOutput {
	return o
}

// Resource alias.
func (o LicenseOrderOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// license id.
func (o LicenseOrderOutput) LicenseId() pulumi.IntOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.IntOutput { return v.LicenseId }).(pulumi.IntOutput)
}

// License quantity, Quantity to be purchased.Default is 1.
func (o LicenseOrderOutput) LicenseNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.IntPtrOutput { return v.LicenseNum }).(pulumi.IntPtrOutput)
}

// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
func (o LicenseOrderOutput) LicenseType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.IntPtrOutput { return v.LicenseType }).(pulumi.IntPtrOutput)
}

// Project ID. Default is 0.
func (o LicenseOrderOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Purchase order region, only 1 Guangzhou, 9 Singapore is supported here. Guangzhou is recommended. Singapore is whitelisted. Default is 1.
func (o LicenseOrderOutput) RegionId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.IntPtrOutput { return v.RegionId }).(pulumi.IntPtrOutput)
}

// resource id.
func (o LicenseOrderOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Tags of the license order.
func (o LicenseOrderOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *LicenseOrder) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type LicenseOrderArrayOutput struct{ *pulumi.OutputState }

func (LicenseOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseOrder)(nil)).Elem()
}

func (o LicenseOrderArrayOutput) ToLicenseOrderArrayOutput() LicenseOrderArrayOutput {
	return o
}

func (o LicenseOrderArrayOutput) ToLicenseOrderArrayOutputWithContext(ctx context.Context) LicenseOrderArrayOutput {
	return o
}

func (o LicenseOrderArrayOutput) Index(i pulumi.IntInput) LicenseOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseOrder {
		return vs[0].([]*LicenseOrder)[vs[1].(int)]
	}).(LicenseOrderOutput)
}

type LicenseOrderMapOutput struct{ *pulumi.OutputState }

func (LicenseOrderMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseOrder)(nil)).Elem()
}

func (o LicenseOrderMapOutput) ToLicenseOrderMapOutput() LicenseOrderMapOutput {
	return o
}

func (o LicenseOrderMapOutput) ToLicenseOrderMapOutputWithContext(ctx context.Context) LicenseOrderMapOutput {
	return o
}

func (o LicenseOrderMapOutput) MapIndex(k pulumi.StringInput) LicenseOrderOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseOrder {
		return vs[0].(map[string]*LicenseOrder)[vs[1].(string)]
	}).(LicenseOrderOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseOrderInput)(nil)).Elem(), &LicenseOrder{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseOrderArrayInput)(nil)).Elem(), LicenseOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseOrderMapInput)(nil)).Elem(), LicenseOrderMap{})
	pulumi.RegisterOutputType(LicenseOrderOutput{})
	pulumi.RegisterOutputType(LicenseOrderArrayOutput{})
	pulumi.RegisterOutputType(LicenseOrderMapOutput{})
}
