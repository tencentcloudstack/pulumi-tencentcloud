// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cwp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cwp licenseBindAttachment
//
// ## Import
//
// cwp license_bind_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cwp/licenseBindAttachment:LicenseBindAttachment example cwplic-ab3edffa#44#2c7e5cce-1cec-4456-8d18-018f160dd987#0
//
// ```
type LicenseBindAttachment struct {
	pulumi.CustomResourceState

	// agent status.
	AgentStatus pulumi.StringOutput `pulumi:"agentStatus"`
	// Is it allowed to change the binding, false is not allowed to change the binding.
	IsSwitchBind pulumi.BoolOutput `pulumi:"isSwitchBind"`
	// Allow unbinding, false does not allow unbinding.
	IsUnbind pulumi.BoolOutput `pulumi:"isUnbind"`
	// License ID.
	LicenseId pulumi.IntOutput `pulumi:"licenseId"`
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType pulumi.IntOutput `pulumi:"licenseType"`
	// machine ip.
	MachineIp pulumi.StringOutput `pulumi:"machineIp"`
	// machine name.
	MachineName pulumi.StringOutput `pulumi:"machineName"`
	// machine wan ip.
	MachineWanIp pulumi.StringOutput `pulumi:"machineWanIp"`
	// Machine quota that needs to be bound.
	Quuid pulumi.StringOutput `pulumi:"quuid"`
	// Resource ID.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// uuid.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewLicenseBindAttachment registers a new resource with the given unique name, arguments, and options.
func NewLicenseBindAttachment(ctx *pulumi.Context,
	name string, args *LicenseBindAttachmentArgs, opts ...pulumi.ResourceOption) (*LicenseBindAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LicenseId == nil {
		return nil, errors.New("invalid value for required argument 'LicenseId'")
	}
	if args.LicenseType == nil {
		return nil, errors.New("invalid value for required argument 'LicenseType'")
	}
	if args.Quuid == nil {
		return nil, errors.New("invalid value for required argument 'Quuid'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LicenseBindAttachment
	err := ctx.RegisterResource("tencentcloud:Cwp/licenseBindAttachment:LicenseBindAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLicenseBindAttachment gets an existing LicenseBindAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLicenseBindAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LicenseBindAttachmentState, opts ...pulumi.ResourceOption) (*LicenseBindAttachment, error) {
	var resource LicenseBindAttachment
	err := ctx.ReadResource("tencentcloud:Cwp/licenseBindAttachment:LicenseBindAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LicenseBindAttachment resources.
type licenseBindAttachmentState struct {
	// agent status.
	AgentStatus *string `pulumi:"agentStatus"`
	// Is it allowed to change the binding, false is not allowed to change the binding.
	IsSwitchBind *bool `pulumi:"isSwitchBind"`
	// Allow unbinding, false does not allow unbinding.
	IsUnbind *bool `pulumi:"isUnbind"`
	// License ID.
	LicenseId *int `pulumi:"licenseId"`
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType *int `pulumi:"licenseType"`
	// machine ip.
	MachineIp *string `pulumi:"machineIp"`
	// machine name.
	MachineName *string `pulumi:"machineName"`
	// machine wan ip.
	MachineWanIp *string `pulumi:"machineWanIp"`
	// Machine quota that needs to be bound.
	Quuid *string `pulumi:"quuid"`
	// Resource ID.
	ResourceId *string `pulumi:"resourceId"`
	// uuid.
	Uuid *string `pulumi:"uuid"`
}

type LicenseBindAttachmentState struct {
	// agent status.
	AgentStatus pulumi.StringPtrInput
	// Is it allowed to change the binding, false is not allowed to change the binding.
	IsSwitchBind pulumi.BoolPtrInput
	// Allow unbinding, false does not allow unbinding.
	IsUnbind pulumi.BoolPtrInput
	// License ID.
	LicenseId pulumi.IntPtrInput
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType pulumi.IntPtrInput
	// machine ip.
	MachineIp pulumi.StringPtrInput
	// machine name.
	MachineName pulumi.StringPtrInput
	// machine wan ip.
	MachineWanIp pulumi.StringPtrInput
	// Machine quota that needs to be bound.
	Quuid pulumi.StringPtrInput
	// Resource ID.
	ResourceId pulumi.StringPtrInput
	// uuid.
	Uuid pulumi.StringPtrInput
}

func (LicenseBindAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseBindAttachmentState)(nil)).Elem()
}

type licenseBindAttachmentArgs struct {
	// License ID.
	LicenseId int `pulumi:"licenseId"`
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType int `pulumi:"licenseType"`
	// Machine quota that needs to be bound.
	Quuid string `pulumi:"quuid"`
	// Resource ID.
	ResourceId string `pulumi:"resourceId"`
}

// The set of arguments for constructing a LicenseBindAttachment resource.
type LicenseBindAttachmentArgs struct {
	// License ID.
	LicenseId pulumi.IntInput
	// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
	LicenseType pulumi.IntInput
	// Machine quota that needs to be bound.
	Quuid pulumi.StringInput
	// Resource ID.
	ResourceId pulumi.StringInput
}

func (LicenseBindAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*licenseBindAttachmentArgs)(nil)).Elem()
}

type LicenseBindAttachmentInput interface {
	pulumi.Input

	ToLicenseBindAttachmentOutput() LicenseBindAttachmentOutput
	ToLicenseBindAttachmentOutputWithContext(ctx context.Context) LicenseBindAttachmentOutput
}

func (*LicenseBindAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseBindAttachment)(nil)).Elem()
}

func (i *LicenseBindAttachment) ToLicenseBindAttachmentOutput() LicenseBindAttachmentOutput {
	return i.ToLicenseBindAttachmentOutputWithContext(context.Background())
}

func (i *LicenseBindAttachment) ToLicenseBindAttachmentOutputWithContext(ctx context.Context) LicenseBindAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseBindAttachmentOutput)
}

// LicenseBindAttachmentArrayInput is an input type that accepts LicenseBindAttachmentArray and LicenseBindAttachmentArrayOutput values.
// You can construct a concrete instance of `LicenseBindAttachmentArrayInput` via:
//
//	LicenseBindAttachmentArray{ LicenseBindAttachmentArgs{...} }
type LicenseBindAttachmentArrayInput interface {
	pulumi.Input

	ToLicenseBindAttachmentArrayOutput() LicenseBindAttachmentArrayOutput
	ToLicenseBindAttachmentArrayOutputWithContext(context.Context) LicenseBindAttachmentArrayOutput
}

type LicenseBindAttachmentArray []LicenseBindAttachmentInput

func (LicenseBindAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseBindAttachment)(nil)).Elem()
}

func (i LicenseBindAttachmentArray) ToLicenseBindAttachmentArrayOutput() LicenseBindAttachmentArrayOutput {
	return i.ToLicenseBindAttachmentArrayOutputWithContext(context.Background())
}

func (i LicenseBindAttachmentArray) ToLicenseBindAttachmentArrayOutputWithContext(ctx context.Context) LicenseBindAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseBindAttachmentArrayOutput)
}

// LicenseBindAttachmentMapInput is an input type that accepts LicenseBindAttachmentMap and LicenseBindAttachmentMapOutput values.
// You can construct a concrete instance of `LicenseBindAttachmentMapInput` via:
//
//	LicenseBindAttachmentMap{ "key": LicenseBindAttachmentArgs{...} }
type LicenseBindAttachmentMapInput interface {
	pulumi.Input

	ToLicenseBindAttachmentMapOutput() LicenseBindAttachmentMapOutput
	ToLicenseBindAttachmentMapOutputWithContext(context.Context) LicenseBindAttachmentMapOutput
}

type LicenseBindAttachmentMap map[string]LicenseBindAttachmentInput

func (LicenseBindAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseBindAttachment)(nil)).Elem()
}

func (i LicenseBindAttachmentMap) ToLicenseBindAttachmentMapOutput() LicenseBindAttachmentMapOutput {
	return i.ToLicenseBindAttachmentMapOutputWithContext(context.Background())
}

func (i LicenseBindAttachmentMap) ToLicenseBindAttachmentMapOutputWithContext(ctx context.Context) LicenseBindAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LicenseBindAttachmentMapOutput)
}

type LicenseBindAttachmentOutput struct{ *pulumi.OutputState }

func (LicenseBindAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LicenseBindAttachment)(nil)).Elem()
}

func (o LicenseBindAttachmentOutput) ToLicenseBindAttachmentOutput() LicenseBindAttachmentOutput {
	return o
}

func (o LicenseBindAttachmentOutput) ToLicenseBindAttachmentOutputWithContext(ctx context.Context) LicenseBindAttachmentOutput {
	return o
}

// agent status.
func (o LicenseBindAttachmentOutput) AgentStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.AgentStatus }).(pulumi.StringOutput)
}

// Is it allowed to change the binding, false is not allowed to change the binding.
func (o LicenseBindAttachmentOutput) IsSwitchBind() pulumi.BoolOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.BoolOutput { return v.IsSwitchBind }).(pulumi.BoolOutput)
}

// Allow unbinding, false does not allow unbinding.
func (o LicenseBindAttachmentOutput) IsUnbind() pulumi.BoolOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.BoolOutput { return v.IsUnbind }).(pulumi.BoolOutput)
}

// License ID.
func (o LicenseBindAttachmentOutput) LicenseId() pulumi.IntOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.IntOutput { return v.LicenseId }).(pulumi.IntOutput)
}

// LicenseType, 0 CWP Pro - Pay as you go, 1 CWP Pro - Monthly subscription, 2 CWP Ultimate - Monthly subscription. Default is 0.
func (o LicenseBindAttachmentOutput) LicenseType() pulumi.IntOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.IntOutput { return v.LicenseType }).(pulumi.IntOutput)
}

// machine ip.
func (o LicenseBindAttachmentOutput) MachineIp() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.MachineIp }).(pulumi.StringOutput)
}

// machine name.
func (o LicenseBindAttachmentOutput) MachineName() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.MachineName }).(pulumi.StringOutput)
}

// machine wan ip.
func (o LicenseBindAttachmentOutput) MachineWanIp() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.MachineWanIp }).(pulumi.StringOutput)
}

// Machine quota that needs to be bound.
func (o LicenseBindAttachmentOutput) Quuid() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.Quuid }).(pulumi.StringOutput)
}

// Resource ID.
func (o LicenseBindAttachmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// uuid.
func (o LicenseBindAttachmentOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *LicenseBindAttachment) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type LicenseBindAttachmentArrayOutput struct{ *pulumi.OutputState }

func (LicenseBindAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LicenseBindAttachment)(nil)).Elem()
}

func (o LicenseBindAttachmentArrayOutput) ToLicenseBindAttachmentArrayOutput() LicenseBindAttachmentArrayOutput {
	return o
}

func (o LicenseBindAttachmentArrayOutput) ToLicenseBindAttachmentArrayOutputWithContext(ctx context.Context) LicenseBindAttachmentArrayOutput {
	return o
}

func (o LicenseBindAttachmentArrayOutput) Index(i pulumi.IntInput) LicenseBindAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LicenseBindAttachment {
		return vs[0].([]*LicenseBindAttachment)[vs[1].(int)]
	}).(LicenseBindAttachmentOutput)
}

type LicenseBindAttachmentMapOutput struct{ *pulumi.OutputState }

func (LicenseBindAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LicenseBindAttachment)(nil)).Elem()
}

func (o LicenseBindAttachmentMapOutput) ToLicenseBindAttachmentMapOutput() LicenseBindAttachmentMapOutput {
	return o
}

func (o LicenseBindAttachmentMapOutput) ToLicenseBindAttachmentMapOutputWithContext(ctx context.Context) LicenseBindAttachmentMapOutput {
	return o
}

func (o LicenseBindAttachmentMapOutput) MapIndex(k pulumi.StringInput) LicenseBindAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LicenseBindAttachment {
		return vs[0].(map[string]*LicenseBindAttachment)[vs[1].(string)]
	}).(LicenseBindAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseBindAttachmentInput)(nil)).Elem(), &LicenseBindAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseBindAttachmentArrayInput)(nil)).Elem(), LicenseBindAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LicenseBindAttachmentMapInput)(nil)).Elem(), LicenseBindAttachmentMap{})
	pulumi.RegisterOutputType(LicenseBindAttachmentOutput{})
	pulumi.RegisterOutputType(LicenseBindAttachmentArrayOutput{})
	pulumi.RegisterOutputType(LicenseBindAttachmentMapOutput{})
}
