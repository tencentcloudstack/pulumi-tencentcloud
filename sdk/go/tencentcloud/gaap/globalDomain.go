// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaap

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a gaap global domain
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Gaap.NewGlobalDomain(ctx, "globalDomain", &Gaap.GlobalDomainArgs{
//				Alias:        pulumi.String("demo"),
//				DefaultValue: pulumi.String("xxxxxx.com"),
//				ProjectId:    pulumi.Int(0),
//				Tags: pulumi.AnyMap{
//					"key": pulumi.Any("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// gaap global_domain can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Gaap/globalDomain:GlobalDomain global_domain ${projectId}#${domainId}
//
// ```
type GlobalDomain struct {
	pulumi.CustomResourceState

	// alias.
	Alias pulumi.StringPtrOutput `pulumi:"alias"`
	// Domain name default entry.
	DefaultValue pulumi.StringOutput `pulumi:"defaultValue"`
	// Domain Name Project ID.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// Global domain statue. Available values: open and close, default is open.
	Status pulumi.StringOutput `pulumi:"status"`
	// Instance tags.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewGlobalDomain registers a new resource with the given unique name, arguments, and options.
func NewGlobalDomain(ctx *pulumi.Context,
	name string, args *GlobalDomainArgs, opts ...pulumi.ResourceOption) (*GlobalDomain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DefaultValue == nil {
		return nil, errors.New("invalid value for required argument 'DefaultValue'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GlobalDomain
	err := ctx.RegisterResource("tencentcloud:Gaap/globalDomain:GlobalDomain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGlobalDomain gets an existing GlobalDomain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGlobalDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GlobalDomainState, opts ...pulumi.ResourceOption) (*GlobalDomain, error) {
	var resource GlobalDomain
	err := ctx.ReadResource("tencentcloud:Gaap/globalDomain:GlobalDomain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GlobalDomain resources.
type globalDomainState struct {
	// alias.
	Alias *string `pulumi:"alias"`
	// Domain name default entry.
	DefaultValue *string `pulumi:"defaultValue"`
	// Domain Name Project ID.
	ProjectId *int `pulumi:"projectId"`
	// Global domain statue. Available values: open and close, default is open.
	Status *string `pulumi:"status"`
	// Instance tags.
	Tags map[string]interface{} `pulumi:"tags"`
}

type GlobalDomainState struct {
	// alias.
	Alias pulumi.StringPtrInput
	// Domain name default entry.
	DefaultValue pulumi.StringPtrInput
	// Domain Name Project ID.
	ProjectId pulumi.IntPtrInput
	// Global domain statue. Available values: open and close, default is open.
	Status pulumi.StringPtrInput
	// Instance tags.
	Tags pulumi.MapInput
}

func (GlobalDomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*globalDomainState)(nil)).Elem()
}

type globalDomainArgs struct {
	// alias.
	Alias *string `pulumi:"alias"`
	// Domain name default entry.
	DefaultValue string `pulumi:"defaultValue"`
	// Domain Name Project ID.
	ProjectId int `pulumi:"projectId"`
	// Global domain statue. Available values: open and close, default is open.
	Status *string `pulumi:"status"`
	// Instance tags.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a GlobalDomain resource.
type GlobalDomainArgs struct {
	// alias.
	Alias pulumi.StringPtrInput
	// Domain name default entry.
	DefaultValue pulumi.StringInput
	// Domain Name Project ID.
	ProjectId pulumi.IntInput
	// Global domain statue. Available values: open and close, default is open.
	Status pulumi.StringPtrInput
	// Instance tags.
	Tags pulumi.MapInput
}

func (GlobalDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*globalDomainArgs)(nil)).Elem()
}

type GlobalDomainInput interface {
	pulumi.Input

	ToGlobalDomainOutput() GlobalDomainOutput
	ToGlobalDomainOutputWithContext(ctx context.Context) GlobalDomainOutput
}

func (*GlobalDomain) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDomain)(nil)).Elem()
}

func (i *GlobalDomain) ToGlobalDomainOutput() GlobalDomainOutput {
	return i.ToGlobalDomainOutputWithContext(context.Background())
}

func (i *GlobalDomain) ToGlobalDomainOutputWithContext(ctx context.Context) GlobalDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDomainOutput)
}

// GlobalDomainArrayInput is an input type that accepts GlobalDomainArray and GlobalDomainArrayOutput values.
// You can construct a concrete instance of `GlobalDomainArrayInput` via:
//
//	GlobalDomainArray{ GlobalDomainArgs{...} }
type GlobalDomainArrayInput interface {
	pulumi.Input

	ToGlobalDomainArrayOutput() GlobalDomainArrayOutput
	ToGlobalDomainArrayOutputWithContext(context.Context) GlobalDomainArrayOutput
}

type GlobalDomainArray []GlobalDomainInput

func (GlobalDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalDomain)(nil)).Elem()
}

func (i GlobalDomainArray) ToGlobalDomainArrayOutput() GlobalDomainArrayOutput {
	return i.ToGlobalDomainArrayOutputWithContext(context.Background())
}

func (i GlobalDomainArray) ToGlobalDomainArrayOutputWithContext(ctx context.Context) GlobalDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDomainArrayOutput)
}

// GlobalDomainMapInput is an input type that accepts GlobalDomainMap and GlobalDomainMapOutput values.
// You can construct a concrete instance of `GlobalDomainMapInput` via:
//
//	GlobalDomainMap{ "key": GlobalDomainArgs{...} }
type GlobalDomainMapInput interface {
	pulumi.Input

	ToGlobalDomainMapOutput() GlobalDomainMapOutput
	ToGlobalDomainMapOutputWithContext(context.Context) GlobalDomainMapOutput
}

type GlobalDomainMap map[string]GlobalDomainInput

func (GlobalDomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalDomain)(nil)).Elem()
}

func (i GlobalDomainMap) ToGlobalDomainMapOutput() GlobalDomainMapOutput {
	return i.ToGlobalDomainMapOutputWithContext(context.Background())
}

func (i GlobalDomainMap) ToGlobalDomainMapOutputWithContext(ctx context.Context) GlobalDomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GlobalDomainMapOutput)
}

type GlobalDomainOutput struct{ *pulumi.OutputState }

func (GlobalDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GlobalDomain)(nil)).Elem()
}

func (o GlobalDomainOutput) ToGlobalDomainOutput() GlobalDomainOutput {
	return o
}

func (o GlobalDomainOutput) ToGlobalDomainOutputWithContext(ctx context.Context) GlobalDomainOutput {
	return o
}

// alias.
func (o GlobalDomainOutput) Alias() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GlobalDomain) pulumi.StringPtrOutput { return v.Alias }).(pulumi.StringPtrOutput)
}

// Domain name default entry.
func (o GlobalDomainOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalDomain) pulumi.StringOutput { return v.DefaultValue }).(pulumi.StringOutput)
}

// Domain Name Project ID.
func (o GlobalDomainOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *GlobalDomain) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// Global domain statue. Available values: open and close, default is open.
func (o GlobalDomainOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GlobalDomain) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Instance tags.
func (o GlobalDomainOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *GlobalDomain) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type GlobalDomainArrayOutput struct{ *pulumi.OutputState }

func (GlobalDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GlobalDomain)(nil)).Elem()
}

func (o GlobalDomainArrayOutput) ToGlobalDomainArrayOutput() GlobalDomainArrayOutput {
	return o
}

func (o GlobalDomainArrayOutput) ToGlobalDomainArrayOutputWithContext(ctx context.Context) GlobalDomainArrayOutput {
	return o
}

func (o GlobalDomainArrayOutput) Index(i pulumi.IntInput) GlobalDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GlobalDomain {
		return vs[0].([]*GlobalDomain)[vs[1].(int)]
	}).(GlobalDomainOutput)
}

type GlobalDomainMapOutput struct{ *pulumi.OutputState }

func (GlobalDomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GlobalDomain)(nil)).Elem()
}

func (o GlobalDomainMapOutput) ToGlobalDomainMapOutput() GlobalDomainMapOutput {
	return o
}

func (o GlobalDomainMapOutput) ToGlobalDomainMapOutputWithContext(ctx context.Context) GlobalDomainMapOutput {
	return o
}

func (o GlobalDomainMapOutput) MapIndex(k pulumi.StringInput) GlobalDomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GlobalDomain {
		return vs[0].(map[string]*GlobalDomain)[vs[1].(string)]
	}).(GlobalDomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalDomainInput)(nil)).Elem(), &GlobalDomain{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalDomainArrayInput)(nil)).Elem(), GlobalDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GlobalDomainMapInput)(nil)).Elem(), GlobalDomainMap{})
	pulumi.RegisterOutputType(GlobalDomainOutput{})
	pulumi.RegisterOutputType(GlobalDomainArrayOutput{})
	pulumi.RegisterOutputType(GlobalDomainMapOutput{})
}
