// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query gaap realservers.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooRealserver, err := Gaap.NewRealserver(ctx, "fooRealserver", &Gaap.RealserverArgs{
//				Ip: pulumi.String("1.1.1.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRealservers(ctx *pulumi.Context, args *GetRealserversArgs, opts ...pulumi.InvokeOption) (*GetRealserversResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRealserversResult
	err := ctx.Invoke("tencentcloud:Gaap/getRealservers:getRealservers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRealservers.
type GetRealserversArgs struct {
	// Domain of the GAAP realserver to be queried, conflict with `ip`.
	Domain *string `pulumi:"domain"`
	// IP of the GAAP realserver to be queried, conflict with `domain`.
	Ip *string `pulumi:"ip"`
	// Name of the GAAP realserver to be queried, the maximum length is 30.
	Name *string `pulumi:"name"`
	// ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
	ProjectId *int `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
	Tags map[string]interface{} `pulumi:"tags"`
}

// A collection of values returned by getRealservers.
type GetRealserversResult struct {
	// Domain of the GAAP realserver.
	Domain *string `pulumi:"domain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// IP of the GAAP realserver.
	Ip *string `pulumi:"ip"`
	// Name of the GAAP realserver.
	Name *string `pulumi:"name"`
	// ID of the project within the GAAP realserver.
	ProjectId *int `pulumi:"projectId"`
	// An information list of GAAP realserver. Each element contains the following attributes:
	Realservers      []GetRealserversRealserver `pulumi:"realservers"`
	ResultOutputFile *string                    `pulumi:"resultOutputFile"`
	// Tags of the GAAP realserver.
	Tags map[string]interface{} `pulumi:"tags"`
}

func GetRealserversOutput(ctx *pulumi.Context, args GetRealserversOutputArgs, opts ...pulumi.InvokeOption) GetRealserversResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRealserversResult, error) {
			args := v.(GetRealserversArgs)
			r, err := GetRealservers(ctx, &args, opts...)
			var s GetRealserversResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRealserversResultOutput)
}

// A collection of arguments for invoking getRealservers.
type GetRealserversOutputArgs struct {
	// Domain of the GAAP realserver to be queried, conflict with `ip`.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// IP of the GAAP realserver to be queried, conflict with `domain`.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// Name of the GAAP realserver to be queried, the maximum length is 30.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// ID of the project within the GAAP realserver to be queried, default value is `-1`, no set means all projects.
	ProjectId pulumi.IntPtrInput `pulumi:"projectId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Tags of the GAAP proxy to be queried. Support up to 5, display the information as long as it matches one.
	Tags pulumi.MapInput `pulumi:"tags"`
}

func (GetRealserversOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealserversArgs)(nil)).Elem()
}

// A collection of values returned by getRealservers.
type GetRealserversResultOutput struct{ *pulumi.OutputState }

func (GetRealserversResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRealserversResult)(nil)).Elem()
}

func (o GetRealserversResultOutput) ToGetRealserversResultOutput() GetRealserversResultOutput {
	return o
}

func (o GetRealserversResultOutput) ToGetRealserversResultOutputWithContext(ctx context.Context) GetRealserversResultOutput {
	return o
}

// Domain of the GAAP realserver.
func (o GetRealserversResultOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRealserversResult) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRealserversResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRealserversResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP of the GAAP realserver.
func (o GetRealserversResultOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRealserversResult) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the GAAP realserver.
func (o GetRealserversResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRealserversResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// ID of the project within the GAAP realserver.
func (o GetRealserversResultOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetRealserversResult) *int { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// An information list of GAAP realserver. Each element contains the following attributes:
func (o GetRealserversResultOutput) Realservers() GetRealserversRealserverArrayOutput {
	return o.ApplyT(func(v GetRealserversResult) []GetRealserversRealserver { return v.Realservers }).(GetRealserversRealserverArrayOutput)
}

func (o GetRealserversResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRealserversResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Tags of the GAAP realserver.
func (o GetRealserversResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetRealserversResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRealserversResultOutput{})
}
