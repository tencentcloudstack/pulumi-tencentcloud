// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of gaap check proxy create
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Gaap.GetCheckProxyCreate(ctx, &gaap.GetCheckProxyCreateArgs{
//				AccessRegion:     "Guangzhou",
//				Bandwidth:        10,
//				Concurrent:       2,
//				Http3Supported:   0,
//				IpAddressVersion: pulumi.StringRef("IPv4"),
//				NetworkType:      pulumi.StringRef("normal"),
//				PackageType:      pulumi.StringRef("Thunder"),
//				RealServerRegion: "Beijing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCheckProxyCreate(ctx *pulumi.Context, args *GetCheckProxyCreateArgs, opts ...pulumi.InvokeOption) (*GetCheckProxyCreateResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetCheckProxyCreateResult
	err := ctx.Invoke("tencentcloud:Gaap/getCheckProxyCreate:getCheckProxyCreate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCheckProxyCreate.
type GetCheckProxyCreateArgs struct {
	// The access (acceleration) area of the proxy. The value can be obtained through the interface DescribeAccessRegionsByDestRegion.
	AccessRegion string `pulumi:"accessRegion"`
	// The upper limit of proxy bandwidth, in Mbps.
	Bandwidth int `pulumi:"bandwidth"`
	// The upper limit of chanproxynel concurrency, representing the number of simultaneous online connections, in tens of thousands.
	Concurrent int `pulumi:"concurrent"`
	// If creating a proxy under a proxy group, you need to fill in the ID of the proxy group.
	GroupId *string `pulumi:"groupId"`
	// IP version, can be taken as IPv4 or IPv6, with a default value of IPv4.
	IpAddressVersion *string `pulumi:"ipAddressVersion"`
	// Network type, can take values &amp;#39;normal&amp;#39;, &amp;#39;cn2&amp;#39;, default value normal.
	NetworkType *string `pulumi:"networkType"`
	// Channel package type. Thunder represents the standard proxy group, Accelerator represents the game accelerator proxy, and CrossBorder represents the cross-border proxy.
	PackageType *string `pulumi:"packageType"`
	// The origin area of the proxy. The value can be obtained through the interface DescribeDestRegions.
	RealServerRegion string `pulumi:"realServerRegion"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getCheckProxyCreate.
type GetCheckProxyCreateResult struct {
	AccessRegion string `pulumi:"accessRegion"`
	Bandwidth    int    `pulumi:"bandwidth"`
	// Query whether the proxy with the given configuration can be created, 1 can be created, 0 cannot be created.
	CheckFlag  int     `pulumi:"checkFlag"`
	Concurrent int     `pulumi:"concurrent"`
	GroupId    *string `pulumi:"groupId"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	IpAddressVersion *string `pulumi:"ipAddressVersion"`
	NetworkType      *string `pulumi:"networkType"`
	PackageType      *string `pulumi:"packageType"`
	RealServerRegion string  `pulumi:"realServerRegion"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetCheckProxyCreateOutput(ctx *pulumi.Context, args GetCheckProxyCreateOutputArgs, opts ...pulumi.InvokeOption) GetCheckProxyCreateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCheckProxyCreateResult, error) {
			args := v.(GetCheckProxyCreateArgs)
			r, err := GetCheckProxyCreate(ctx, &args, opts...)
			var s GetCheckProxyCreateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCheckProxyCreateResultOutput)
}

// A collection of arguments for invoking getCheckProxyCreate.
type GetCheckProxyCreateOutputArgs struct {
	// The access (acceleration) area of the proxy. The value can be obtained through the interface DescribeAccessRegionsByDestRegion.
	AccessRegion pulumi.StringInput `pulumi:"accessRegion"`
	// The upper limit of proxy bandwidth, in Mbps.
	Bandwidth pulumi.IntInput `pulumi:"bandwidth"`
	// The upper limit of chanproxynel concurrency, representing the number of simultaneous online connections, in tens of thousands.
	Concurrent pulumi.IntInput `pulumi:"concurrent"`
	// If creating a proxy under a proxy group, you need to fill in the ID of the proxy group.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// IP version, can be taken as IPv4 or IPv6, with a default value of IPv4.
	IpAddressVersion pulumi.StringPtrInput `pulumi:"ipAddressVersion"`
	// Network type, can take values &amp;#39;normal&amp;#39;, &amp;#39;cn2&amp;#39;, default value normal.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// Channel package type. Thunder represents the standard proxy group, Accelerator represents the game accelerator proxy, and CrossBorder represents the cross-border proxy.
	PackageType pulumi.StringPtrInput `pulumi:"packageType"`
	// The origin area of the proxy. The value can be obtained through the interface DescribeDestRegions.
	RealServerRegion pulumi.StringInput `pulumi:"realServerRegion"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetCheckProxyCreateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCheckProxyCreateArgs)(nil)).Elem()
}

// A collection of values returned by getCheckProxyCreate.
type GetCheckProxyCreateResultOutput struct{ *pulumi.OutputState }

func (GetCheckProxyCreateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCheckProxyCreateResult)(nil)).Elem()
}

func (o GetCheckProxyCreateResultOutput) ToGetCheckProxyCreateResultOutput() GetCheckProxyCreateResultOutput {
	return o
}

func (o GetCheckProxyCreateResultOutput) ToGetCheckProxyCreateResultOutputWithContext(ctx context.Context) GetCheckProxyCreateResultOutput {
	return o
}

func (o GetCheckProxyCreateResultOutput) AccessRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) string { return v.AccessRegion }).(pulumi.StringOutput)
}

func (o GetCheckProxyCreateResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// Query whether the proxy with the given configuration can be created, 1 can be created, 0 cannot be created.
func (o GetCheckProxyCreateResultOutput) CheckFlag() pulumi.IntOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) int { return v.CheckFlag }).(pulumi.IntOutput)
}

func (o GetCheckProxyCreateResultOutput) Concurrent() pulumi.IntOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) int { return v.Concurrent }).(pulumi.IntOutput)
}

func (o GetCheckProxyCreateResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCheckProxyCreateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCheckProxyCreateResultOutput) IpAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) *string { return v.IpAddressVersion }).(pulumi.StringPtrOutput)
}

func (o GetCheckProxyCreateResultOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

func (o GetCheckProxyCreateResultOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) *string { return v.PackageType }).(pulumi.StringPtrOutput)
}

func (o GetCheckProxyCreateResultOutput) RealServerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) string { return v.RealServerRegion }).(pulumi.StringOutput)
}

func (o GetCheckProxyCreateResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCheckProxyCreateResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCheckProxyCreateResultOutput{})
}
