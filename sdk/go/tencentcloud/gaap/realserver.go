// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a GAAP realserver.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Gaap.NewRealserver(ctx, "foo", &Gaap.RealserverArgs{
//				Ip: pulumi.String("1.1.1.1"),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GAAP realserver can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Gaap/realserver:Realserver tencentcloud_gaap_realserver.foo rs-4ftghy6
//
// ```
type Realserver struct {
	pulumi.CustomResourceState

	// Domain of the GAAP realserver, conflict with `ip`.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// IP of the GAAP realserver, conflict with `domain`.
	Ip pulumi.StringPtrOutput `pulumi:"ip"`
	// Name of the GAAP realserver, the maximum length is 30.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// Tags of the GAAP realserver.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewRealserver registers a new resource with the given unique name, arguments, and options.
func NewRealserver(ctx *pulumi.Context,
	name string, args *RealserverArgs, opts ...pulumi.ResourceOption) (*Realserver, error) {
	if args == nil {
		args = &RealserverArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Realserver
	err := ctx.RegisterResource("tencentcloud:Gaap/realserver:Realserver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRealserver gets an existing Realserver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRealserver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RealserverState, opts ...pulumi.ResourceOption) (*Realserver, error) {
	var resource Realserver
	err := ctx.ReadResource("tencentcloud:Gaap/realserver:Realserver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Realserver resources.
type realserverState struct {
	// Domain of the GAAP realserver, conflict with `ip`.
	Domain *string `pulumi:"domain"`
	// IP of the GAAP realserver, conflict with `domain`.
	Ip *string `pulumi:"ip"`
	// Name of the GAAP realserver, the maximum length is 30.
	Name *string `pulumi:"name"`
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectId *int `pulumi:"projectId"`
	// Tags of the GAAP realserver.
	Tags map[string]interface{} `pulumi:"tags"`
}

type RealserverState struct {
	// Domain of the GAAP realserver, conflict with `ip`.
	Domain pulumi.StringPtrInput
	// IP of the GAAP realserver, conflict with `domain`.
	Ip pulumi.StringPtrInput
	// Name of the GAAP realserver, the maximum length is 30.
	Name pulumi.StringPtrInput
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectId pulumi.IntPtrInput
	// Tags of the GAAP realserver.
	Tags pulumi.MapInput
}

func (RealserverState) ElementType() reflect.Type {
	return reflect.TypeOf((*realserverState)(nil)).Elem()
}

type realserverArgs struct {
	// Domain of the GAAP realserver, conflict with `ip`.
	Domain *string `pulumi:"domain"`
	// IP of the GAAP realserver, conflict with `domain`.
	Ip *string `pulumi:"ip"`
	// Name of the GAAP realserver, the maximum length is 30.
	Name *string `pulumi:"name"`
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectId *int `pulumi:"projectId"`
	// Tags of the GAAP realserver.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a Realserver resource.
type RealserverArgs struct {
	// Domain of the GAAP realserver, conflict with `ip`.
	Domain pulumi.StringPtrInput
	// IP of the GAAP realserver, conflict with `domain`.
	Ip pulumi.StringPtrInput
	// Name of the GAAP realserver, the maximum length is 30.
	Name pulumi.StringPtrInput
	// ID of the project within the GAAP realserver, '0' means is default project.
	ProjectId pulumi.IntPtrInput
	// Tags of the GAAP realserver.
	Tags pulumi.MapInput
}

func (RealserverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*realserverArgs)(nil)).Elem()
}

type RealserverInput interface {
	pulumi.Input

	ToRealserverOutput() RealserverOutput
	ToRealserverOutputWithContext(ctx context.Context) RealserverOutput
}

func (*Realserver) ElementType() reflect.Type {
	return reflect.TypeOf((**Realserver)(nil)).Elem()
}

func (i *Realserver) ToRealserverOutput() RealserverOutput {
	return i.ToRealserverOutputWithContext(context.Background())
}

func (i *Realserver) ToRealserverOutputWithContext(ctx context.Context) RealserverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealserverOutput)
}

// RealserverArrayInput is an input type that accepts RealserverArray and RealserverArrayOutput values.
// You can construct a concrete instance of `RealserverArrayInput` via:
//
//	RealserverArray{ RealserverArgs{...} }
type RealserverArrayInput interface {
	pulumi.Input

	ToRealserverArrayOutput() RealserverArrayOutput
	ToRealserverArrayOutputWithContext(context.Context) RealserverArrayOutput
}

type RealserverArray []RealserverInput

func (RealserverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Realserver)(nil)).Elem()
}

func (i RealserverArray) ToRealserverArrayOutput() RealserverArrayOutput {
	return i.ToRealserverArrayOutputWithContext(context.Background())
}

func (i RealserverArray) ToRealserverArrayOutputWithContext(ctx context.Context) RealserverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealserverArrayOutput)
}

// RealserverMapInput is an input type that accepts RealserverMap and RealserverMapOutput values.
// You can construct a concrete instance of `RealserverMapInput` via:
//
//	RealserverMap{ "key": RealserverArgs{...} }
type RealserverMapInput interface {
	pulumi.Input

	ToRealserverMapOutput() RealserverMapOutput
	ToRealserverMapOutputWithContext(context.Context) RealserverMapOutput
}

type RealserverMap map[string]RealserverInput

func (RealserverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Realserver)(nil)).Elem()
}

func (i RealserverMap) ToRealserverMapOutput() RealserverMapOutput {
	return i.ToRealserverMapOutputWithContext(context.Background())
}

func (i RealserverMap) ToRealserverMapOutputWithContext(ctx context.Context) RealserverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RealserverMapOutput)
}

type RealserverOutput struct{ *pulumi.OutputState }

func (RealserverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Realserver)(nil)).Elem()
}

func (o RealserverOutput) ToRealserverOutput() RealserverOutput {
	return o
}

func (o RealserverOutput) ToRealserverOutputWithContext(ctx context.Context) RealserverOutput {
	return o
}

// Domain of the GAAP realserver, conflict with `ip`.
func (o RealserverOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realserver) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// IP of the GAAP realserver, conflict with `domain`.
func (o RealserverOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Realserver) pulumi.StringPtrOutput { return v.Ip }).(pulumi.StringPtrOutput)
}

// Name of the GAAP realserver, the maximum length is 30.
func (o RealserverOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Realserver) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the project within the GAAP realserver, '0' means is default project.
func (o RealserverOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Realserver) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// Tags of the GAAP realserver.
func (o RealserverOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Realserver) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type RealserverArrayOutput struct{ *pulumi.OutputState }

func (RealserverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Realserver)(nil)).Elem()
}

func (o RealserverArrayOutput) ToRealserverArrayOutput() RealserverArrayOutput {
	return o
}

func (o RealserverArrayOutput) ToRealserverArrayOutputWithContext(ctx context.Context) RealserverArrayOutput {
	return o
}

func (o RealserverArrayOutput) Index(i pulumi.IntInput) RealserverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Realserver {
		return vs[0].([]*Realserver)[vs[1].(int)]
	}).(RealserverOutput)
}

type RealserverMapOutput struct{ *pulumi.OutputState }

func (RealserverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Realserver)(nil)).Elem()
}

func (o RealserverMapOutput) ToRealserverMapOutput() RealserverMapOutput {
	return o
}

func (o RealserverMapOutput) ToRealserverMapOutputWithContext(ctx context.Context) RealserverMapOutput {
	return o
}

func (o RealserverMapOutput) MapIndex(k pulumi.StringInput) RealserverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Realserver {
		return vs[0].(map[string]*Realserver)[vs[1].(string)]
	}).(RealserverOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RealserverInput)(nil)).Elem(), &Realserver{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealserverArrayInput)(nil)).Elem(), RealserverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RealserverMapInput)(nil)).Elem(), RealserverMap{})
	pulumi.RegisterOutputType(RealserverOutput{})
	pulumi.RegisterOutputType(RealserverArrayOutput{})
	pulumi.RegisterOutputType(RealserverMapOutput{})
}
