// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package gaap

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a gaap proxy group
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Gaap"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Gaap.NewProxyGroup(ctx, "proxyGroup", &Gaap.ProxyGroupArgs{
//				GroupName:        pulumi.String("tf-test-update"),
//				IpAddressVersion: pulumi.String("IPv4"),
//				PackageType:      pulumi.String("Thunder"),
//				ProjectId:        pulumi.Int(0),
//				RealServerRegion: pulumi.String("Beijing"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// gaap proxy_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Gaap/proxyGroup:ProxyGroup proxy_group proxy_group_id
//
// ```
type ProxyGroup struct {
	pulumi.CustomResourceState

	// Channel group alias.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
	IpAddressVersion pulumi.StringPtrOutput `pulumi:"ipAddressVersion"`
	// Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
	PackageType pulumi.StringPtrOutput `pulumi:"packageType"`
	// ID of the project to which the proxy group belongs.
	ProjectId pulumi.IntOutput `pulumi:"projectId"`
	// real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
	RealServerRegion pulumi.StringOutput `pulumi:"realServerRegion"`
}

// NewProxyGroup registers a new resource with the given unique name, arguments, and options.
func NewProxyGroup(ctx *pulumi.Context,
	name string, args *ProxyGroupArgs, opts ...pulumi.ResourceOption) (*ProxyGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RealServerRegion == nil {
		return nil, errors.New("invalid value for required argument 'RealServerRegion'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ProxyGroup
	err := ctx.RegisterResource("tencentcloud:Gaap/proxyGroup:ProxyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProxyGroup gets an existing ProxyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProxyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProxyGroupState, opts ...pulumi.ResourceOption) (*ProxyGroup, error) {
	var resource ProxyGroup
	err := ctx.ReadResource("tencentcloud:Gaap/proxyGroup:ProxyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProxyGroup resources.
type proxyGroupState struct {
	// Channel group alias.
	GroupName *string `pulumi:"groupName"`
	// IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
	IpAddressVersion *string `pulumi:"ipAddressVersion"`
	// Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
	PackageType *string `pulumi:"packageType"`
	// ID of the project to which the proxy group belongs.
	ProjectId *int `pulumi:"projectId"`
	// real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
	RealServerRegion *string `pulumi:"realServerRegion"`
}

type ProxyGroupState struct {
	// Channel group alias.
	GroupName pulumi.StringPtrInput
	// IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
	IpAddressVersion pulumi.StringPtrInput
	// Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
	PackageType pulumi.StringPtrInput
	// ID of the project to which the proxy group belongs.
	ProjectId pulumi.IntPtrInput
	// real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
	RealServerRegion pulumi.StringPtrInput
}

func (ProxyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyGroupState)(nil)).Elem()
}

type proxyGroupArgs struct {
	// Channel group alias.
	GroupName string `pulumi:"groupName"`
	// IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
	IpAddressVersion *string `pulumi:"ipAddressVersion"`
	// Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
	PackageType *string `pulumi:"packageType"`
	// ID of the project to which the proxy group belongs.
	ProjectId int `pulumi:"projectId"`
	// real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
	RealServerRegion string `pulumi:"realServerRegion"`
}

// The set of arguments for constructing a ProxyGroup resource.
type ProxyGroupArgs struct {
	// Channel group alias.
	GroupName pulumi.StringInput
	// IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
	IpAddressVersion pulumi.StringPtrInput
	// Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
	PackageType pulumi.StringPtrInput
	// ID of the project to which the proxy group belongs.
	ProjectId pulumi.IntInput
	// real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
	RealServerRegion pulumi.StringInput
}

func (ProxyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*proxyGroupArgs)(nil)).Elem()
}

type ProxyGroupInput interface {
	pulumi.Input

	ToProxyGroupOutput() ProxyGroupOutput
	ToProxyGroupOutputWithContext(ctx context.Context) ProxyGroupOutput
}

func (*ProxyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyGroup)(nil)).Elem()
}

func (i *ProxyGroup) ToProxyGroupOutput() ProxyGroupOutput {
	return i.ToProxyGroupOutputWithContext(context.Background())
}

func (i *ProxyGroup) ToProxyGroupOutputWithContext(ctx context.Context) ProxyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyGroupOutput)
}

// ProxyGroupArrayInput is an input type that accepts ProxyGroupArray and ProxyGroupArrayOutput values.
// You can construct a concrete instance of `ProxyGroupArrayInput` via:
//
//	ProxyGroupArray{ ProxyGroupArgs{...} }
type ProxyGroupArrayInput interface {
	pulumi.Input

	ToProxyGroupArrayOutput() ProxyGroupArrayOutput
	ToProxyGroupArrayOutputWithContext(context.Context) ProxyGroupArrayOutput
}

type ProxyGroupArray []ProxyGroupInput

func (ProxyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxyGroup)(nil)).Elem()
}

func (i ProxyGroupArray) ToProxyGroupArrayOutput() ProxyGroupArrayOutput {
	return i.ToProxyGroupArrayOutputWithContext(context.Background())
}

func (i ProxyGroupArray) ToProxyGroupArrayOutputWithContext(ctx context.Context) ProxyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyGroupArrayOutput)
}

// ProxyGroupMapInput is an input type that accepts ProxyGroupMap and ProxyGroupMapOutput values.
// You can construct a concrete instance of `ProxyGroupMapInput` via:
//
//	ProxyGroupMap{ "key": ProxyGroupArgs{...} }
type ProxyGroupMapInput interface {
	pulumi.Input

	ToProxyGroupMapOutput() ProxyGroupMapOutput
	ToProxyGroupMapOutputWithContext(context.Context) ProxyGroupMapOutput
}

type ProxyGroupMap map[string]ProxyGroupInput

func (ProxyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxyGroup)(nil)).Elem()
}

func (i ProxyGroupMap) ToProxyGroupMapOutput() ProxyGroupMapOutput {
	return i.ToProxyGroupMapOutputWithContext(context.Background())
}

func (i ProxyGroupMap) ToProxyGroupMapOutputWithContext(ctx context.Context) ProxyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProxyGroupMapOutput)
}

type ProxyGroupOutput struct{ *pulumi.OutputState }

func (ProxyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProxyGroup)(nil)).Elem()
}

func (o ProxyGroupOutput) ToProxyGroupOutput() ProxyGroupOutput {
	return o
}

func (o ProxyGroupOutput) ToProxyGroupOutputWithContext(ctx context.Context) ProxyGroupOutput {
	return o
}

// Channel group alias.
func (o ProxyGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// IP version, can be taken as IPv4 or IPv6 with a default value of IPv4.
func (o ProxyGroupOutput) IpAddressVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyGroup) pulumi.StringPtrOutput { return v.IpAddressVersion }).(pulumi.StringPtrOutput)
}

// Package type of channel group. Available values: Thunder and Accelerator. Default is Thunder.
func (o ProxyGroupOutput) PackageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProxyGroup) pulumi.StringPtrOutput { return v.PackageType }).(pulumi.StringPtrOutput)
}

// ID of the project to which the proxy group belongs.
func (o ProxyGroupOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v *ProxyGroup) pulumi.IntOutput { return v.ProjectId }).(pulumi.IntOutput)
}

// real server region, refer to the interface DescribeDestRegions to return the RegionId in the parameter RegionDetail.
func (o ProxyGroupOutput) RealServerRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProxyGroup) pulumi.StringOutput { return v.RealServerRegion }).(pulumi.StringOutput)
}

type ProxyGroupArrayOutput struct{ *pulumi.OutputState }

func (ProxyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProxyGroup)(nil)).Elem()
}

func (o ProxyGroupArrayOutput) ToProxyGroupArrayOutput() ProxyGroupArrayOutput {
	return o
}

func (o ProxyGroupArrayOutput) ToProxyGroupArrayOutputWithContext(ctx context.Context) ProxyGroupArrayOutput {
	return o
}

func (o ProxyGroupArrayOutput) Index(i pulumi.IntInput) ProxyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProxyGroup {
		return vs[0].([]*ProxyGroup)[vs[1].(int)]
	}).(ProxyGroupOutput)
}

type ProxyGroupMapOutput struct{ *pulumi.OutputState }

func (ProxyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProxyGroup)(nil)).Elem()
}

func (o ProxyGroupMapOutput) ToProxyGroupMapOutput() ProxyGroupMapOutput {
	return o
}

func (o ProxyGroupMapOutput) ToProxyGroupMapOutputWithContext(ctx context.Context) ProxyGroupMapOutput {
	return o
}

func (o ProxyGroupMapOutput) MapIndex(k pulumi.StringInput) ProxyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProxyGroup {
		return vs[0].(map[string]*ProxyGroup)[vs[1].(string)]
	}).(ProxyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyGroupInput)(nil)).Elem(), &ProxyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyGroupArrayInput)(nil)).Elem(), ProxyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProxyGroupMapInput)(nil)).Elem(), ProxyGroupMap{})
	pulumi.RegisterOutputType(ProxyGroupOutput{})
	pulumi.RegisterOutputType(ProxyGroupArrayOutput{})
	pulumi.RegisterOutputType(ProxyGroupMapOutput{})
}
