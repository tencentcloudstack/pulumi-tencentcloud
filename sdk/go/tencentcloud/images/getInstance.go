// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package images

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query images.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Images"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Images.GetInstance(ctx, &images.GetInstanceArgs{
//				ImageTypes: []string{
//					"PUBLIC_IMAGE",
//				},
//				OsName: pulumi.StringRef("centos 7.5"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInstance(ctx *pulumi.Context, args *GetInstanceArgs, opts ...pulumi.InvokeOption) (*GetInstanceResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetInstanceResult
	err := ctx.Invoke("tencentcloud:Images/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type GetInstanceArgs struct {
	// ID of the image to be queried.
	ImageId *string `pulumi:"imageId"`
	// A regex string to apply to the image list returned by TencentCloud, conflict with 'os_name'. **NOTE**: it is not wildcard, should look like `imageNameRegex = "^CentOS\s+6\.8\s+64\w*"`.
	ImageNameRegex *string `pulumi:"imageNameRegex"`
	// A list of the image type to be queried. Valid values: 'PUBLIC_IMAGE', 'PRIVATE_IMAGE', 'SHARED_IMAGE', 'MARKET_IMAGE'.
	ImageTypes []string `pulumi:"imageTypes"`
	// Instance type, such as `S1.SMALL1`.
	InstanceType *string `pulumi:"instanceType"`
	// A string to apply with fuzzy match to the osName attribute on the image list returned by TencentCloud, conflict with 'image_name_regex'.
	OsName *string `pulumi:"osName"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getInstance.
type GetInstanceResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// ID of the image.
	ImageId        *string `pulumi:"imageId"`
	ImageNameRegex *string `pulumi:"imageNameRegex"`
	// Type of the image.
	ImageTypes []string `pulumi:"imageTypes"`
	// An information list of image. Each element contains the following attributes:
	Images       []GetInstanceImage `pulumi:"images"`
	InstanceType *string            `pulumi:"instanceType"`
	// OS name of the image.
	OsName           *string `pulumi:"osName"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

func GetInstanceOutput(ctx *pulumi.Context, args GetInstanceOutputArgs, opts ...pulumi.InvokeOption) GetInstanceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstanceResult, error) {
			args := v.(GetInstanceArgs)
			r, err := GetInstance(ctx, &args, opts...)
			var s GetInstanceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type GetInstanceOutputArgs struct {
	// ID of the image to be queried.
	ImageId pulumi.StringPtrInput `pulumi:"imageId"`
	// A regex string to apply to the image list returned by TencentCloud, conflict with 'os_name'. **NOTE**: it is not wildcard, should look like `imageNameRegex = "^CentOS\s+6\.8\s+64\w*"`.
	ImageNameRegex pulumi.StringPtrInput `pulumi:"imageNameRegex"`
	// A list of the image type to be queried. Valid values: 'PUBLIC_IMAGE', 'PRIVATE_IMAGE', 'SHARED_IMAGE', 'MARKET_IMAGE'.
	ImageTypes pulumi.StringArrayInput `pulumi:"imageTypes"`
	// Instance type, such as `S1.SMALL1`.
	InstanceType pulumi.StringPtrInput `pulumi:"instanceType"`
	// A string to apply with fuzzy match to the osName attribute on the image list returned by TencentCloud, conflict with 'image_name_regex'.
	OsName pulumi.StringPtrInput `pulumi:"osName"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (GetInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type GetInstanceResultOutput struct{ *pulumi.OutputState }

func (GetInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceResult)(nil)).Elem()
}

func (o GetInstanceResultOutput) ToGetInstanceResultOutput() GetInstanceResultOutput {
	return o
}

func (o GetInstanceResultOutput) ToGetInstanceResultOutputWithContext(ctx context.Context) GetInstanceResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// ID of the image.
func (o GetInstanceResultOutput) ImageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceResult) *string { return v.ImageId }).(pulumi.StringPtrOutput)
}

func (o GetInstanceResultOutput) ImageNameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceResult) *string { return v.ImageNameRegex }).(pulumi.StringPtrOutput)
}

// Type of the image.
func (o GetInstanceResultOutput) ImageTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceResult) []string { return v.ImageTypes }).(pulumi.StringArrayOutput)
}

// An information list of image. Each element contains the following attributes:
func (o GetInstanceResultOutput) Images() GetInstanceImageArrayOutput {
	return o.ApplyT(func(v GetInstanceResult) []GetInstanceImage { return v.Images }).(GetInstanceImageArrayOutput)
}

func (o GetInstanceResultOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceResult) *string { return v.InstanceType }).(pulumi.StringPtrOutput)
}

// OS name of the image.
func (o GetInstanceResultOutput) OsName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceResult) *string { return v.OsName }).(pulumi.StringPtrOutput)
}

func (o GetInstanceResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstanceResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstanceResultOutput{})
}
