// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage Guetzli compression functionality
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewGuetzli(ctx, "foo", &Ci.GuetzliArgs{
//				Bucket: pulumi.String("examplebucket-1250000000"),
//				Status: pulumi.String("on"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Resource guetzli can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/guetzli:Guetzli example examplebucket-1250000000
//
// ```
type Guetzli struct {
	pulumi.CustomResourceState

	// The name of a bucket, the format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Whether Guetzli is set, options: on/off.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewGuetzli registers a new resource with the given unique name, arguments, and options.
func NewGuetzli(ctx *pulumi.Context,
	name string, args *GuetzliArgs, opts ...pulumi.ResourceOption) (*Guetzli, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Guetzli
	err := ctx.RegisterResource("tencentcloud:Ci/guetzli:Guetzli", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGuetzli gets an existing Guetzli resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGuetzli(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GuetzliState, opts ...pulumi.ResourceOption) (*Guetzli, error) {
	var resource Guetzli
	err := ctx.ReadResource("tencentcloud:Ci/guetzli:Guetzli", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Guetzli resources.
type guetzliState struct {
	// The name of a bucket, the format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket *string `pulumi:"bucket"`
	// Whether Guetzli is set, options: on/off.
	Status *string `pulumi:"status"`
}

type GuetzliState struct {
	// The name of a bucket, the format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringPtrInput
	// Whether Guetzli is set, options: on/off.
	Status pulumi.StringPtrInput
}

func (GuetzliState) ElementType() reflect.Type {
	return reflect.TypeOf((*guetzliState)(nil)).Elem()
}

type guetzliArgs struct {
	// The name of a bucket, the format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket string `pulumi:"bucket"`
	// Whether Guetzli is set, options: on/off.
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a Guetzli resource.
type GuetzliArgs struct {
	// The name of a bucket, the format should be [custom name]-[appid], for example `mycos-1258798060`.
	Bucket pulumi.StringInput
	// Whether Guetzli is set, options: on/off.
	Status pulumi.StringInput
}

func (GuetzliArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*guetzliArgs)(nil)).Elem()
}

type GuetzliInput interface {
	pulumi.Input

	ToGuetzliOutput() GuetzliOutput
	ToGuetzliOutputWithContext(ctx context.Context) GuetzliOutput
}

func (*Guetzli) ElementType() reflect.Type {
	return reflect.TypeOf((**Guetzli)(nil)).Elem()
}

func (i *Guetzli) ToGuetzliOutput() GuetzliOutput {
	return i.ToGuetzliOutputWithContext(context.Background())
}

func (i *Guetzli) ToGuetzliOutputWithContext(ctx context.Context) GuetzliOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuetzliOutput)
}

// GuetzliArrayInput is an input type that accepts GuetzliArray and GuetzliArrayOutput values.
// You can construct a concrete instance of `GuetzliArrayInput` via:
//
//	GuetzliArray{ GuetzliArgs{...} }
type GuetzliArrayInput interface {
	pulumi.Input

	ToGuetzliArrayOutput() GuetzliArrayOutput
	ToGuetzliArrayOutputWithContext(context.Context) GuetzliArrayOutput
}

type GuetzliArray []GuetzliInput

func (GuetzliArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Guetzli)(nil)).Elem()
}

func (i GuetzliArray) ToGuetzliArrayOutput() GuetzliArrayOutput {
	return i.ToGuetzliArrayOutputWithContext(context.Background())
}

func (i GuetzliArray) ToGuetzliArrayOutputWithContext(ctx context.Context) GuetzliArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuetzliArrayOutput)
}

// GuetzliMapInput is an input type that accepts GuetzliMap and GuetzliMapOutput values.
// You can construct a concrete instance of `GuetzliMapInput` via:
//
//	GuetzliMap{ "key": GuetzliArgs{...} }
type GuetzliMapInput interface {
	pulumi.Input

	ToGuetzliMapOutput() GuetzliMapOutput
	ToGuetzliMapOutputWithContext(context.Context) GuetzliMapOutput
}

type GuetzliMap map[string]GuetzliInput

func (GuetzliMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Guetzli)(nil)).Elem()
}

func (i GuetzliMap) ToGuetzliMapOutput() GuetzliMapOutput {
	return i.ToGuetzliMapOutputWithContext(context.Background())
}

func (i GuetzliMap) ToGuetzliMapOutputWithContext(ctx context.Context) GuetzliMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GuetzliMapOutput)
}

type GuetzliOutput struct{ *pulumi.OutputState }

func (GuetzliOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Guetzli)(nil)).Elem()
}

func (o GuetzliOutput) ToGuetzliOutput() GuetzliOutput {
	return o
}

func (o GuetzliOutput) ToGuetzliOutputWithContext(ctx context.Context) GuetzliOutput {
	return o
}

// The name of a bucket, the format should be [custom name]-[appid], for example `mycos-1258798060`.
func (o GuetzliOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *Guetzli) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Whether Guetzli is set, options: on/off.
func (o GuetzliOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Guetzli) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type GuetzliArrayOutput struct{ *pulumi.OutputState }

func (GuetzliArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Guetzli)(nil)).Elem()
}

func (o GuetzliArrayOutput) ToGuetzliArrayOutput() GuetzliArrayOutput {
	return o
}

func (o GuetzliArrayOutput) ToGuetzliArrayOutputWithContext(ctx context.Context) GuetzliArrayOutput {
	return o
}

func (o GuetzliArrayOutput) Index(i pulumi.IntInput) GuetzliOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Guetzli {
		return vs[0].([]*Guetzli)[vs[1].(int)]
	}).(GuetzliOutput)
}

type GuetzliMapOutput struct{ *pulumi.OutputState }

func (GuetzliMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Guetzli)(nil)).Elem()
}

func (o GuetzliMapOutput) ToGuetzliMapOutput() GuetzliMapOutput {
	return o
}

func (o GuetzliMapOutput) ToGuetzliMapOutputWithContext(ctx context.Context) GuetzliMapOutput {
	return o
}

func (o GuetzliMapOutput) MapIndex(k pulumi.StringInput) GuetzliOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Guetzli {
		return vs[0].(map[string]*Guetzli)[vs[1].(string)]
	}).(GuetzliOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GuetzliInput)(nil)).Elem(), &Guetzli{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuetzliArrayInput)(nil)).Elem(), GuetzliArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GuetzliMapInput)(nil)).Elem(), GuetzliMap{})
	pulumi.RegisterOutputType(GuetzliOutput{})
	pulumi.RegisterOutputType(GuetzliArrayOutput{})
	pulumi.RegisterOutputType(GuetzliMapOutput{})
}
