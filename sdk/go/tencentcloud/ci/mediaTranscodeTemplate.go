// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaTranscodeTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaTranscodeTemplate(ctx, "mediaTranscodeTemplate", &Ci.MediaTranscodeTemplateArgs{
//				Audio: &ci.MediaTranscodeTemplateAudioArgs{
//					Bitrate:       pulumi.String("128"),
//					Channels:      pulumi.String("4"),
//					Codec:         pulumi.String("aac"),
//					KeepTwoTracks: pulumi.String("false"),
//					Remove:        pulumi.String("false"),
//					SampleFormat:  pulumi.String(""),
//					Samplerate:    pulumi.String("44100"),
//					SwitchTrack:   pulumi.String("false"),
//				},
//				AudioMixes: ci.MediaTranscodeTemplateAudioMixArray{
//					&ci.MediaTranscodeTemplateAudioMixArgs{
//						AudioSource: pulumi.String(fmt.Sprintf("%v%v%v", "https://terraform-ci-1308919341.cos.ap-guangzhou.myqcloud.com/mp3", "%", "2Fnizhan-test.mp3")),
//						EffectConfig: &ci.MediaTranscodeTemplateAudioMixEffectConfigArgs{
//							BgmFadeTime:       pulumi.String("1.7"),
//							EnableBgmFade:     pulumi.String("true"),
//							EnableEndFadeout:  pulumi.String("false"),
//							EnableStartFadein: pulumi.String("true"),
//							EndFadeoutTime:    pulumi.String("0"),
//							StartFadeinTime:   pulumi.String("3"),
//						},
//						MixMode: pulumi.String("Once"),
//						Replace: pulumi.String("true"),
//					},
//				},
//				Bucket: pulumi.String("terraform-ci-1308919341"),
//				Container: &ci.MediaTranscodeTemplateContainerArgs{
//					Format: pulumi.String("mp4"),
//				},
//				TimeInterval: &ci.MediaTranscodeTemplateTimeIntervalArgs{
//					Duration: pulumi.String("60"),
//					Start:    pulumi.String("0"),
//				},
//				TransConfig: &ci.MediaTranscodeTemplateTransConfigArgs{
//					AdjDarMethod:          pulumi.String("scale"),
//					AudioBitrateAdjMethod: pulumi.String("0"),
//					DeleteMetadata:        pulumi.String("false"),
//					IsCheckAudioBitrate:   pulumi.String("false"),
//					IsCheckReso:           pulumi.String("false"),
//					IsCheckVideoBitrate:   pulumi.String("false"),
//					IsHdr2Sdr:             pulumi.String("false"),
//					ResoAdjMethod:         pulumi.String("1"),
//					VideoBitrateAdjMethod: pulumi.String("0"),
//				},
//				Video: &ci.MediaTranscodeTemplateVideoArgs{
//					Bitrate:       pulumi.String("1000"),
//					Codec:         pulumi.String("H.264"),
//					Fps:           pulumi.String("30"),
//					LongShortMode: pulumi.String("false"),
//					Preset:        pulumi.String("medium"),
//					Profile:       pulumi.String("high"),
//					Remove:        pulumi.String("false"),
//					Width:         pulumi.String("1280"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_transcode_template can be imported using the bucket#templateId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaTranscodeTemplate:MediaTranscodeTemplate media_transcode_template media_transcode_template_id
//
// ```
type MediaTranscodeTemplate struct {
	pulumi.CustomResourceState

	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio MediaTranscodeTemplateAudioPtrOutput `pulumi:"audio"`
	// mixing parameters.
	AudioMixes MediaTranscodeTemplateAudioMixArrayOutput `pulumi:"audioMixes"`
	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// container format.
	Container MediaTranscodeTemplateContainerOutput `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// time interval.
	TimeInterval MediaTranscodeTemplateTimeIntervalPtrOutput `pulumi:"timeInterval"`
	// transcoding configuration.
	TransConfig MediaTranscodeTemplateTransConfigPtrOutput `pulumi:"transConfig"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaTranscodeTemplateVideoPtrOutput `pulumi:"video"`
}

// NewMediaTranscodeTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaTranscodeTemplate(ctx *pulumi.Context,
	name string, args *MediaTranscodeTemplateArgs, opts ...pulumi.ResourceOption) (*MediaTranscodeTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaTranscodeTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaTranscodeTemplate:MediaTranscodeTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaTranscodeTemplate gets an existing MediaTranscodeTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaTranscodeTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaTranscodeTemplateState, opts ...pulumi.ResourceOption) (*MediaTranscodeTemplate, error) {
	var resource MediaTranscodeTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaTranscodeTemplate:MediaTranscodeTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaTranscodeTemplate resources.
type mediaTranscodeTemplateState struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio *MediaTranscodeTemplateAudio `pulumi:"audio"`
	// mixing parameters.
	AudioMixes []MediaTranscodeTemplateAudioMix `pulumi:"audioMixes"`
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// container format.
	Container *MediaTranscodeTemplateContainer `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// time interval.
	TimeInterval *MediaTranscodeTemplateTimeInterval `pulumi:"timeInterval"`
	// transcoding configuration.
	TransConfig *MediaTranscodeTemplateTransConfig `pulumi:"transConfig"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaTranscodeTemplateVideo `pulumi:"video"`
}

type MediaTranscodeTemplateState struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio MediaTranscodeTemplateAudioPtrInput
	// mixing parameters.
	AudioMixes MediaTranscodeTemplateAudioMixArrayInput
	// bucket name.
	Bucket pulumi.StringPtrInput
	// container format.
	Container MediaTranscodeTemplateContainerPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// time interval.
	TimeInterval MediaTranscodeTemplateTimeIntervalPtrInput
	// transcoding configuration.
	TransConfig MediaTranscodeTemplateTransConfigPtrInput
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaTranscodeTemplateVideoPtrInput
}

func (MediaTranscodeTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaTranscodeTemplateState)(nil)).Elem()
}

type mediaTranscodeTemplateArgs struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio *MediaTranscodeTemplateAudio `pulumi:"audio"`
	// mixing parameters.
	AudioMixes []MediaTranscodeTemplateAudioMix `pulumi:"audioMixes"`
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// container format.
	Container MediaTranscodeTemplateContainer `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// time interval.
	TimeInterval *MediaTranscodeTemplateTimeInterval `pulumi:"timeInterval"`
	// transcoding configuration.
	TransConfig *MediaTranscodeTemplateTransConfig `pulumi:"transConfig"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaTranscodeTemplateVideo `pulumi:"video"`
}

// The set of arguments for constructing a MediaTranscodeTemplate resource.
type MediaTranscodeTemplateArgs struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio MediaTranscodeTemplateAudioPtrInput
	// mixing parameters.
	AudioMixes MediaTranscodeTemplateAudioMixArrayInput
	// bucket name.
	Bucket pulumi.StringInput
	// container format.
	Container MediaTranscodeTemplateContainerInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// time interval.
	TimeInterval MediaTranscodeTemplateTimeIntervalPtrInput
	// transcoding configuration.
	TransConfig MediaTranscodeTemplateTransConfigPtrInput
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaTranscodeTemplateVideoPtrInput
}

func (MediaTranscodeTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaTranscodeTemplateArgs)(nil)).Elem()
}

type MediaTranscodeTemplateInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateOutput() MediaTranscodeTemplateOutput
	ToMediaTranscodeTemplateOutputWithContext(ctx context.Context) MediaTranscodeTemplateOutput
}

func (*MediaTranscodeTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplate)(nil)).Elem()
}

func (i *MediaTranscodeTemplate) ToMediaTranscodeTemplateOutput() MediaTranscodeTemplateOutput {
	return i.ToMediaTranscodeTemplateOutputWithContext(context.Background())
}

func (i *MediaTranscodeTemplate) ToMediaTranscodeTemplateOutputWithContext(ctx context.Context) MediaTranscodeTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateOutput)
}

// MediaTranscodeTemplateArrayInput is an input type that accepts MediaTranscodeTemplateArray and MediaTranscodeTemplateArrayOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateArrayInput` via:
//
//	MediaTranscodeTemplateArray{ MediaTranscodeTemplateArgs{...} }
type MediaTranscodeTemplateArrayInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateArrayOutput() MediaTranscodeTemplateArrayOutput
	ToMediaTranscodeTemplateArrayOutputWithContext(context.Context) MediaTranscodeTemplateArrayOutput
}

type MediaTranscodeTemplateArray []MediaTranscodeTemplateInput

func (MediaTranscodeTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaTranscodeTemplate)(nil)).Elem()
}

func (i MediaTranscodeTemplateArray) ToMediaTranscodeTemplateArrayOutput() MediaTranscodeTemplateArrayOutput {
	return i.ToMediaTranscodeTemplateArrayOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateArray) ToMediaTranscodeTemplateArrayOutputWithContext(ctx context.Context) MediaTranscodeTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateArrayOutput)
}

// MediaTranscodeTemplateMapInput is an input type that accepts MediaTranscodeTemplateMap and MediaTranscodeTemplateMapOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateMapInput` via:
//
//	MediaTranscodeTemplateMap{ "key": MediaTranscodeTemplateArgs{...} }
type MediaTranscodeTemplateMapInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateMapOutput() MediaTranscodeTemplateMapOutput
	ToMediaTranscodeTemplateMapOutputWithContext(context.Context) MediaTranscodeTemplateMapOutput
}

type MediaTranscodeTemplateMap map[string]MediaTranscodeTemplateInput

func (MediaTranscodeTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaTranscodeTemplate)(nil)).Elem()
}

func (i MediaTranscodeTemplateMap) ToMediaTranscodeTemplateMapOutput() MediaTranscodeTemplateMapOutput {
	return i.ToMediaTranscodeTemplateMapOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateMap) ToMediaTranscodeTemplateMapOutputWithContext(ctx context.Context) MediaTranscodeTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateMapOutput)
}

type MediaTranscodeTemplateOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplate)(nil)).Elem()
}

func (o MediaTranscodeTemplateOutput) ToMediaTranscodeTemplateOutput() MediaTranscodeTemplateOutput {
	return o
}

func (o MediaTranscodeTemplateOutput) ToMediaTranscodeTemplateOutputWithContext(ctx context.Context) MediaTranscodeTemplateOutput {
	return o
}

// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
func (o MediaTranscodeTemplateOutput) Audio() MediaTranscodeTemplateAudioPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) MediaTranscodeTemplateAudioPtrOutput { return v.Audio }).(MediaTranscodeTemplateAudioPtrOutput)
}

// mixing parameters.
func (o MediaTranscodeTemplateOutput) AudioMixes() MediaTranscodeTemplateAudioMixArrayOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) MediaTranscodeTemplateAudioMixArrayOutput { return v.AudioMixes }).(MediaTranscodeTemplateAudioMixArrayOutput)
}

// bucket name.
func (o MediaTranscodeTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// container format.
func (o MediaTranscodeTemplateOutput) Container() MediaTranscodeTemplateContainerOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) MediaTranscodeTemplateContainerOutput { return v.Container }).(MediaTranscodeTemplateContainerOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaTranscodeTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// time interval.
func (o MediaTranscodeTemplateOutput) TimeInterval() MediaTranscodeTemplateTimeIntervalPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) MediaTranscodeTemplateTimeIntervalPtrOutput { return v.TimeInterval }).(MediaTranscodeTemplateTimeIntervalPtrOutput)
}

// transcoding configuration.
func (o MediaTranscodeTemplateOutput) TransConfig() MediaTranscodeTemplateTransConfigPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) MediaTranscodeTemplateTransConfigPtrOutput { return v.TransConfig }).(MediaTranscodeTemplateTransConfigPtrOutput)
}

// video information, do not upload Video, which is equivalent to deleting video information.
func (o MediaTranscodeTemplateOutput) Video() MediaTranscodeTemplateVideoPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplate) MediaTranscodeTemplateVideoPtrOutput { return v.Video }).(MediaTranscodeTemplateVideoPtrOutput)
}

type MediaTranscodeTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaTranscodeTemplate)(nil)).Elem()
}

func (o MediaTranscodeTemplateArrayOutput) ToMediaTranscodeTemplateArrayOutput() MediaTranscodeTemplateArrayOutput {
	return o
}

func (o MediaTranscodeTemplateArrayOutput) ToMediaTranscodeTemplateArrayOutputWithContext(ctx context.Context) MediaTranscodeTemplateArrayOutput {
	return o
}

func (o MediaTranscodeTemplateArrayOutput) Index(i pulumi.IntInput) MediaTranscodeTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaTranscodeTemplate {
		return vs[0].([]*MediaTranscodeTemplate)[vs[1].(int)]
	}).(MediaTranscodeTemplateOutput)
}

type MediaTranscodeTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaTranscodeTemplate)(nil)).Elem()
}

func (o MediaTranscodeTemplateMapOutput) ToMediaTranscodeTemplateMapOutput() MediaTranscodeTemplateMapOutput {
	return o
}

func (o MediaTranscodeTemplateMapOutput) ToMediaTranscodeTemplateMapOutputWithContext(ctx context.Context) MediaTranscodeTemplateMapOutput {
	return o
}

func (o MediaTranscodeTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaTranscodeTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaTranscodeTemplate {
		return vs[0].(map[string]*MediaTranscodeTemplate)[vs[1].(string)]
	}).(MediaTranscodeTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateInput)(nil)).Elem(), &MediaTranscodeTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateArrayInput)(nil)).Elem(), MediaTranscodeTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateMapInput)(nil)).Elem(), MediaTranscodeTemplateMap{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateMapOutput{})
}
