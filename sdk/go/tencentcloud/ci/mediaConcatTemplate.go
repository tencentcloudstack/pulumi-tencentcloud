// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaConcatTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaConcatTemplate(ctx, "mediaConcatTemplate", &Ci.MediaConcatTemplateArgs{
//				Bucket: pulumi.String("terraform-ci-xxxxxx"),
//				ConcatTemplate: &ci.MediaConcatTemplateConcatTemplateArgs{
//					Audio: &ci.MediaConcatTemplateConcatTemplateAudioArgs{
//						Bitrate:    pulumi.String(""),
//						Channels:   pulumi.String(""),
//						Codec:      pulumi.String("mp3"),
//						Samplerate: pulumi.String(""),
//					},
//					AudioMixes: ci.MediaConcatTemplateConcatTemplateAudioMixArray{
//						&ci.MediaConcatTemplateConcatTemplateAudioMixArgs{
//							AudioSource: pulumi.String(fmt.Sprintf("%v%v%v", "https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp3", "%", "2Fnizhan-test.mp3")),
//							EffectConfig: &ci.MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs{
//								BgmFadeTime:       pulumi.String("1.7"),
//								EnableBgmFade:     pulumi.String("true"),
//								EnableEndFadeout:  pulumi.String("false"),
//								EnableStartFadein: pulumi.String("true"),
//								EndFadeoutTime:    pulumi.String("0.1"),
//								StartFadeinTime:   pulumi.String("3"),
//							},
//							MixMode: pulumi.String("Once"),
//							Replace: pulumi.String("true"),
//						},
//					},
//					ConcatFragments: ci.MediaConcatTemplateConcatTemplateConcatFragmentArray{
//						&ci.MediaConcatTemplateConcatTemplateConcatFragmentArgs{
//							Mode: pulumi.String("Start"),
//							Url:  pulumi.String(fmt.Sprintf("%v%v%v", "https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp4", "%", "2Fmp4-test.mp4")),
//						},
//						&ci.MediaConcatTemplateConcatTemplateConcatFragmentArgs{
//							Mode: pulumi.String("End"),
//							Url:  pulumi.String(fmt.Sprintf("%v%v%v", "https://terraform-ci-xxxxxx.cos.ap-guangzhou.myqcloud.com/mp4", "%", "2Fmp4-test.mp4")),
//						},
//					},
//					Container: &ci.MediaConcatTemplateConcatTemplateContainerArgs{
//						Format: pulumi.String("mp4"),
//					},
//					Video: &ci.MediaConcatTemplateConcatTemplateVideoArgs{
//						Bitrate: pulumi.String("1000"),
//						Codec:   pulumi.String("H.264"),
//						Crf:     pulumi.String(""),
//						Fps:     pulumi.String("25"),
//						Height:  pulumi.String(""),
//						Remove:  pulumi.String(""),
//						Rotate:  pulumi.String(""),
//						Width:   pulumi.String("1280"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_concat_template can be imported using the bucket#templateId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate media_concat_template id=terraform-ci-xxxxxx#t1cb115dfa1fcc414284f83b7c69bcedcf
//
// ```
type MediaConcatTemplate struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// stitching template.
	ConcatTemplate MediaConcatTemplateConcatTemplateOutput `pulumi:"concatTemplate"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMediaConcatTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaConcatTemplate(ctx *pulumi.Context,
	name string, args *MediaConcatTemplateArgs, opts ...pulumi.ResourceOption) (*MediaConcatTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.ConcatTemplate == nil {
		return nil, errors.New("invalid value for required argument 'ConcatTemplate'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaConcatTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaConcatTemplate gets an existing MediaConcatTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaConcatTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaConcatTemplateState, opts ...pulumi.ResourceOption) (*MediaConcatTemplate, error) {
	var resource MediaConcatTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaConcatTemplate:MediaConcatTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaConcatTemplate resources.
type mediaConcatTemplateState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// stitching template.
	ConcatTemplate *MediaConcatTemplateConcatTemplate `pulumi:"concatTemplate"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
}

type MediaConcatTemplateState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// stitching template.
	ConcatTemplate MediaConcatTemplateConcatTemplatePtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
}

func (MediaConcatTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaConcatTemplateState)(nil)).Elem()
}

type mediaConcatTemplateArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// stitching template.
	ConcatTemplate MediaConcatTemplateConcatTemplate `pulumi:"concatTemplate"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MediaConcatTemplate resource.
type MediaConcatTemplateArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
	// stitching template.
	ConcatTemplate MediaConcatTemplateConcatTemplateInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
}

func (MediaConcatTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaConcatTemplateArgs)(nil)).Elem()
}

type MediaConcatTemplateInput interface {
	pulumi.Input

	ToMediaConcatTemplateOutput() MediaConcatTemplateOutput
	ToMediaConcatTemplateOutputWithContext(ctx context.Context) MediaConcatTemplateOutput
}

func (*MediaConcatTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplate)(nil)).Elem()
}

func (i *MediaConcatTemplate) ToMediaConcatTemplateOutput() MediaConcatTemplateOutput {
	return i.ToMediaConcatTemplateOutputWithContext(context.Background())
}

func (i *MediaConcatTemplate) ToMediaConcatTemplateOutputWithContext(ctx context.Context) MediaConcatTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateOutput)
}

// MediaConcatTemplateArrayInput is an input type that accepts MediaConcatTemplateArray and MediaConcatTemplateArrayOutput values.
// You can construct a concrete instance of `MediaConcatTemplateArrayInput` via:
//
//	MediaConcatTemplateArray{ MediaConcatTemplateArgs{...} }
type MediaConcatTemplateArrayInput interface {
	pulumi.Input

	ToMediaConcatTemplateArrayOutput() MediaConcatTemplateArrayOutput
	ToMediaConcatTemplateArrayOutputWithContext(context.Context) MediaConcatTemplateArrayOutput
}

type MediaConcatTemplateArray []MediaConcatTemplateInput

func (MediaConcatTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaConcatTemplate)(nil)).Elem()
}

func (i MediaConcatTemplateArray) ToMediaConcatTemplateArrayOutput() MediaConcatTemplateArrayOutput {
	return i.ToMediaConcatTemplateArrayOutputWithContext(context.Background())
}

func (i MediaConcatTemplateArray) ToMediaConcatTemplateArrayOutputWithContext(ctx context.Context) MediaConcatTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateArrayOutput)
}

// MediaConcatTemplateMapInput is an input type that accepts MediaConcatTemplateMap and MediaConcatTemplateMapOutput values.
// You can construct a concrete instance of `MediaConcatTemplateMapInput` via:
//
//	MediaConcatTemplateMap{ "key": MediaConcatTemplateArgs{...} }
type MediaConcatTemplateMapInput interface {
	pulumi.Input

	ToMediaConcatTemplateMapOutput() MediaConcatTemplateMapOutput
	ToMediaConcatTemplateMapOutputWithContext(context.Context) MediaConcatTemplateMapOutput
}

type MediaConcatTemplateMap map[string]MediaConcatTemplateInput

func (MediaConcatTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaConcatTemplate)(nil)).Elem()
}

func (i MediaConcatTemplateMap) ToMediaConcatTemplateMapOutput() MediaConcatTemplateMapOutput {
	return i.ToMediaConcatTemplateMapOutputWithContext(context.Background())
}

func (i MediaConcatTemplateMap) ToMediaConcatTemplateMapOutputWithContext(ctx context.Context) MediaConcatTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateMapOutput)
}

type MediaConcatTemplateOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplate)(nil)).Elem()
}

func (o MediaConcatTemplateOutput) ToMediaConcatTemplateOutput() MediaConcatTemplateOutput {
	return o
}

func (o MediaConcatTemplateOutput) ToMediaConcatTemplateOutputWithContext(ctx context.Context) MediaConcatTemplateOutput {
	return o
}

// bucket name.
func (o MediaConcatTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaConcatTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// stitching template.
func (o MediaConcatTemplateOutput) ConcatTemplate() MediaConcatTemplateConcatTemplateOutput {
	return o.ApplyT(func(v *MediaConcatTemplate) MediaConcatTemplateConcatTemplateOutput { return v.ConcatTemplate }).(MediaConcatTemplateConcatTemplateOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaConcatTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaConcatTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MediaConcatTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaConcatTemplate)(nil)).Elem()
}

func (o MediaConcatTemplateArrayOutput) ToMediaConcatTemplateArrayOutput() MediaConcatTemplateArrayOutput {
	return o
}

func (o MediaConcatTemplateArrayOutput) ToMediaConcatTemplateArrayOutputWithContext(ctx context.Context) MediaConcatTemplateArrayOutput {
	return o
}

func (o MediaConcatTemplateArrayOutput) Index(i pulumi.IntInput) MediaConcatTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaConcatTemplate {
		return vs[0].([]*MediaConcatTemplate)[vs[1].(int)]
	}).(MediaConcatTemplateOutput)
}

type MediaConcatTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaConcatTemplate)(nil)).Elem()
}

func (o MediaConcatTemplateMapOutput) ToMediaConcatTemplateMapOutput() MediaConcatTemplateMapOutput {
	return o
}

func (o MediaConcatTemplateMapOutput) ToMediaConcatTemplateMapOutputWithContext(ctx context.Context) MediaConcatTemplateMapOutput {
	return o
}

func (o MediaConcatTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaConcatTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaConcatTemplate {
		return vs[0].(map[string]*MediaConcatTemplate)[vs[1].(string)]
	}).(MediaConcatTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateInput)(nil)).Elem(), &MediaConcatTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateArrayInput)(nil)).Elem(), MediaConcatTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateMapInput)(nil)).Elem(), MediaConcatTemplateMap{})
	pulumi.RegisterOutputType(MediaConcatTemplateOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateMapOutput{})
}
