// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MediaAnimationTemplateContainer struct {
	// Package format.
	Format string `pulumi:"format"`
}

// MediaAnimationTemplateContainerInput is an input type that accepts MediaAnimationTemplateContainerArgs and MediaAnimationTemplateContainerOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateContainerInput` via:
//
//	MediaAnimationTemplateContainerArgs{...}
type MediaAnimationTemplateContainerInput interface {
	pulumi.Input

	ToMediaAnimationTemplateContainerOutput() MediaAnimationTemplateContainerOutput
	ToMediaAnimationTemplateContainerOutputWithContext(context.Context) MediaAnimationTemplateContainerOutput
}

type MediaAnimationTemplateContainerArgs struct {
	// Package format.
	Format pulumi.StringInput `pulumi:"format"`
}

func (MediaAnimationTemplateContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaAnimationTemplateContainer)(nil)).Elem()
}

func (i MediaAnimationTemplateContainerArgs) ToMediaAnimationTemplateContainerOutput() MediaAnimationTemplateContainerOutput {
	return i.ToMediaAnimationTemplateContainerOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateContainerArgs) ToMediaAnimationTemplateContainerOutputWithContext(ctx context.Context) MediaAnimationTemplateContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateContainerOutput)
}

func (i MediaAnimationTemplateContainerArgs) ToMediaAnimationTemplateContainerPtrOutput() MediaAnimationTemplateContainerPtrOutput {
	return i.ToMediaAnimationTemplateContainerPtrOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateContainerArgs) ToMediaAnimationTemplateContainerPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateContainerOutput).ToMediaAnimationTemplateContainerPtrOutputWithContext(ctx)
}

// MediaAnimationTemplateContainerPtrInput is an input type that accepts MediaAnimationTemplateContainerArgs, MediaAnimationTemplateContainerPtr and MediaAnimationTemplateContainerPtrOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateContainerPtrInput` via:
//
//	        MediaAnimationTemplateContainerArgs{...}
//
//	or:
//
//	        nil
type MediaAnimationTemplateContainerPtrInput interface {
	pulumi.Input

	ToMediaAnimationTemplateContainerPtrOutput() MediaAnimationTemplateContainerPtrOutput
	ToMediaAnimationTemplateContainerPtrOutputWithContext(context.Context) MediaAnimationTemplateContainerPtrOutput
}

type mediaAnimationTemplateContainerPtrType MediaAnimationTemplateContainerArgs

func MediaAnimationTemplateContainerPtr(v *MediaAnimationTemplateContainerArgs) MediaAnimationTemplateContainerPtrInput {
	return (*mediaAnimationTemplateContainerPtrType)(v)
}

func (*mediaAnimationTemplateContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplateContainer)(nil)).Elem()
}

func (i *mediaAnimationTemplateContainerPtrType) ToMediaAnimationTemplateContainerPtrOutput() MediaAnimationTemplateContainerPtrOutput {
	return i.ToMediaAnimationTemplateContainerPtrOutputWithContext(context.Background())
}

func (i *mediaAnimationTemplateContainerPtrType) ToMediaAnimationTemplateContainerPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateContainerPtrOutput)
}

type MediaAnimationTemplateContainerOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaAnimationTemplateContainer)(nil)).Elem()
}

func (o MediaAnimationTemplateContainerOutput) ToMediaAnimationTemplateContainerOutput() MediaAnimationTemplateContainerOutput {
	return o
}

func (o MediaAnimationTemplateContainerOutput) ToMediaAnimationTemplateContainerOutputWithContext(ctx context.Context) MediaAnimationTemplateContainerOutput {
	return o
}

func (o MediaAnimationTemplateContainerOutput) ToMediaAnimationTemplateContainerPtrOutput() MediaAnimationTemplateContainerPtrOutput {
	return o.ToMediaAnimationTemplateContainerPtrOutputWithContext(context.Background())
}

func (o MediaAnimationTemplateContainerOutput) ToMediaAnimationTemplateContainerPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaAnimationTemplateContainer) *MediaAnimationTemplateContainer {
		return &v
	}).(MediaAnimationTemplateContainerPtrOutput)
}

// Package format.
func (o MediaAnimationTemplateContainerOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MediaAnimationTemplateContainer) string { return v.Format }).(pulumi.StringOutput)
}

type MediaAnimationTemplateContainerPtrOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplateContainer)(nil)).Elem()
}

func (o MediaAnimationTemplateContainerPtrOutput) ToMediaAnimationTemplateContainerPtrOutput() MediaAnimationTemplateContainerPtrOutput {
	return o
}

func (o MediaAnimationTemplateContainerPtrOutput) ToMediaAnimationTemplateContainerPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateContainerPtrOutput {
	return o
}

func (o MediaAnimationTemplateContainerPtrOutput) Elem() MediaAnimationTemplateContainerOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateContainer) MediaAnimationTemplateContainer {
		if v != nil {
			return *v
		}
		var ret MediaAnimationTemplateContainer
		return ret
	}).(MediaAnimationTemplateContainerOutput)
}

// Package format.
func (o MediaAnimationTemplateContainerPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

type MediaAnimationTemplateTimeInterval struct {
	// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Duration *string `pulumi:"duration"`
	// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start *string `pulumi:"start"`
}

// MediaAnimationTemplateTimeIntervalInput is an input type that accepts MediaAnimationTemplateTimeIntervalArgs and MediaAnimationTemplateTimeIntervalOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateTimeIntervalInput` via:
//
//	MediaAnimationTemplateTimeIntervalArgs{...}
type MediaAnimationTemplateTimeIntervalInput interface {
	pulumi.Input

	ToMediaAnimationTemplateTimeIntervalOutput() MediaAnimationTemplateTimeIntervalOutput
	ToMediaAnimationTemplateTimeIntervalOutputWithContext(context.Context) MediaAnimationTemplateTimeIntervalOutput
}

type MediaAnimationTemplateTimeIntervalArgs struct {
	// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (MediaAnimationTemplateTimeIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaAnimationTemplateTimeInterval)(nil)).Elem()
}

func (i MediaAnimationTemplateTimeIntervalArgs) ToMediaAnimationTemplateTimeIntervalOutput() MediaAnimationTemplateTimeIntervalOutput {
	return i.ToMediaAnimationTemplateTimeIntervalOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateTimeIntervalArgs) ToMediaAnimationTemplateTimeIntervalOutputWithContext(ctx context.Context) MediaAnimationTemplateTimeIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateTimeIntervalOutput)
}

func (i MediaAnimationTemplateTimeIntervalArgs) ToMediaAnimationTemplateTimeIntervalPtrOutput() MediaAnimationTemplateTimeIntervalPtrOutput {
	return i.ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateTimeIntervalArgs) ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateTimeIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateTimeIntervalOutput).ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(ctx)
}

// MediaAnimationTemplateTimeIntervalPtrInput is an input type that accepts MediaAnimationTemplateTimeIntervalArgs, MediaAnimationTemplateTimeIntervalPtr and MediaAnimationTemplateTimeIntervalPtrOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateTimeIntervalPtrInput` via:
//
//	        MediaAnimationTemplateTimeIntervalArgs{...}
//
//	or:
//
//	        nil
type MediaAnimationTemplateTimeIntervalPtrInput interface {
	pulumi.Input

	ToMediaAnimationTemplateTimeIntervalPtrOutput() MediaAnimationTemplateTimeIntervalPtrOutput
	ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(context.Context) MediaAnimationTemplateTimeIntervalPtrOutput
}

type mediaAnimationTemplateTimeIntervalPtrType MediaAnimationTemplateTimeIntervalArgs

func MediaAnimationTemplateTimeIntervalPtr(v *MediaAnimationTemplateTimeIntervalArgs) MediaAnimationTemplateTimeIntervalPtrInput {
	return (*mediaAnimationTemplateTimeIntervalPtrType)(v)
}

func (*mediaAnimationTemplateTimeIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplateTimeInterval)(nil)).Elem()
}

func (i *mediaAnimationTemplateTimeIntervalPtrType) ToMediaAnimationTemplateTimeIntervalPtrOutput() MediaAnimationTemplateTimeIntervalPtrOutput {
	return i.ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (i *mediaAnimationTemplateTimeIntervalPtrType) ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateTimeIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateTimeIntervalPtrOutput)
}

type MediaAnimationTemplateTimeIntervalOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateTimeIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaAnimationTemplateTimeInterval)(nil)).Elem()
}

func (o MediaAnimationTemplateTimeIntervalOutput) ToMediaAnimationTemplateTimeIntervalOutput() MediaAnimationTemplateTimeIntervalOutput {
	return o
}

func (o MediaAnimationTemplateTimeIntervalOutput) ToMediaAnimationTemplateTimeIntervalOutputWithContext(ctx context.Context) MediaAnimationTemplateTimeIntervalOutput {
	return o
}

func (o MediaAnimationTemplateTimeIntervalOutput) ToMediaAnimationTemplateTimeIntervalPtrOutput() MediaAnimationTemplateTimeIntervalPtrOutput {
	return o.ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (o MediaAnimationTemplateTimeIntervalOutput) ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateTimeIntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaAnimationTemplateTimeInterval) *MediaAnimationTemplateTimeInterval {
		return &v
	}).(MediaAnimationTemplateTimeIntervalPtrOutput)
}

// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaAnimationTemplateTimeIntervalOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateTimeInterval) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaAnimationTemplateTimeIntervalOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateTimeInterval) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type MediaAnimationTemplateTimeIntervalPtrOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateTimeIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplateTimeInterval)(nil)).Elem()
}

func (o MediaAnimationTemplateTimeIntervalPtrOutput) ToMediaAnimationTemplateTimeIntervalPtrOutput() MediaAnimationTemplateTimeIntervalPtrOutput {
	return o
}

func (o MediaAnimationTemplateTimeIntervalPtrOutput) ToMediaAnimationTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateTimeIntervalPtrOutput {
	return o
}

func (o MediaAnimationTemplateTimeIntervalPtrOutput) Elem() MediaAnimationTemplateTimeIntervalOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateTimeInterval) MediaAnimationTemplateTimeInterval {
		if v != nil {
			return *v
		}
		var ret MediaAnimationTemplateTimeInterval
		return ret
	}).(MediaAnimationTemplateTimeIntervalOutput)
}

// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaAnimationTemplateTimeIntervalPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaAnimationTemplateTimeIntervalPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type MediaAnimationTemplateVideo struct {
	// Animation per second frame number, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
	AnimateFramesPerSecond *string `pulumi:"animateFramesPerSecond"`
	// GIFs are kept only Keyframe, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
	AnimateOnlyKeepKeyFrame *string `pulumi:"animateOnlyKeepKeyFrame"`
	// Animation frame extraction every time, (0, video duration], Animation frame extraction time interval, If TimeInterval.Duration is set, it is less than this value.
	AnimateTimeIntervalOfFrame *string `pulumi:"animateTimeIntervalOfFrame"`
	// Codec format `gif`, `webp`.
	Codec string `pulumi:"codec"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps *string `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height *string `pulumi:"height"`
	// Set relative quality, [1, 100), webp image quality setting takes effect, gif has no quality parameter.
	Quality *string `pulumi:"quality"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width *string `pulumi:"width"`
}

// MediaAnimationTemplateVideoInput is an input type that accepts MediaAnimationTemplateVideoArgs and MediaAnimationTemplateVideoOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateVideoInput` via:
//
//	MediaAnimationTemplateVideoArgs{...}
type MediaAnimationTemplateVideoInput interface {
	pulumi.Input

	ToMediaAnimationTemplateVideoOutput() MediaAnimationTemplateVideoOutput
	ToMediaAnimationTemplateVideoOutputWithContext(context.Context) MediaAnimationTemplateVideoOutput
}

type MediaAnimationTemplateVideoArgs struct {
	// Animation per second frame number, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
	AnimateFramesPerSecond pulumi.StringPtrInput `pulumi:"animateFramesPerSecond"`
	// GIFs are kept only Keyframe, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
	AnimateOnlyKeepKeyFrame pulumi.StringPtrInput `pulumi:"animateOnlyKeepKeyFrame"`
	// Animation frame extraction every time, (0, video duration], Animation frame extraction time interval, If TimeInterval.Duration is set, it is less than this value.
	AnimateTimeIntervalOfFrame pulumi.StringPtrInput `pulumi:"animateTimeIntervalOfFrame"`
	// Codec format `gif`, `webp`.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps pulumi.StringPtrInput `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Set relative quality, [1, 100), webp image quality setting takes effect, gif has no quality parameter.
	Quality pulumi.StringPtrInput `pulumi:"quality"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaAnimationTemplateVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaAnimationTemplateVideo)(nil)).Elem()
}

func (i MediaAnimationTemplateVideoArgs) ToMediaAnimationTemplateVideoOutput() MediaAnimationTemplateVideoOutput {
	return i.ToMediaAnimationTemplateVideoOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateVideoArgs) ToMediaAnimationTemplateVideoOutputWithContext(ctx context.Context) MediaAnimationTemplateVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateVideoOutput)
}

func (i MediaAnimationTemplateVideoArgs) ToMediaAnimationTemplateVideoPtrOutput() MediaAnimationTemplateVideoPtrOutput {
	return i.ToMediaAnimationTemplateVideoPtrOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateVideoArgs) ToMediaAnimationTemplateVideoPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateVideoOutput).ToMediaAnimationTemplateVideoPtrOutputWithContext(ctx)
}

// MediaAnimationTemplateVideoPtrInput is an input type that accepts MediaAnimationTemplateVideoArgs, MediaAnimationTemplateVideoPtr and MediaAnimationTemplateVideoPtrOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateVideoPtrInput` via:
//
//	        MediaAnimationTemplateVideoArgs{...}
//
//	or:
//
//	        nil
type MediaAnimationTemplateVideoPtrInput interface {
	pulumi.Input

	ToMediaAnimationTemplateVideoPtrOutput() MediaAnimationTemplateVideoPtrOutput
	ToMediaAnimationTemplateVideoPtrOutputWithContext(context.Context) MediaAnimationTemplateVideoPtrOutput
}

type mediaAnimationTemplateVideoPtrType MediaAnimationTemplateVideoArgs

func MediaAnimationTemplateVideoPtr(v *MediaAnimationTemplateVideoArgs) MediaAnimationTemplateVideoPtrInput {
	return (*mediaAnimationTemplateVideoPtrType)(v)
}

func (*mediaAnimationTemplateVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplateVideo)(nil)).Elem()
}

func (i *mediaAnimationTemplateVideoPtrType) ToMediaAnimationTemplateVideoPtrOutput() MediaAnimationTemplateVideoPtrOutput {
	return i.ToMediaAnimationTemplateVideoPtrOutputWithContext(context.Background())
}

func (i *mediaAnimationTemplateVideoPtrType) ToMediaAnimationTemplateVideoPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateVideoPtrOutput)
}

type MediaAnimationTemplateVideoOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaAnimationTemplateVideo)(nil)).Elem()
}

func (o MediaAnimationTemplateVideoOutput) ToMediaAnimationTemplateVideoOutput() MediaAnimationTemplateVideoOutput {
	return o
}

func (o MediaAnimationTemplateVideoOutput) ToMediaAnimationTemplateVideoOutputWithContext(ctx context.Context) MediaAnimationTemplateVideoOutput {
	return o
}

func (o MediaAnimationTemplateVideoOutput) ToMediaAnimationTemplateVideoPtrOutput() MediaAnimationTemplateVideoPtrOutput {
	return o.ToMediaAnimationTemplateVideoPtrOutputWithContext(context.Background())
}

func (o MediaAnimationTemplateVideoOutput) ToMediaAnimationTemplateVideoPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaAnimationTemplateVideo) *MediaAnimationTemplateVideo {
		return &v
	}).(MediaAnimationTemplateVideoPtrOutput)
}

// Animation per second frame number, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
func (o MediaAnimationTemplateVideoOutput) AnimateFramesPerSecond() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.AnimateFramesPerSecond }).(pulumi.StringPtrOutput)
}

// GIFs are kept only Keyframe, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
func (o MediaAnimationTemplateVideoOutput) AnimateOnlyKeepKeyFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.AnimateOnlyKeepKeyFrame }).(pulumi.StringPtrOutput)
}

// Animation frame extraction every time, (0, video duration], Animation frame extraction time interval, If TimeInterval.Duration is set, it is less than this value.
func (o MediaAnimationTemplateVideoOutput) AnimateTimeIntervalOfFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.AnimateTimeIntervalOfFrame }).(pulumi.StringPtrOutput)
}

// Codec format `gif`, `webp`.
func (o MediaAnimationTemplateVideoOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) string { return v.Codec }).(pulumi.StringOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaAnimationTemplateVideoOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.Fps }).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaAnimationTemplateVideoOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Set relative quality, [1, 100), webp image quality setting takes effect, gif has no quality parameter.
func (o MediaAnimationTemplateVideoOutput) Quality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.Quality }).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaAnimationTemplateVideoOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaAnimationTemplateVideo) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaAnimationTemplateVideoPtrOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplateVideo)(nil)).Elem()
}

func (o MediaAnimationTemplateVideoPtrOutput) ToMediaAnimationTemplateVideoPtrOutput() MediaAnimationTemplateVideoPtrOutput {
	return o
}

func (o MediaAnimationTemplateVideoPtrOutput) ToMediaAnimationTemplateVideoPtrOutputWithContext(ctx context.Context) MediaAnimationTemplateVideoPtrOutput {
	return o
}

func (o MediaAnimationTemplateVideoPtrOutput) Elem() MediaAnimationTemplateVideoOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) MediaAnimationTemplateVideo {
		if v != nil {
			return *v
		}
		var ret MediaAnimationTemplateVideo
		return ret
	}).(MediaAnimationTemplateVideoOutput)
}

// Animation per second frame number, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
func (o MediaAnimationTemplateVideoPtrOutput) AnimateFramesPerSecond() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.AnimateFramesPerSecond
	}).(pulumi.StringPtrOutput)
}

// GIFs are kept only Keyframe, Priority: AnimateFramesPerSecond &gt; AnimateOnlyKeepKeyFrame &gt; AnimateTimeIntervalOfFrame.
func (o MediaAnimationTemplateVideoPtrOutput) AnimateOnlyKeepKeyFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.AnimateOnlyKeepKeyFrame
	}).(pulumi.StringPtrOutput)
}

// Animation frame extraction every time, (0, video duration], Animation frame extraction time interval, If TimeInterval.Duration is set, it is less than this value.
func (o MediaAnimationTemplateVideoPtrOutput) AnimateTimeIntervalOfFrame() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.AnimateTimeIntervalOfFrame
	}).(pulumi.StringPtrOutput)
}

// Codec format `gif`, `webp`.
func (o MediaAnimationTemplateVideoPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaAnimationTemplateVideoPtrOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Fps
	}).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaAnimationTemplateVideoPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Set relative quality, [1, 100), webp image quality setting takes effect, gif has no quality parameter.
func (o MediaAnimationTemplateVideoPtrOutput) Quality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Quality
	}).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaAnimationTemplateVideoPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplate struct {
	// audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
	Audio *MediaConcatTemplateConcatTemplateAudio `pulumi:"audio"`
	// mixing parameters.
	AudioMixes []MediaConcatTemplateConcatTemplateAudioMix `pulumi:"audioMixes"`
	// Package format.
	ConcatFragments []MediaConcatTemplateConcatTemplateConcatFragment `pulumi:"concatFragments"`
	// Only splicing without transcoding.
	Container MediaConcatTemplateConcatTemplateContainer `pulumi:"container"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaConcatTemplateConcatTemplateVideo `pulumi:"video"`
}

// MediaConcatTemplateConcatTemplateInput is an input type that accepts MediaConcatTemplateConcatTemplateArgs and MediaConcatTemplateConcatTemplateOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateInput` via:
//
//	MediaConcatTemplateConcatTemplateArgs{...}
type MediaConcatTemplateConcatTemplateInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateOutput() MediaConcatTemplateConcatTemplateOutput
	ToMediaConcatTemplateConcatTemplateOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateOutput
}

type MediaConcatTemplateConcatTemplateArgs struct {
	// audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
	Audio MediaConcatTemplateConcatTemplateAudioPtrInput `pulumi:"audio"`
	// mixing parameters.
	AudioMixes MediaConcatTemplateConcatTemplateAudioMixArrayInput `pulumi:"audioMixes"`
	// Package format.
	ConcatFragments MediaConcatTemplateConcatTemplateConcatFragmentArrayInput `pulumi:"concatFragments"`
	// Only splicing without transcoding.
	Container MediaConcatTemplateConcatTemplateContainerInput `pulumi:"container"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaConcatTemplateConcatTemplateVideoPtrInput `pulumi:"video"`
}

func (MediaConcatTemplateConcatTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplate)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateArgs) ToMediaConcatTemplateConcatTemplateOutput() MediaConcatTemplateConcatTemplateOutput {
	return i.ToMediaConcatTemplateConcatTemplateOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateArgs) ToMediaConcatTemplateConcatTemplateOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateOutput)
}

func (i MediaConcatTemplateConcatTemplateArgs) ToMediaConcatTemplateConcatTemplatePtrOutput() MediaConcatTemplateConcatTemplatePtrOutput {
	return i.ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateArgs) ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateOutput).ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(ctx)
}

// MediaConcatTemplateConcatTemplatePtrInput is an input type that accepts MediaConcatTemplateConcatTemplateArgs, MediaConcatTemplateConcatTemplatePtr and MediaConcatTemplateConcatTemplatePtrOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplatePtrInput` via:
//
//	        MediaConcatTemplateConcatTemplateArgs{...}
//
//	or:
//
//	        nil
type MediaConcatTemplateConcatTemplatePtrInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplatePtrOutput() MediaConcatTemplateConcatTemplatePtrOutput
	ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(context.Context) MediaConcatTemplateConcatTemplatePtrOutput
}

type mediaConcatTemplateConcatTemplatePtrType MediaConcatTemplateConcatTemplateArgs

func MediaConcatTemplateConcatTemplatePtr(v *MediaConcatTemplateConcatTemplateArgs) MediaConcatTemplateConcatTemplatePtrInput {
	return (*mediaConcatTemplateConcatTemplatePtrType)(v)
}

func (*mediaConcatTemplateConcatTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplate)(nil)).Elem()
}

func (i *mediaConcatTemplateConcatTemplatePtrType) ToMediaConcatTemplateConcatTemplatePtrOutput() MediaConcatTemplateConcatTemplatePtrOutput {
	return i.ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(context.Background())
}

func (i *mediaConcatTemplateConcatTemplatePtrType) ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplatePtrOutput)
}

type MediaConcatTemplateConcatTemplateOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplate)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateOutput) ToMediaConcatTemplateConcatTemplateOutput() MediaConcatTemplateConcatTemplateOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateOutput) ToMediaConcatTemplateConcatTemplateOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateOutput) ToMediaConcatTemplateConcatTemplatePtrOutput() MediaConcatTemplateConcatTemplatePtrOutput {
	return o.ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(context.Background())
}

func (o MediaConcatTemplateConcatTemplateOutput) ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaConcatTemplateConcatTemplate) *MediaConcatTemplateConcatTemplate {
		return &v
	}).(MediaConcatTemplateConcatTemplatePtrOutput)
}

// audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
func (o MediaConcatTemplateConcatTemplateOutput) Audio() MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplate) *MediaConcatTemplateConcatTemplateAudio { return v.Audio }).(MediaConcatTemplateConcatTemplateAudioPtrOutput)
}

// mixing parameters.
func (o MediaConcatTemplateConcatTemplateOutput) AudioMixes() MediaConcatTemplateConcatTemplateAudioMixArrayOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplate) []MediaConcatTemplateConcatTemplateAudioMix {
		return v.AudioMixes
	}).(MediaConcatTemplateConcatTemplateAudioMixArrayOutput)
}

// Package format.
func (o MediaConcatTemplateConcatTemplateOutput) ConcatFragments() MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplate) []MediaConcatTemplateConcatTemplateConcatFragment {
		return v.ConcatFragments
	}).(MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput)
}

// Only splicing without transcoding.
func (o MediaConcatTemplateConcatTemplateOutput) Container() MediaConcatTemplateConcatTemplateContainerOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplate) MediaConcatTemplateConcatTemplateContainer {
		return v.Container
	}).(MediaConcatTemplateConcatTemplateContainerOutput)
}

// video information, do not upload Video, which is equivalent to deleting video information.
func (o MediaConcatTemplateConcatTemplateOutput) Video() MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplate) *MediaConcatTemplateConcatTemplateVideo { return v.Video }).(MediaConcatTemplateConcatTemplateVideoPtrOutput)
}

type MediaConcatTemplateConcatTemplatePtrOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplate)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplatePtrOutput) ToMediaConcatTemplateConcatTemplatePtrOutput() MediaConcatTemplateConcatTemplatePtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplatePtrOutput) ToMediaConcatTemplateConcatTemplatePtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplatePtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplatePtrOutput) Elem() MediaConcatTemplateConcatTemplateOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplate) MediaConcatTemplateConcatTemplate {
		if v != nil {
			return *v
		}
		var ret MediaConcatTemplateConcatTemplate
		return ret
	}).(MediaConcatTemplateConcatTemplateOutput)
}

// audio parameters, the target file does not require Audio information, need to set Audio.Remove to true.
func (o MediaConcatTemplateConcatTemplatePtrOutput) Audio() MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplate) *MediaConcatTemplateConcatTemplateAudio {
		if v == nil {
			return nil
		}
		return v.Audio
	}).(MediaConcatTemplateConcatTemplateAudioPtrOutput)
}

// mixing parameters.
func (o MediaConcatTemplateConcatTemplatePtrOutput) AudioMixes() MediaConcatTemplateConcatTemplateAudioMixArrayOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplate) []MediaConcatTemplateConcatTemplateAudioMix {
		if v == nil {
			return nil
		}
		return v.AudioMixes
	}).(MediaConcatTemplateConcatTemplateAudioMixArrayOutput)
}

// Package format.
func (o MediaConcatTemplateConcatTemplatePtrOutput) ConcatFragments() MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplate) []MediaConcatTemplateConcatTemplateConcatFragment {
		if v == nil {
			return nil
		}
		return v.ConcatFragments
	}).(MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput)
}

// Only splicing without transcoding.
func (o MediaConcatTemplateConcatTemplatePtrOutput) Container() MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplate) *MediaConcatTemplateConcatTemplateContainer {
		if v == nil {
			return nil
		}
		return &v.Container
	}).(MediaConcatTemplateConcatTemplateContainerPtrOutput)
}

// video information, do not upload Video, which is equivalent to deleting video information.
func (o MediaConcatTemplateConcatTemplatePtrOutput) Video() MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplate) *MediaConcatTemplateConcatTemplateVideo {
		if v == nil {
			return nil
		}
		return v.Video
	}).(MediaConcatTemplateConcatTemplateVideoPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudio struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate *string `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
	Channels *string `pulumi:"channels"`
	// Codec format, value aac, mp3.
	Codec string `pulumi:"codec"`
	// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
	Samplerate *string `pulumi:"samplerate"`
}

// MediaConcatTemplateConcatTemplateAudioInput is an input type that accepts MediaConcatTemplateConcatTemplateAudioArgs and MediaConcatTemplateConcatTemplateAudioOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateAudioInput` via:
//
//	MediaConcatTemplateConcatTemplateAudioArgs{...}
type MediaConcatTemplateConcatTemplateAudioInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateAudioOutput() MediaConcatTemplateConcatTemplateAudioOutput
	ToMediaConcatTemplateConcatTemplateAudioOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateAudioOutput
}

type MediaConcatTemplateConcatTemplateAudioArgs struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// Codec format, value aac, mp3.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
	Samplerate pulumi.StringPtrInput `pulumi:"samplerate"`
}

func (MediaConcatTemplateConcatTemplateAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudio)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateAudioArgs) ToMediaConcatTemplateConcatTemplateAudioOutput() MediaConcatTemplateConcatTemplateAudioOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateAudioArgs) ToMediaConcatTemplateConcatTemplateAudioOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioOutput)
}

func (i MediaConcatTemplateConcatTemplateAudioArgs) ToMediaConcatTemplateConcatTemplateAudioPtrOutput() MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateAudioArgs) ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioOutput).ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(ctx)
}

// MediaConcatTemplateConcatTemplateAudioPtrInput is an input type that accepts MediaConcatTemplateConcatTemplateAudioArgs, MediaConcatTemplateConcatTemplateAudioPtr and MediaConcatTemplateConcatTemplateAudioPtrOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateAudioPtrInput` via:
//
//	        MediaConcatTemplateConcatTemplateAudioArgs{...}
//
//	or:
//
//	        nil
type MediaConcatTemplateConcatTemplateAudioPtrInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateAudioPtrOutput() MediaConcatTemplateConcatTemplateAudioPtrOutput
	ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateAudioPtrOutput
}

type mediaConcatTemplateConcatTemplateAudioPtrType MediaConcatTemplateConcatTemplateAudioArgs

func MediaConcatTemplateConcatTemplateAudioPtr(v *MediaConcatTemplateConcatTemplateAudioArgs) MediaConcatTemplateConcatTemplateAudioPtrInput {
	return (*mediaConcatTemplateConcatTemplateAudioPtrType)(v)
}

func (*mediaConcatTemplateConcatTemplateAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateAudio)(nil)).Elem()
}

func (i *mediaConcatTemplateConcatTemplateAudioPtrType) ToMediaConcatTemplateConcatTemplateAudioPtrOutput() MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(context.Background())
}

func (i *mediaConcatTemplateConcatTemplateAudioPtrType) ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudioOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudio)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateAudioOutput) ToMediaConcatTemplateConcatTemplateAudioOutput() MediaConcatTemplateConcatTemplateAudioOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioOutput) ToMediaConcatTemplateConcatTemplateAudioOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioOutput) ToMediaConcatTemplateConcatTemplateAudioPtrOutput() MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return o.ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(context.Background())
}

func (o MediaConcatTemplateConcatTemplateAudioOutput) ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaConcatTemplateConcatTemplateAudio) *MediaConcatTemplateConcatTemplateAudio {
		return &v
	}).(MediaConcatTemplateConcatTemplateAudioPtrOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaConcatTemplateConcatTemplateAudioOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudio) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
func (o MediaConcatTemplateConcatTemplateAudioOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3.
func (o MediaConcatTemplateConcatTemplateAudioOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudio) string { return v.Codec }).(pulumi.StringOutput)
}

// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
func (o MediaConcatTemplateConcatTemplateAudioOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudio) *string { return v.Samplerate }).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudioPtrOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateAudio)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) ToMediaConcatTemplateConcatTemplateAudioPtrOutput() MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) ToMediaConcatTemplateConcatTemplateAudioPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) Elem() MediaConcatTemplateConcatTemplateAudioOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudio) MediaConcatTemplateConcatTemplateAudio {
		if v != nil {
			return *v
		}
		var ret MediaConcatTemplateConcatTemplateAudio
		return ret
	}).(MediaConcatTemplateConcatTemplateAudioOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3.
func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
func (o MediaConcatTemplateConcatTemplateAudioPtrOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Samplerate
	}).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudioMix struct {
	// The media address of the audio track that needs to be mixed.
	AudioSource string `pulumi:"audioSource"`
	// Mix Fade Configuration.
	EffectConfig *MediaConcatTemplateConcatTemplateAudioMixEffectConfig `pulumi:"effectConfig"`
	// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
	MixMode *string `pulumi:"mixMode"`
	// Whether to replace the original audio of the Input media file with the mixed audio track media.
	Replace *string `pulumi:"replace"`
}

// MediaConcatTemplateConcatTemplateAudioMixInput is an input type that accepts MediaConcatTemplateConcatTemplateAudioMixArgs and MediaConcatTemplateConcatTemplateAudioMixOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateAudioMixInput` via:
//
//	MediaConcatTemplateConcatTemplateAudioMixArgs{...}
type MediaConcatTemplateConcatTemplateAudioMixInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateAudioMixOutput() MediaConcatTemplateConcatTemplateAudioMixOutput
	ToMediaConcatTemplateConcatTemplateAudioMixOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateAudioMixOutput
}

type MediaConcatTemplateConcatTemplateAudioMixArgs struct {
	// The media address of the audio track that needs to be mixed.
	AudioSource pulumi.StringInput `pulumi:"audioSource"`
	// Mix Fade Configuration.
	EffectConfig MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrInput `pulumi:"effectConfig"`
	// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
	MixMode pulumi.StringPtrInput `pulumi:"mixMode"`
	// Whether to replace the original audio of the Input media file with the mixed audio track media.
	Replace pulumi.StringPtrInput `pulumi:"replace"`
}

func (MediaConcatTemplateConcatTemplateAudioMixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMix)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateAudioMixArgs) ToMediaConcatTemplateConcatTemplateAudioMixOutput() MediaConcatTemplateConcatTemplateAudioMixOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioMixOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateAudioMixArgs) ToMediaConcatTemplateConcatTemplateAudioMixOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioMixOutput)
}

// MediaConcatTemplateConcatTemplateAudioMixArrayInput is an input type that accepts MediaConcatTemplateConcatTemplateAudioMixArray and MediaConcatTemplateConcatTemplateAudioMixArrayOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateAudioMixArrayInput` via:
//
//	MediaConcatTemplateConcatTemplateAudioMixArray{ MediaConcatTemplateConcatTemplateAudioMixArgs{...} }
type MediaConcatTemplateConcatTemplateAudioMixArrayInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateAudioMixArrayOutput() MediaConcatTemplateConcatTemplateAudioMixArrayOutput
	ToMediaConcatTemplateConcatTemplateAudioMixArrayOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateAudioMixArrayOutput
}

type MediaConcatTemplateConcatTemplateAudioMixArray []MediaConcatTemplateConcatTemplateAudioMixInput

func (MediaConcatTemplateConcatTemplateAudioMixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaConcatTemplateConcatTemplateAudioMix)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateAudioMixArray) ToMediaConcatTemplateConcatTemplateAudioMixArrayOutput() MediaConcatTemplateConcatTemplateAudioMixArrayOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioMixArrayOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateAudioMixArray) ToMediaConcatTemplateConcatTemplateAudioMixArrayOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioMixArrayOutput)
}

type MediaConcatTemplateConcatTemplateAudioMixOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateAudioMixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMix)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateAudioMixOutput) ToMediaConcatTemplateConcatTemplateAudioMixOutput() MediaConcatTemplateConcatTemplateAudioMixOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixOutput) ToMediaConcatTemplateConcatTemplateAudioMixOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixOutput {
	return o
}

// The media address of the audio track that needs to be mixed.
func (o MediaConcatTemplateConcatTemplateAudioMixOutput) AudioSource() pulumi.StringOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMix) string { return v.AudioSource }).(pulumi.StringOutput)
}

// Mix Fade Configuration.
func (o MediaConcatTemplateConcatTemplateAudioMixOutput) EffectConfig() MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMix) *MediaConcatTemplateConcatTemplateAudioMixEffectConfig {
		return v.EffectConfig
	}).(MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput)
}

// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
func (o MediaConcatTemplateConcatTemplateAudioMixOutput) MixMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMix) *string { return v.MixMode }).(pulumi.StringPtrOutput)
}

// Whether to replace the original audio of the Input media file with the mixed audio track media.
func (o MediaConcatTemplateConcatTemplateAudioMixOutput) Replace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMix) *string { return v.Replace }).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudioMixArrayOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateAudioMixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaConcatTemplateConcatTemplateAudioMix)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateAudioMixArrayOutput) ToMediaConcatTemplateConcatTemplateAudioMixArrayOutput() MediaConcatTemplateConcatTemplateAudioMixArrayOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixArrayOutput) ToMediaConcatTemplateConcatTemplateAudioMixArrayOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixArrayOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixArrayOutput) Index(i pulumi.IntInput) MediaConcatTemplateConcatTemplateAudioMixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaConcatTemplateConcatTemplateAudioMix {
		return vs[0].([]MediaConcatTemplateConcatTemplateAudioMix)[vs[1].(int)]
	}).(MediaConcatTemplateConcatTemplateAudioMixOutput)
}

type MediaConcatTemplateConcatTemplateAudioMixEffectConfig struct {
	// bgm transition fade-in duration, support floating point numbers.
	BgmFadeTime *string `pulumi:"bgmFadeTime"`
	// Enable bgm conversion fade in.
	EnableBgmFade *string `pulumi:"enableBgmFade"`
	// enable fade out.
	EnableEndFadeout *string `pulumi:"enableEndFadeout"`
	// enable fade in.
	EnableStartFadein *string `pulumi:"enableStartFadein"`
	// fade out time, greater than 0, support floating point numbers.
	EndFadeoutTime *string `pulumi:"endFadeoutTime"`
	// Fade in duration, greater than 0, support floating point numbers.
	StartFadeinTime *string `pulumi:"startFadeinTime"`
}

// MediaConcatTemplateConcatTemplateAudioMixEffectConfigInput is an input type that accepts MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs and MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateAudioMixEffectConfigInput` via:
//
//	MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs{...}
type MediaConcatTemplateConcatTemplateAudioMixEffectConfigInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput
	ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput
}

type MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs struct {
	// bgm transition fade-in duration, support floating point numbers.
	BgmFadeTime pulumi.StringPtrInput `pulumi:"bgmFadeTime"`
	// Enable bgm conversion fade in.
	EnableBgmFade pulumi.StringPtrInput `pulumi:"enableBgmFade"`
	// enable fade out.
	EnableEndFadeout pulumi.StringPtrInput `pulumi:"enableEndFadeout"`
	// enable fade in.
	EnableStartFadein pulumi.StringPtrInput `pulumi:"enableStartFadein"`
	// fade out time, greater than 0, support floating point numbers.
	EndFadeoutTime pulumi.StringPtrInput `pulumi:"endFadeoutTime"`
	// Fade in duration, greater than 0, support floating point numbers.
	StartFadeinTime pulumi.StringPtrInput `pulumi:"startFadeinTime"`
}

func (MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput)
}

func (i MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput).ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(ctx)
}

// MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrInput is an input type that accepts MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs, MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtr and MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrInput` via:
//
//	        MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs{...}
//
//	or:
//
//	        nil
type MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput
	ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput
}

type mediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrType MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs

func MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtr(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs) MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrInput {
	return (*mediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrType)(v)
}

func (*mediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (i *mediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrType) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (i *mediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrType) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return o.ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *MediaConcatTemplateConcatTemplateAudioMixEffectConfig {
		return &v
	}).(MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput)
}

// bgm transition fade-in duration, support floating point numbers.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) BgmFadeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string { return v.BgmFadeTime }).(pulumi.StringPtrOutput)
}

// Enable bgm conversion fade in.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) EnableBgmFade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string { return v.EnableBgmFade }).(pulumi.StringPtrOutput)
}

// enable fade out.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) EnableEndFadeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string { return v.EnableEndFadeout }).(pulumi.StringPtrOutput)
}

// enable fade in.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) EnableStartFadein() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string { return v.EnableStartFadein }).(pulumi.StringPtrOutput)
}

// fade out time, greater than 0, support floating point numbers.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) EndFadeoutTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string { return v.EndFadeoutTime }).(pulumi.StringPtrOutput)
}

// Fade in duration, greater than 0, support floating point numbers.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput) StartFadeinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string { return v.StartFadeinTime }).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput() MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) ToMediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) Elem() MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) MediaConcatTemplateConcatTemplateAudioMixEffectConfig {
		if v != nil {
			return *v
		}
		var ret MediaConcatTemplateConcatTemplateAudioMixEffectConfig
		return ret
	}).(MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput)
}

// bgm transition fade-in duration, support floating point numbers.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) BgmFadeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.BgmFadeTime
	}).(pulumi.StringPtrOutput)
}

// Enable bgm conversion fade in.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) EnableBgmFade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableBgmFade
	}).(pulumi.StringPtrOutput)
}

// enable fade out.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) EnableEndFadeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableEndFadeout
	}).(pulumi.StringPtrOutput)
}

// enable fade in.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) EnableStartFadein() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableStartFadein
	}).(pulumi.StringPtrOutput)
}

// fade out time, greater than 0, support floating point numbers.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) EndFadeoutTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EndFadeoutTime
	}).(pulumi.StringPtrOutput)
}

// Fade in duration, greater than 0, support floating point numbers.
func (o MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput) StartFadeinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.StartFadeinTime
	}).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateConcatFragment struct {
	// node type, `start`, `end`.
	Mode string `pulumi:"mode"`
	// Splicing object address.
	Url string `pulumi:"url"`
}

// MediaConcatTemplateConcatTemplateConcatFragmentInput is an input type that accepts MediaConcatTemplateConcatTemplateConcatFragmentArgs and MediaConcatTemplateConcatTemplateConcatFragmentOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateConcatFragmentInput` via:
//
//	MediaConcatTemplateConcatTemplateConcatFragmentArgs{...}
type MediaConcatTemplateConcatTemplateConcatFragmentInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateConcatFragmentOutput() MediaConcatTemplateConcatTemplateConcatFragmentOutput
	ToMediaConcatTemplateConcatTemplateConcatFragmentOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateConcatFragmentOutput
}

type MediaConcatTemplateConcatTemplateConcatFragmentArgs struct {
	// node type, `start`, `end`.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Splicing object address.
	Url pulumi.StringInput `pulumi:"url"`
}

func (MediaConcatTemplateConcatTemplateConcatFragmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateConcatFragment)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateConcatFragmentArgs) ToMediaConcatTemplateConcatTemplateConcatFragmentOutput() MediaConcatTemplateConcatTemplateConcatFragmentOutput {
	return i.ToMediaConcatTemplateConcatTemplateConcatFragmentOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateConcatFragmentArgs) ToMediaConcatTemplateConcatTemplateConcatFragmentOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateConcatFragmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateConcatFragmentOutput)
}

// MediaConcatTemplateConcatTemplateConcatFragmentArrayInput is an input type that accepts MediaConcatTemplateConcatTemplateConcatFragmentArray and MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateConcatFragmentArrayInput` via:
//
//	MediaConcatTemplateConcatTemplateConcatFragmentArray{ MediaConcatTemplateConcatTemplateConcatFragmentArgs{...} }
type MediaConcatTemplateConcatTemplateConcatFragmentArrayInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutput() MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput
	ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput
}

type MediaConcatTemplateConcatTemplateConcatFragmentArray []MediaConcatTemplateConcatTemplateConcatFragmentInput

func (MediaConcatTemplateConcatTemplateConcatFragmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaConcatTemplateConcatTemplateConcatFragment)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateConcatFragmentArray) ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutput() MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput {
	return i.ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateConcatFragmentArray) ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput)
}

type MediaConcatTemplateConcatTemplateConcatFragmentOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateConcatFragmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateConcatFragment)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateConcatFragmentOutput) ToMediaConcatTemplateConcatTemplateConcatFragmentOutput() MediaConcatTemplateConcatTemplateConcatFragmentOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateConcatFragmentOutput) ToMediaConcatTemplateConcatTemplateConcatFragmentOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateConcatFragmentOutput {
	return o
}

// node type, `start`, `end`.
func (o MediaConcatTemplateConcatTemplateConcatFragmentOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateConcatFragment) string { return v.Mode }).(pulumi.StringOutput)
}

// Splicing object address.
func (o MediaConcatTemplateConcatTemplateConcatFragmentOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateConcatFragment) string { return v.Url }).(pulumi.StringOutput)
}

type MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaConcatTemplateConcatTemplateConcatFragment)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput) ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutput() MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput) ToMediaConcatTemplateConcatTemplateConcatFragmentArrayOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput) Index(i pulumi.IntInput) MediaConcatTemplateConcatTemplateConcatFragmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaConcatTemplateConcatTemplateConcatFragment {
		return vs[0].([]MediaConcatTemplateConcatTemplateConcatFragment)[vs[1].(int)]
	}).(MediaConcatTemplateConcatTemplateConcatFragmentOutput)
}

type MediaConcatTemplateConcatTemplateContainer struct {
	// Container format: mp4, flv, hls, ts, mp3, aac.
	Format string `pulumi:"format"`
}

// MediaConcatTemplateConcatTemplateContainerInput is an input type that accepts MediaConcatTemplateConcatTemplateContainerArgs and MediaConcatTemplateConcatTemplateContainerOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateContainerInput` via:
//
//	MediaConcatTemplateConcatTemplateContainerArgs{...}
type MediaConcatTemplateConcatTemplateContainerInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateContainerOutput() MediaConcatTemplateConcatTemplateContainerOutput
	ToMediaConcatTemplateConcatTemplateContainerOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateContainerOutput
}

type MediaConcatTemplateConcatTemplateContainerArgs struct {
	// Container format: mp4, flv, hls, ts, mp3, aac.
	Format pulumi.StringInput `pulumi:"format"`
}

func (MediaConcatTemplateConcatTemplateContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateContainer)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateContainerArgs) ToMediaConcatTemplateConcatTemplateContainerOutput() MediaConcatTemplateConcatTemplateContainerOutput {
	return i.ToMediaConcatTemplateConcatTemplateContainerOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateContainerArgs) ToMediaConcatTemplateConcatTemplateContainerOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateContainerOutput)
}

func (i MediaConcatTemplateConcatTemplateContainerArgs) ToMediaConcatTemplateConcatTemplateContainerPtrOutput() MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateContainerArgs) ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateContainerOutput).ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(ctx)
}

// MediaConcatTemplateConcatTemplateContainerPtrInput is an input type that accepts MediaConcatTemplateConcatTemplateContainerArgs, MediaConcatTemplateConcatTemplateContainerPtr and MediaConcatTemplateConcatTemplateContainerPtrOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateContainerPtrInput` via:
//
//	        MediaConcatTemplateConcatTemplateContainerArgs{...}
//
//	or:
//
//	        nil
type MediaConcatTemplateConcatTemplateContainerPtrInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateContainerPtrOutput() MediaConcatTemplateConcatTemplateContainerPtrOutput
	ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateContainerPtrOutput
}

type mediaConcatTemplateConcatTemplateContainerPtrType MediaConcatTemplateConcatTemplateContainerArgs

func MediaConcatTemplateConcatTemplateContainerPtr(v *MediaConcatTemplateConcatTemplateContainerArgs) MediaConcatTemplateConcatTemplateContainerPtrInput {
	return (*mediaConcatTemplateConcatTemplateContainerPtrType)(v)
}

func (*mediaConcatTemplateConcatTemplateContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateContainer)(nil)).Elem()
}

func (i *mediaConcatTemplateConcatTemplateContainerPtrType) ToMediaConcatTemplateConcatTemplateContainerPtrOutput() MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(context.Background())
}

func (i *mediaConcatTemplateConcatTemplateContainerPtrType) ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateContainerPtrOutput)
}

type MediaConcatTemplateConcatTemplateContainerOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateContainer)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateContainerOutput) ToMediaConcatTemplateConcatTemplateContainerOutput() MediaConcatTemplateConcatTemplateContainerOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateContainerOutput) ToMediaConcatTemplateConcatTemplateContainerOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateContainerOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateContainerOutput) ToMediaConcatTemplateConcatTemplateContainerPtrOutput() MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return o.ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(context.Background())
}

func (o MediaConcatTemplateConcatTemplateContainerOutput) ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaConcatTemplateConcatTemplateContainer) *MediaConcatTemplateConcatTemplateContainer {
		return &v
	}).(MediaConcatTemplateConcatTemplateContainerPtrOutput)
}

// Container format: mp4, flv, hls, ts, mp3, aac.
func (o MediaConcatTemplateConcatTemplateContainerOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateContainer) string { return v.Format }).(pulumi.StringOutput)
}

type MediaConcatTemplateConcatTemplateContainerPtrOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateContainer)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateContainerPtrOutput) ToMediaConcatTemplateConcatTemplateContainerPtrOutput() MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateContainerPtrOutput) ToMediaConcatTemplateConcatTemplateContainerPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateContainerPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateContainerPtrOutput) Elem() MediaConcatTemplateConcatTemplateContainerOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateContainer) MediaConcatTemplateConcatTemplateContainer {
		if v != nil {
			return *v
		}
		var ret MediaConcatTemplateConcatTemplateContainer
		return ret
	}).(MediaConcatTemplateConcatTemplateContainerOutput)
}

// Container format: mp4, flv, hls, ts, mp3, aac.
func (o MediaConcatTemplateConcatTemplateContainerPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateVideo struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate *string `pulumi:"bitrate"`
	// Codec format `H.264`.
	Codec string `pulumi:"codec"`
	// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
	Crf *string `pulumi:"crf"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps *string `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height *string `pulumi:"height"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove *string `pulumi:"remove"`
	// Rotation angle, Value range: [0, 360), Unit: degree.
	Rotate *string `pulumi:"rotate"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width *string `pulumi:"width"`
}

// MediaConcatTemplateConcatTemplateVideoInput is an input type that accepts MediaConcatTemplateConcatTemplateVideoArgs and MediaConcatTemplateConcatTemplateVideoOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateVideoInput` via:
//
//	MediaConcatTemplateConcatTemplateVideoArgs{...}
type MediaConcatTemplateConcatTemplateVideoInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateVideoOutput() MediaConcatTemplateConcatTemplateVideoOutput
	ToMediaConcatTemplateConcatTemplateVideoOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateVideoOutput
}

type MediaConcatTemplateConcatTemplateVideoArgs struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// Codec format `H.264`.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
	Crf pulumi.StringPtrInput `pulumi:"crf"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps pulumi.StringPtrInput `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove pulumi.StringPtrInput `pulumi:"remove"`
	// Rotation angle, Value range: [0, 360), Unit: degree.
	Rotate pulumi.StringPtrInput `pulumi:"rotate"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaConcatTemplateConcatTemplateVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateVideo)(nil)).Elem()
}

func (i MediaConcatTemplateConcatTemplateVideoArgs) ToMediaConcatTemplateConcatTemplateVideoOutput() MediaConcatTemplateConcatTemplateVideoOutput {
	return i.ToMediaConcatTemplateConcatTemplateVideoOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateVideoArgs) ToMediaConcatTemplateConcatTemplateVideoOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateVideoOutput)
}

func (i MediaConcatTemplateConcatTemplateVideoArgs) ToMediaConcatTemplateConcatTemplateVideoPtrOutput() MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(context.Background())
}

func (i MediaConcatTemplateConcatTemplateVideoArgs) ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateVideoOutput).ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(ctx)
}

// MediaConcatTemplateConcatTemplateVideoPtrInput is an input type that accepts MediaConcatTemplateConcatTemplateVideoArgs, MediaConcatTemplateConcatTemplateVideoPtr and MediaConcatTemplateConcatTemplateVideoPtrOutput values.
// You can construct a concrete instance of `MediaConcatTemplateConcatTemplateVideoPtrInput` via:
//
//	        MediaConcatTemplateConcatTemplateVideoArgs{...}
//
//	or:
//
//	        nil
type MediaConcatTemplateConcatTemplateVideoPtrInput interface {
	pulumi.Input

	ToMediaConcatTemplateConcatTemplateVideoPtrOutput() MediaConcatTemplateConcatTemplateVideoPtrOutput
	ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(context.Context) MediaConcatTemplateConcatTemplateVideoPtrOutput
}

type mediaConcatTemplateConcatTemplateVideoPtrType MediaConcatTemplateConcatTemplateVideoArgs

func MediaConcatTemplateConcatTemplateVideoPtr(v *MediaConcatTemplateConcatTemplateVideoArgs) MediaConcatTemplateConcatTemplateVideoPtrInput {
	return (*mediaConcatTemplateConcatTemplateVideoPtrType)(v)
}

func (*mediaConcatTemplateConcatTemplateVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateVideo)(nil)).Elem()
}

func (i *mediaConcatTemplateConcatTemplateVideoPtrType) ToMediaConcatTemplateConcatTemplateVideoPtrOutput() MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return i.ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(context.Background())
}

func (i *mediaConcatTemplateConcatTemplateVideoPtrType) ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaConcatTemplateConcatTemplateVideoPtrOutput)
}

type MediaConcatTemplateConcatTemplateVideoOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaConcatTemplateConcatTemplateVideo)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateVideoOutput) ToMediaConcatTemplateConcatTemplateVideoOutput() MediaConcatTemplateConcatTemplateVideoOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateVideoOutput) ToMediaConcatTemplateConcatTemplateVideoOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateVideoOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateVideoOutput) ToMediaConcatTemplateConcatTemplateVideoPtrOutput() MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return o.ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(context.Background())
}

func (o MediaConcatTemplateConcatTemplateVideoOutput) ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaConcatTemplateConcatTemplateVideo) *MediaConcatTemplateConcatTemplateVideo {
		return &v
	}).(MediaConcatTemplateConcatTemplateVideoPtrOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaConcatTemplateConcatTemplateVideoOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// Codec format `H.264`.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) string { return v.Codec }).(pulumi.StringOutput)
}

// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Crf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Crf }).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Fps }).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Remove }).(pulumi.StringPtrOutput)
}

// Rotation angle, Value range: [0, 360), Unit: degree.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Rotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Rotate }).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaConcatTemplateConcatTemplateVideoOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaConcatTemplateConcatTemplateVideo) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaConcatTemplateConcatTemplateVideoPtrOutput struct{ *pulumi.OutputState }

func (MediaConcatTemplateConcatTemplateVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaConcatTemplateConcatTemplateVideo)(nil)).Elem()
}

func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) ToMediaConcatTemplateConcatTemplateVideoPtrOutput() MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) ToMediaConcatTemplateConcatTemplateVideoPtrOutputWithContext(ctx context.Context) MediaConcatTemplateConcatTemplateVideoPtrOutput {
	return o
}

func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Elem() MediaConcatTemplateConcatTemplateVideoOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) MediaConcatTemplateConcatTemplateVideo {
		if v != nil {
			return *v
		}
		var ret MediaConcatTemplateConcatTemplateVideo
		return ret
	}).(MediaConcatTemplateConcatTemplateVideoOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// Codec format `H.264`.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Crf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Crf
	}).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Fps
	}).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringPtrOutput)
}

// Rotation angle, Value range: [0, 360), Unit: degree.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Rotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Rotate
	}).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaConcatTemplateConcatTemplateVideoPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaConcatTemplateConcatTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaPicProcessTemplatePicProcess struct {
	// Whether to return the original image information.
	IsPicInfo *string `pulumi:"isPicInfo"`
	// Image processing rules, 1: basic image processing, please refer to the basic image processing document, 2: image compression, please refer to the image compression document, 3: blind watermark, please refer to the blind watermark document.
	ProcessRule string `pulumi:"processRule"`
}

// MediaPicProcessTemplatePicProcessInput is an input type that accepts MediaPicProcessTemplatePicProcessArgs and MediaPicProcessTemplatePicProcessOutput values.
// You can construct a concrete instance of `MediaPicProcessTemplatePicProcessInput` via:
//
//	MediaPicProcessTemplatePicProcessArgs{...}
type MediaPicProcessTemplatePicProcessInput interface {
	pulumi.Input

	ToMediaPicProcessTemplatePicProcessOutput() MediaPicProcessTemplatePicProcessOutput
	ToMediaPicProcessTemplatePicProcessOutputWithContext(context.Context) MediaPicProcessTemplatePicProcessOutput
}

type MediaPicProcessTemplatePicProcessArgs struct {
	// Whether to return the original image information.
	IsPicInfo pulumi.StringPtrInput `pulumi:"isPicInfo"`
	// Image processing rules, 1: basic image processing, please refer to the basic image processing document, 2: image compression, please refer to the image compression document, 3: blind watermark, please refer to the blind watermark document.
	ProcessRule pulumi.StringInput `pulumi:"processRule"`
}

func (MediaPicProcessTemplatePicProcessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaPicProcessTemplatePicProcess)(nil)).Elem()
}

func (i MediaPicProcessTemplatePicProcessArgs) ToMediaPicProcessTemplatePicProcessOutput() MediaPicProcessTemplatePicProcessOutput {
	return i.ToMediaPicProcessTemplatePicProcessOutputWithContext(context.Background())
}

func (i MediaPicProcessTemplatePicProcessArgs) ToMediaPicProcessTemplatePicProcessOutputWithContext(ctx context.Context) MediaPicProcessTemplatePicProcessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaPicProcessTemplatePicProcessOutput)
}

func (i MediaPicProcessTemplatePicProcessArgs) ToMediaPicProcessTemplatePicProcessPtrOutput() MediaPicProcessTemplatePicProcessPtrOutput {
	return i.ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(context.Background())
}

func (i MediaPicProcessTemplatePicProcessArgs) ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(ctx context.Context) MediaPicProcessTemplatePicProcessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaPicProcessTemplatePicProcessOutput).ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(ctx)
}

// MediaPicProcessTemplatePicProcessPtrInput is an input type that accepts MediaPicProcessTemplatePicProcessArgs, MediaPicProcessTemplatePicProcessPtr and MediaPicProcessTemplatePicProcessPtrOutput values.
// You can construct a concrete instance of `MediaPicProcessTemplatePicProcessPtrInput` via:
//
//	        MediaPicProcessTemplatePicProcessArgs{...}
//
//	or:
//
//	        nil
type MediaPicProcessTemplatePicProcessPtrInput interface {
	pulumi.Input

	ToMediaPicProcessTemplatePicProcessPtrOutput() MediaPicProcessTemplatePicProcessPtrOutput
	ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(context.Context) MediaPicProcessTemplatePicProcessPtrOutput
}

type mediaPicProcessTemplatePicProcessPtrType MediaPicProcessTemplatePicProcessArgs

func MediaPicProcessTemplatePicProcessPtr(v *MediaPicProcessTemplatePicProcessArgs) MediaPicProcessTemplatePicProcessPtrInput {
	return (*mediaPicProcessTemplatePicProcessPtrType)(v)
}

func (*mediaPicProcessTemplatePicProcessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaPicProcessTemplatePicProcess)(nil)).Elem()
}

func (i *mediaPicProcessTemplatePicProcessPtrType) ToMediaPicProcessTemplatePicProcessPtrOutput() MediaPicProcessTemplatePicProcessPtrOutput {
	return i.ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(context.Background())
}

func (i *mediaPicProcessTemplatePicProcessPtrType) ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(ctx context.Context) MediaPicProcessTemplatePicProcessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaPicProcessTemplatePicProcessPtrOutput)
}

type MediaPicProcessTemplatePicProcessOutput struct{ *pulumi.OutputState }

func (MediaPicProcessTemplatePicProcessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaPicProcessTemplatePicProcess)(nil)).Elem()
}

func (o MediaPicProcessTemplatePicProcessOutput) ToMediaPicProcessTemplatePicProcessOutput() MediaPicProcessTemplatePicProcessOutput {
	return o
}

func (o MediaPicProcessTemplatePicProcessOutput) ToMediaPicProcessTemplatePicProcessOutputWithContext(ctx context.Context) MediaPicProcessTemplatePicProcessOutput {
	return o
}

func (o MediaPicProcessTemplatePicProcessOutput) ToMediaPicProcessTemplatePicProcessPtrOutput() MediaPicProcessTemplatePicProcessPtrOutput {
	return o.ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(context.Background())
}

func (o MediaPicProcessTemplatePicProcessOutput) ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(ctx context.Context) MediaPicProcessTemplatePicProcessPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaPicProcessTemplatePicProcess) *MediaPicProcessTemplatePicProcess {
		return &v
	}).(MediaPicProcessTemplatePicProcessPtrOutput)
}

// Whether to return the original image information.
func (o MediaPicProcessTemplatePicProcessOutput) IsPicInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaPicProcessTemplatePicProcess) *string { return v.IsPicInfo }).(pulumi.StringPtrOutput)
}

// Image processing rules, 1: basic image processing, please refer to the basic image processing document, 2: image compression, please refer to the image compression document, 3: blind watermark, please refer to the blind watermark document.
func (o MediaPicProcessTemplatePicProcessOutput) ProcessRule() pulumi.StringOutput {
	return o.ApplyT(func(v MediaPicProcessTemplatePicProcess) string { return v.ProcessRule }).(pulumi.StringOutput)
}

type MediaPicProcessTemplatePicProcessPtrOutput struct{ *pulumi.OutputState }

func (MediaPicProcessTemplatePicProcessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaPicProcessTemplatePicProcess)(nil)).Elem()
}

func (o MediaPicProcessTemplatePicProcessPtrOutput) ToMediaPicProcessTemplatePicProcessPtrOutput() MediaPicProcessTemplatePicProcessPtrOutput {
	return o
}

func (o MediaPicProcessTemplatePicProcessPtrOutput) ToMediaPicProcessTemplatePicProcessPtrOutputWithContext(ctx context.Context) MediaPicProcessTemplatePicProcessPtrOutput {
	return o
}

func (o MediaPicProcessTemplatePicProcessPtrOutput) Elem() MediaPicProcessTemplatePicProcessOutput {
	return o.ApplyT(func(v *MediaPicProcessTemplatePicProcess) MediaPicProcessTemplatePicProcess {
		if v != nil {
			return *v
		}
		var ret MediaPicProcessTemplatePicProcess
		return ret
	}).(MediaPicProcessTemplatePicProcessOutput)
}

// Whether to return the original image information.
func (o MediaPicProcessTemplatePicProcessPtrOutput) IsPicInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaPicProcessTemplatePicProcess) *string {
		if v == nil {
			return nil
		}
		return v.IsPicInfo
	}).(pulumi.StringPtrOutput)
}

// Image processing rules, 1: basic image processing, please refer to the basic image processing document, 2: image compression, please refer to the image compression document, 3: blind watermark, please refer to the blind watermark document.
func (o MediaPicProcessTemplatePicProcessPtrOutput) ProcessRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaPicProcessTemplatePicProcess) *string {
		if v == nil {
			return nil
		}
		return &v.ProcessRule
	}).(pulumi.StringPtrOutput)
}

type MediaSmartCoverTemplateSmartCover struct {
	// Number of screenshots, [1,10].
	Count *string `pulumi:"count"`
	// cover deduplication, true/false.
	DeleteDuplicates *string `pulumi:"deleteDuplicates"`
	// Image Format, value jpg, png, webp.
	Format string `pulumi:"format"`
	// Height, value range: [128, 4096], unit: px, if only Height is set, Width is calculated according to the original video ratio.
	Height *string `pulumi:"height"`
	// Width, value range: [128, 4096], unit: px, if only Width is set, Height is calculated according to the original ratio of the video.
	Width *string `pulumi:"width"`
}

// MediaSmartCoverTemplateSmartCoverInput is an input type that accepts MediaSmartCoverTemplateSmartCoverArgs and MediaSmartCoverTemplateSmartCoverOutput values.
// You can construct a concrete instance of `MediaSmartCoverTemplateSmartCoverInput` via:
//
//	MediaSmartCoverTemplateSmartCoverArgs{...}
type MediaSmartCoverTemplateSmartCoverInput interface {
	pulumi.Input

	ToMediaSmartCoverTemplateSmartCoverOutput() MediaSmartCoverTemplateSmartCoverOutput
	ToMediaSmartCoverTemplateSmartCoverOutputWithContext(context.Context) MediaSmartCoverTemplateSmartCoverOutput
}

type MediaSmartCoverTemplateSmartCoverArgs struct {
	// Number of screenshots, [1,10].
	Count pulumi.StringPtrInput `pulumi:"count"`
	// cover deduplication, true/false.
	DeleteDuplicates pulumi.StringPtrInput `pulumi:"deleteDuplicates"`
	// Image Format, value jpg, png, webp.
	Format pulumi.StringInput `pulumi:"format"`
	// Height, value range: [128, 4096], unit: px, if only Height is set, Width is calculated according to the original video ratio.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Width, value range: [128, 4096], unit: px, if only Width is set, Height is calculated according to the original ratio of the video.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaSmartCoverTemplateSmartCoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSmartCoverTemplateSmartCover)(nil)).Elem()
}

func (i MediaSmartCoverTemplateSmartCoverArgs) ToMediaSmartCoverTemplateSmartCoverOutput() MediaSmartCoverTemplateSmartCoverOutput {
	return i.ToMediaSmartCoverTemplateSmartCoverOutputWithContext(context.Background())
}

func (i MediaSmartCoverTemplateSmartCoverArgs) ToMediaSmartCoverTemplateSmartCoverOutputWithContext(ctx context.Context) MediaSmartCoverTemplateSmartCoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSmartCoverTemplateSmartCoverOutput)
}

func (i MediaSmartCoverTemplateSmartCoverArgs) ToMediaSmartCoverTemplateSmartCoverPtrOutput() MediaSmartCoverTemplateSmartCoverPtrOutput {
	return i.ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(context.Background())
}

func (i MediaSmartCoverTemplateSmartCoverArgs) ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(ctx context.Context) MediaSmartCoverTemplateSmartCoverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSmartCoverTemplateSmartCoverOutput).ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(ctx)
}

// MediaSmartCoverTemplateSmartCoverPtrInput is an input type that accepts MediaSmartCoverTemplateSmartCoverArgs, MediaSmartCoverTemplateSmartCoverPtr and MediaSmartCoverTemplateSmartCoverPtrOutput values.
// You can construct a concrete instance of `MediaSmartCoverTemplateSmartCoverPtrInput` via:
//
//	        MediaSmartCoverTemplateSmartCoverArgs{...}
//
//	or:
//
//	        nil
type MediaSmartCoverTemplateSmartCoverPtrInput interface {
	pulumi.Input

	ToMediaSmartCoverTemplateSmartCoverPtrOutput() MediaSmartCoverTemplateSmartCoverPtrOutput
	ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(context.Context) MediaSmartCoverTemplateSmartCoverPtrOutput
}

type mediaSmartCoverTemplateSmartCoverPtrType MediaSmartCoverTemplateSmartCoverArgs

func MediaSmartCoverTemplateSmartCoverPtr(v *MediaSmartCoverTemplateSmartCoverArgs) MediaSmartCoverTemplateSmartCoverPtrInput {
	return (*mediaSmartCoverTemplateSmartCoverPtrType)(v)
}

func (*mediaSmartCoverTemplateSmartCoverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSmartCoverTemplateSmartCover)(nil)).Elem()
}

func (i *mediaSmartCoverTemplateSmartCoverPtrType) ToMediaSmartCoverTemplateSmartCoverPtrOutput() MediaSmartCoverTemplateSmartCoverPtrOutput {
	return i.ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(context.Background())
}

func (i *mediaSmartCoverTemplateSmartCoverPtrType) ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(ctx context.Context) MediaSmartCoverTemplateSmartCoverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSmartCoverTemplateSmartCoverPtrOutput)
}

type MediaSmartCoverTemplateSmartCoverOutput struct{ *pulumi.OutputState }

func (MediaSmartCoverTemplateSmartCoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSmartCoverTemplateSmartCover)(nil)).Elem()
}

func (o MediaSmartCoverTemplateSmartCoverOutput) ToMediaSmartCoverTemplateSmartCoverOutput() MediaSmartCoverTemplateSmartCoverOutput {
	return o
}

func (o MediaSmartCoverTemplateSmartCoverOutput) ToMediaSmartCoverTemplateSmartCoverOutputWithContext(ctx context.Context) MediaSmartCoverTemplateSmartCoverOutput {
	return o
}

func (o MediaSmartCoverTemplateSmartCoverOutput) ToMediaSmartCoverTemplateSmartCoverPtrOutput() MediaSmartCoverTemplateSmartCoverPtrOutput {
	return o.ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(context.Background())
}

func (o MediaSmartCoverTemplateSmartCoverOutput) ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(ctx context.Context) MediaSmartCoverTemplateSmartCoverPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaSmartCoverTemplateSmartCover) *MediaSmartCoverTemplateSmartCover {
		return &v
	}).(MediaSmartCoverTemplateSmartCoverPtrOutput)
}

// Number of screenshots, [1,10].
func (o MediaSmartCoverTemplateSmartCoverOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSmartCoverTemplateSmartCover) *string { return v.Count }).(pulumi.StringPtrOutput)
}

// cover deduplication, true/false.
func (o MediaSmartCoverTemplateSmartCoverOutput) DeleteDuplicates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSmartCoverTemplateSmartCover) *string { return v.DeleteDuplicates }).(pulumi.StringPtrOutput)
}

// Image Format, value jpg, png, webp.
func (o MediaSmartCoverTemplateSmartCoverOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSmartCoverTemplateSmartCover) string { return v.Format }).(pulumi.StringOutput)
}

// Height, value range: [128, 4096], unit: px, if only Height is set, Width is calculated according to the original video ratio.
func (o MediaSmartCoverTemplateSmartCoverOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSmartCoverTemplateSmartCover) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Width, value range: [128, 4096], unit: px, if only Width is set, Height is calculated according to the original ratio of the video.
func (o MediaSmartCoverTemplateSmartCoverOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSmartCoverTemplateSmartCover) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaSmartCoverTemplateSmartCoverPtrOutput struct{ *pulumi.OutputState }

func (MediaSmartCoverTemplateSmartCoverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSmartCoverTemplateSmartCover)(nil)).Elem()
}

func (o MediaSmartCoverTemplateSmartCoverPtrOutput) ToMediaSmartCoverTemplateSmartCoverPtrOutput() MediaSmartCoverTemplateSmartCoverPtrOutput {
	return o
}

func (o MediaSmartCoverTemplateSmartCoverPtrOutput) ToMediaSmartCoverTemplateSmartCoverPtrOutputWithContext(ctx context.Context) MediaSmartCoverTemplateSmartCoverPtrOutput {
	return o
}

func (o MediaSmartCoverTemplateSmartCoverPtrOutput) Elem() MediaSmartCoverTemplateSmartCoverOutput {
	return o.ApplyT(func(v *MediaSmartCoverTemplateSmartCover) MediaSmartCoverTemplateSmartCover {
		if v != nil {
			return *v
		}
		var ret MediaSmartCoverTemplateSmartCover
		return ret
	}).(MediaSmartCoverTemplateSmartCoverOutput)
}

// Number of screenshots, [1,10].
func (o MediaSmartCoverTemplateSmartCoverPtrOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSmartCoverTemplateSmartCover) *string {
		if v == nil {
			return nil
		}
		return v.Count
	}).(pulumi.StringPtrOutput)
}

// cover deduplication, true/false.
func (o MediaSmartCoverTemplateSmartCoverPtrOutput) DeleteDuplicates() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSmartCoverTemplateSmartCover) *string {
		if v == nil {
			return nil
		}
		return v.DeleteDuplicates
	}).(pulumi.StringPtrOutput)
}

// Image Format, value jpg, png, webp.
func (o MediaSmartCoverTemplateSmartCoverPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSmartCoverTemplateSmartCover) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

// Height, value range: [128, 4096], unit: px, if only Height is set, Width is calculated according to the original video ratio.
func (o MediaSmartCoverTemplateSmartCoverPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSmartCoverTemplateSmartCover) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Width, value range: [128, 4096], unit: px, if only Width is set, Height is calculated according to the original ratio of the video.
func (o MediaSmartCoverTemplateSmartCoverPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSmartCoverTemplateSmartCover) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaSnapshotTemplateSnapshot struct {
	// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
	BlackLevel *string `pulumi:"blackLevel"`
	// Screenshot image processing parameters, for example: imageMogr2/format/png.
	CiParam *string `pulumi:"ciParam"`
	// Number of screenshots, range (0 10000].
	Count string `pulumi:"count"`
	// high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
	Height *string `pulumi:"height"`
	// Whether to enable black screen detection true/false.
	IsCheckBlack *string `pulumi:"isCheckBlack"`
	// Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
	IsCheckCount *string `pulumi:"isCheckCount"`
	// Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
	Mode *string `pulumi:"mode"`
	// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
	PixelBlackThreshold *string `pulumi:"pixelBlackThreshold"`
	// Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
	SnapshotOutMode *string `pulumi:"snapshotOutMode"`
	// Screenshot output configuration.
	SpriteSnapshotConfig *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig `pulumi:"spriteSnapshotConfig"`
	// Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start *string `pulumi:"start"`
	// Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	TimeInterval *string `pulumi:"timeInterval"`
	// wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
	Width *string `pulumi:"width"`
}

// MediaSnapshotTemplateSnapshotInput is an input type that accepts MediaSnapshotTemplateSnapshotArgs and MediaSnapshotTemplateSnapshotOutput values.
// You can construct a concrete instance of `MediaSnapshotTemplateSnapshotInput` via:
//
//	MediaSnapshotTemplateSnapshotArgs{...}
type MediaSnapshotTemplateSnapshotInput interface {
	pulumi.Input

	ToMediaSnapshotTemplateSnapshotOutput() MediaSnapshotTemplateSnapshotOutput
	ToMediaSnapshotTemplateSnapshotOutputWithContext(context.Context) MediaSnapshotTemplateSnapshotOutput
}

type MediaSnapshotTemplateSnapshotArgs struct {
	// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
	BlackLevel pulumi.StringPtrInput `pulumi:"blackLevel"`
	// Screenshot image processing parameters, for example: imageMogr2/format/png.
	CiParam pulumi.StringPtrInput `pulumi:"ciParam"`
	// Number of screenshots, range (0 10000].
	Count pulumi.StringInput `pulumi:"count"`
	// high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Whether to enable black screen detection true/false.
	IsCheckBlack pulumi.StringPtrInput `pulumi:"isCheckBlack"`
	// Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
	IsCheckCount pulumi.StringPtrInput `pulumi:"isCheckCount"`
	// Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
	Mode pulumi.StringPtrInput `pulumi:"mode"`
	// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
	PixelBlackThreshold pulumi.StringPtrInput `pulumi:"pixelBlackThreshold"`
	// Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
	SnapshotOutMode pulumi.StringPtrInput `pulumi:"snapshotOutMode"`
	// Screenshot output configuration.
	SpriteSnapshotConfig MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrInput `pulumi:"spriteSnapshotConfig"`
	// Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start pulumi.StringPtrInput `pulumi:"start"`
	// Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	TimeInterval pulumi.StringPtrInput `pulumi:"timeInterval"`
	// wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaSnapshotTemplateSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSnapshotTemplateSnapshot)(nil)).Elem()
}

func (i MediaSnapshotTemplateSnapshotArgs) ToMediaSnapshotTemplateSnapshotOutput() MediaSnapshotTemplateSnapshotOutput {
	return i.ToMediaSnapshotTemplateSnapshotOutputWithContext(context.Background())
}

func (i MediaSnapshotTemplateSnapshotArgs) ToMediaSnapshotTemplateSnapshotOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSnapshotTemplateSnapshotOutput)
}

func (i MediaSnapshotTemplateSnapshotArgs) ToMediaSnapshotTemplateSnapshotPtrOutput() MediaSnapshotTemplateSnapshotPtrOutput {
	return i.ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(context.Background())
}

func (i MediaSnapshotTemplateSnapshotArgs) ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSnapshotTemplateSnapshotOutput).ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(ctx)
}

// MediaSnapshotTemplateSnapshotPtrInput is an input type that accepts MediaSnapshotTemplateSnapshotArgs, MediaSnapshotTemplateSnapshotPtr and MediaSnapshotTemplateSnapshotPtrOutput values.
// You can construct a concrete instance of `MediaSnapshotTemplateSnapshotPtrInput` via:
//
//	        MediaSnapshotTemplateSnapshotArgs{...}
//
//	or:
//
//	        nil
type MediaSnapshotTemplateSnapshotPtrInput interface {
	pulumi.Input

	ToMediaSnapshotTemplateSnapshotPtrOutput() MediaSnapshotTemplateSnapshotPtrOutput
	ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(context.Context) MediaSnapshotTemplateSnapshotPtrOutput
}

type mediaSnapshotTemplateSnapshotPtrType MediaSnapshotTemplateSnapshotArgs

func MediaSnapshotTemplateSnapshotPtr(v *MediaSnapshotTemplateSnapshotArgs) MediaSnapshotTemplateSnapshotPtrInput {
	return (*mediaSnapshotTemplateSnapshotPtrType)(v)
}

func (*mediaSnapshotTemplateSnapshotPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSnapshotTemplateSnapshot)(nil)).Elem()
}

func (i *mediaSnapshotTemplateSnapshotPtrType) ToMediaSnapshotTemplateSnapshotPtrOutput() MediaSnapshotTemplateSnapshotPtrOutput {
	return i.ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(context.Background())
}

func (i *mediaSnapshotTemplateSnapshotPtrType) ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSnapshotTemplateSnapshotPtrOutput)
}

type MediaSnapshotTemplateSnapshotOutput struct{ *pulumi.OutputState }

func (MediaSnapshotTemplateSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSnapshotTemplateSnapshot)(nil)).Elem()
}

func (o MediaSnapshotTemplateSnapshotOutput) ToMediaSnapshotTemplateSnapshotOutput() MediaSnapshotTemplateSnapshotOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotOutput) ToMediaSnapshotTemplateSnapshotOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotOutput) ToMediaSnapshotTemplateSnapshotPtrOutput() MediaSnapshotTemplateSnapshotPtrOutput {
	return o.ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(context.Background())
}

func (o MediaSnapshotTemplateSnapshotOutput) ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaSnapshotTemplateSnapshot) *MediaSnapshotTemplateSnapshot {
		return &v
	}).(MediaSnapshotTemplateSnapshotPtrOutput)
}

// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
func (o MediaSnapshotTemplateSnapshotOutput) BlackLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.BlackLevel }).(pulumi.StringPtrOutput)
}

// Screenshot image processing parameters, for example: imageMogr2/format/png.
func (o MediaSnapshotTemplateSnapshotOutput) CiParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.CiParam }).(pulumi.StringPtrOutput)
}

// Number of screenshots, range (0 10000].
func (o MediaSnapshotTemplateSnapshotOutput) Count() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) string { return v.Count }).(pulumi.StringOutput)
}

// high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
func (o MediaSnapshotTemplateSnapshotOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Whether to enable black screen detection true/false.
func (o MediaSnapshotTemplateSnapshotOutput) IsCheckBlack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.IsCheckBlack }).(pulumi.StringPtrOutput)
}

// Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
func (o MediaSnapshotTemplateSnapshotOutput) IsCheckCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.IsCheckCount }).(pulumi.StringPtrOutput)
}

// Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
func (o MediaSnapshotTemplateSnapshotOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.Mode }).(pulumi.StringPtrOutput)
}

// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
func (o MediaSnapshotTemplateSnapshotOutput) PixelBlackThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.PixelBlackThreshold }).(pulumi.StringPtrOutput)
}

// Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
func (o MediaSnapshotTemplateSnapshotOutput) SnapshotOutMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.SnapshotOutMode }).(pulumi.StringPtrOutput)
}

// Screenshot output configuration.
func (o MediaSnapshotTemplateSnapshotOutput) SpriteSnapshotConfig() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
		return v.SpriteSnapshotConfig
	}).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput)
}

// Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaSnapshotTemplateSnapshotOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.Start }).(pulumi.StringPtrOutput)
}

// Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaSnapshotTemplateSnapshotOutput) TimeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.TimeInterval }).(pulumi.StringPtrOutput)
}

// wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
func (o MediaSnapshotTemplateSnapshotOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshot) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaSnapshotTemplateSnapshotPtrOutput struct{ *pulumi.OutputState }

func (MediaSnapshotTemplateSnapshotPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSnapshotTemplateSnapshot)(nil)).Elem()
}

func (o MediaSnapshotTemplateSnapshotPtrOutput) ToMediaSnapshotTemplateSnapshotPtrOutput() MediaSnapshotTemplateSnapshotPtrOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotPtrOutput) ToMediaSnapshotTemplateSnapshotPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotPtrOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotPtrOutput) Elem() MediaSnapshotTemplateSnapshotOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) MediaSnapshotTemplateSnapshot {
		if v != nil {
			return *v
		}
		var ret MediaSnapshotTemplateSnapshot
		return ret
	}).(MediaSnapshotTemplateSnapshotOutput)
}

// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, Value reference range [30, 100], indicating the proportion of black pixels, the smaller the value, the smaller the proportion of black pixels, Start&gt;0, the parameter setting is invalid, no filter black screen, Start =0 parameter is valid, the start time of the frame capture is the first frame non-black screen start.
func (o MediaSnapshotTemplateSnapshotPtrOutput) BlackLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.BlackLevel
	}).(pulumi.StringPtrOutput)
}

// Screenshot image processing parameters, for example: imageMogr2/format/png.
func (o MediaSnapshotTemplateSnapshotPtrOutput) CiParam() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.CiParam
	}).(pulumi.StringPtrOutput)
}

// Number of screenshots, range (0 10000].
func (o MediaSnapshotTemplateSnapshotPtrOutput) Count() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return &v.Count
	}).(pulumi.StringPtrOutput)
}

// high, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video.
func (o MediaSnapshotTemplateSnapshotPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Whether to enable black screen detection true/false.
func (o MediaSnapshotTemplateSnapshotPtrOutput) IsCheckBlack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckBlack
	}).(pulumi.StringPtrOutput)
}

// Whether to check the number of screenshots forcibly, when using custom interval mode to take screenshots, the video time is not long enough to capture Count screenshots, you can switch to average screenshot mode to capture Count screenshots.
func (o MediaSnapshotTemplateSnapshotPtrOutput) IsCheckCount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckCount
	}).(pulumi.StringPtrOutput)
}

// Screenshot mode, value range: {Interval, Average, KeyFrame}- Interval means interval mode Average means average mode- KeyFrame represents the key frame mode- Interval mode: Start, TimeInterval, The Count parameter takes effect. When Count is set and TimeInterval is not set, Indicates to capture all frames, a total of Count pictures- Average mode: Start, the Count parameter takes effect. express.
func (o MediaSnapshotTemplateSnapshotPtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.Mode
	}).(pulumi.StringPtrOutput)
}

// Screenshot black screen detection parameters, Valid when IsCheckBlack=true, The threshold for judging whether a pixel is a black point, value range: [0, 255].
func (o MediaSnapshotTemplateSnapshotPtrOutput) PixelBlackThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.PixelBlackThreshold
	}).(pulumi.StringPtrOutput)
}

// Screenshot output mode parameters, Value range: {OnlySnapshot, OnlySprite, SnapshotAndSprite}, OnlySnapshot means output only screenshot mode OnlySprite means only output sprite mode SnapshotAndSprite means output screenshot and sprite mode.
func (o MediaSnapshotTemplateSnapshotPtrOutput) SnapshotOutMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.SnapshotOutMode
	}).(pulumi.StringPtrOutput)
}

// Screenshot output configuration.
func (o MediaSnapshotTemplateSnapshotPtrOutput) SpriteSnapshotConfig() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
		if v == nil {
			return nil
		}
		return v.SpriteSnapshotConfig
	}).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput)
}

// Starting time, [0 video duration] in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaSnapshotTemplateSnapshotPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

// Screenshot time interval, (0 3600], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaSnapshotTemplateSnapshotPtrOutput) TimeInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.TimeInterval
	}).(pulumi.StringPtrOutput)
}

// wide, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video.
func (o MediaSnapshotTemplateSnapshotPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshot) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaSnapshotTemplateSnapshotSpriteSnapshotConfig struct {
	// Single image height Value range: [8, 4096], Unit: px.
	CellHeight *string `pulumi:"cellHeight"`
	// Single image width Value range: [8, 4096], Unit: px.
	CellWidth *string `pulumi:"cellWidth"`
	// See `https://www.ffmpeg.org/ffmpeg-utils.html#color-syntax` for details on supported colors.
	Color string `pulumi:"color"`
	// Number of screenshot columns, value range: [1, 10000].
	Columns string `pulumi:"columns"`
	// Number of screenshot lines, value range: [1, 10000].
	Lines string `pulumi:"lines"`
	// screenshot margin size, Value range: [8, 4096], Unit: px.
	Margin *string `pulumi:"margin"`
	// screenshot padding size, Value range: [8, 4096], Unit: px.
	Padding *string `pulumi:"padding"`
}

// MediaSnapshotTemplateSnapshotSpriteSnapshotConfigInput is an input type that accepts MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs and MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput values.
// You can construct a concrete instance of `MediaSnapshotTemplateSnapshotSpriteSnapshotConfigInput` via:
//
//	MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs{...}
type MediaSnapshotTemplateSnapshotSpriteSnapshotConfigInput interface {
	pulumi.Input

	ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput
	ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutputWithContext(context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput
}

type MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs struct {
	// Single image height Value range: [8, 4096], Unit: px.
	CellHeight pulumi.StringPtrInput `pulumi:"cellHeight"`
	// Single image width Value range: [8, 4096], Unit: px.
	CellWidth pulumi.StringPtrInput `pulumi:"cellWidth"`
	// See `https://www.ffmpeg.org/ffmpeg-utils.html#color-syntax` for details on supported colors.
	Color pulumi.StringInput `pulumi:"color"`
	// Number of screenshot columns, value range: [1, 10000].
	Columns pulumi.StringInput `pulumi:"columns"`
	// Number of screenshot lines, value range: [1, 10000].
	Lines pulumi.StringInput `pulumi:"lines"`
	// screenshot margin size, Value range: [8, 4096], Unit: px.
	Margin pulumi.StringPtrInput `pulumi:"margin"`
	// screenshot padding size, Value range: [8, 4096], Unit: px.
	Padding pulumi.StringPtrInput `pulumi:"padding"`
}

func (MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSnapshotTemplateSnapshotSpriteSnapshotConfig)(nil)).Elem()
}

func (i MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput {
	return i.ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutputWithContext(context.Background())
}

func (i MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput)
}

func (i MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return i.ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(context.Background())
}

func (i MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput).ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(ctx)
}

// MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrInput is an input type that accepts MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs, MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtr and MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput values.
// You can construct a concrete instance of `MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrInput` via:
//
//	        MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs{...}
//
//	or:
//
//	        nil
type MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrInput interface {
	pulumi.Input

	ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput
	ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput
}

type mediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrType MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs

func MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtr(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrInput {
	return (*mediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrType)(v)
}

func (*mediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSnapshotTemplateSnapshotSpriteSnapshotConfig)(nil)).Elem()
}

func (i *mediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrType) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return i.ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(context.Background())
}

func (i *mediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrType) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput)
}

type MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput struct{ *pulumi.OutputState }

func (MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSnapshotTemplateSnapshotSpriteSnapshotConfig)(nil)).Elem()
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return o.ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(context.Background())
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
		return &v
	}).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput)
}

// Single image height Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) CellHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string { return v.CellHeight }).(pulumi.StringPtrOutput)
}

// Single image width Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) CellWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string { return v.CellWidth }).(pulumi.StringPtrOutput)
}

// See `https://www.ffmpeg.org/ffmpeg-utils.html#color-syntax` for details on supported colors.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) string { return v.Color }).(pulumi.StringOutput)
}

// Number of screenshot columns, value range: [1, 10000].
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) Columns() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) string { return v.Columns }).(pulumi.StringOutput)
}

// Number of screenshot lines, value range: [1, 10000].
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) Lines() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) string { return v.Lines }).(pulumi.StringOutput)
}

// screenshot margin size, Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) Margin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string { return v.Margin }).(pulumi.StringPtrOutput)
}

// screenshot padding size, Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput) Padding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string { return v.Padding }).(pulumi.StringPtrOutput)
}

type MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSnapshotTemplateSnapshotSpriteSnapshotConfig)(nil)).Elem()
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) ToMediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutputWithContext(ctx context.Context) MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput {
	return o
}

func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) Elem() MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) MediaSnapshotTemplateSnapshotSpriteSnapshotConfig {
		if v != nil {
			return *v
		}
		var ret MediaSnapshotTemplateSnapshotSpriteSnapshotConfig
		return ret
	}).(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput)
}

// Single image height Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) CellHeight() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return v.CellHeight
	}).(pulumi.StringPtrOutput)
}

// Single image width Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) CellWidth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return v.CellWidth
	}).(pulumi.StringPtrOutput)
}

// See `https://www.ffmpeg.org/ffmpeg-utils.html#color-syntax` for details on supported colors.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Color
	}).(pulumi.StringPtrOutput)
}

// Number of screenshot columns, value range: [1, 10000].
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) Columns() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Columns
	}).(pulumi.StringPtrOutput)
}

// Number of screenshot lines, value range: [1, 10000].
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) Lines() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Lines
	}).(pulumi.StringPtrOutput)
}

// screenshot margin size, Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) Margin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return v.Margin
	}).(pulumi.StringPtrOutput)
}

// screenshot padding size, Value range: [8, 4096], Unit: px.
func (o MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput) Padding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSnapshotTemplateSnapshotSpriteSnapshotConfig) *string {
		if v == nil {
			return nil
		}
		return v.Padding
	}).(pulumi.StringPtrOutput)
}

type MediaSpeechRecognitionTemplateSpeechRecognition struct {
	// Number of voice channels: 1 means mono. EngineModelType supports only mono for non-telephone scenarios, and 2 means dual channels (only 8kZh engine model supports dual channels, which should correspond to both sides of the call).
	ChannelNum string `pulumi:"channelNum"`
	// Whether to perform intelligent conversion of Arabic numerals (currently supports Mandarin Chinese engine): 0 means no conversion, directly output Chinese numbers, 1 means intelligently convert to Arabic numerals according to the scene, 3 means enable math-related digital conversion, the default value is 0.
	ConvertNumMode *string `pulumi:"convertNumMode"`
	// Engine model type, divided into phone scene and non-phone scene, phone scene: 8k_zh: phone 8k Chinese Mandarin general (can be used for dual-channel audio), 8k_zh_s: phone 8k Chinese Mandarin speaker separation (only for monophonic audio), 8k_en: Telephone 8k English; non-telephone scene: 16k_zh: 16k Mandarin Chinese, 16k_zh_video: 16k audio and video field, 16k_en: 16k English, 16k_ca: 16k Cantonese, 16k_ja: 16k Japanese, 16k_zh_edu: Chinese education, 16k_en_edu: English education, 16k_zh_medical: medical, 16k_th: Thai, 16k_zh_dialect: multi-dialect, supports 23 dialects.
	EngineModelType string `pulumi:"engineModelType"`
	// Whether to filter dirty words (currently supports Mandarin Chinese engine): 0 means not to filter dirty words, 1 means to filter dirty words, 2 means to replace dirty words with *, the default value is 0.
	FilterDirty *string `pulumi:"filterDirty"`
	// Whether to pass modal particles (currently supports Mandarin Chinese engine): 0 means not to filter modal particles, 1 means partial filtering, 2 means strict filtering, and the default value is 0.
	FilterModal *string `pulumi:"filterModal"`
	// Whether to filter punctuation (currently supports Mandarin Chinese engine): 0 means no filtering, 1 means filtering end-of-sentence punctuation, 2 means filtering all punctuation, the default value is 0.
	FilterPunc *string `pulumi:"filterPunc"`
	// Output file type, optional txt, srt. The default is txt.
	OutputFileType *string `pulumi:"outputFileType"`
	// Recognition result return form: 0 means the recognition result text (including segmented time stamps), 1 is the detailed recognition result at the word level granularity, without punctuation, and includes the speech rate value (a list of word time stamps, generally used to generate subtitle scenes), 2 Detailed recognition results at word-level granularity (including punctuation and speech rate values)..
	ResTextFormat *string `pulumi:"resTextFormat"`
	// Whether to enable speaker separation: 0 means not enabled, 1 means enabled (only supports 8k_zh, 16k_zh, 16k_zh_video, monophonic audio), the default value is 0, Note: 8K telephony scenarios suggest using dual-channel to distinguish between the two parties, set ChannelNum=2 is enough, no need to enable speaker separation.
	SpeakerDiarization *string `pulumi:"speakerDiarization"`
	// The number of speakers to be separated (need to be used in conjunction with enabling speaker separation), value range: 0-10, 0 means automatic separation (currently only supports <= 6 people), 1-10 represents the number of specified speakers to be separated. The default value is 0.
	SpeakerNumber *string `pulumi:"speakerNumber"`
}

// MediaSpeechRecognitionTemplateSpeechRecognitionInput is an input type that accepts MediaSpeechRecognitionTemplateSpeechRecognitionArgs and MediaSpeechRecognitionTemplateSpeechRecognitionOutput values.
// You can construct a concrete instance of `MediaSpeechRecognitionTemplateSpeechRecognitionInput` via:
//
//	MediaSpeechRecognitionTemplateSpeechRecognitionArgs{...}
type MediaSpeechRecognitionTemplateSpeechRecognitionInput interface {
	pulumi.Input

	ToMediaSpeechRecognitionTemplateSpeechRecognitionOutput() MediaSpeechRecognitionTemplateSpeechRecognitionOutput
	ToMediaSpeechRecognitionTemplateSpeechRecognitionOutputWithContext(context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionOutput
}

type MediaSpeechRecognitionTemplateSpeechRecognitionArgs struct {
	// Number of voice channels: 1 means mono. EngineModelType supports only mono for non-telephone scenarios, and 2 means dual channels (only 8kZh engine model supports dual channels, which should correspond to both sides of the call).
	ChannelNum pulumi.StringInput `pulumi:"channelNum"`
	// Whether to perform intelligent conversion of Arabic numerals (currently supports Mandarin Chinese engine): 0 means no conversion, directly output Chinese numbers, 1 means intelligently convert to Arabic numerals according to the scene, 3 means enable math-related digital conversion, the default value is 0.
	ConvertNumMode pulumi.StringPtrInput `pulumi:"convertNumMode"`
	// Engine model type, divided into phone scene and non-phone scene, phone scene: 8k_zh: phone 8k Chinese Mandarin general (can be used for dual-channel audio), 8k_zh_s: phone 8k Chinese Mandarin speaker separation (only for monophonic audio), 8k_en: Telephone 8k English; non-telephone scene: 16k_zh: 16k Mandarin Chinese, 16k_zh_video: 16k audio and video field, 16k_en: 16k English, 16k_ca: 16k Cantonese, 16k_ja: 16k Japanese, 16k_zh_edu: Chinese education, 16k_en_edu: English education, 16k_zh_medical: medical, 16k_th: Thai, 16k_zh_dialect: multi-dialect, supports 23 dialects.
	EngineModelType pulumi.StringInput `pulumi:"engineModelType"`
	// Whether to filter dirty words (currently supports Mandarin Chinese engine): 0 means not to filter dirty words, 1 means to filter dirty words, 2 means to replace dirty words with *, the default value is 0.
	FilterDirty pulumi.StringPtrInput `pulumi:"filterDirty"`
	// Whether to pass modal particles (currently supports Mandarin Chinese engine): 0 means not to filter modal particles, 1 means partial filtering, 2 means strict filtering, and the default value is 0.
	FilterModal pulumi.StringPtrInput `pulumi:"filterModal"`
	// Whether to filter punctuation (currently supports Mandarin Chinese engine): 0 means no filtering, 1 means filtering end-of-sentence punctuation, 2 means filtering all punctuation, the default value is 0.
	FilterPunc pulumi.StringPtrInput `pulumi:"filterPunc"`
	// Output file type, optional txt, srt. The default is txt.
	OutputFileType pulumi.StringPtrInput `pulumi:"outputFileType"`
	// Recognition result return form: 0 means the recognition result text (including segmented time stamps), 1 is the detailed recognition result at the word level granularity, without punctuation, and includes the speech rate value (a list of word time stamps, generally used to generate subtitle scenes), 2 Detailed recognition results at word-level granularity (including punctuation and speech rate values)..
	ResTextFormat pulumi.StringPtrInput `pulumi:"resTextFormat"`
	// Whether to enable speaker separation: 0 means not enabled, 1 means enabled (only supports 8k_zh, 16k_zh, 16k_zh_video, monophonic audio), the default value is 0, Note: 8K telephony scenarios suggest using dual-channel to distinguish between the two parties, set ChannelNum=2 is enough, no need to enable speaker separation.
	SpeakerDiarization pulumi.StringPtrInput `pulumi:"speakerDiarization"`
	// The number of speakers to be separated (need to be used in conjunction with enabling speaker separation), value range: 0-10, 0 means automatic separation (currently only supports <= 6 people), 1-10 represents the number of specified speakers to be separated. The default value is 0.
	SpeakerNumber pulumi.StringPtrInput `pulumi:"speakerNumber"`
}

func (MediaSpeechRecognitionTemplateSpeechRecognitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSpeechRecognitionTemplateSpeechRecognition)(nil)).Elem()
}

func (i MediaSpeechRecognitionTemplateSpeechRecognitionArgs) ToMediaSpeechRecognitionTemplateSpeechRecognitionOutput() MediaSpeechRecognitionTemplateSpeechRecognitionOutput {
	return i.ToMediaSpeechRecognitionTemplateSpeechRecognitionOutputWithContext(context.Background())
}

func (i MediaSpeechRecognitionTemplateSpeechRecognitionArgs) ToMediaSpeechRecognitionTemplateSpeechRecognitionOutputWithContext(ctx context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSpeechRecognitionTemplateSpeechRecognitionOutput)
}

func (i MediaSpeechRecognitionTemplateSpeechRecognitionArgs) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput() MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return i.ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(context.Background())
}

func (i MediaSpeechRecognitionTemplateSpeechRecognitionArgs) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(ctx context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSpeechRecognitionTemplateSpeechRecognitionOutput).ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(ctx)
}

// MediaSpeechRecognitionTemplateSpeechRecognitionPtrInput is an input type that accepts MediaSpeechRecognitionTemplateSpeechRecognitionArgs, MediaSpeechRecognitionTemplateSpeechRecognitionPtr and MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput values.
// You can construct a concrete instance of `MediaSpeechRecognitionTemplateSpeechRecognitionPtrInput` via:
//
//	        MediaSpeechRecognitionTemplateSpeechRecognitionArgs{...}
//
//	or:
//
//	        nil
type MediaSpeechRecognitionTemplateSpeechRecognitionPtrInput interface {
	pulumi.Input

	ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput() MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput
	ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput
}

type mediaSpeechRecognitionTemplateSpeechRecognitionPtrType MediaSpeechRecognitionTemplateSpeechRecognitionArgs

func MediaSpeechRecognitionTemplateSpeechRecognitionPtr(v *MediaSpeechRecognitionTemplateSpeechRecognitionArgs) MediaSpeechRecognitionTemplateSpeechRecognitionPtrInput {
	return (*mediaSpeechRecognitionTemplateSpeechRecognitionPtrType)(v)
}

func (*mediaSpeechRecognitionTemplateSpeechRecognitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSpeechRecognitionTemplateSpeechRecognition)(nil)).Elem()
}

func (i *mediaSpeechRecognitionTemplateSpeechRecognitionPtrType) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput() MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return i.ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(context.Background())
}

func (i *mediaSpeechRecognitionTemplateSpeechRecognitionPtrType) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(ctx context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput)
}

type MediaSpeechRecognitionTemplateSpeechRecognitionOutput struct{ *pulumi.OutputState }

func (MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaSpeechRecognitionTemplateSpeechRecognition)(nil)).Elem()
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ToMediaSpeechRecognitionTemplateSpeechRecognitionOutput() MediaSpeechRecognitionTemplateSpeechRecognitionOutput {
	return o
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ToMediaSpeechRecognitionTemplateSpeechRecognitionOutputWithContext(ctx context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionOutput {
	return o
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput() MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return o.ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(context.Background())
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(ctx context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaSpeechRecognitionTemplateSpeechRecognition) *MediaSpeechRecognitionTemplateSpeechRecognition {
		return &v
	}).(MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput)
}

// Number of voice channels: 1 means mono. EngineModelType supports only mono for non-telephone scenarios, and 2 means dual channels (only 8kZh engine model supports dual channels, which should correspond to both sides of the call).
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ChannelNum() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) string { return v.ChannelNum }).(pulumi.StringOutput)
}

// Whether to perform intelligent conversion of Arabic numerals (currently supports Mandarin Chinese engine): 0 means no conversion, directly output Chinese numbers, 1 means intelligently convert to Arabic numerals according to the scene, 3 means enable math-related digital conversion, the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ConvertNumMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.ConvertNumMode }).(pulumi.StringPtrOutput)
}

// Engine model type, divided into phone scene and non-phone scene, phone scene: 8k_zh: phone 8k Chinese Mandarin general (can be used for dual-channel audio), 8k_zh_s: phone 8k Chinese Mandarin speaker separation (only for monophonic audio), 8k_en: Telephone 8k English; non-telephone scene: 16k_zh: 16k Mandarin Chinese, 16k_zh_video: 16k audio and video field, 16k_en: 16k English, 16k_ca: 16k Cantonese, 16k_ja: 16k Japanese, 16k_zh_edu: Chinese education, 16k_en_edu: English education, 16k_zh_medical: medical, 16k_th: Thai, 16k_zh_dialect: multi-dialect, supports 23 dialects.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) EngineModelType() pulumi.StringOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) string { return v.EngineModelType }).(pulumi.StringOutput)
}

// Whether to filter dirty words (currently supports Mandarin Chinese engine): 0 means not to filter dirty words, 1 means to filter dirty words, 2 means to replace dirty words with *, the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) FilterDirty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.FilterDirty }).(pulumi.StringPtrOutput)
}

// Whether to pass modal particles (currently supports Mandarin Chinese engine): 0 means not to filter modal particles, 1 means partial filtering, 2 means strict filtering, and the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) FilterModal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.FilterModal }).(pulumi.StringPtrOutput)
}

// Whether to filter punctuation (currently supports Mandarin Chinese engine): 0 means no filtering, 1 means filtering end-of-sentence punctuation, 2 means filtering all punctuation, the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) FilterPunc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.FilterPunc }).(pulumi.StringPtrOutput)
}

// Output file type, optional txt, srt. The default is txt.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) OutputFileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.OutputFileType }).(pulumi.StringPtrOutput)
}

// Recognition result return form: 0 means the recognition result text (including segmented time stamps), 1 is the detailed recognition result at the word level granularity, without punctuation, and includes the speech rate value (a list of word time stamps, generally used to generate subtitle scenes), 2 Detailed recognition results at word-level granularity (including punctuation and speech rate values)..
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) ResTextFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.ResTextFormat }).(pulumi.StringPtrOutput)
}

// Whether to enable speaker separation: 0 means not enabled, 1 means enabled (only supports 8k_zh, 16k_zh, 16k_zh_video, monophonic audio), the default value is 0, Note: 8K telephony scenarios suggest using dual-channel to distinguish between the two parties, set ChannelNum=2 is enough, no need to enable speaker separation.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) SpeakerDiarization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.SpeakerDiarization }).(pulumi.StringPtrOutput)
}

// The number of speakers to be separated (need to be used in conjunction with enabling speaker separation), value range: 0-10, 0 means automatic separation (currently only supports <= 6 people), 1-10 represents the number of specified speakers to be separated. The default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionOutput) SpeakerNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaSpeechRecognitionTemplateSpeechRecognition) *string { return v.SpeakerNumber }).(pulumi.StringPtrOutput)
}

type MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput struct{ *pulumi.OutputState }

func (MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSpeechRecognitionTemplateSpeechRecognition)(nil)).Elem()
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput() MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return o
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) ToMediaSpeechRecognitionTemplateSpeechRecognitionPtrOutputWithContext(ctx context.Context) MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput {
	return o
}

func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) Elem() MediaSpeechRecognitionTemplateSpeechRecognitionOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) MediaSpeechRecognitionTemplateSpeechRecognition {
		if v != nil {
			return *v
		}
		var ret MediaSpeechRecognitionTemplateSpeechRecognition
		return ret
	}).(MediaSpeechRecognitionTemplateSpeechRecognitionOutput)
}

// Number of voice channels: 1 means mono. EngineModelType supports only mono for non-telephone scenarios, and 2 means dual channels (only 8kZh engine model supports dual channels, which should correspond to both sides of the call).
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) ChannelNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return &v.ChannelNum
	}).(pulumi.StringPtrOutput)
}

// Whether to perform intelligent conversion of Arabic numerals (currently supports Mandarin Chinese engine): 0 means no conversion, directly output Chinese numbers, 1 means intelligently convert to Arabic numerals according to the scene, 3 means enable math-related digital conversion, the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) ConvertNumMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.ConvertNumMode
	}).(pulumi.StringPtrOutput)
}

// Engine model type, divided into phone scene and non-phone scene, phone scene: 8k_zh: phone 8k Chinese Mandarin general (can be used for dual-channel audio), 8k_zh_s: phone 8k Chinese Mandarin speaker separation (only for monophonic audio), 8k_en: Telephone 8k English; non-telephone scene: 16k_zh: 16k Mandarin Chinese, 16k_zh_video: 16k audio and video field, 16k_en: 16k English, 16k_ca: 16k Cantonese, 16k_ja: 16k Japanese, 16k_zh_edu: Chinese education, 16k_en_edu: English education, 16k_zh_medical: medical, 16k_th: Thai, 16k_zh_dialect: multi-dialect, supports 23 dialects.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) EngineModelType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return &v.EngineModelType
	}).(pulumi.StringPtrOutput)
}

// Whether to filter dirty words (currently supports Mandarin Chinese engine): 0 means not to filter dirty words, 1 means to filter dirty words, 2 means to replace dirty words with *, the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) FilterDirty() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.FilterDirty
	}).(pulumi.StringPtrOutput)
}

// Whether to pass modal particles (currently supports Mandarin Chinese engine): 0 means not to filter modal particles, 1 means partial filtering, 2 means strict filtering, and the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) FilterModal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.FilterModal
	}).(pulumi.StringPtrOutput)
}

// Whether to filter punctuation (currently supports Mandarin Chinese engine): 0 means no filtering, 1 means filtering end-of-sentence punctuation, 2 means filtering all punctuation, the default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) FilterPunc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.FilterPunc
	}).(pulumi.StringPtrOutput)
}

// Output file type, optional txt, srt. The default is txt.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) OutputFileType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.OutputFileType
	}).(pulumi.StringPtrOutput)
}

// Recognition result return form: 0 means the recognition result text (including segmented time stamps), 1 is the detailed recognition result at the word level granularity, without punctuation, and includes the speech rate value (a list of word time stamps, generally used to generate subtitle scenes), 2 Detailed recognition results at word-level granularity (including punctuation and speech rate values)..
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) ResTextFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.ResTextFormat
	}).(pulumi.StringPtrOutput)
}

// Whether to enable speaker separation: 0 means not enabled, 1 means enabled (only supports 8k_zh, 16k_zh, 16k_zh_video, monophonic audio), the default value is 0, Note: 8K telephony scenarios suggest using dual-channel to distinguish between the two parties, set ChannelNum=2 is enough, no need to enable speaker separation.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) SpeakerDiarization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.SpeakerDiarization
	}).(pulumi.StringPtrOutput)
}

// The number of speakers to be separated (need to be used in conjunction with enabling speaker separation), value range: 0-10, 0 means automatic separation (currently only supports <= 6 people), 1-10 represents the number of specified speakers to be separated. The default value is 0.
func (o MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput) SpeakerNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSpeechRecognitionTemplateSpeechRecognition) *string {
		if v == nil {
			return nil
		}
		return v.SpeakerNumber
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateAudio struct {
	// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
	Codec string `pulumi:"codec"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove *string `pulumi:"remove"`
}

// MediaTranscodeProTemplateAudioInput is an input type that accepts MediaTranscodeProTemplateAudioArgs and MediaTranscodeProTemplateAudioOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateAudioInput` via:
//
//	MediaTranscodeProTemplateAudioArgs{...}
type MediaTranscodeProTemplateAudioInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateAudioOutput() MediaTranscodeProTemplateAudioOutput
	ToMediaTranscodeProTemplateAudioOutputWithContext(context.Context) MediaTranscodeProTemplateAudioOutput
}

type MediaTranscodeProTemplateAudioArgs struct {
	// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove pulumi.StringPtrInput `pulumi:"remove"`
}

func (MediaTranscodeProTemplateAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateAudio)(nil)).Elem()
}

func (i MediaTranscodeProTemplateAudioArgs) ToMediaTranscodeProTemplateAudioOutput() MediaTranscodeProTemplateAudioOutput {
	return i.ToMediaTranscodeProTemplateAudioOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateAudioArgs) ToMediaTranscodeProTemplateAudioOutputWithContext(ctx context.Context) MediaTranscodeProTemplateAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateAudioOutput)
}

func (i MediaTranscodeProTemplateAudioArgs) ToMediaTranscodeProTemplateAudioPtrOutput() MediaTranscodeProTemplateAudioPtrOutput {
	return i.ToMediaTranscodeProTemplateAudioPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateAudioArgs) ToMediaTranscodeProTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateAudioOutput).ToMediaTranscodeProTemplateAudioPtrOutputWithContext(ctx)
}

// MediaTranscodeProTemplateAudioPtrInput is an input type that accepts MediaTranscodeProTemplateAudioArgs, MediaTranscodeProTemplateAudioPtr and MediaTranscodeProTemplateAudioPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateAudioPtrInput` via:
//
//	        MediaTranscodeProTemplateAudioArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeProTemplateAudioPtrInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateAudioPtrOutput() MediaTranscodeProTemplateAudioPtrOutput
	ToMediaTranscodeProTemplateAudioPtrOutputWithContext(context.Context) MediaTranscodeProTemplateAudioPtrOutput
}

type mediaTranscodeProTemplateAudioPtrType MediaTranscodeProTemplateAudioArgs

func MediaTranscodeProTemplateAudioPtr(v *MediaTranscodeProTemplateAudioArgs) MediaTranscodeProTemplateAudioPtrInput {
	return (*mediaTranscodeProTemplateAudioPtrType)(v)
}

func (*mediaTranscodeProTemplateAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateAudio)(nil)).Elem()
}

func (i *mediaTranscodeProTemplateAudioPtrType) ToMediaTranscodeProTemplateAudioPtrOutput() MediaTranscodeProTemplateAudioPtrOutput {
	return i.ToMediaTranscodeProTemplateAudioPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeProTemplateAudioPtrType) ToMediaTranscodeProTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateAudioPtrOutput)
}

type MediaTranscodeProTemplateAudioOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateAudio)(nil)).Elem()
}

func (o MediaTranscodeProTemplateAudioOutput) ToMediaTranscodeProTemplateAudioOutput() MediaTranscodeProTemplateAudioOutput {
	return o
}

func (o MediaTranscodeProTemplateAudioOutput) ToMediaTranscodeProTemplateAudioOutputWithContext(ctx context.Context) MediaTranscodeProTemplateAudioOutput {
	return o
}

func (o MediaTranscodeProTemplateAudioOutput) ToMediaTranscodeProTemplateAudioPtrOutput() MediaTranscodeProTemplateAudioPtrOutput {
	return o.ToMediaTranscodeProTemplateAudioPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeProTemplateAudioOutput) ToMediaTranscodeProTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeProTemplateAudio) *MediaTranscodeProTemplateAudio {
		return &v
	}).(MediaTranscodeProTemplateAudioPtrOutput)
}

// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
func (o MediaTranscodeProTemplateAudioOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateAudio) string { return v.Codec }).(pulumi.StringOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaTranscodeProTemplateAudioOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateAudio) *string { return v.Remove }).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateAudioPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateAudio)(nil)).Elem()
}

func (o MediaTranscodeProTemplateAudioPtrOutput) ToMediaTranscodeProTemplateAudioPtrOutput() MediaTranscodeProTemplateAudioPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateAudioPtrOutput) ToMediaTranscodeProTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateAudioPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateAudioPtrOutput) Elem() MediaTranscodeProTemplateAudioOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateAudio) MediaTranscodeProTemplateAudio {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeProTemplateAudio
		return ret
	}).(MediaTranscodeProTemplateAudioOutput)
}

// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
func (o MediaTranscodeProTemplateAudioPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaTranscodeProTemplateAudioPtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateContainer struct {
	// Fragment configuration, valid when format is hls and dash.
	ClipConfig *MediaTranscodeProTemplateContainerClipConfig `pulumi:"clipConfig"`
	// Package format.
	Format string `pulumi:"format"`
}

// MediaTranscodeProTemplateContainerInput is an input type that accepts MediaTranscodeProTemplateContainerArgs and MediaTranscodeProTemplateContainerOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateContainerInput` via:
//
//	MediaTranscodeProTemplateContainerArgs{...}
type MediaTranscodeProTemplateContainerInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateContainerOutput() MediaTranscodeProTemplateContainerOutput
	ToMediaTranscodeProTemplateContainerOutputWithContext(context.Context) MediaTranscodeProTemplateContainerOutput
}

type MediaTranscodeProTemplateContainerArgs struct {
	// Fragment configuration, valid when format is hls and dash.
	ClipConfig MediaTranscodeProTemplateContainerClipConfigPtrInput `pulumi:"clipConfig"`
	// Package format.
	Format pulumi.StringInput `pulumi:"format"`
}

func (MediaTranscodeProTemplateContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateContainer)(nil)).Elem()
}

func (i MediaTranscodeProTemplateContainerArgs) ToMediaTranscodeProTemplateContainerOutput() MediaTranscodeProTemplateContainerOutput {
	return i.ToMediaTranscodeProTemplateContainerOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateContainerArgs) ToMediaTranscodeProTemplateContainerOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateContainerOutput)
}

func (i MediaTranscodeProTemplateContainerArgs) ToMediaTranscodeProTemplateContainerPtrOutput() MediaTranscodeProTemplateContainerPtrOutput {
	return i.ToMediaTranscodeProTemplateContainerPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateContainerArgs) ToMediaTranscodeProTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateContainerOutput).ToMediaTranscodeProTemplateContainerPtrOutputWithContext(ctx)
}

// MediaTranscodeProTemplateContainerPtrInput is an input type that accepts MediaTranscodeProTemplateContainerArgs, MediaTranscodeProTemplateContainerPtr and MediaTranscodeProTemplateContainerPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateContainerPtrInput` via:
//
//	        MediaTranscodeProTemplateContainerArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeProTemplateContainerPtrInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateContainerPtrOutput() MediaTranscodeProTemplateContainerPtrOutput
	ToMediaTranscodeProTemplateContainerPtrOutputWithContext(context.Context) MediaTranscodeProTemplateContainerPtrOutput
}

type mediaTranscodeProTemplateContainerPtrType MediaTranscodeProTemplateContainerArgs

func MediaTranscodeProTemplateContainerPtr(v *MediaTranscodeProTemplateContainerArgs) MediaTranscodeProTemplateContainerPtrInput {
	return (*mediaTranscodeProTemplateContainerPtrType)(v)
}

func (*mediaTranscodeProTemplateContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateContainer)(nil)).Elem()
}

func (i *mediaTranscodeProTemplateContainerPtrType) ToMediaTranscodeProTemplateContainerPtrOutput() MediaTranscodeProTemplateContainerPtrOutput {
	return i.ToMediaTranscodeProTemplateContainerPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeProTemplateContainerPtrType) ToMediaTranscodeProTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateContainerPtrOutput)
}

type MediaTranscodeProTemplateContainerOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateContainer)(nil)).Elem()
}

func (o MediaTranscodeProTemplateContainerOutput) ToMediaTranscodeProTemplateContainerOutput() MediaTranscodeProTemplateContainerOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerOutput) ToMediaTranscodeProTemplateContainerOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerOutput) ToMediaTranscodeProTemplateContainerPtrOutput() MediaTranscodeProTemplateContainerPtrOutput {
	return o.ToMediaTranscodeProTemplateContainerPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeProTemplateContainerOutput) ToMediaTranscodeProTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeProTemplateContainer) *MediaTranscodeProTemplateContainer {
		return &v
	}).(MediaTranscodeProTemplateContainerPtrOutput)
}

// Fragment configuration, valid when format is hls and dash.
func (o MediaTranscodeProTemplateContainerOutput) ClipConfig() MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateContainer) *MediaTranscodeProTemplateContainerClipConfig {
		return v.ClipConfig
	}).(MediaTranscodeProTemplateContainerClipConfigPtrOutput)
}

// Package format.
func (o MediaTranscodeProTemplateContainerOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateContainer) string { return v.Format }).(pulumi.StringOutput)
}

type MediaTranscodeProTemplateContainerPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateContainer)(nil)).Elem()
}

func (o MediaTranscodeProTemplateContainerPtrOutput) ToMediaTranscodeProTemplateContainerPtrOutput() MediaTranscodeProTemplateContainerPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerPtrOutput) ToMediaTranscodeProTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerPtrOutput) Elem() MediaTranscodeProTemplateContainerOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateContainer) MediaTranscodeProTemplateContainer {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeProTemplateContainer
		return ret
	}).(MediaTranscodeProTemplateContainerOutput)
}

// Fragment configuration, valid when format is hls and dash.
func (o MediaTranscodeProTemplateContainerPtrOutput) ClipConfig() MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateContainer) *MediaTranscodeProTemplateContainerClipConfig {
		if v == nil {
			return nil
		}
		return v.ClipConfig
	}).(MediaTranscodeProTemplateContainerClipConfigPtrOutput)
}

// Package format.
func (o MediaTranscodeProTemplateContainerPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateContainerClipConfig struct {
	// Fragmentation duration, default 5s.
	Duration *string `pulumi:"duration"`
}

// MediaTranscodeProTemplateContainerClipConfigInput is an input type that accepts MediaTranscodeProTemplateContainerClipConfigArgs and MediaTranscodeProTemplateContainerClipConfigOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateContainerClipConfigInput` via:
//
//	MediaTranscodeProTemplateContainerClipConfigArgs{...}
type MediaTranscodeProTemplateContainerClipConfigInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateContainerClipConfigOutput() MediaTranscodeProTemplateContainerClipConfigOutput
	ToMediaTranscodeProTemplateContainerClipConfigOutputWithContext(context.Context) MediaTranscodeProTemplateContainerClipConfigOutput
}

type MediaTranscodeProTemplateContainerClipConfigArgs struct {
	// Fragmentation duration, default 5s.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (MediaTranscodeProTemplateContainerClipConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateContainerClipConfig)(nil)).Elem()
}

func (i MediaTranscodeProTemplateContainerClipConfigArgs) ToMediaTranscodeProTemplateContainerClipConfigOutput() MediaTranscodeProTemplateContainerClipConfigOutput {
	return i.ToMediaTranscodeProTemplateContainerClipConfigOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateContainerClipConfigArgs) ToMediaTranscodeProTemplateContainerClipConfigOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerClipConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateContainerClipConfigOutput)
}

func (i MediaTranscodeProTemplateContainerClipConfigArgs) ToMediaTranscodeProTemplateContainerClipConfigPtrOutput() MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return i.ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateContainerClipConfigArgs) ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateContainerClipConfigOutput).ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(ctx)
}

// MediaTranscodeProTemplateContainerClipConfigPtrInput is an input type that accepts MediaTranscodeProTemplateContainerClipConfigArgs, MediaTranscodeProTemplateContainerClipConfigPtr and MediaTranscodeProTemplateContainerClipConfigPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateContainerClipConfigPtrInput` via:
//
//	        MediaTranscodeProTemplateContainerClipConfigArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeProTemplateContainerClipConfigPtrInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateContainerClipConfigPtrOutput() MediaTranscodeProTemplateContainerClipConfigPtrOutput
	ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(context.Context) MediaTranscodeProTemplateContainerClipConfigPtrOutput
}

type mediaTranscodeProTemplateContainerClipConfigPtrType MediaTranscodeProTemplateContainerClipConfigArgs

func MediaTranscodeProTemplateContainerClipConfigPtr(v *MediaTranscodeProTemplateContainerClipConfigArgs) MediaTranscodeProTemplateContainerClipConfigPtrInput {
	return (*mediaTranscodeProTemplateContainerClipConfigPtrType)(v)
}

func (*mediaTranscodeProTemplateContainerClipConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateContainerClipConfig)(nil)).Elem()
}

func (i *mediaTranscodeProTemplateContainerClipConfigPtrType) ToMediaTranscodeProTemplateContainerClipConfigPtrOutput() MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return i.ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeProTemplateContainerClipConfigPtrType) ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateContainerClipConfigPtrOutput)
}

type MediaTranscodeProTemplateContainerClipConfigOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateContainerClipConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateContainerClipConfig)(nil)).Elem()
}

func (o MediaTranscodeProTemplateContainerClipConfigOutput) ToMediaTranscodeProTemplateContainerClipConfigOutput() MediaTranscodeProTemplateContainerClipConfigOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerClipConfigOutput) ToMediaTranscodeProTemplateContainerClipConfigOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerClipConfigOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerClipConfigOutput) ToMediaTranscodeProTemplateContainerClipConfigPtrOutput() MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return o.ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeProTemplateContainerClipConfigOutput) ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeProTemplateContainerClipConfig) *MediaTranscodeProTemplateContainerClipConfig {
		return &v
	}).(MediaTranscodeProTemplateContainerClipConfigPtrOutput)
}

// Fragmentation duration, default 5s.
func (o MediaTranscodeProTemplateContainerClipConfigOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateContainerClipConfig) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateContainerClipConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateContainerClipConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateContainerClipConfig)(nil)).Elem()
}

func (o MediaTranscodeProTemplateContainerClipConfigPtrOutput) ToMediaTranscodeProTemplateContainerClipConfigPtrOutput() MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerClipConfigPtrOutput) ToMediaTranscodeProTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateContainerClipConfigPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateContainerClipConfigPtrOutput) Elem() MediaTranscodeProTemplateContainerClipConfigOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateContainerClipConfig) MediaTranscodeProTemplateContainerClipConfig {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeProTemplateContainerClipConfig
		return ret
	}).(MediaTranscodeProTemplateContainerClipConfigOutput)
}

// Fragmentation duration, default 5s.
func (o MediaTranscodeProTemplateContainerClipConfigPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateContainerClipConfig) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateTimeInterval struct {
	// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Duration *string `pulumi:"duration"`
	// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start *string `pulumi:"start"`
}

// MediaTranscodeProTemplateTimeIntervalInput is an input type that accepts MediaTranscodeProTemplateTimeIntervalArgs and MediaTranscodeProTemplateTimeIntervalOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateTimeIntervalInput` via:
//
//	MediaTranscodeProTemplateTimeIntervalArgs{...}
type MediaTranscodeProTemplateTimeIntervalInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateTimeIntervalOutput() MediaTranscodeProTemplateTimeIntervalOutput
	ToMediaTranscodeProTemplateTimeIntervalOutputWithContext(context.Context) MediaTranscodeProTemplateTimeIntervalOutput
}

type MediaTranscodeProTemplateTimeIntervalArgs struct {
	// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (MediaTranscodeProTemplateTimeIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateTimeInterval)(nil)).Elem()
}

func (i MediaTranscodeProTemplateTimeIntervalArgs) ToMediaTranscodeProTemplateTimeIntervalOutput() MediaTranscodeProTemplateTimeIntervalOutput {
	return i.ToMediaTranscodeProTemplateTimeIntervalOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateTimeIntervalArgs) ToMediaTranscodeProTemplateTimeIntervalOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTimeIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateTimeIntervalOutput)
}

func (i MediaTranscodeProTemplateTimeIntervalArgs) ToMediaTranscodeProTemplateTimeIntervalPtrOutput() MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return i.ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateTimeIntervalArgs) ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateTimeIntervalOutput).ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(ctx)
}

// MediaTranscodeProTemplateTimeIntervalPtrInput is an input type that accepts MediaTranscodeProTemplateTimeIntervalArgs, MediaTranscodeProTemplateTimeIntervalPtr and MediaTranscodeProTemplateTimeIntervalPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateTimeIntervalPtrInput` via:
//
//	        MediaTranscodeProTemplateTimeIntervalArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeProTemplateTimeIntervalPtrInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateTimeIntervalPtrOutput() MediaTranscodeProTemplateTimeIntervalPtrOutput
	ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(context.Context) MediaTranscodeProTemplateTimeIntervalPtrOutput
}

type mediaTranscodeProTemplateTimeIntervalPtrType MediaTranscodeProTemplateTimeIntervalArgs

func MediaTranscodeProTemplateTimeIntervalPtr(v *MediaTranscodeProTemplateTimeIntervalArgs) MediaTranscodeProTemplateTimeIntervalPtrInput {
	return (*mediaTranscodeProTemplateTimeIntervalPtrType)(v)
}

func (*mediaTranscodeProTemplateTimeIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateTimeInterval)(nil)).Elem()
}

func (i *mediaTranscodeProTemplateTimeIntervalPtrType) ToMediaTranscodeProTemplateTimeIntervalPtrOutput() MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return i.ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeProTemplateTimeIntervalPtrType) ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateTimeIntervalPtrOutput)
}

type MediaTranscodeProTemplateTimeIntervalOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateTimeIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateTimeInterval)(nil)).Elem()
}

func (o MediaTranscodeProTemplateTimeIntervalOutput) ToMediaTranscodeProTemplateTimeIntervalOutput() MediaTranscodeProTemplateTimeIntervalOutput {
	return o
}

func (o MediaTranscodeProTemplateTimeIntervalOutput) ToMediaTranscodeProTemplateTimeIntervalOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTimeIntervalOutput {
	return o
}

func (o MediaTranscodeProTemplateTimeIntervalOutput) ToMediaTranscodeProTemplateTimeIntervalPtrOutput() MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return o.ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeProTemplateTimeIntervalOutput) ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeProTemplateTimeInterval) *MediaTranscodeProTemplateTimeInterval {
		return &v
	}).(MediaTranscodeProTemplateTimeIntervalPtrOutput)
}

// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeProTemplateTimeIntervalOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTimeInterval) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeProTemplateTimeIntervalOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTimeInterval) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateTimeIntervalPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateTimeIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateTimeInterval)(nil)).Elem()
}

func (o MediaTranscodeProTemplateTimeIntervalPtrOutput) ToMediaTranscodeProTemplateTimeIntervalPtrOutput() MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateTimeIntervalPtrOutput) ToMediaTranscodeProTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateTimeIntervalPtrOutput) Elem() MediaTranscodeProTemplateTimeIntervalOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTimeInterval) MediaTranscodeProTemplateTimeInterval {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeProTemplateTimeInterval
		return ret
	}).(MediaTranscodeProTemplateTimeIntervalOutput)
}

// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeProTemplateTimeIntervalPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeProTemplateTimeIntervalPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateTransConfig struct {
	// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
	AdjDarMethod *string `pulumi:"adjDarMethod"`
	// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
	AudioBitrateAdjMethod *string `pulumi:"audioBitrateAdjMethod"`
	// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
	DeleteMetadata *string `pulumi:"deleteMetadata"`
	// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
	IsCheckAudioBitrate *string `pulumi:"isCheckAudioBitrate"`
	// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
	IsCheckReso *string `pulumi:"isCheckReso"`
	// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
	IsCheckVideoBitrate *string `pulumi:"isCheckVideoBitrate"`
	// Whether to enable HDR to SDR true, false.
	IsHdr2Sdr *string `pulumi:"isHdr2Sdr"`
	// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
	ResoAdjMethod *string `pulumi:"resoAdjMethod"`
	// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
	VideoBitrateAdjMethod *string `pulumi:"videoBitrateAdjMethod"`
}

// MediaTranscodeProTemplateTransConfigInput is an input type that accepts MediaTranscodeProTemplateTransConfigArgs and MediaTranscodeProTemplateTransConfigOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateTransConfigInput` via:
//
//	MediaTranscodeProTemplateTransConfigArgs{...}
type MediaTranscodeProTemplateTransConfigInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateTransConfigOutput() MediaTranscodeProTemplateTransConfigOutput
	ToMediaTranscodeProTemplateTransConfigOutputWithContext(context.Context) MediaTranscodeProTemplateTransConfigOutput
}

type MediaTranscodeProTemplateTransConfigArgs struct {
	// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
	AdjDarMethod pulumi.StringPtrInput `pulumi:"adjDarMethod"`
	// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
	AudioBitrateAdjMethod pulumi.StringPtrInput `pulumi:"audioBitrateAdjMethod"`
	// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
	DeleteMetadata pulumi.StringPtrInput `pulumi:"deleteMetadata"`
	// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
	IsCheckAudioBitrate pulumi.StringPtrInput `pulumi:"isCheckAudioBitrate"`
	// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
	IsCheckReso pulumi.StringPtrInput `pulumi:"isCheckReso"`
	// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
	IsCheckVideoBitrate pulumi.StringPtrInput `pulumi:"isCheckVideoBitrate"`
	// Whether to enable HDR to SDR true, false.
	IsHdr2Sdr pulumi.StringPtrInput `pulumi:"isHdr2Sdr"`
	// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
	ResoAdjMethod pulumi.StringPtrInput `pulumi:"resoAdjMethod"`
	// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
	VideoBitrateAdjMethod pulumi.StringPtrInput `pulumi:"videoBitrateAdjMethod"`
}

func (MediaTranscodeProTemplateTransConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateTransConfig)(nil)).Elem()
}

func (i MediaTranscodeProTemplateTransConfigArgs) ToMediaTranscodeProTemplateTransConfigOutput() MediaTranscodeProTemplateTransConfigOutput {
	return i.ToMediaTranscodeProTemplateTransConfigOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateTransConfigArgs) ToMediaTranscodeProTemplateTransConfigOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTransConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateTransConfigOutput)
}

func (i MediaTranscodeProTemplateTransConfigArgs) ToMediaTranscodeProTemplateTransConfigPtrOutput() MediaTranscodeProTemplateTransConfigPtrOutput {
	return i.ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateTransConfigArgs) ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTransConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateTransConfigOutput).ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(ctx)
}

// MediaTranscodeProTemplateTransConfigPtrInput is an input type that accepts MediaTranscodeProTemplateTransConfigArgs, MediaTranscodeProTemplateTransConfigPtr and MediaTranscodeProTemplateTransConfigPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateTransConfigPtrInput` via:
//
//	        MediaTranscodeProTemplateTransConfigArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeProTemplateTransConfigPtrInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateTransConfigPtrOutput() MediaTranscodeProTemplateTransConfigPtrOutput
	ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(context.Context) MediaTranscodeProTemplateTransConfigPtrOutput
}

type mediaTranscodeProTemplateTransConfigPtrType MediaTranscodeProTemplateTransConfigArgs

func MediaTranscodeProTemplateTransConfigPtr(v *MediaTranscodeProTemplateTransConfigArgs) MediaTranscodeProTemplateTransConfigPtrInput {
	return (*mediaTranscodeProTemplateTransConfigPtrType)(v)
}

func (*mediaTranscodeProTemplateTransConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateTransConfig)(nil)).Elem()
}

func (i *mediaTranscodeProTemplateTransConfigPtrType) ToMediaTranscodeProTemplateTransConfigPtrOutput() MediaTranscodeProTemplateTransConfigPtrOutput {
	return i.ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeProTemplateTransConfigPtrType) ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTransConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateTransConfigPtrOutput)
}

type MediaTranscodeProTemplateTransConfigOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateTransConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateTransConfig)(nil)).Elem()
}

func (o MediaTranscodeProTemplateTransConfigOutput) ToMediaTranscodeProTemplateTransConfigOutput() MediaTranscodeProTemplateTransConfigOutput {
	return o
}

func (o MediaTranscodeProTemplateTransConfigOutput) ToMediaTranscodeProTemplateTransConfigOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTransConfigOutput {
	return o
}

func (o MediaTranscodeProTemplateTransConfigOutput) ToMediaTranscodeProTemplateTransConfigPtrOutput() MediaTranscodeProTemplateTransConfigPtrOutput {
	return o.ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeProTemplateTransConfigOutput) ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTransConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeProTemplateTransConfig) *MediaTranscodeProTemplateTransConfig {
		return &v
	}).(MediaTranscodeProTemplateTransConfigPtrOutput)
}

// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
func (o MediaTranscodeProTemplateTransConfigOutput) AdjDarMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.AdjDarMethod }).(pulumi.StringPtrOutput)
}

// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
func (o MediaTranscodeProTemplateTransConfigOutput) AudioBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.AudioBitrateAdjMethod }).(pulumi.StringPtrOutput)
}

// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
func (o MediaTranscodeProTemplateTransConfigOutput) DeleteMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.DeleteMetadata }).(pulumi.StringPtrOutput)
}

// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
func (o MediaTranscodeProTemplateTransConfigOutput) IsCheckAudioBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.IsCheckAudioBitrate }).(pulumi.StringPtrOutput)
}

// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeProTemplateTransConfigOutput) IsCheckReso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.IsCheckReso }).(pulumi.StringPtrOutput)
}

// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeProTemplateTransConfigOutput) IsCheckVideoBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.IsCheckVideoBitrate }).(pulumi.StringPtrOutput)
}

// Whether to enable HDR to SDR true, false.
func (o MediaTranscodeProTemplateTransConfigOutput) IsHdr2Sdr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.IsHdr2Sdr }).(pulumi.StringPtrOutput)
}

// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
func (o MediaTranscodeProTemplateTransConfigOutput) ResoAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.ResoAdjMethod }).(pulumi.StringPtrOutput)
}

// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
func (o MediaTranscodeProTemplateTransConfigOutput) VideoBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateTransConfig) *string { return v.VideoBitrateAdjMethod }).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateTransConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateTransConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateTransConfig)(nil)).Elem()
}

func (o MediaTranscodeProTemplateTransConfigPtrOutput) ToMediaTranscodeProTemplateTransConfigPtrOutput() MediaTranscodeProTemplateTransConfigPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateTransConfigPtrOutput) ToMediaTranscodeProTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateTransConfigPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateTransConfigPtrOutput) Elem() MediaTranscodeProTemplateTransConfigOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) MediaTranscodeProTemplateTransConfig {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeProTemplateTransConfig
		return ret
	}).(MediaTranscodeProTemplateTransConfigOutput)
}

// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) AdjDarMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.AdjDarMethod
	}).(pulumi.StringPtrOutput)
}

// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) AudioBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.AudioBitrateAdjMethod
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) DeleteMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.DeleteMetadata
	}).(pulumi.StringPtrOutput)
}

// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) IsCheckAudioBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckAudioBitrate
	}).(pulumi.StringPtrOutput)
}

// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) IsCheckReso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckReso
	}).(pulumi.StringPtrOutput)
}

// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) IsCheckVideoBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckVideoBitrate
	}).(pulumi.StringPtrOutput)
}

// Whether to enable HDR to SDR true, false.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) IsHdr2Sdr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsHdr2Sdr
	}).(pulumi.StringPtrOutput)
}

// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) ResoAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.ResoAdjMethod
	}).(pulumi.StringPtrOutput)
}

// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
func (o MediaTranscodeProTemplateTransConfigPtrOutput) VideoBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.VideoBitrateAdjMethod
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateVideo struct {
	// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
	Bitrate *string `pulumi:"bitrate"`
	// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
	Codec *string `pulumi:"codec"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps *string `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height *string `pulumi:"height"`
	// field pattern.
	Interlaced *string `pulumi:"interlaced"`
	// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
	Profile *string `pulumi:"profile"`
	// Rotation angle, Value range: [0, 360), Unit: degree.
	Rotate *string `pulumi:"rotate"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width *string `pulumi:"width"`
}

// MediaTranscodeProTemplateVideoInput is an input type that accepts MediaTranscodeProTemplateVideoArgs and MediaTranscodeProTemplateVideoOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateVideoInput` via:
//
//	MediaTranscodeProTemplateVideoArgs{...}
type MediaTranscodeProTemplateVideoInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateVideoOutput() MediaTranscodeProTemplateVideoOutput
	ToMediaTranscodeProTemplateVideoOutputWithContext(context.Context) MediaTranscodeProTemplateVideoOutput
}

type MediaTranscodeProTemplateVideoArgs struct {
	// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps pulumi.StringPtrInput `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// field pattern.
	Interlaced pulumi.StringPtrInput `pulumi:"interlaced"`
	// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Rotation angle, Value range: [0, 360), Unit: degree.
	Rotate pulumi.StringPtrInput `pulumi:"rotate"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaTranscodeProTemplateVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateVideo)(nil)).Elem()
}

func (i MediaTranscodeProTemplateVideoArgs) ToMediaTranscodeProTemplateVideoOutput() MediaTranscodeProTemplateVideoOutput {
	return i.ToMediaTranscodeProTemplateVideoOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateVideoArgs) ToMediaTranscodeProTemplateVideoOutputWithContext(ctx context.Context) MediaTranscodeProTemplateVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateVideoOutput)
}

func (i MediaTranscodeProTemplateVideoArgs) ToMediaTranscodeProTemplateVideoPtrOutput() MediaTranscodeProTemplateVideoPtrOutput {
	return i.ToMediaTranscodeProTemplateVideoPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateVideoArgs) ToMediaTranscodeProTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateVideoOutput).ToMediaTranscodeProTemplateVideoPtrOutputWithContext(ctx)
}

// MediaTranscodeProTemplateVideoPtrInput is an input type that accepts MediaTranscodeProTemplateVideoArgs, MediaTranscodeProTemplateVideoPtr and MediaTranscodeProTemplateVideoPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateVideoPtrInput` via:
//
//	        MediaTranscodeProTemplateVideoArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeProTemplateVideoPtrInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateVideoPtrOutput() MediaTranscodeProTemplateVideoPtrOutput
	ToMediaTranscodeProTemplateVideoPtrOutputWithContext(context.Context) MediaTranscodeProTemplateVideoPtrOutput
}

type mediaTranscodeProTemplateVideoPtrType MediaTranscodeProTemplateVideoArgs

func MediaTranscodeProTemplateVideoPtr(v *MediaTranscodeProTemplateVideoArgs) MediaTranscodeProTemplateVideoPtrInput {
	return (*mediaTranscodeProTemplateVideoPtrType)(v)
}

func (*mediaTranscodeProTemplateVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateVideo)(nil)).Elem()
}

func (i *mediaTranscodeProTemplateVideoPtrType) ToMediaTranscodeProTemplateVideoPtrOutput() MediaTranscodeProTemplateVideoPtrOutput {
	return i.ToMediaTranscodeProTemplateVideoPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeProTemplateVideoPtrType) ToMediaTranscodeProTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateVideoPtrOutput)
}

type MediaTranscodeProTemplateVideoOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeProTemplateVideo)(nil)).Elem()
}

func (o MediaTranscodeProTemplateVideoOutput) ToMediaTranscodeProTemplateVideoOutput() MediaTranscodeProTemplateVideoOutput {
	return o
}

func (o MediaTranscodeProTemplateVideoOutput) ToMediaTranscodeProTemplateVideoOutputWithContext(ctx context.Context) MediaTranscodeProTemplateVideoOutput {
	return o
}

func (o MediaTranscodeProTemplateVideoOutput) ToMediaTranscodeProTemplateVideoPtrOutput() MediaTranscodeProTemplateVideoPtrOutput {
	return o.ToMediaTranscodeProTemplateVideoPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeProTemplateVideoOutput) ToMediaTranscodeProTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeProTemplateVideo) *MediaTranscodeProTemplateVideo {
		return &v
	}).(MediaTranscodeProTemplateVideoPtrOutput)
}

// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
func (o MediaTranscodeProTemplateVideoOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
func (o MediaTranscodeProTemplateVideoOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaTranscodeProTemplateVideoOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Fps }).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeProTemplateVideoOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// field pattern.
func (o MediaTranscodeProTemplateVideoOutput) Interlaced() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Interlaced }).(pulumi.StringPtrOutput)
}

// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
func (o MediaTranscodeProTemplateVideoOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Rotation angle, Value range: [0, 360), Unit: degree.
func (o MediaTranscodeProTemplateVideoOutput) Rotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Rotate }).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeProTemplateVideoOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeProTemplateVideo) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaTranscodeProTemplateVideoPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplateVideo)(nil)).Elem()
}

func (o MediaTranscodeProTemplateVideoPtrOutput) ToMediaTranscodeProTemplateVideoPtrOutput() MediaTranscodeProTemplateVideoPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateVideoPtrOutput) ToMediaTranscodeProTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeProTemplateVideoPtrOutput {
	return o
}

func (o MediaTranscodeProTemplateVideoPtrOutput) Elem() MediaTranscodeProTemplateVideoOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) MediaTranscodeProTemplateVideo {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeProTemplateVideo
		return ret
	}).(MediaTranscodeProTemplateVideoOutput)
}

// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
func (o MediaTranscodeProTemplateVideoPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
func (o MediaTranscodeProTemplateVideoPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaTranscodeProTemplateVideoPtrOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Fps
	}).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeProTemplateVideoPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// field pattern.
func (o MediaTranscodeProTemplateVideoPtrOutput) Interlaced() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Interlaced
	}).(pulumi.StringPtrOutput)
}

// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
func (o MediaTranscodeProTemplateVideoPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// Rotation angle, Value range: [0, 360), Unit: degree.
func (o MediaTranscodeProTemplateVideoPtrOutput) Rotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Rotate
	}).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeProTemplateVideoPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateAudio struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate *string `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3/opus, support 1, 2- When Codec is set to Vorbis, only 2 is supported- When Codec is set to amr, only 1 is supported- When Codec is set to pcm_s16le, only 1 and 2 are supported- When the encapsulation format is dash, 8 is not supported.
	Channels *string `pulumi:"channels"`
	// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
	Codec *string `pulumi:"codec"`
	// Keep dual audio tracks, the value is true, false. This parameter is invalid when Video.Codec is H.265.
	KeepTwoTracks *string `pulumi:"keepTwoTracks"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove *string `pulumi:"remove"`
	// Sampling bit width- When Codec is set to aac, support fltp- When Codec is set to mp3, fltp, s16p, s32p are supported- When Codec is set to flac, s16, s32, s16p, s32p are supported- When Codec is set to amr, support s16, s16p- When Codec is set to opus, support s16- When Codec is set to pcm_s16le, support s16- When Codec is set to Vorbis, support fltp- This parameter is invalid when Video.Codec is H.265.
	SampleFormat *string `pulumi:"sampleFormat"`
	// Sampling Rate- Unit: Hz- Optional 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below- When Codec is set to amr, only 8000 is supported- When Codec is set to opus, it supports 8000, 16000, 24000, 48000.
	Samplerate *string `pulumi:"samplerate"`
	// Convert track, the value is true, false. This parameter is invalid when Video.Codec is H.265.
	SwitchTrack *string `pulumi:"switchTrack"`
}

// MediaTranscodeTemplateAudioInput is an input type that accepts MediaTranscodeTemplateAudioArgs and MediaTranscodeTemplateAudioOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateAudioInput` via:
//
//	MediaTranscodeTemplateAudioArgs{...}
type MediaTranscodeTemplateAudioInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateAudioOutput() MediaTranscodeTemplateAudioOutput
	ToMediaTranscodeTemplateAudioOutputWithContext(context.Context) MediaTranscodeTemplateAudioOutput
}

type MediaTranscodeTemplateAudioArgs struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3/opus, support 1, 2- When Codec is set to Vorbis, only 2 is supported- When Codec is set to amr, only 1 is supported- When Codec is set to pcm_s16le, only 1 and 2 are supported- When the encapsulation format is dash, 8 is not supported.
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// Keep dual audio tracks, the value is true, false. This parameter is invalid when Video.Codec is H.265.
	KeepTwoTracks pulumi.StringPtrInput `pulumi:"keepTwoTracks"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove pulumi.StringPtrInput `pulumi:"remove"`
	// Sampling bit width- When Codec is set to aac, support fltp- When Codec is set to mp3, fltp, s16p, s32p are supported- When Codec is set to flac, s16, s32, s16p, s32p are supported- When Codec is set to amr, support s16, s16p- When Codec is set to opus, support s16- When Codec is set to pcm_s16le, support s16- When Codec is set to Vorbis, support fltp- This parameter is invalid when Video.Codec is H.265.
	SampleFormat pulumi.StringPtrInput `pulumi:"sampleFormat"`
	// Sampling Rate- Unit: Hz- Optional 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below- When Codec is set to amr, only 8000 is supported- When Codec is set to opus, it supports 8000, 16000, 24000, 48000.
	Samplerate pulumi.StringPtrInput `pulumi:"samplerate"`
	// Convert track, the value is true, false. This parameter is invalid when Video.Codec is H.265.
	SwitchTrack pulumi.StringPtrInput `pulumi:"switchTrack"`
}

func (MediaTranscodeTemplateAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateAudio)(nil)).Elem()
}

func (i MediaTranscodeTemplateAudioArgs) ToMediaTranscodeTemplateAudioOutput() MediaTranscodeTemplateAudioOutput {
	return i.ToMediaTranscodeTemplateAudioOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateAudioArgs) ToMediaTranscodeTemplateAudioOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioOutput)
}

func (i MediaTranscodeTemplateAudioArgs) ToMediaTranscodeTemplateAudioPtrOutput() MediaTranscodeTemplateAudioPtrOutput {
	return i.ToMediaTranscodeTemplateAudioPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateAudioArgs) ToMediaTranscodeTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioOutput).ToMediaTranscodeTemplateAudioPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateAudioPtrInput is an input type that accepts MediaTranscodeTemplateAudioArgs, MediaTranscodeTemplateAudioPtr and MediaTranscodeTemplateAudioPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateAudioPtrInput` via:
//
//	        MediaTranscodeTemplateAudioArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateAudioPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateAudioPtrOutput() MediaTranscodeTemplateAudioPtrOutput
	ToMediaTranscodeTemplateAudioPtrOutputWithContext(context.Context) MediaTranscodeTemplateAudioPtrOutput
}

type mediaTranscodeTemplateAudioPtrType MediaTranscodeTemplateAudioArgs

func MediaTranscodeTemplateAudioPtr(v *MediaTranscodeTemplateAudioArgs) MediaTranscodeTemplateAudioPtrInput {
	return (*mediaTranscodeTemplateAudioPtrType)(v)
}

func (*mediaTranscodeTemplateAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateAudio)(nil)).Elem()
}

func (i *mediaTranscodeTemplateAudioPtrType) ToMediaTranscodeTemplateAudioPtrOutput() MediaTranscodeTemplateAudioPtrOutput {
	return i.ToMediaTranscodeTemplateAudioPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateAudioPtrType) ToMediaTranscodeTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioPtrOutput)
}

type MediaTranscodeTemplateAudioOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateAudio)(nil)).Elem()
}

func (o MediaTranscodeTemplateAudioOutput) ToMediaTranscodeTemplateAudioOutput() MediaTranscodeTemplateAudioOutput {
	return o
}

func (o MediaTranscodeTemplateAudioOutput) ToMediaTranscodeTemplateAudioOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioOutput {
	return o
}

func (o MediaTranscodeTemplateAudioOutput) ToMediaTranscodeTemplateAudioPtrOutput() MediaTranscodeTemplateAudioPtrOutput {
	return o.ToMediaTranscodeTemplateAudioPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateAudioOutput) ToMediaTranscodeTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateAudio) *MediaTranscodeTemplateAudio {
		return &v
	}).(MediaTranscodeTemplateAudioPtrOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaTranscodeTemplateAudioOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3/opus, support 1, 2- When Codec is set to Vorbis, only 2 is supported- When Codec is set to amr, only 1 is supported- When Codec is set to pcm_s16le, only 1 and 2 are supported- When the encapsulation format is dash, 8 is not supported.
func (o MediaTranscodeTemplateAudioOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
func (o MediaTranscodeTemplateAudioOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// Keep dual audio tracks, the value is true, false. This parameter is invalid when Video.Codec is H.265.
func (o MediaTranscodeTemplateAudioOutput) KeepTwoTracks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.KeepTwoTracks }).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaTranscodeTemplateAudioOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.Remove }).(pulumi.StringPtrOutput)
}

// Sampling bit width- When Codec is set to aac, support fltp- When Codec is set to mp3, fltp, s16p, s32p are supported- When Codec is set to flac, s16, s32, s16p, s32p are supported- When Codec is set to amr, support s16, s16p- When Codec is set to opus, support s16- When Codec is set to pcm_s16le, support s16- When Codec is set to Vorbis, support fltp- This parameter is invalid when Video.Codec is H.265.
func (o MediaTranscodeTemplateAudioOutput) SampleFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.SampleFormat }).(pulumi.StringPtrOutput)
}

// Sampling Rate- Unit: Hz- Optional 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below- When Codec is set to amr, only 8000 is supported- When Codec is set to opus, it supports 8000, 16000, 24000, 48000.
func (o MediaTranscodeTemplateAudioOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.Samplerate }).(pulumi.StringPtrOutput)
}

// Convert track, the value is true, false. This parameter is invalid when Video.Codec is H.265.
func (o MediaTranscodeTemplateAudioOutput) SwitchTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudio) *string { return v.SwitchTrack }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateAudioPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateAudio)(nil)).Elem()
}

func (o MediaTranscodeTemplateAudioPtrOutput) ToMediaTranscodeTemplateAudioPtrOutput() MediaTranscodeTemplateAudioPtrOutput {
	return o
}

func (o MediaTranscodeTemplateAudioPtrOutput) ToMediaTranscodeTemplateAudioPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioPtrOutput {
	return o
}

func (o MediaTranscodeTemplateAudioPtrOutput) Elem() MediaTranscodeTemplateAudioOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) MediaTranscodeTemplateAudio {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateAudio
		return ret
	}).(MediaTranscodeTemplateAudioOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaTranscodeTemplateAudioPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3/opus, support 1, 2- When Codec is set to Vorbis, only 2 is supported- When Codec is set to amr, only 1 is supported- When Codec is set to pcm_s16le, only 1 and 2 are supported- When the encapsulation format is dash, 8 is not supported.
func (o MediaTranscodeTemplateAudioPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3, flac, amr, Vorbis, opus, pcm_s16le.
func (o MediaTranscodeTemplateAudioPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// Keep dual audio tracks, the value is true, false. This parameter is invalid when Video.Codec is H.265.
func (o MediaTranscodeTemplateAudioPtrOutput) KeepTwoTracks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.KeepTwoTracks
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaTranscodeTemplateAudioPtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringPtrOutput)
}

// Sampling bit width- When Codec is set to aac, support fltp- When Codec is set to mp3, fltp, s16p, s32p are supported- When Codec is set to flac, s16, s32, s16p, s32p are supported- When Codec is set to amr, support s16, s16p- When Codec is set to opus, support s16- When Codec is set to pcm_s16le, support s16- When Codec is set to Vorbis, support fltp- This parameter is invalid when Video.Codec is H.265.
func (o MediaTranscodeTemplateAudioPtrOutput) SampleFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.SampleFormat
	}).(pulumi.StringPtrOutput)
}

// Sampling Rate- Unit: Hz- Optional 8000, 11025, 12000, 16000, 22050, 24000, 32000, 44100, 48000, 88200, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below- When Codec is set to amr, only 8000 is supported- When Codec is set to opus, it supports 8000, 16000, 24000, 48000.
func (o MediaTranscodeTemplateAudioPtrOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Samplerate
	}).(pulumi.StringPtrOutput)
}

// Convert track, the value is true, false. This parameter is invalid when Video.Codec is H.265.
func (o MediaTranscodeTemplateAudioPtrOutput) SwitchTrack() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.SwitchTrack
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateAudioMix struct {
	// The media address of the audio track that needs to be mixed.
	AudioSource string `pulumi:"audioSource"`
	// Mix Fade Configuration.
	EffectConfig *MediaTranscodeTemplateAudioMixEffectConfig `pulumi:"effectConfig"`
	// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
	MixMode *string `pulumi:"mixMode"`
	// Whether to replace the original audio of the Input media file with the mixed audio track media.
	Replace *string `pulumi:"replace"`
}

// MediaTranscodeTemplateAudioMixInput is an input type that accepts MediaTranscodeTemplateAudioMixArgs and MediaTranscodeTemplateAudioMixOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateAudioMixInput` via:
//
//	MediaTranscodeTemplateAudioMixArgs{...}
type MediaTranscodeTemplateAudioMixInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateAudioMixOutput() MediaTranscodeTemplateAudioMixOutput
	ToMediaTranscodeTemplateAudioMixOutputWithContext(context.Context) MediaTranscodeTemplateAudioMixOutput
}

type MediaTranscodeTemplateAudioMixArgs struct {
	// The media address of the audio track that needs to be mixed.
	AudioSource pulumi.StringInput `pulumi:"audioSource"`
	// Mix Fade Configuration.
	EffectConfig MediaTranscodeTemplateAudioMixEffectConfigPtrInput `pulumi:"effectConfig"`
	// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
	MixMode pulumi.StringPtrInput `pulumi:"mixMode"`
	// Whether to replace the original audio of the Input media file with the mixed audio track media.
	Replace pulumi.StringPtrInput `pulumi:"replace"`
}

func (MediaTranscodeTemplateAudioMixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateAudioMix)(nil)).Elem()
}

func (i MediaTranscodeTemplateAudioMixArgs) ToMediaTranscodeTemplateAudioMixOutput() MediaTranscodeTemplateAudioMixOutput {
	return i.ToMediaTranscodeTemplateAudioMixOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateAudioMixArgs) ToMediaTranscodeTemplateAudioMixOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioMixOutput)
}

// MediaTranscodeTemplateAudioMixArrayInput is an input type that accepts MediaTranscodeTemplateAudioMixArray and MediaTranscodeTemplateAudioMixArrayOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateAudioMixArrayInput` via:
//
//	MediaTranscodeTemplateAudioMixArray{ MediaTranscodeTemplateAudioMixArgs{...} }
type MediaTranscodeTemplateAudioMixArrayInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateAudioMixArrayOutput() MediaTranscodeTemplateAudioMixArrayOutput
	ToMediaTranscodeTemplateAudioMixArrayOutputWithContext(context.Context) MediaTranscodeTemplateAudioMixArrayOutput
}

type MediaTranscodeTemplateAudioMixArray []MediaTranscodeTemplateAudioMixInput

func (MediaTranscodeTemplateAudioMixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaTranscodeTemplateAudioMix)(nil)).Elem()
}

func (i MediaTranscodeTemplateAudioMixArray) ToMediaTranscodeTemplateAudioMixArrayOutput() MediaTranscodeTemplateAudioMixArrayOutput {
	return i.ToMediaTranscodeTemplateAudioMixArrayOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateAudioMixArray) ToMediaTranscodeTemplateAudioMixArrayOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioMixArrayOutput)
}

type MediaTranscodeTemplateAudioMixOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateAudioMixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateAudioMix)(nil)).Elem()
}

func (o MediaTranscodeTemplateAudioMixOutput) ToMediaTranscodeTemplateAudioMixOutput() MediaTranscodeTemplateAudioMixOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixOutput) ToMediaTranscodeTemplateAudioMixOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixOutput {
	return o
}

// The media address of the audio track that needs to be mixed.
func (o MediaTranscodeTemplateAudioMixOutput) AudioSource() pulumi.StringOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMix) string { return v.AudioSource }).(pulumi.StringOutput)
}

// Mix Fade Configuration.
func (o MediaTranscodeTemplateAudioMixOutput) EffectConfig() MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMix) *MediaTranscodeTemplateAudioMixEffectConfig {
		return v.EffectConfig
	}).(MediaTranscodeTemplateAudioMixEffectConfigPtrOutput)
}

// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
func (o MediaTranscodeTemplateAudioMixOutput) MixMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMix) *string { return v.MixMode }).(pulumi.StringPtrOutput)
}

// Whether to replace the original audio of the Input media file with the mixed audio track media.
func (o MediaTranscodeTemplateAudioMixOutput) Replace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMix) *string { return v.Replace }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateAudioMixArrayOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateAudioMixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaTranscodeTemplateAudioMix)(nil)).Elem()
}

func (o MediaTranscodeTemplateAudioMixArrayOutput) ToMediaTranscodeTemplateAudioMixArrayOutput() MediaTranscodeTemplateAudioMixArrayOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixArrayOutput) ToMediaTranscodeTemplateAudioMixArrayOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixArrayOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixArrayOutput) Index(i pulumi.IntInput) MediaTranscodeTemplateAudioMixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaTranscodeTemplateAudioMix {
		return vs[0].([]MediaTranscodeTemplateAudioMix)[vs[1].(int)]
	}).(MediaTranscodeTemplateAudioMixOutput)
}

type MediaTranscodeTemplateAudioMixEffectConfig struct {
	// bgm transition fade-in duration, support floating point numbers.
	BgmFadeTime *string `pulumi:"bgmFadeTime"`
	// Enable bgm conversion fade in.
	EnableBgmFade *string `pulumi:"enableBgmFade"`
	// enable fade out.
	EnableEndFadeout *string `pulumi:"enableEndFadeout"`
	// enable fade in.
	EnableStartFadein *string `pulumi:"enableStartFadein"`
	// fade out time, greater than 0, support floating point numbers.
	EndFadeoutTime *string `pulumi:"endFadeoutTime"`
	// Fade in duration, greater than 0, support floating point numbers.
	StartFadeinTime *string `pulumi:"startFadeinTime"`
}

// MediaTranscodeTemplateAudioMixEffectConfigInput is an input type that accepts MediaTranscodeTemplateAudioMixEffectConfigArgs and MediaTranscodeTemplateAudioMixEffectConfigOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateAudioMixEffectConfigInput` via:
//
//	MediaTranscodeTemplateAudioMixEffectConfigArgs{...}
type MediaTranscodeTemplateAudioMixEffectConfigInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateAudioMixEffectConfigOutput() MediaTranscodeTemplateAudioMixEffectConfigOutput
	ToMediaTranscodeTemplateAudioMixEffectConfigOutputWithContext(context.Context) MediaTranscodeTemplateAudioMixEffectConfigOutput
}

type MediaTranscodeTemplateAudioMixEffectConfigArgs struct {
	// bgm transition fade-in duration, support floating point numbers.
	BgmFadeTime pulumi.StringPtrInput `pulumi:"bgmFadeTime"`
	// Enable bgm conversion fade in.
	EnableBgmFade pulumi.StringPtrInput `pulumi:"enableBgmFade"`
	// enable fade out.
	EnableEndFadeout pulumi.StringPtrInput `pulumi:"enableEndFadeout"`
	// enable fade in.
	EnableStartFadein pulumi.StringPtrInput `pulumi:"enableStartFadein"`
	// fade out time, greater than 0, support floating point numbers.
	EndFadeoutTime pulumi.StringPtrInput `pulumi:"endFadeoutTime"`
	// Fade in duration, greater than 0, support floating point numbers.
	StartFadeinTime pulumi.StringPtrInput `pulumi:"startFadeinTime"`
}

func (MediaTranscodeTemplateAudioMixEffectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (i MediaTranscodeTemplateAudioMixEffectConfigArgs) ToMediaTranscodeTemplateAudioMixEffectConfigOutput() MediaTranscodeTemplateAudioMixEffectConfigOutput {
	return i.ToMediaTranscodeTemplateAudioMixEffectConfigOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateAudioMixEffectConfigArgs) ToMediaTranscodeTemplateAudioMixEffectConfigOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixEffectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioMixEffectConfigOutput)
}

func (i MediaTranscodeTemplateAudioMixEffectConfigArgs) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutput() MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return i.ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateAudioMixEffectConfigArgs) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioMixEffectConfigOutput).ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateAudioMixEffectConfigPtrInput is an input type that accepts MediaTranscodeTemplateAudioMixEffectConfigArgs, MediaTranscodeTemplateAudioMixEffectConfigPtr and MediaTranscodeTemplateAudioMixEffectConfigPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateAudioMixEffectConfigPtrInput` via:
//
//	        MediaTranscodeTemplateAudioMixEffectConfigArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateAudioMixEffectConfigPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutput() MediaTranscodeTemplateAudioMixEffectConfigPtrOutput
	ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(context.Context) MediaTranscodeTemplateAudioMixEffectConfigPtrOutput
}

type mediaTranscodeTemplateAudioMixEffectConfigPtrType MediaTranscodeTemplateAudioMixEffectConfigArgs

func MediaTranscodeTemplateAudioMixEffectConfigPtr(v *MediaTranscodeTemplateAudioMixEffectConfigArgs) MediaTranscodeTemplateAudioMixEffectConfigPtrInput {
	return (*mediaTranscodeTemplateAudioMixEffectConfigPtrType)(v)
}

func (*mediaTranscodeTemplateAudioMixEffectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (i *mediaTranscodeTemplateAudioMixEffectConfigPtrType) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutput() MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return i.ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateAudioMixEffectConfigPtrType) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateAudioMixEffectConfigPtrOutput)
}

type MediaTranscodeTemplateAudioMixEffectConfigOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateAudioMixEffectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) ToMediaTranscodeTemplateAudioMixEffectConfigOutput() MediaTranscodeTemplateAudioMixEffectConfigOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) ToMediaTranscodeTemplateAudioMixEffectConfigOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixEffectConfigOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutput() MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return o.ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateAudioMixEffectConfig) *MediaTranscodeTemplateAudioMixEffectConfig {
		return &v
	}).(MediaTranscodeTemplateAudioMixEffectConfigPtrOutput)
}

// bgm transition fade-in duration, support floating point numbers.
func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) BgmFadeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMixEffectConfig) *string { return v.BgmFadeTime }).(pulumi.StringPtrOutput)
}

// Enable bgm conversion fade in.
func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) EnableBgmFade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMixEffectConfig) *string { return v.EnableBgmFade }).(pulumi.StringPtrOutput)
}

// enable fade out.
func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) EnableEndFadeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMixEffectConfig) *string { return v.EnableEndFadeout }).(pulumi.StringPtrOutput)
}

// enable fade in.
func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) EnableStartFadein() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMixEffectConfig) *string { return v.EnableStartFadein }).(pulumi.StringPtrOutput)
}

// fade out time, greater than 0, support floating point numbers.
func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) EndFadeoutTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMixEffectConfig) *string { return v.EndFadeoutTime }).(pulumi.StringPtrOutput)
}

// Fade in duration, greater than 0, support floating point numbers.
func (o MediaTranscodeTemplateAudioMixEffectConfigOutput) StartFadeinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateAudioMixEffectConfig) *string { return v.StartFadeinTime }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateAudioMixEffectConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutput() MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) ToMediaTranscodeTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateAudioMixEffectConfigPtrOutput {
	return o
}

func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) Elem() MediaTranscodeTemplateAudioMixEffectConfigOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) MediaTranscodeTemplateAudioMixEffectConfig {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateAudioMixEffectConfig
		return ret
	}).(MediaTranscodeTemplateAudioMixEffectConfigOutput)
}

// bgm transition fade-in duration, support floating point numbers.
func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) BgmFadeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.BgmFadeTime
	}).(pulumi.StringPtrOutput)
}

// Enable bgm conversion fade in.
func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) EnableBgmFade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableBgmFade
	}).(pulumi.StringPtrOutput)
}

// enable fade out.
func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) EnableEndFadeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableEndFadeout
	}).(pulumi.StringPtrOutput)
}

// enable fade in.
func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) EnableStartFadein() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableStartFadein
	}).(pulumi.StringPtrOutput)
}

// fade out time, greater than 0, support floating point numbers.
func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) EndFadeoutTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EndFadeoutTime
	}).(pulumi.StringPtrOutput)
}

// Fade in duration, greater than 0, support floating point numbers.
func (o MediaTranscodeTemplateAudioMixEffectConfigPtrOutput) StartFadeinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.StartFadeinTime
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateContainer struct {
	// Fragment configuration, valid when format is hls and dash.
	ClipConfig *MediaTranscodeTemplateContainerClipConfig `pulumi:"clipConfig"`
	// Package format.
	Format string `pulumi:"format"`
}

// MediaTranscodeTemplateContainerInput is an input type that accepts MediaTranscodeTemplateContainerArgs and MediaTranscodeTemplateContainerOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateContainerInput` via:
//
//	MediaTranscodeTemplateContainerArgs{...}
type MediaTranscodeTemplateContainerInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateContainerOutput() MediaTranscodeTemplateContainerOutput
	ToMediaTranscodeTemplateContainerOutputWithContext(context.Context) MediaTranscodeTemplateContainerOutput
}

type MediaTranscodeTemplateContainerArgs struct {
	// Fragment configuration, valid when format is hls and dash.
	ClipConfig MediaTranscodeTemplateContainerClipConfigPtrInput `pulumi:"clipConfig"`
	// Package format.
	Format pulumi.StringInput `pulumi:"format"`
}

func (MediaTranscodeTemplateContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateContainer)(nil)).Elem()
}

func (i MediaTranscodeTemplateContainerArgs) ToMediaTranscodeTemplateContainerOutput() MediaTranscodeTemplateContainerOutput {
	return i.ToMediaTranscodeTemplateContainerOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateContainerArgs) ToMediaTranscodeTemplateContainerOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateContainerOutput)
}

func (i MediaTranscodeTemplateContainerArgs) ToMediaTranscodeTemplateContainerPtrOutput() MediaTranscodeTemplateContainerPtrOutput {
	return i.ToMediaTranscodeTemplateContainerPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateContainerArgs) ToMediaTranscodeTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateContainerOutput).ToMediaTranscodeTemplateContainerPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateContainerPtrInput is an input type that accepts MediaTranscodeTemplateContainerArgs, MediaTranscodeTemplateContainerPtr and MediaTranscodeTemplateContainerPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateContainerPtrInput` via:
//
//	        MediaTranscodeTemplateContainerArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateContainerPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateContainerPtrOutput() MediaTranscodeTemplateContainerPtrOutput
	ToMediaTranscodeTemplateContainerPtrOutputWithContext(context.Context) MediaTranscodeTemplateContainerPtrOutput
}

type mediaTranscodeTemplateContainerPtrType MediaTranscodeTemplateContainerArgs

func MediaTranscodeTemplateContainerPtr(v *MediaTranscodeTemplateContainerArgs) MediaTranscodeTemplateContainerPtrInput {
	return (*mediaTranscodeTemplateContainerPtrType)(v)
}

func (*mediaTranscodeTemplateContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateContainer)(nil)).Elem()
}

func (i *mediaTranscodeTemplateContainerPtrType) ToMediaTranscodeTemplateContainerPtrOutput() MediaTranscodeTemplateContainerPtrOutput {
	return i.ToMediaTranscodeTemplateContainerPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateContainerPtrType) ToMediaTranscodeTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateContainerPtrOutput)
}

type MediaTranscodeTemplateContainerOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateContainer)(nil)).Elem()
}

func (o MediaTranscodeTemplateContainerOutput) ToMediaTranscodeTemplateContainerOutput() MediaTranscodeTemplateContainerOutput {
	return o
}

func (o MediaTranscodeTemplateContainerOutput) ToMediaTranscodeTemplateContainerOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerOutput {
	return o
}

func (o MediaTranscodeTemplateContainerOutput) ToMediaTranscodeTemplateContainerPtrOutput() MediaTranscodeTemplateContainerPtrOutput {
	return o.ToMediaTranscodeTemplateContainerPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateContainerOutput) ToMediaTranscodeTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateContainer) *MediaTranscodeTemplateContainer {
		return &v
	}).(MediaTranscodeTemplateContainerPtrOutput)
}

// Fragment configuration, valid when format is hls and dash.
func (o MediaTranscodeTemplateContainerOutput) ClipConfig() MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateContainer) *MediaTranscodeTemplateContainerClipConfig {
		return v.ClipConfig
	}).(MediaTranscodeTemplateContainerClipConfigPtrOutput)
}

// Package format.
func (o MediaTranscodeTemplateContainerOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateContainer) string { return v.Format }).(pulumi.StringOutput)
}

type MediaTranscodeTemplateContainerPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateContainer)(nil)).Elem()
}

func (o MediaTranscodeTemplateContainerPtrOutput) ToMediaTranscodeTemplateContainerPtrOutput() MediaTranscodeTemplateContainerPtrOutput {
	return o
}

func (o MediaTranscodeTemplateContainerPtrOutput) ToMediaTranscodeTemplateContainerPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerPtrOutput {
	return o
}

func (o MediaTranscodeTemplateContainerPtrOutput) Elem() MediaTranscodeTemplateContainerOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateContainer) MediaTranscodeTemplateContainer {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateContainer
		return ret
	}).(MediaTranscodeTemplateContainerOutput)
}

// Fragment configuration, valid when format is hls and dash.
func (o MediaTranscodeTemplateContainerPtrOutput) ClipConfig() MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateContainer) *MediaTranscodeTemplateContainerClipConfig {
		if v == nil {
			return nil
		}
		return v.ClipConfig
	}).(MediaTranscodeTemplateContainerClipConfigPtrOutput)
}

// Package format.
func (o MediaTranscodeTemplateContainerPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateContainerClipConfig struct {
	// Fragmentation duration, default 5s.
	Duration *string `pulumi:"duration"`
}

// MediaTranscodeTemplateContainerClipConfigInput is an input type that accepts MediaTranscodeTemplateContainerClipConfigArgs and MediaTranscodeTemplateContainerClipConfigOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateContainerClipConfigInput` via:
//
//	MediaTranscodeTemplateContainerClipConfigArgs{...}
type MediaTranscodeTemplateContainerClipConfigInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateContainerClipConfigOutput() MediaTranscodeTemplateContainerClipConfigOutput
	ToMediaTranscodeTemplateContainerClipConfigOutputWithContext(context.Context) MediaTranscodeTemplateContainerClipConfigOutput
}

type MediaTranscodeTemplateContainerClipConfigArgs struct {
	// Fragmentation duration, default 5s.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
}

func (MediaTranscodeTemplateContainerClipConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateContainerClipConfig)(nil)).Elem()
}

func (i MediaTranscodeTemplateContainerClipConfigArgs) ToMediaTranscodeTemplateContainerClipConfigOutput() MediaTranscodeTemplateContainerClipConfigOutput {
	return i.ToMediaTranscodeTemplateContainerClipConfigOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateContainerClipConfigArgs) ToMediaTranscodeTemplateContainerClipConfigOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerClipConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateContainerClipConfigOutput)
}

func (i MediaTranscodeTemplateContainerClipConfigArgs) ToMediaTranscodeTemplateContainerClipConfigPtrOutput() MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return i.ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateContainerClipConfigArgs) ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateContainerClipConfigOutput).ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateContainerClipConfigPtrInput is an input type that accepts MediaTranscodeTemplateContainerClipConfigArgs, MediaTranscodeTemplateContainerClipConfigPtr and MediaTranscodeTemplateContainerClipConfigPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateContainerClipConfigPtrInput` via:
//
//	        MediaTranscodeTemplateContainerClipConfigArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateContainerClipConfigPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateContainerClipConfigPtrOutput() MediaTranscodeTemplateContainerClipConfigPtrOutput
	ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(context.Context) MediaTranscodeTemplateContainerClipConfigPtrOutput
}

type mediaTranscodeTemplateContainerClipConfigPtrType MediaTranscodeTemplateContainerClipConfigArgs

func MediaTranscodeTemplateContainerClipConfigPtr(v *MediaTranscodeTemplateContainerClipConfigArgs) MediaTranscodeTemplateContainerClipConfigPtrInput {
	return (*mediaTranscodeTemplateContainerClipConfigPtrType)(v)
}

func (*mediaTranscodeTemplateContainerClipConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateContainerClipConfig)(nil)).Elem()
}

func (i *mediaTranscodeTemplateContainerClipConfigPtrType) ToMediaTranscodeTemplateContainerClipConfigPtrOutput() MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return i.ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateContainerClipConfigPtrType) ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateContainerClipConfigPtrOutput)
}

type MediaTranscodeTemplateContainerClipConfigOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateContainerClipConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateContainerClipConfig)(nil)).Elem()
}

func (o MediaTranscodeTemplateContainerClipConfigOutput) ToMediaTranscodeTemplateContainerClipConfigOutput() MediaTranscodeTemplateContainerClipConfigOutput {
	return o
}

func (o MediaTranscodeTemplateContainerClipConfigOutput) ToMediaTranscodeTemplateContainerClipConfigOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerClipConfigOutput {
	return o
}

func (o MediaTranscodeTemplateContainerClipConfigOutput) ToMediaTranscodeTemplateContainerClipConfigPtrOutput() MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return o.ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateContainerClipConfigOutput) ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateContainerClipConfig) *MediaTranscodeTemplateContainerClipConfig {
		return &v
	}).(MediaTranscodeTemplateContainerClipConfigPtrOutput)
}

// Fragmentation duration, default 5s.
func (o MediaTranscodeTemplateContainerClipConfigOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateContainerClipConfig) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateContainerClipConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateContainerClipConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateContainerClipConfig)(nil)).Elem()
}

func (o MediaTranscodeTemplateContainerClipConfigPtrOutput) ToMediaTranscodeTemplateContainerClipConfigPtrOutput() MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return o
}

func (o MediaTranscodeTemplateContainerClipConfigPtrOutput) ToMediaTranscodeTemplateContainerClipConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateContainerClipConfigPtrOutput {
	return o
}

func (o MediaTranscodeTemplateContainerClipConfigPtrOutput) Elem() MediaTranscodeTemplateContainerClipConfigOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateContainerClipConfig) MediaTranscodeTemplateContainerClipConfig {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateContainerClipConfig
		return ret
	}).(MediaTranscodeTemplateContainerClipConfigOutput)
}

// Fragmentation duration, default 5s.
func (o MediaTranscodeTemplateContainerClipConfigPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateContainerClipConfig) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateTimeInterval struct {
	// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Duration *string `pulumi:"duration"`
	// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start *string `pulumi:"start"`
}

// MediaTranscodeTemplateTimeIntervalInput is an input type that accepts MediaTranscodeTemplateTimeIntervalArgs and MediaTranscodeTemplateTimeIntervalOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateTimeIntervalInput` via:
//
//	MediaTranscodeTemplateTimeIntervalArgs{...}
type MediaTranscodeTemplateTimeIntervalInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateTimeIntervalOutput() MediaTranscodeTemplateTimeIntervalOutput
	ToMediaTranscodeTemplateTimeIntervalOutputWithContext(context.Context) MediaTranscodeTemplateTimeIntervalOutput
}

type MediaTranscodeTemplateTimeIntervalArgs struct {
	// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
	Start pulumi.StringPtrInput `pulumi:"start"`
}

func (MediaTranscodeTemplateTimeIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateTimeInterval)(nil)).Elem()
}

func (i MediaTranscodeTemplateTimeIntervalArgs) ToMediaTranscodeTemplateTimeIntervalOutput() MediaTranscodeTemplateTimeIntervalOutput {
	return i.ToMediaTranscodeTemplateTimeIntervalOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateTimeIntervalArgs) ToMediaTranscodeTemplateTimeIntervalOutputWithContext(ctx context.Context) MediaTranscodeTemplateTimeIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTimeIntervalOutput)
}

func (i MediaTranscodeTemplateTimeIntervalArgs) ToMediaTranscodeTemplateTimeIntervalPtrOutput() MediaTranscodeTemplateTimeIntervalPtrOutput {
	return i.ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateTimeIntervalArgs) ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTimeIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTimeIntervalOutput).ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateTimeIntervalPtrInput is an input type that accepts MediaTranscodeTemplateTimeIntervalArgs, MediaTranscodeTemplateTimeIntervalPtr and MediaTranscodeTemplateTimeIntervalPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateTimeIntervalPtrInput` via:
//
//	        MediaTranscodeTemplateTimeIntervalArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateTimeIntervalPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateTimeIntervalPtrOutput() MediaTranscodeTemplateTimeIntervalPtrOutput
	ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(context.Context) MediaTranscodeTemplateTimeIntervalPtrOutput
}

type mediaTranscodeTemplateTimeIntervalPtrType MediaTranscodeTemplateTimeIntervalArgs

func MediaTranscodeTemplateTimeIntervalPtr(v *MediaTranscodeTemplateTimeIntervalArgs) MediaTranscodeTemplateTimeIntervalPtrInput {
	return (*mediaTranscodeTemplateTimeIntervalPtrType)(v)
}

func (*mediaTranscodeTemplateTimeIntervalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateTimeInterval)(nil)).Elem()
}

func (i *mediaTranscodeTemplateTimeIntervalPtrType) ToMediaTranscodeTemplateTimeIntervalPtrOutput() MediaTranscodeTemplateTimeIntervalPtrOutput {
	return i.ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateTimeIntervalPtrType) ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTimeIntervalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTimeIntervalPtrOutput)
}

type MediaTranscodeTemplateTimeIntervalOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateTimeIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateTimeInterval)(nil)).Elem()
}

func (o MediaTranscodeTemplateTimeIntervalOutput) ToMediaTranscodeTemplateTimeIntervalOutput() MediaTranscodeTemplateTimeIntervalOutput {
	return o
}

func (o MediaTranscodeTemplateTimeIntervalOutput) ToMediaTranscodeTemplateTimeIntervalOutputWithContext(ctx context.Context) MediaTranscodeTemplateTimeIntervalOutput {
	return o
}

func (o MediaTranscodeTemplateTimeIntervalOutput) ToMediaTranscodeTemplateTimeIntervalPtrOutput() MediaTranscodeTemplateTimeIntervalPtrOutput {
	return o.ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateTimeIntervalOutput) ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTimeIntervalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateTimeInterval) *MediaTranscodeTemplateTimeInterval {
		return &v
	}).(MediaTranscodeTemplateTimeIntervalPtrOutput)
}

// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeTemplateTimeIntervalOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTimeInterval) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeTemplateTimeIntervalOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTimeInterval) *string { return v.Start }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateTimeIntervalPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateTimeIntervalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateTimeInterval)(nil)).Elem()
}

func (o MediaTranscodeTemplateTimeIntervalPtrOutput) ToMediaTranscodeTemplateTimeIntervalPtrOutput() MediaTranscodeTemplateTimeIntervalPtrOutput {
	return o
}

func (o MediaTranscodeTemplateTimeIntervalPtrOutput) ToMediaTranscodeTemplateTimeIntervalPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTimeIntervalPtrOutput {
	return o
}

func (o MediaTranscodeTemplateTimeIntervalPtrOutput) Elem() MediaTranscodeTemplateTimeIntervalOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTimeInterval) MediaTranscodeTemplateTimeInterval {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateTimeInterval
		return ret
	}).(MediaTranscodeTemplateTimeIntervalOutput)
}

// duration, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeTemplateTimeIntervalPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.Duration
	}).(pulumi.StringPtrOutput)
}

// Starting time, [0 video duration], in seconds, Support float format, the execution accuracy is accurate to milliseconds.
func (o MediaTranscodeTemplateTimeIntervalPtrOutput) Start() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTimeInterval) *string {
		if v == nil {
			return nil
		}
		return v.Start
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateTransConfig struct {
	// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
	AdjDarMethod *string `pulumi:"adjDarMethod"`
	// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
	AudioBitrateAdjMethod *string `pulumi:"audioBitrateAdjMethod"`
	// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
	DeleteMetadata *string `pulumi:"deleteMetadata"`
	// hls encryption configuration.
	HlsEncrypt *MediaTranscodeTemplateTransConfigHlsEncrypt `pulumi:"hlsEncrypt"`
	// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
	IsCheckAudioBitrate *string `pulumi:"isCheckAudioBitrate"`
	// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
	IsCheckReso *string `pulumi:"isCheckReso"`
	// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
	IsCheckVideoBitrate *string `pulumi:"isCheckVideoBitrate"`
	// Whether to enable HDR to SDR true, false.
	IsHdr2Sdr *string `pulumi:"isHdr2Sdr"`
	// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
	ResoAdjMethod *string `pulumi:"resoAdjMethod"`
	// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
	VideoBitrateAdjMethod *string `pulumi:"videoBitrateAdjMethod"`
}

// MediaTranscodeTemplateTransConfigInput is an input type that accepts MediaTranscodeTemplateTransConfigArgs and MediaTranscodeTemplateTransConfigOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateTransConfigInput` via:
//
//	MediaTranscodeTemplateTransConfigArgs{...}
type MediaTranscodeTemplateTransConfigInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateTransConfigOutput() MediaTranscodeTemplateTransConfigOutput
	ToMediaTranscodeTemplateTransConfigOutputWithContext(context.Context) MediaTranscodeTemplateTransConfigOutput
}

type MediaTranscodeTemplateTransConfigArgs struct {
	// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
	AdjDarMethod pulumi.StringPtrInput `pulumi:"adjDarMethod"`
	// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
	AudioBitrateAdjMethod pulumi.StringPtrInput `pulumi:"audioBitrateAdjMethod"`
	// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
	DeleteMetadata pulumi.StringPtrInput `pulumi:"deleteMetadata"`
	// hls encryption configuration.
	HlsEncrypt MediaTranscodeTemplateTransConfigHlsEncryptPtrInput `pulumi:"hlsEncrypt"`
	// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
	IsCheckAudioBitrate pulumi.StringPtrInput `pulumi:"isCheckAudioBitrate"`
	// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
	IsCheckReso pulumi.StringPtrInput `pulumi:"isCheckReso"`
	// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
	IsCheckVideoBitrate pulumi.StringPtrInput `pulumi:"isCheckVideoBitrate"`
	// Whether to enable HDR to SDR true, false.
	IsHdr2Sdr pulumi.StringPtrInput `pulumi:"isHdr2Sdr"`
	// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
	ResoAdjMethod pulumi.StringPtrInput `pulumi:"resoAdjMethod"`
	// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
	VideoBitrateAdjMethod pulumi.StringPtrInput `pulumi:"videoBitrateAdjMethod"`
}

func (MediaTranscodeTemplateTransConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateTransConfig)(nil)).Elem()
}

func (i MediaTranscodeTemplateTransConfigArgs) ToMediaTranscodeTemplateTransConfigOutput() MediaTranscodeTemplateTransConfigOutput {
	return i.ToMediaTranscodeTemplateTransConfigOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateTransConfigArgs) ToMediaTranscodeTemplateTransConfigOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTransConfigOutput)
}

func (i MediaTranscodeTemplateTransConfigArgs) ToMediaTranscodeTemplateTransConfigPtrOutput() MediaTranscodeTemplateTransConfigPtrOutput {
	return i.ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateTransConfigArgs) ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTransConfigOutput).ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateTransConfigPtrInput is an input type that accepts MediaTranscodeTemplateTransConfigArgs, MediaTranscodeTemplateTransConfigPtr and MediaTranscodeTemplateTransConfigPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateTransConfigPtrInput` via:
//
//	        MediaTranscodeTemplateTransConfigArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateTransConfigPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateTransConfigPtrOutput() MediaTranscodeTemplateTransConfigPtrOutput
	ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(context.Context) MediaTranscodeTemplateTransConfigPtrOutput
}

type mediaTranscodeTemplateTransConfigPtrType MediaTranscodeTemplateTransConfigArgs

func MediaTranscodeTemplateTransConfigPtr(v *MediaTranscodeTemplateTransConfigArgs) MediaTranscodeTemplateTransConfigPtrInput {
	return (*mediaTranscodeTemplateTransConfigPtrType)(v)
}

func (*mediaTranscodeTemplateTransConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateTransConfig)(nil)).Elem()
}

func (i *mediaTranscodeTemplateTransConfigPtrType) ToMediaTranscodeTemplateTransConfigPtrOutput() MediaTranscodeTemplateTransConfigPtrOutput {
	return i.ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateTransConfigPtrType) ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTransConfigPtrOutput)
}

type MediaTranscodeTemplateTransConfigOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateTransConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateTransConfig)(nil)).Elem()
}

func (o MediaTranscodeTemplateTransConfigOutput) ToMediaTranscodeTemplateTransConfigOutput() MediaTranscodeTemplateTransConfigOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigOutput) ToMediaTranscodeTemplateTransConfigOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigOutput) ToMediaTranscodeTemplateTransConfigPtrOutput() MediaTranscodeTemplateTransConfigPtrOutput {
	return o.ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateTransConfigOutput) ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateTransConfig) *MediaTranscodeTemplateTransConfig {
		return &v
	}).(MediaTranscodeTemplateTransConfigPtrOutput)
}

// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
func (o MediaTranscodeTemplateTransConfigOutput) AdjDarMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.AdjDarMethod }).(pulumi.StringPtrOutput)
}

// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
func (o MediaTranscodeTemplateTransConfigOutput) AudioBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.AudioBitrateAdjMethod }).(pulumi.StringPtrOutput)
}

// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
func (o MediaTranscodeTemplateTransConfigOutput) DeleteMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.DeleteMetadata }).(pulumi.StringPtrOutput)
}

// hls encryption configuration.
func (o MediaTranscodeTemplateTransConfigOutput) HlsEncrypt() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *MediaTranscodeTemplateTransConfigHlsEncrypt {
		return v.HlsEncrypt
	}).(MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput)
}

// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
func (o MediaTranscodeTemplateTransConfigOutput) IsCheckAudioBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.IsCheckAudioBitrate }).(pulumi.StringPtrOutput)
}

// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeTemplateTransConfigOutput) IsCheckReso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.IsCheckReso }).(pulumi.StringPtrOutput)
}

// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeTemplateTransConfigOutput) IsCheckVideoBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.IsCheckVideoBitrate }).(pulumi.StringPtrOutput)
}

// Whether to enable HDR to SDR true, false.
func (o MediaTranscodeTemplateTransConfigOutput) IsHdr2Sdr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.IsHdr2Sdr }).(pulumi.StringPtrOutput)
}

// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
func (o MediaTranscodeTemplateTransConfigOutput) ResoAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.ResoAdjMethod }).(pulumi.StringPtrOutput)
}

// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
func (o MediaTranscodeTemplateTransConfigOutput) VideoBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfig) *string { return v.VideoBitrateAdjMethod }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateTransConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateTransConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateTransConfig)(nil)).Elem()
}

func (o MediaTranscodeTemplateTransConfigPtrOutput) ToMediaTranscodeTemplateTransConfigPtrOutput() MediaTranscodeTemplateTransConfigPtrOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigPtrOutput) ToMediaTranscodeTemplateTransConfigPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigPtrOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigPtrOutput) Elem() MediaTranscodeTemplateTransConfigOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) MediaTranscodeTemplateTransConfig {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateTransConfig
		return ret
	}).(MediaTranscodeTemplateTransConfigOutput)
}

// Resolution adjustment method, value scale, crop, pad, none, When the aspect ratio of the output video is different from the original video, adjust the resolution accordingly according to this parameter.
func (o MediaTranscodeTemplateTransConfigPtrOutput) AdjDarMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.AdjDarMethod
	}).(pulumi.StringPtrOutput)
}

// Audio bit rate adjustment mode, value 0, 1; when the output audio bit rate is greater than the original audio bit rate, 0 means use the original audio bit rate; 1 means return transcoding failed, Take effect when IsCheckAudioBitrate is true.
func (o MediaTranscodeTemplateTransConfigPtrOutput) AudioBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.AudioBitrateAdjMethod
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the MetaData information in the file, true, false, When false, keep source file information.
func (o MediaTranscodeTemplateTransConfigPtrOutput) DeleteMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.DeleteMetadata
	}).(pulumi.StringPtrOutput)
}

// hls encryption configuration.
func (o MediaTranscodeTemplateTransConfigPtrOutput) HlsEncrypt() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *MediaTranscodeTemplateTransConfigHlsEncrypt {
		if v == nil {
			return nil
		}
		return v.HlsEncrypt
	}).(MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput)
}

// Whether to check the audio code rate, true, false, When false, transcode according to configuration parameters.
func (o MediaTranscodeTemplateTransConfigPtrOutput) IsCheckAudioBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckAudioBitrate
	}).(pulumi.StringPtrOutput)
}

// Whether to check the resolution, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeTemplateTransConfigPtrOutput) IsCheckReso() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckReso
	}).(pulumi.StringPtrOutput)
}

// Whether to check the video code rate, when it is false, transcode according to the configuration parameters.
func (o MediaTranscodeTemplateTransConfigPtrOutput) IsCheckVideoBitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsCheckVideoBitrate
	}).(pulumi.StringPtrOutput)
}

// Whether to enable HDR to SDR true, false.
func (o MediaTranscodeTemplateTransConfigPtrOutput) IsHdr2Sdr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.IsHdr2Sdr
	}).(pulumi.StringPtrOutput)
}

// Resolution adjustment mode, value 0, 1; 0 means use the original video resolution; 1 means return transcoding failed, Take effect when IsCheckReso is true.
func (o MediaTranscodeTemplateTransConfigPtrOutput) ResoAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.ResoAdjMethod
	}).(pulumi.StringPtrOutput)
}

// Video bit rate adjustment method, value 0, 1; when the output video bit rate is greater than the original video bit rate, 0 means use the original video bit rate; 1 means return transcoding failed, Take effect when IsCheckVideoBitrate is true.
func (o MediaTranscodeTemplateTransConfigPtrOutput) VideoBitrateAdjMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfig) *string {
		if v == nil {
			return nil
		}
		return v.VideoBitrateAdjMethod
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateTransConfigHlsEncrypt struct {
	// Whether to enable HLS encryption, support encryption when Container.Format is hls.
	IsHlsEncrypt *string `pulumi:"isHlsEncrypt"`
	// HLS encrypted key, this parameter is only meaningful when IsHlsEncrypt is true.
	UriKey *string `pulumi:"uriKey"`
}

// MediaTranscodeTemplateTransConfigHlsEncryptInput is an input type that accepts MediaTranscodeTemplateTransConfigHlsEncryptArgs and MediaTranscodeTemplateTransConfigHlsEncryptOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateTransConfigHlsEncryptInput` via:
//
//	MediaTranscodeTemplateTransConfigHlsEncryptArgs{...}
type MediaTranscodeTemplateTransConfigHlsEncryptInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateTransConfigHlsEncryptOutput() MediaTranscodeTemplateTransConfigHlsEncryptOutput
	ToMediaTranscodeTemplateTransConfigHlsEncryptOutputWithContext(context.Context) MediaTranscodeTemplateTransConfigHlsEncryptOutput
}

type MediaTranscodeTemplateTransConfigHlsEncryptArgs struct {
	// Whether to enable HLS encryption, support encryption when Container.Format is hls.
	IsHlsEncrypt pulumi.StringPtrInput `pulumi:"isHlsEncrypt"`
	// HLS encrypted key, this parameter is only meaningful when IsHlsEncrypt is true.
	UriKey pulumi.StringPtrInput `pulumi:"uriKey"`
}

func (MediaTranscodeTemplateTransConfigHlsEncryptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateTransConfigHlsEncrypt)(nil)).Elem()
}

func (i MediaTranscodeTemplateTransConfigHlsEncryptArgs) ToMediaTranscodeTemplateTransConfigHlsEncryptOutput() MediaTranscodeTemplateTransConfigHlsEncryptOutput {
	return i.ToMediaTranscodeTemplateTransConfigHlsEncryptOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateTransConfigHlsEncryptArgs) ToMediaTranscodeTemplateTransConfigHlsEncryptOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigHlsEncryptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTransConfigHlsEncryptOutput)
}

func (i MediaTranscodeTemplateTransConfigHlsEncryptArgs) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutput() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return i.ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateTransConfigHlsEncryptArgs) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTransConfigHlsEncryptOutput).ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateTransConfigHlsEncryptPtrInput is an input type that accepts MediaTranscodeTemplateTransConfigHlsEncryptArgs, MediaTranscodeTemplateTransConfigHlsEncryptPtr and MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateTransConfigHlsEncryptPtrInput` via:
//
//	        MediaTranscodeTemplateTransConfigHlsEncryptArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateTransConfigHlsEncryptPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutput() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput
	ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(context.Context) MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput
}

type mediaTranscodeTemplateTransConfigHlsEncryptPtrType MediaTranscodeTemplateTransConfigHlsEncryptArgs

func MediaTranscodeTemplateTransConfigHlsEncryptPtr(v *MediaTranscodeTemplateTransConfigHlsEncryptArgs) MediaTranscodeTemplateTransConfigHlsEncryptPtrInput {
	return (*mediaTranscodeTemplateTransConfigHlsEncryptPtrType)(v)
}

func (*mediaTranscodeTemplateTransConfigHlsEncryptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateTransConfigHlsEncrypt)(nil)).Elem()
}

func (i *mediaTranscodeTemplateTransConfigHlsEncryptPtrType) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutput() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return i.ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateTransConfigHlsEncryptPtrType) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput)
}

type MediaTranscodeTemplateTransConfigHlsEncryptOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateTransConfigHlsEncryptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateTransConfigHlsEncrypt)(nil)).Elem()
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptOutput) ToMediaTranscodeTemplateTransConfigHlsEncryptOutput() MediaTranscodeTemplateTransConfigHlsEncryptOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptOutput) ToMediaTranscodeTemplateTransConfigHlsEncryptOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigHlsEncryptOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptOutput) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutput() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return o.ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptOutput) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateTransConfigHlsEncrypt) *MediaTranscodeTemplateTransConfigHlsEncrypt {
		return &v
	}).(MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput)
}

// Whether to enable HLS encryption, support encryption when Container.Format is hls.
func (o MediaTranscodeTemplateTransConfigHlsEncryptOutput) IsHlsEncrypt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfigHlsEncrypt) *string { return v.IsHlsEncrypt }).(pulumi.StringPtrOutput)
}

// HLS encrypted key, this parameter is only meaningful when IsHlsEncrypt is true.
func (o MediaTranscodeTemplateTransConfigHlsEncryptOutput) UriKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateTransConfigHlsEncrypt) *string { return v.UriKey }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateTransConfigHlsEncrypt)(nil)).Elem()
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutput() MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput) ToMediaTranscodeTemplateTransConfigHlsEncryptPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput {
	return o
}

func (o MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput) Elem() MediaTranscodeTemplateTransConfigHlsEncryptOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfigHlsEncrypt) MediaTranscodeTemplateTransConfigHlsEncrypt {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateTransConfigHlsEncrypt
		return ret
	}).(MediaTranscodeTemplateTransConfigHlsEncryptOutput)
}

// Whether to enable HLS encryption, support encryption when Container.Format is hls.
func (o MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput) IsHlsEncrypt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfigHlsEncrypt) *string {
		if v == nil {
			return nil
		}
		return v.IsHlsEncrypt
	}).(pulumi.StringPtrOutput)
}

// HLS encrypted key, this parameter is only meaningful when IsHlsEncrypt is true.
func (o MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput) UriKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateTransConfigHlsEncrypt) *string {
		if v == nil {
			return nil
		}
		return v.UriKey
	}).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateVideo struct {
	// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
	Bitrate *string `pulumi:"bitrate"`
	// buffer size, Value range: [1000, 128000], Unit: Kb, This parameter is not supported when Codec is VP8/VP9.
	Bufsize *string `pulumi:"bufsize"`
	// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
	Codec *string `pulumi:"codec"`
	// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
	Crf *string `pulumi:"crf"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps *string `pulumi:"fps"`
	// The maximum number of frames between key frames, value range: [1, 100000].
	Gop *string `pulumi:"gop"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height *string `pulumi:"height"`
	// Adaptive length,true, false, This parameter is not supported when Codec is VP8/VP9/AV1.
	LongShortMode *string `pulumi:"longShortMode"`
	// Peak video bit rate, Value range: [10, 50000], Unit: Kbps, This parameter is not supported when Codec is VP8/VP9.
	Maxrate *string `pulumi:"maxrate"`
	// video color format, H.264 support: yuv420p, yuv422p, yuv444p, yuvj420p, yuvj422p, yuvj444p, auto, H.265 support: yuv420p, yuv420p10le, auto, This parameter is not supported when Codec is VP8/VP9/AV1.
	Pixfmt *string `pulumi:"pixfmt"`
	// Video Algorithm Presets- H.264 supports this parameter, the values are veryfast, fast, medium, slow, slower- VP8 supports this parameter, the value is good, realtime- AV1 supports this parameter, the value is 5 (recommended value), 4- H.265 and VP9 do not support this parameter.
	Preset *string `pulumi:"preset"`
	// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
	Profile *string `pulumi:"profile"`
	// Whether to delete the video stream, true, false.
	Remove *string `pulumi:"remove"`
	// Rotation angle, Value range: [0, 360), Unit: degree.
	Rotate *string `pulumi:"rotate"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width *string `pulumi:"width"`
}

// MediaTranscodeTemplateVideoInput is an input type that accepts MediaTranscodeTemplateVideoArgs and MediaTranscodeTemplateVideoOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateVideoInput` via:
//
//	MediaTranscodeTemplateVideoArgs{...}
type MediaTranscodeTemplateVideoInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateVideoOutput() MediaTranscodeTemplateVideoOutput
	ToMediaTranscodeTemplateVideoOutputWithContext(context.Context) MediaTranscodeTemplateVideoOutput
}

type MediaTranscodeTemplateVideoArgs struct {
	// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// buffer size, Value range: [1000, 128000], Unit: Kb, This parameter is not supported when Codec is VP8/VP9.
	Bufsize pulumi.StringPtrInput `pulumi:"bufsize"`
	// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
	Codec pulumi.StringPtrInput `pulumi:"codec"`
	// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
	Crf pulumi.StringPtrInput `pulumi:"crf"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps pulumi.StringPtrInput `pulumi:"fps"`
	// The maximum number of frames between key frames, value range: [1, 100000].
	Gop pulumi.StringPtrInput `pulumi:"gop"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Adaptive length,true, false, This parameter is not supported when Codec is VP8/VP9/AV1.
	LongShortMode pulumi.StringPtrInput `pulumi:"longShortMode"`
	// Peak video bit rate, Value range: [10, 50000], Unit: Kbps, This parameter is not supported when Codec is VP8/VP9.
	Maxrate pulumi.StringPtrInput `pulumi:"maxrate"`
	// video color format, H.264 support: yuv420p, yuv422p, yuv444p, yuvj420p, yuvj422p, yuvj444p, auto, H.265 support: yuv420p, yuv420p10le, auto, This parameter is not supported when Codec is VP8/VP9/AV1.
	Pixfmt pulumi.StringPtrInput `pulumi:"pixfmt"`
	// Video Algorithm Presets- H.264 supports this parameter, the values are veryfast, fast, medium, slow, slower- VP8 supports this parameter, the value is good, realtime- AV1 supports this parameter, the value is 5 (recommended value), 4- H.265 and VP9 do not support this parameter.
	Preset pulumi.StringPtrInput `pulumi:"preset"`
	// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
	Profile pulumi.StringPtrInput `pulumi:"profile"`
	// Whether to delete the video stream, true, false.
	Remove pulumi.StringPtrInput `pulumi:"remove"`
	// Rotation angle, Value range: [0, 360), Unit: degree.
	Rotate pulumi.StringPtrInput `pulumi:"rotate"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaTranscodeTemplateVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateVideo)(nil)).Elem()
}

func (i MediaTranscodeTemplateVideoArgs) ToMediaTranscodeTemplateVideoOutput() MediaTranscodeTemplateVideoOutput {
	return i.ToMediaTranscodeTemplateVideoOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateVideoArgs) ToMediaTranscodeTemplateVideoOutputWithContext(ctx context.Context) MediaTranscodeTemplateVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateVideoOutput)
}

func (i MediaTranscodeTemplateVideoArgs) ToMediaTranscodeTemplateVideoPtrOutput() MediaTranscodeTemplateVideoPtrOutput {
	return i.ToMediaTranscodeTemplateVideoPtrOutputWithContext(context.Background())
}

func (i MediaTranscodeTemplateVideoArgs) ToMediaTranscodeTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateVideoOutput).ToMediaTranscodeTemplateVideoPtrOutputWithContext(ctx)
}

// MediaTranscodeTemplateVideoPtrInput is an input type that accepts MediaTranscodeTemplateVideoArgs, MediaTranscodeTemplateVideoPtr and MediaTranscodeTemplateVideoPtrOutput values.
// You can construct a concrete instance of `MediaTranscodeTemplateVideoPtrInput` via:
//
//	        MediaTranscodeTemplateVideoArgs{...}
//
//	or:
//
//	        nil
type MediaTranscodeTemplateVideoPtrInput interface {
	pulumi.Input

	ToMediaTranscodeTemplateVideoPtrOutput() MediaTranscodeTemplateVideoPtrOutput
	ToMediaTranscodeTemplateVideoPtrOutputWithContext(context.Context) MediaTranscodeTemplateVideoPtrOutput
}

type mediaTranscodeTemplateVideoPtrType MediaTranscodeTemplateVideoArgs

func MediaTranscodeTemplateVideoPtr(v *MediaTranscodeTemplateVideoArgs) MediaTranscodeTemplateVideoPtrInput {
	return (*mediaTranscodeTemplateVideoPtrType)(v)
}

func (*mediaTranscodeTemplateVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateVideo)(nil)).Elem()
}

func (i *mediaTranscodeTemplateVideoPtrType) ToMediaTranscodeTemplateVideoPtrOutput() MediaTranscodeTemplateVideoPtrOutput {
	return i.ToMediaTranscodeTemplateVideoPtrOutputWithContext(context.Background())
}

func (i *mediaTranscodeTemplateVideoPtrType) ToMediaTranscodeTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeTemplateVideoPtrOutput)
}

type MediaTranscodeTemplateVideoOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaTranscodeTemplateVideo)(nil)).Elem()
}

func (o MediaTranscodeTemplateVideoOutput) ToMediaTranscodeTemplateVideoOutput() MediaTranscodeTemplateVideoOutput {
	return o
}

func (o MediaTranscodeTemplateVideoOutput) ToMediaTranscodeTemplateVideoOutputWithContext(ctx context.Context) MediaTranscodeTemplateVideoOutput {
	return o
}

func (o MediaTranscodeTemplateVideoOutput) ToMediaTranscodeTemplateVideoPtrOutput() MediaTranscodeTemplateVideoPtrOutput {
	return o.ToMediaTranscodeTemplateVideoPtrOutputWithContext(context.Background())
}

func (o MediaTranscodeTemplateVideoOutput) ToMediaTranscodeTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaTranscodeTemplateVideo) *MediaTranscodeTemplateVideo {
		return &v
	}).(MediaTranscodeTemplateVideoPtrOutput)
}

// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
func (o MediaTranscodeTemplateVideoOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// buffer size, Value range: [1000, 128000], Unit: Kb, This parameter is not supported when Codec is VP8/VP9.
func (o MediaTranscodeTemplateVideoOutput) Bufsize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Bufsize }).(pulumi.StringPtrOutput)
}

// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
func (o MediaTranscodeTemplateVideoOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Codec }).(pulumi.StringPtrOutput)
}

// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
func (o MediaTranscodeTemplateVideoOutput) Crf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Crf }).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaTranscodeTemplateVideoOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Fps }).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames, value range: [1, 100000].
func (o MediaTranscodeTemplateVideoOutput) Gop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Gop }).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeTemplateVideoOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Adaptive length,true, false, This parameter is not supported when Codec is VP8/VP9/AV1.
func (o MediaTranscodeTemplateVideoOutput) LongShortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.LongShortMode }).(pulumi.StringPtrOutput)
}

// Peak video bit rate, Value range: [10, 50000], Unit: Kbps, This parameter is not supported when Codec is VP8/VP9.
func (o MediaTranscodeTemplateVideoOutput) Maxrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Maxrate }).(pulumi.StringPtrOutput)
}

// video color format, H.264 support: yuv420p, yuv422p, yuv444p, yuvj420p, yuvj422p, yuvj444p, auto, H.265 support: yuv420p, yuv420p10le, auto, This parameter is not supported when Codec is VP8/VP9/AV1.
func (o MediaTranscodeTemplateVideoOutput) Pixfmt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Pixfmt }).(pulumi.StringPtrOutput)
}

// Video Algorithm Presets- H.264 supports this parameter, the values are veryfast, fast, medium, slow, slower- VP8 supports this parameter, the value is good, realtime- AV1 supports this parameter, the value is 5 (recommended value), 4- H.265 and VP9 do not support this parameter.
func (o MediaTranscodeTemplateVideoOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Preset }).(pulumi.StringPtrOutput)
}

// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
func (o MediaTranscodeTemplateVideoOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

// Whether to delete the video stream, true, false.
func (o MediaTranscodeTemplateVideoOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Remove }).(pulumi.StringPtrOutput)
}

// Rotation angle, Value range: [0, 360), Unit: degree.
func (o MediaTranscodeTemplateVideoOutput) Rotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Rotate }).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeTemplateVideoOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaTranscodeTemplateVideo) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaTranscodeTemplateVideoPtrOutput struct{ *pulumi.OutputState }

func (MediaTranscodeTemplateVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeTemplateVideo)(nil)).Elem()
}

func (o MediaTranscodeTemplateVideoPtrOutput) ToMediaTranscodeTemplateVideoPtrOutput() MediaTranscodeTemplateVideoPtrOutput {
	return o
}

func (o MediaTranscodeTemplateVideoPtrOutput) ToMediaTranscodeTemplateVideoPtrOutputWithContext(ctx context.Context) MediaTranscodeTemplateVideoPtrOutput {
	return o
}

func (o MediaTranscodeTemplateVideoPtrOutput) Elem() MediaTranscodeTemplateVideoOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) MediaTranscodeTemplateVideo {
		if v != nil {
			return *v
		}
		var ret MediaTranscodeTemplateVideo
		return ret
	}).(MediaTranscodeTemplateVideoOutput)
}

// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
func (o MediaTranscodeTemplateVideoPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// buffer size, Value range: [1000, 128000], Unit: Kb, This parameter is not supported when Codec is VP8/VP9.
func (o MediaTranscodeTemplateVideoPtrOutput) Bufsize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Bufsize
	}).(pulumi.StringPtrOutput)
}

// Codec format, default value: `H.264`, when format is WebM, it is VP8, value range: `H.264`, `H.265`, `VP8`, `VP9`, `AV1`.
func (o MediaTranscodeTemplateVideoPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Codec
	}).(pulumi.StringPtrOutput)
}

// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
func (o MediaTranscodeTemplateVideoPtrOutput) Crf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Crf
	}).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaTranscodeTemplateVideoPtrOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Fps
	}).(pulumi.StringPtrOutput)
}

// The maximum number of frames between key frames, value range: [1, 100000].
func (o MediaTranscodeTemplateVideoPtrOutput) Gop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Gop
	}).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeTemplateVideoPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Adaptive length,true, false, This parameter is not supported when Codec is VP8/VP9/AV1.
func (o MediaTranscodeTemplateVideoPtrOutput) LongShortMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.LongShortMode
	}).(pulumi.StringPtrOutput)
}

// Peak video bit rate, Value range: [10, 50000], Unit: Kbps, This parameter is not supported when Codec is VP8/VP9.
func (o MediaTranscodeTemplateVideoPtrOutput) Maxrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Maxrate
	}).(pulumi.StringPtrOutput)
}

// video color format, H.264 support: yuv420p, yuv422p, yuv444p, yuvj420p, yuvj422p, yuvj444p, auto, H.265 support: yuv420p, yuv420p10le, auto, This parameter is not supported when Codec is VP8/VP9/AV1.
func (o MediaTranscodeTemplateVideoPtrOutput) Pixfmt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Pixfmt
	}).(pulumi.StringPtrOutput)
}

// Video Algorithm Presets- H.264 supports this parameter, the values are veryfast, fast, medium, slow, slower- VP8 supports this parameter, the value is good, realtime- AV1 supports this parameter, the value is 5 (recommended value), 4- H.265 and VP9 do not support this parameter.
func (o MediaTranscodeTemplateVideoPtrOutput) Preset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Preset
	}).(pulumi.StringPtrOutput)
}

// encoding level, Support baseline, main, high, auto- When Pixfmt is auto, this parameter can only be set to auto, when it is set to other options, the parameter value will be set to auto- baseline: suitable for mobile devices- main: suitable for standard resolution devices- high: suitable for high-resolution devices- Only H.264 supports this parameter.
func (o MediaTranscodeTemplateVideoPtrOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Profile
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the video stream, true, false.
func (o MediaTranscodeTemplateVideoPtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringPtrOutput)
}

// Rotation angle, Value range: [0, 360), Unit: degree.
func (o MediaTranscodeTemplateVideoPtrOutput) Rotate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Rotate
	}).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaTranscodeTemplateVideoPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateAudio struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate *string `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
	Channels *string `pulumi:"channels"`
	// Codec format, value aac, mp3.
	Codec string `pulumi:"codec"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove *string `pulumi:"remove"`
	// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
	Samplerate *string `pulumi:"samplerate"`
}

// MediaVideoMontageTemplateAudioInput is an input type that accepts MediaVideoMontageTemplateAudioArgs and MediaVideoMontageTemplateAudioOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateAudioInput` via:
//
//	MediaVideoMontageTemplateAudioArgs{...}
type MediaVideoMontageTemplateAudioInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateAudioOutput() MediaVideoMontageTemplateAudioOutput
	ToMediaVideoMontageTemplateAudioOutputWithContext(context.Context) MediaVideoMontageTemplateAudioOutput
}

type MediaVideoMontageTemplateAudioArgs struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// Codec format, value aac, mp3.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove pulumi.StringPtrInput `pulumi:"remove"`
	// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
	Samplerate pulumi.StringPtrInput `pulumi:"samplerate"`
}

func (MediaVideoMontageTemplateAudioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateAudio)(nil)).Elem()
}

func (i MediaVideoMontageTemplateAudioArgs) ToMediaVideoMontageTemplateAudioOutput() MediaVideoMontageTemplateAudioOutput {
	return i.ToMediaVideoMontageTemplateAudioOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateAudioArgs) ToMediaVideoMontageTemplateAudioOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioOutput)
}

func (i MediaVideoMontageTemplateAudioArgs) ToMediaVideoMontageTemplateAudioPtrOutput() MediaVideoMontageTemplateAudioPtrOutput {
	return i.ToMediaVideoMontageTemplateAudioPtrOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateAudioArgs) ToMediaVideoMontageTemplateAudioPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioOutput).ToMediaVideoMontageTemplateAudioPtrOutputWithContext(ctx)
}

// MediaVideoMontageTemplateAudioPtrInput is an input type that accepts MediaVideoMontageTemplateAudioArgs, MediaVideoMontageTemplateAudioPtr and MediaVideoMontageTemplateAudioPtrOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateAudioPtrInput` via:
//
//	        MediaVideoMontageTemplateAudioArgs{...}
//
//	or:
//
//	        nil
type MediaVideoMontageTemplateAudioPtrInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateAudioPtrOutput() MediaVideoMontageTemplateAudioPtrOutput
	ToMediaVideoMontageTemplateAudioPtrOutputWithContext(context.Context) MediaVideoMontageTemplateAudioPtrOutput
}

type mediaVideoMontageTemplateAudioPtrType MediaVideoMontageTemplateAudioArgs

func MediaVideoMontageTemplateAudioPtr(v *MediaVideoMontageTemplateAudioArgs) MediaVideoMontageTemplateAudioPtrInput {
	return (*mediaVideoMontageTemplateAudioPtrType)(v)
}

func (*mediaVideoMontageTemplateAudioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateAudio)(nil)).Elem()
}

func (i *mediaVideoMontageTemplateAudioPtrType) ToMediaVideoMontageTemplateAudioPtrOutput() MediaVideoMontageTemplateAudioPtrOutput {
	return i.ToMediaVideoMontageTemplateAudioPtrOutputWithContext(context.Background())
}

func (i *mediaVideoMontageTemplateAudioPtrType) ToMediaVideoMontageTemplateAudioPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioPtrOutput)
}

type MediaVideoMontageTemplateAudioOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateAudioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateAudio)(nil)).Elem()
}

func (o MediaVideoMontageTemplateAudioOutput) ToMediaVideoMontageTemplateAudioOutput() MediaVideoMontageTemplateAudioOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioOutput) ToMediaVideoMontageTemplateAudioOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioOutput) ToMediaVideoMontageTemplateAudioPtrOutput() MediaVideoMontageTemplateAudioPtrOutput {
	return o.ToMediaVideoMontageTemplateAudioPtrOutputWithContext(context.Background())
}

func (o MediaVideoMontageTemplateAudioOutput) ToMediaVideoMontageTemplateAudioPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVideoMontageTemplateAudio) *MediaVideoMontageTemplateAudio {
		return &v
	}).(MediaVideoMontageTemplateAudioPtrOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaVideoMontageTemplateAudioOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudio) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
func (o MediaVideoMontageTemplateAudioOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudio) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3.
func (o MediaVideoMontageTemplateAudioOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudio) string { return v.Codec }).(pulumi.StringOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaVideoMontageTemplateAudioOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudio) *string { return v.Remove }).(pulumi.StringPtrOutput)
}

// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
func (o MediaVideoMontageTemplateAudioOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudio) *string { return v.Samplerate }).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateAudioPtrOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateAudioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateAudio)(nil)).Elem()
}

func (o MediaVideoMontageTemplateAudioPtrOutput) ToMediaVideoMontageTemplateAudioPtrOutput() MediaVideoMontageTemplateAudioPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioPtrOutput) ToMediaVideoMontageTemplateAudioPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioPtrOutput) Elem() MediaVideoMontageTemplateAudioOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudio) MediaVideoMontageTemplateAudio {
		if v != nil {
			return *v
		}
		var ret MediaVideoMontageTemplateAudio
		return ret
	}).(MediaVideoMontageTemplateAudioOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaVideoMontageTemplateAudioPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2.
func (o MediaVideoMontageTemplateAudioPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3.
func (o MediaVideoMontageTemplateAudioPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaVideoMontageTemplateAudioPtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringPtrOutput)
}

// Sampling Rate- Unit: Hz- Optional 11025, 22050, 32000, 44100, 48000, 96000- Different packages, mp3 supports different sampling rates, as shown in the table below.
func (o MediaVideoMontageTemplateAudioPtrOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudio) *string {
		if v == nil {
			return nil
		}
		return v.Samplerate
	}).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateAudioMix struct {
	// The media address of the audio track that needs to be mixed.
	AudioSource string `pulumi:"audioSource"`
	// Mix Fade Configuration.
	EffectConfig *MediaVideoMontageTemplateAudioMixEffectConfig `pulumi:"effectConfig"`
	// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
	MixMode *string `pulumi:"mixMode"`
	// Whether to replace the original audio of the Input media file with the mixed audio track media.
	Replace *string `pulumi:"replace"`
}

// MediaVideoMontageTemplateAudioMixInput is an input type that accepts MediaVideoMontageTemplateAudioMixArgs and MediaVideoMontageTemplateAudioMixOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateAudioMixInput` via:
//
//	MediaVideoMontageTemplateAudioMixArgs{...}
type MediaVideoMontageTemplateAudioMixInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateAudioMixOutput() MediaVideoMontageTemplateAudioMixOutput
	ToMediaVideoMontageTemplateAudioMixOutputWithContext(context.Context) MediaVideoMontageTemplateAudioMixOutput
}

type MediaVideoMontageTemplateAudioMixArgs struct {
	// The media address of the audio track that needs to be mixed.
	AudioSource pulumi.StringInput `pulumi:"audioSource"`
	// Mix Fade Configuration.
	EffectConfig MediaVideoMontageTemplateAudioMixEffectConfigPtrInput `pulumi:"effectConfig"`
	// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
	MixMode pulumi.StringPtrInput `pulumi:"mixMode"`
	// Whether to replace the original audio of the Input media file with the mixed audio track media.
	Replace pulumi.StringPtrInput `pulumi:"replace"`
}

func (MediaVideoMontageTemplateAudioMixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateAudioMix)(nil)).Elem()
}

func (i MediaVideoMontageTemplateAudioMixArgs) ToMediaVideoMontageTemplateAudioMixOutput() MediaVideoMontageTemplateAudioMixOutput {
	return i.ToMediaVideoMontageTemplateAudioMixOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateAudioMixArgs) ToMediaVideoMontageTemplateAudioMixOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioMixOutput)
}

// MediaVideoMontageTemplateAudioMixArrayInput is an input type that accepts MediaVideoMontageTemplateAudioMixArray and MediaVideoMontageTemplateAudioMixArrayOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateAudioMixArrayInput` via:
//
//	MediaVideoMontageTemplateAudioMixArray{ MediaVideoMontageTemplateAudioMixArgs{...} }
type MediaVideoMontageTemplateAudioMixArrayInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateAudioMixArrayOutput() MediaVideoMontageTemplateAudioMixArrayOutput
	ToMediaVideoMontageTemplateAudioMixArrayOutputWithContext(context.Context) MediaVideoMontageTemplateAudioMixArrayOutput
}

type MediaVideoMontageTemplateAudioMixArray []MediaVideoMontageTemplateAudioMixInput

func (MediaVideoMontageTemplateAudioMixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaVideoMontageTemplateAudioMix)(nil)).Elem()
}

func (i MediaVideoMontageTemplateAudioMixArray) ToMediaVideoMontageTemplateAudioMixArrayOutput() MediaVideoMontageTemplateAudioMixArrayOutput {
	return i.ToMediaVideoMontageTemplateAudioMixArrayOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateAudioMixArray) ToMediaVideoMontageTemplateAudioMixArrayOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioMixArrayOutput)
}

type MediaVideoMontageTemplateAudioMixOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateAudioMixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateAudioMix)(nil)).Elem()
}

func (o MediaVideoMontageTemplateAudioMixOutput) ToMediaVideoMontageTemplateAudioMixOutput() MediaVideoMontageTemplateAudioMixOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixOutput) ToMediaVideoMontageTemplateAudioMixOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixOutput {
	return o
}

// The media address of the audio track that needs to be mixed.
func (o MediaVideoMontageTemplateAudioMixOutput) AudioSource() pulumi.StringOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMix) string { return v.AudioSource }).(pulumi.StringOutput)
}

// Mix Fade Configuration.
func (o MediaVideoMontageTemplateAudioMixOutput) EffectConfig() MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMix) *MediaVideoMontageTemplateAudioMixEffectConfig {
		return v.EffectConfig
	}).(MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput)
}

// Mixing mode Repeat: background sound loop, Once: The background sound is played once.
func (o MediaVideoMontageTemplateAudioMixOutput) MixMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMix) *string { return v.MixMode }).(pulumi.StringPtrOutput)
}

// Whether to replace the original audio of the Input media file with the mixed audio track media.
func (o MediaVideoMontageTemplateAudioMixOutput) Replace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMix) *string { return v.Replace }).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateAudioMixArrayOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateAudioMixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MediaVideoMontageTemplateAudioMix)(nil)).Elem()
}

func (o MediaVideoMontageTemplateAudioMixArrayOutput) ToMediaVideoMontageTemplateAudioMixArrayOutput() MediaVideoMontageTemplateAudioMixArrayOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixArrayOutput) ToMediaVideoMontageTemplateAudioMixArrayOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixArrayOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixArrayOutput) Index(i pulumi.IntInput) MediaVideoMontageTemplateAudioMixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MediaVideoMontageTemplateAudioMix {
		return vs[0].([]MediaVideoMontageTemplateAudioMix)[vs[1].(int)]
	}).(MediaVideoMontageTemplateAudioMixOutput)
}

type MediaVideoMontageTemplateAudioMixEffectConfig struct {
	// bgm transition fade-in duration, support floating point numbers.
	BgmFadeTime *string `pulumi:"bgmFadeTime"`
	// Enable bgm conversion fade in.
	EnableBgmFade *string `pulumi:"enableBgmFade"`
	// enable fade out.
	EnableEndFadeout *string `pulumi:"enableEndFadeout"`
	// enable fade in.
	EnableStartFadein *string `pulumi:"enableStartFadein"`
	// fade out time, greater than 0, support floating point numbers.
	EndFadeoutTime *string `pulumi:"endFadeoutTime"`
	// Fade in duration, greater than 0, support floating point numbers.
	StartFadeinTime *string `pulumi:"startFadeinTime"`
}

// MediaVideoMontageTemplateAudioMixEffectConfigInput is an input type that accepts MediaVideoMontageTemplateAudioMixEffectConfigArgs and MediaVideoMontageTemplateAudioMixEffectConfigOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateAudioMixEffectConfigInput` via:
//
//	MediaVideoMontageTemplateAudioMixEffectConfigArgs{...}
type MediaVideoMontageTemplateAudioMixEffectConfigInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateAudioMixEffectConfigOutput() MediaVideoMontageTemplateAudioMixEffectConfigOutput
	ToMediaVideoMontageTemplateAudioMixEffectConfigOutputWithContext(context.Context) MediaVideoMontageTemplateAudioMixEffectConfigOutput
}

type MediaVideoMontageTemplateAudioMixEffectConfigArgs struct {
	// bgm transition fade-in duration, support floating point numbers.
	BgmFadeTime pulumi.StringPtrInput `pulumi:"bgmFadeTime"`
	// Enable bgm conversion fade in.
	EnableBgmFade pulumi.StringPtrInput `pulumi:"enableBgmFade"`
	// enable fade out.
	EnableEndFadeout pulumi.StringPtrInput `pulumi:"enableEndFadeout"`
	// enable fade in.
	EnableStartFadein pulumi.StringPtrInput `pulumi:"enableStartFadein"`
	// fade out time, greater than 0, support floating point numbers.
	EndFadeoutTime pulumi.StringPtrInput `pulumi:"endFadeoutTime"`
	// Fade in duration, greater than 0, support floating point numbers.
	StartFadeinTime pulumi.StringPtrInput `pulumi:"startFadeinTime"`
}

func (MediaVideoMontageTemplateAudioMixEffectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (i MediaVideoMontageTemplateAudioMixEffectConfigArgs) ToMediaVideoMontageTemplateAudioMixEffectConfigOutput() MediaVideoMontageTemplateAudioMixEffectConfigOutput {
	return i.ToMediaVideoMontageTemplateAudioMixEffectConfigOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateAudioMixEffectConfigArgs) ToMediaVideoMontageTemplateAudioMixEffectConfigOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixEffectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioMixEffectConfigOutput)
}

func (i MediaVideoMontageTemplateAudioMixEffectConfigArgs) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutput() MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return i.ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateAudioMixEffectConfigArgs) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioMixEffectConfigOutput).ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(ctx)
}

// MediaVideoMontageTemplateAudioMixEffectConfigPtrInput is an input type that accepts MediaVideoMontageTemplateAudioMixEffectConfigArgs, MediaVideoMontageTemplateAudioMixEffectConfigPtr and MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateAudioMixEffectConfigPtrInput` via:
//
//	        MediaVideoMontageTemplateAudioMixEffectConfigArgs{...}
//
//	or:
//
//	        nil
type MediaVideoMontageTemplateAudioMixEffectConfigPtrInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutput() MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput
	ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(context.Context) MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput
}

type mediaVideoMontageTemplateAudioMixEffectConfigPtrType MediaVideoMontageTemplateAudioMixEffectConfigArgs

func MediaVideoMontageTemplateAudioMixEffectConfigPtr(v *MediaVideoMontageTemplateAudioMixEffectConfigArgs) MediaVideoMontageTemplateAudioMixEffectConfigPtrInput {
	return (*mediaVideoMontageTemplateAudioMixEffectConfigPtrType)(v)
}

func (*mediaVideoMontageTemplateAudioMixEffectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (i *mediaVideoMontageTemplateAudioMixEffectConfigPtrType) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutput() MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return i.ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (i *mediaVideoMontageTemplateAudioMixEffectConfigPtrType) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput)
}

type MediaVideoMontageTemplateAudioMixEffectConfigOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateAudioMixEffectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) ToMediaVideoMontageTemplateAudioMixEffectConfigOutput() MediaVideoMontageTemplateAudioMixEffectConfigOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) ToMediaVideoMontageTemplateAudioMixEffectConfigOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixEffectConfigOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutput() MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return o.ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(context.Background())
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVideoMontageTemplateAudioMixEffectConfig) *MediaVideoMontageTemplateAudioMixEffectConfig {
		return &v
	}).(MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput)
}

// bgm transition fade-in duration, support floating point numbers.
func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) BgmFadeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMixEffectConfig) *string { return v.BgmFadeTime }).(pulumi.StringPtrOutput)
}

// Enable bgm conversion fade in.
func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) EnableBgmFade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMixEffectConfig) *string { return v.EnableBgmFade }).(pulumi.StringPtrOutput)
}

// enable fade out.
func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) EnableEndFadeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMixEffectConfig) *string { return v.EnableEndFadeout }).(pulumi.StringPtrOutput)
}

// enable fade in.
func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) EnableStartFadein() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMixEffectConfig) *string { return v.EnableStartFadein }).(pulumi.StringPtrOutput)
}

// fade out time, greater than 0, support floating point numbers.
func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) EndFadeoutTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMixEffectConfig) *string { return v.EndFadeoutTime }).(pulumi.StringPtrOutput)
}

// Fade in duration, greater than 0, support floating point numbers.
func (o MediaVideoMontageTemplateAudioMixEffectConfigOutput) StartFadeinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateAudioMixEffectConfig) *string { return v.StartFadeinTime }).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateAudioMixEffectConfig)(nil)).Elem()
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutput() MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) ToMediaVideoMontageTemplateAudioMixEffectConfigPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) Elem() MediaVideoMontageTemplateAudioMixEffectConfigOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) MediaVideoMontageTemplateAudioMixEffectConfig {
		if v != nil {
			return *v
		}
		var ret MediaVideoMontageTemplateAudioMixEffectConfig
		return ret
	}).(MediaVideoMontageTemplateAudioMixEffectConfigOutput)
}

// bgm transition fade-in duration, support floating point numbers.
func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) BgmFadeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.BgmFadeTime
	}).(pulumi.StringPtrOutput)
}

// Enable bgm conversion fade in.
func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) EnableBgmFade() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableBgmFade
	}).(pulumi.StringPtrOutput)
}

// enable fade out.
func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) EnableEndFadeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableEndFadeout
	}).(pulumi.StringPtrOutput)
}

// enable fade in.
func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) EnableStartFadein() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EnableStartFadein
	}).(pulumi.StringPtrOutput)
}

// fade out time, greater than 0, support floating point numbers.
func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) EndFadeoutTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.EndFadeoutTime
	}).(pulumi.StringPtrOutput)
}

// Fade in duration, greater than 0, support floating point numbers.
func (o MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput) StartFadeinTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateAudioMixEffectConfig) *string {
		if v == nil {
			return nil
		}
		return v.StartFadeinTime
	}).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateContainer struct {
	// Container format: mp4, flv, hls, ts, mkv.
	Format string `pulumi:"format"`
}

// MediaVideoMontageTemplateContainerInput is an input type that accepts MediaVideoMontageTemplateContainerArgs and MediaVideoMontageTemplateContainerOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateContainerInput` via:
//
//	MediaVideoMontageTemplateContainerArgs{...}
type MediaVideoMontageTemplateContainerInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateContainerOutput() MediaVideoMontageTemplateContainerOutput
	ToMediaVideoMontageTemplateContainerOutputWithContext(context.Context) MediaVideoMontageTemplateContainerOutput
}

type MediaVideoMontageTemplateContainerArgs struct {
	// Container format: mp4, flv, hls, ts, mkv.
	Format pulumi.StringInput `pulumi:"format"`
}

func (MediaVideoMontageTemplateContainerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateContainer)(nil)).Elem()
}

func (i MediaVideoMontageTemplateContainerArgs) ToMediaVideoMontageTemplateContainerOutput() MediaVideoMontageTemplateContainerOutput {
	return i.ToMediaVideoMontageTemplateContainerOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateContainerArgs) ToMediaVideoMontageTemplateContainerOutputWithContext(ctx context.Context) MediaVideoMontageTemplateContainerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateContainerOutput)
}

func (i MediaVideoMontageTemplateContainerArgs) ToMediaVideoMontageTemplateContainerPtrOutput() MediaVideoMontageTemplateContainerPtrOutput {
	return i.ToMediaVideoMontageTemplateContainerPtrOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateContainerArgs) ToMediaVideoMontageTemplateContainerPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateContainerOutput).ToMediaVideoMontageTemplateContainerPtrOutputWithContext(ctx)
}

// MediaVideoMontageTemplateContainerPtrInput is an input type that accepts MediaVideoMontageTemplateContainerArgs, MediaVideoMontageTemplateContainerPtr and MediaVideoMontageTemplateContainerPtrOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateContainerPtrInput` via:
//
//	        MediaVideoMontageTemplateContainerArgs{...}
//
//	or:
//
//	        nil
type MediaVideoMontageTemplateContainerPtrInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateContainerPtrOutput() MediaVideoMontageTemplateContainerPtrOutput
	ToMediaVideoMontageTemplateContainerPtrOutputWithContext(context.Context) MediaVideoMontageTemplateContainerPtrOutput
}

type mediaVideoMontageTemplateContainerPtrType MediaVideoMontageTemplateContainerArgs

func MediaVideoMontageTemplateContainerPtr(v *MediaVideoMontageTemplateContainerArgs) MediaVideoMontageTemplateContainerPtrInput {
	return (*mediaVideoMontageTemplateContainerPtrType)(v)
}

func (*mediaVideoMontageTemplateContainerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateContainer)(nil)).Elem()
}

func (i *mediaVideoMontageTemplateContainerPtrType) ToMediaVideoMontageTemplateContainerPtrOutput() MediaVideoMontageTemplateContainerPtrOutput {
	return i.ToMediaVideoMontageTemplateContainerPtrOutputWithContext(context.Background())
}

func (i *mediaVideoMontageTemplateContainerPtrType) ToMediaVideoMontageTemplateContainerPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateContainerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateContainerPtrOutput)
}

type MediaVideoMontageTemplateContainerOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateContainerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateContainer)(nil)).Elem()
}

func (o MediaVideoMontageTemplateContainerOutput) ToMediaVideoMontageTemplateContainerOutput() MediaVideoMontageTemplateContainerOutput {
	return o
}

func (o MediaVideoMontageTemplateContainerOutput) ToMediaVideoMontageTemplateContainerOutputWithContext(ctx context.Context) MediaVideoMontageTemplateContainerOutput {
	return o
}

func (o MediaVideoMontageTemplateContainerOutput) ToMediaVideoMontageTemplateContainerPtrOutput() MediaVideoMontageTemplateContainerPtrOutput {
	return o.ToMediaVideoMontageTemplateContainerPtrOutputWithContext(context.Background())
}

func (o MediaVideoMontageTemplateContainerOutput) ToMediaVideoMontageTemplateContainerPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateContainerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVideoMontageTemplateContainer) *MediaVideoMontageTemplateContainer {
		return &v
	}).(MediaVideoMontageTemplateContainerPtrOutput)
}

// Container format: mp4, flv, hls, ts, mkv.
func (o MediaVideoMontageTemplateContainerOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateContainer) string { return v.Format }).(pulumi.StringOutput)
}

type MediaVideoMontageTemplateContainerPtrOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateContainerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateContainer)(nil)).Elem()
}

func (o MediaVideoMontageTemplateContainerPtrOutput) ToMediaVideoMontageTemplateContainerPtrOutput() MediaVideoMontageTemplateContainerPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateContainerPtrOutput) ToMediaVideoMontageTemplateContainerPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateContainerPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateContainerPtrOutput) Elem() MediaVideoMontageTemplateContainerOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateContainer) MediaVideoMontageTemplateContainer {
		if v != nil {
			return *v
		}
		var ret MediaVideoMontageTemplateContainer
		return ret
	}).(MediaVideoMontageTemplateContainerOutput)
}

// Container format: mp4, flv, hls, ts, mkv.
func (o MediaVideoMontageTemplateContainerPtrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateContainer) *string {
		if v == nil {
			return nil
		}
		return &v.Format
	}).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateVideo struct {
	// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
	Bitrate *string `pulumi:"bitrate"`
	// Codec format `H.264`.
	Codec string `pulumi:"codec"`
	// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
	Crf *string `pulumi:"crf"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps *string `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height *string `pulumi:"height"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove *string `pulumi:"remove"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width *string `pulumi:"width"`
}

// MediaVideoMontageTemplateVideoInput is an input type that accepts MediaVideoMontageTemplateVideoArgs and MediaVideoMontageTemplateVideoOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateVideoInput` via:
//
//	MediaVideoMontageTemplateVideoArgs{...}
type MediaVideoMontageTemplateVideoInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateVideoOutput() MediaVideoMontageTemplateVideoOutput
	ToMediaVideoMontageTemplateVideoOutputWithContext(context.Context) MediaVideoMontageTemplateVideoOutput
}

type MediaVideoMontageTemplateVideoArgs struct {
	// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// Codec format `H.264`.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
	Crf pulumi.StringPtrInput `pulumi:"crf"`
	// Frame rate, value range: (0, 60], Unit: fps.
	Fps pulumi.StringPtrInput `pulumi:"fps"`
	// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Whether to delete the source audio stream, the value is true, false.
	Remove pulumi.StringPtrInput `pulumi:"remove"`
	// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaVideoMontageTemplateVideoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateVideo)(nil)).Elem()
}

func (i MediaVideoMontageTemplateVideoArgs) ToMediaVideoMontageTemplateVideoOutput() MediaVideoMontageTemplateVideoOutput {
	return i.ToMediaVideoMontageTemplateVideoOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateVideoArgs) ToMediaVideoMontageTemplateVideoOutputWithContext(ctx context.Context) MediaVideoMontageTemplateVideoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateVideoOutput)
}

func (i MediaVideoMontageTemplateVideoArgs) ToMediaVideoMontageTemplateVideoPtrOutput() MediaVideoMontageTemplateVideoPtrOutput {
	return i.ToMediaVideoMontageTemplateVideoPtrOutputWithContext(context.Background())
}

func (i MediaVideoMontageTemplateVideoArgs) ToMediaVideoMontageTemplateVideoPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateVideoOutput).ToMediaVideoMontageTemplateVideoPtrOutputWithContext(ctx)
}

// MediaVideoMontageTemplateVideoPtrInput is an input type that accepts MediaVideoMontageTemplateVideoArgs, MediaVideoMontageTemplateVideoPtr and MediaVideoMontageTemplateVideoPtrOutput values.
// You can construct a concrete instance of `MediaVideoMontageTemplateVideoPtrInput` via:
//
//	        MediaVideoMontageTemplateVideoArgs{...}
//
//	or:
//
//	        nil
type MediaVideoMontageTemplateVideoPtrInput interface {
	pulumi.Input

	ToMediaVideoMontageTemplateVideoPtrOutput() MediaVideoMontageTemplateVideoPtrOutput
	ToMediaVideoMontageTemplateVideoPtrOutputWithContext(context.Context) MediaVideoMontageTemplateVideoPtrOutput
}

type mediaVideoMontageTemplateVideoPtrType MediaVideoMontageTemplateVideoArgs

func MediaVideoMontageTemplateVideoPtr(v *MediaVideoMontageTemplateVideoArgs) MediaVideoMontageTemplateVideoPtrInput {
	return (*mediaVideoMontageTemplateVideoPtrType)(v)
}

func (*mediaVideoMontageTemplateVideoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateVideo)(nil)).Elem()
}

func (i *mediaVideoMontageTemplateVideoPtrType) ToMediaVideoMontageTemplateVideoPtrOutput() MediaVideoMontageTemplateVideoPtrOutput {
	return i.ToMediaVideoMontageTemplateVideoPtrOutputWithContext(context.Background())
}

func (i *mediaVideoMontageTemplateVideoPtrType) ToMediaVideoMontageTemplateVideoPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateVideoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoMontageTemplateVideoPtrOutput)
}

type MediaVideoMontageTemplateVideoOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateVideoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoMontageTemplateVideo)(nil)).Elem()
}

func (o MediaVideoMontageTemplateVideoOutput) ToMediaVideoMontageTemplateVideoOutput() MediaVideoMontageTemplateVideoOutput {
	return o
}

func (o MediaVideoMontageTemplateVideoOutput) ToMediaVideoMontageTemplateVideoOutputWithContext(ctx context.Context) MediaVideoMontageTemplateVideoOutput {
	return o
}

func (o MediaVideoMontageTemplateVideoOutput) ToMediaVideoMontageTemplateVideoPtrOutput() MediaVideoMontageTemplateVideoPtrOutput {
	return o.ToMediaVideoMontageTemplateVideoPtrOutputWithContext(context.Background())
}

func (o MediaVideoMontageTemplateVideoOutput) ToMediaVideoMontageTemplateVideoPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateVideoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVideoMontageTemplateVideo) *MediaVideoMontageTemplateVideo {
		return &v
	}).(MediaVideoMontageTemplateVideoPtrOutput)
}

// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
func (o MediaVideoMontageTemplateVideoOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// Codec format `H.264`.
func (o MediaVideoMontageTemplateVideoOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) string { return v.Codec }).(pulumi.StringOutput)
}

// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
func (o MediaVideoMontageTemplateVideoOutput) Crf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) *string { return v.Crf }).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaVideoMontageTemplateVideoOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) *string { return v.Fps }).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaVideoMontageTemplateVideoOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaVideoMontageTemplateVideoOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) *string { return v.Remove }).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaVideoMontageTemplateVideoOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoMontageTemplateVideo) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaVideoMontageTemplateVideoPtrOutput struct{ *pulumi.OutputState }

func (MediaVideoMontageTemplateVideoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoMontageTemplateVideo)(nil)).Elem()
}

func (o MediaVideoMontageTemplateVideoPtrOutput) ToMediaVideoMontageTemplateVideoPtrOutput() MediaVideoMontageTemplateVideoPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateVideoPtrOutput) ToMediaVideoMontageTemplateVideoPtrOutputWithContext(ctx context.Context) MediaVideoMontageTemplateVideoPtrOutput {
	return o
}

func (o MediaVideoMontageTemplateVideoPtrOutput) Elem() MediaVideoMontageTemplateVideoOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) MediaVideoMontageTemplateVideo {
		if v != nil {
			return *v
		}
		var ret MediaVideoMontageTemplateVideo
		return ret
	}).(MediaVideoMontageTemplateVideoOutput)
}

// Bit rate of video output file, value range: [10, 50000], unit: Kbps, auto means adaptive bit rate.
func (o MediaVideoMontageTemplateVideoPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// Codec format `H.264`.
func (o MediaVideoMontageTemplateVideoPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Bit rate-quality control factor, value range: (0, 51], If Crf is set, the setting of Bitrate will be invalid, When Bitrate is empty, the default is 25.
func (o MediaVideoMontageTemplateVideoPtrOutput) Crf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Crf
	}).(pulumi.StringPtrOutput)
}

// Frame rate, value range: (0, 60], Unit: fps.
func (o MediaVideoMontageTemplateVideoPtrOutput) Fps() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Fps
	}).(pulumi.StringPtrOutput)
}

// High, value range: [128, 4096], Unit: px, If only Height is set, Width is calculated according to the original ratio of the video, must be even.
func (o MediaVideoMontageTemplateVideoPtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Whether to delete the source audio stream, the value is true, false.
func (o MediaVideoMontageTemplateVideoPtrOutput) Remove() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Remove
	}).(pulumi.StringPtrOutput)
}

// width, value range: [128, 4096], Unit: px, If only Width is set, Height is calculated according to the original ratio of the video, must be even.
func (o MediaVideoMontageTemplateVideoPtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoMontageTemplateVideo) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaVideoProcessTemplateColorEnhance struct {
	// Contrast, value range: [0, 100], empty string (indicates automatic analysis).
	Contrast *string `pulumi:"contrast"`
	// colorcorrection, value range: [0, 100], empty string (indicating automatic analysis).
	Correction *string `pulumi:"correction"`
	// Whether color enhancement is turned on.
	Enable *string `pulumi:"enable"`
	// Saturation, value range: [0, 100], empty string (indicating automatic analysis).
	Saturation *string `pulumi:"saturation"`
}

// MediaVideoProcessTemplateColorEnhanceInput is an input type that accepts MediaVideoProcessTemplateColorEnhanceArgs and MediaVideoProcessTemplateColorEnhanceOutput values.
// You can construct a concrete instance of `MediaVideoProcessTemplateColorEnhanceInput` via:
//
//	MediaVideoProcessTemplateColorEnhanceArgs{...}
type MediaVideoProcessTemplateColorEnhanceInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateColorEnhanceOutput() MediaVideoProcessTemplateColorEnhanceOutput
	ToMediaVideoProcessTemplateColorEnhanceOutputWithContext(context.Context) MediaVideoProcessTemplateColorEnhanceOutput
}

type MediaVideoProcessTemplateColorEnhanceArgs struct {
	// Contrast, value range: [0, 100], empty string (indicates automatic analysis).
	Contrast pulumi.StringPtrInput `pulumi:"contrast"`
	// colorcorrection, value range: [0, 100], empty string (indicating automatic analysis).
	Correction pulumi.StringPtrInput `pulumi:"correction"`
	// Whether color enhancement is turned on.
	Enable pulumi.StringPtrInput `pulumi:"enable"`
	// Saturation, value range: [0, 100], empty string (indicating automatic analysis).
	Saturation pulumi.StringPtrInput `pulumi:"saturation"`
}

func (MediaVideoProcessTemplateColorEnhanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoProcessTemplateColorEnhance)(nil)).Elem()
}

func (i MediaVideoProcessTemplateColorEnhanceArgs) ToMediaVideoProcessTemplateColorEnhanceOutput() MediaVideoProcessTemplateColorEnhanceOutput {
	return i.ToMediaVideoProcessTemplateColorEnhanceOutputWithContext(context.Background())
}

func (i MediaVideoProcessTemplateColorEnhanceArgs) ToMediaVideoProcessTemplateColorEnhanceOutputWithContext(ctx context.Context) MediaVideoProcessTemplateColorEnhanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateColorEnhanceOutput)
}

func (i MediaVideoProcessTemplateColorEnhanceArgs) ToMediaVideoProcessTemplateColorEnhancePtrOutput() MediaVideoProcessTemplateColorEnhancePtrOutput {
	return i.ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(context.Background())
}

func (i MediaVideoProcessTemplateColorEnhanceArgs) ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateColorEnhancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateColorEnhanceOutput).ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(ctx)
}

// MediaVideoProcessTemplateColorEnhancePtrInput is an input type that accepts MediaVideoProcessTemplateColorEnhanceArgs, MediaVideoProcessTemplateColorEnhancePtr and MediaVideoProcessTemplateColorEnhancePtrOutput values.
// You can construct a concrete instance of `MediaVideoProcessTemplateColorEnhancePtrInput` via:
//
//	        MediaVideoProcessTemplateColorEnhanceArgs{...}
//
//	or:
//
//	        nil
type MediaVideoProcessTemplateColorEnhancePtrInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateColorEnhancePtrOutput() MediaVideoProcessTemplateColorEnhancePtrOutput
	ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(context.Context) MediaVideoProcessTemplateColorEnhancePtrOutput
}

type mediaVideoProcessTemplateColorEnhancePtrType MediaVideoProcessTemplateColorEnhanceArgs

func MediaVideoProcessTemplateColorEnhancePtr(v *MediaVideoProcessTemplateColorEnhanceArgs) MediaVideoProcessTemplateColorEnhancePtrInput {
	return (*mediaVideoProcessTemplateColorEnhancePtrType)(v)
}

func (*mediaVideoProcessTemplateColorEnhancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoProcessTemplateColorEnhance)(nil)).Elem()
}

func (i *mediaVideoProcessTemplateColorEnhancePtrType) ToMediaVideoProcessTemplateColorEnhancePtrOutput() MediaVideoProcessTemplateColorEnhancePtrOutput {
	return i.ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(context.Background())
}

func (i *mediaVideoProcessTemplateColorEnhancePtrType) ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateColorEnhancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateColorEnhancePtrOutput)
}

type MediaVideoProcessTemplateColorEnhanceOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateColorEnhanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoProcessTemplateColorEnhance)(nil)).Elem()
}

func (o MediaVideoProcessTemplateColorEnhanceOutput) ToMediaVideoProcessTemplateColorEnhanceOutput() MediaVideoProcessTemplateColorEnhanceOutput {
	return o
}

func (o MediaVideoProcessTemplateColorEnhanceOutput) ToMediaVideoProcessTemplateColorEnhanceOutputWithContext(ctx context.Context) MediaVideoProcessTemplateColorEnhanceOutput {
	return o
}

func (o MediaVideoProcessTemplateColorEnhanceOutput) ToMediaVideoProcessTemplateColorEnhancePtrOutput() MediaVideoProcessTemplateColorEnhancePtrOutput {
	return o.ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(context.Background())
}

func (o MediaVideoProcessTemplateColorEnhanceOutput) ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateColorEnhancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVideoProcessTemplateColorEnhance) *MediaVideoProcessTemplateColorEnhance {
		return &v
	}).(MediaVideoProcessTemplateColorEnhancePtrOutput)
}

// Contrast, value range: [0, 100], empty string (indicates automatic analysis).
func (o MediaVideoProcessTemplateColorEnhanceOutput) Contrast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoProcessTemplateColorEnhance) *string { return v.Contrast }).(pulumi.StringPtrOutput)
}

// colorcorrection, value range: [0, 100], empty string (indicating automatic analysis).
func (o MediaVideoProcessTemplateColorEnhanceOutput) Correction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoProcessTemplateColorEnhance) *string { return v.Correction }).(pulumi.StringPtrOutput)
}

// Whether color enhancement is turned on.
func (o MediaVideoProcessTemplateColorEnhanceOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoProcessTemplateColorEnhance) *string { return v.Enable }).(pulumi.StringPtrOutput)
}

// Saturation, value range: [0, 100], empty string (indicating automatic analysis).
func (o MediaVideoProcessTemplateColorEnhanceOutput) Saturation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoProcessTemplateColorEnhance) *string { return v.Saturation }).(pulumi.StringPtrOutput)
}

type MediaVideoProcessTemplateColorEnhancePtrOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateColorEnhancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoProcessTemplateColorEnhance)(nil)).Elem()
}

func (o MediaVideoProcessTemplateColorEnhancePtrOutput) ToMediaVideoProcessTemplateColorEnhancePtrOutput() MediaVideoProcessTemplateColorEnhancePtrOutput {
	return o
}

func (o MediaVideoProcessTemplateColorEnhancePtrOutput) ToMediaVideoProcessTemplateColorEnhancePtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateColorEnhancePtrOutput {
	return o
}

func (o MediaVideoProcessTemplateColorEnhancePtrOutput) Elem() MediaVideoProcessTemplateColorEnhanceOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateColorEnhance) MediaVideoProcessTemplateColorEnhance {
		if v != nil {
			return *v
		}
		var ret MediaVideoProcessTemplateColorEnhance
		return ret
	}).(MediaVideoProcessTemplateColorEnhanceOutput)
}

// Contrast, value range: [0, 100], empty string (indicates automatic analysis).
func (o MediaVideoProcessTemplateColorEnhancePtrOutput) Contrast() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateColorEnhance) *string {
		if v == nil {
			return nil
		}
		return v.Contrast
	}).(pulumi.StringPtrOutput)
}

// colorcorrection, value range: [0, 100], empty string (indicating automatic analysis).
func (o MediaVideoProcessTemplateColorEnhancePtrOutput) Correction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateColorEnhance) *string {
		if v == nil {
			return nil
		}
		return v.Correction
	}).(pulumi.StringPtrOutput)
}

// Whether color enhancement is turned on.
func (o MediaVideoProcessTemplateColorEnhancePtrOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateColorEnhance) *string {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.StringPtrOutput)
}

// Saturation, value range: [0, 100], empty string (indicating automatic analysis).
func (o MediaVideoProcessTemplateColorEnhancePtrOutput) Saturation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateColorEnhance) *string {
		if v == nil {
			return nil
		}
		return v.Saturation
	}).(pulumi.StringPtrOutput)
}

type MediaVideoProcessTemplateMsSharpen struct {
	// Whether detail enhancement is enabled.
	Enable *string `pulumi:"enable"`
	// Enhancement level, value range: [0, 10], empty string (indicates automatic analysis).
	SharpenLevel *string `pulumi:"sharpenLevel"`
}

// MediaVideoProcessTemplateMsSharpenInput is an input type that accepts MediaVideoProcessTemplateMsSharpenArgs and MediaVideoProcessTemplateMsSharpenOutput values.
// You can construct a concrete instance of `MediaVideoProcessTemplateMsSharpenInput` via:
//
//	MediaVideoProcessTemplateMsSharpenArgs{...}
type MediaVideoProcessTemplateMsSharpenInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateMsSharpenOutput() MediaVideoProcessTemplateMsSharpenOutput
	ToMediaVideoProcessTemplateMsSharpenOutputWithContext(context.Context) MediaVideoProcessTemplateMsSharpenOutput
}

type MediaVideoProcessTemplateMsSharpenArgs struct {
	// Whether detail enhancement is enabled.
	Enable pulumi.StringPtrInput `pulumi:"enable"`
	// Enhancement level, value range: [0, 10], empty string (indicates automatic analysis).
	SharpenLevel pulumi.StringPtrInput `pulumi:"sharpenLevel"`
}

func (MediaVideoProcessTemplateMsSharpenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoProcessTemplateMsSharpen)(nil)).Elem()
}

func (i MediaVideoProcessTemplateMsSharpenArgs) ToMediaVideoProcessTemplateMsSharpenOutput() MediaVideoProcessTemplateMsSharpenOutput {
	return i.ToMediaVideoProcessTemplateMsSharpenOutputWithContext(context.Background())
}

func (i MediaVideoProcessTemplateMsSharpenArgs) ToMediaVideoProcessTemplateMsSharpenOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMsSharpenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateMsSharpenOutput)
}

func (i MediaVideoProcessTemplateMsSharpenArgs) ToMediaVideoProcessTemplateMsSharpenPtrOutput() MediaVideoProcessTemplateMsSharpenPtrOutput {
	return i.ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(context.Background())
}

func (i MediaVideoProcessTemplateMsSharpenArgs) ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMsSharpenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateMsSharpenOutput).ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(ctx)
}

// MediaVideoProcessTemplateMsSharpenPtrInput is an input type that accepts MediaVideoProcessTemplateMsSharpenArgs, MediaVideoProcessTemplateMsSharpenPtr and MediaVideoProcessTemplateMsSharpenPtrOutput values.
// You can construct a concrete instance of `MediaVideoProcessTemplateMsSharpenPtrInput` via:
//
//	        MediaVideoProcessTemplateMsSharpenArgs{...}
//
//	or:
//
//	        nil
type MediaVideoProcessTemplateMsSharpenPtrInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateMsSharpenPtrOutput() MediaVideoProcessTemplateMsSharpenPtrOutput
	ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(context.Context) MediaVideoProcessTemplateMsSharpenPtrOutput
}

type mediaVideoProcessTemplateMsSharpenPtrType MediaVideoProcessTemplateMsSharpenArgs

func MediaVideoProcessTemplateMsSharpenPtr(v *MediaVideoProcessTemplateMsSharpenArgs) MediaVideoProcessTemplateMsSharpenPtrInput {
	return (*mediaVideoProcessTemplateMsSharpenPtrType)(v)
}

func (*mediaVideoProcessTemplateMsSharpenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoProcessTemplateMsSharpen)(nil)).Elem()
}

func (i *mediaVideoProcessTemplateMsSharpenPtrType) ToMediaVideoProcessTemplateMsSharpenPtrOutput() MediaVideoProcessTemplateMsSharpenPtrOutput {
	return i.ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(context.Background())
}

func (i *mediaVideoProcessTemplateMsSharpenPtrType) ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMsSharpenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateMsSharpenPtrOutput)
}

type MediaVideoProcessTemplateMsSharpenOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateMsSharpenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVideoProcessTemplateMsSharpen)(nil)).Elem()
}

func (o MediaVideoProcessTemplateMsSharpenOutput) ToMediaVideoProcessTemplateMsSharpenOutput() MediaVideoProcessTemplateMsSharpenOutput {
	return o
}

func (o MediaVideoProcessTemplateMsSharpenOutput) ToMediaVideoProcessTemplateMsSharpenOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMsSharpenOutput {
	return o
}

func (o MediaVideoProcessTemplateMsSharpenOutput) ToMediaVideoProcessTemplateMsSharpenPtrOutput() MediaVideoProcessTemplateMsSharpenPtrOutput {
	return o.ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(context.Background())
}

func (o MediaVideoProcessTemplateMsSharpenOutput) ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMsSharpenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVideoProcessTemplateMsSharpen) *MediaVideoProcessTemplateMsSharpen {
		return &v
	}).(MediaVideoProcessTemplateMsSharpenPtrOutput)
}

// Whether detail enhancement is enabled.
func (o MediaVideoProcessTemplateMsSharpenOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoProcessTemplateMsSharpen) *string { return v.Enable }).(pulumi.StringPtrOutput)
}

// Enhancement level, value range: [0, 10], empty string (indicates automatic analysis).
func (o MediaVideoProcessTemplateMsSharpenOutput) SharpenLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVideoProcessTemplateMsSharpen) *string { return v.SharpenLevel }).(pulumi.StringPtrOutput)
}

type MediaVideoProcessTemplateMsSharpenPtrOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateMsSharpenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoProcessTemplateMsSharpen)(nil)).Elem()
}

func (o MediaVideoProcessTemplateMsSharpenPtrOutput) ToMediaVideoProcessTemplateMsSharpenPtrOutput() MediaVideoProcessTemplateMsSharpenPtrOutput {
	return o
}

func (o MediaVideoProcessTemplateMsSharpenPtrOutput) ToMediaVideoProcessTemplateMsSharpenPtrOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMsSharpenPtrOutput {
	return o
}

func (o MediaVideoProcessTemplateMsSharpenPtrOutput) Elem() MediaVideoProcessTemplateMsSharpenOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateMsSharpen) MediaVideoProcessTemplateMsSharpen {
		if v != nil {
			return *v
		}
		var ret MediaVideoProcessTemplateMsSharpen
		return ret
	}).(MediaVideoProcessTemplateMsSharpenOutput)
}

// Whether detail enhancement is enabled.
func (o MediaVideoProcessTemplateMsSharpenPtrOutput) Enable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateMsSharpen) *string {
		if v == nil {
			return nil
		}
		return v.Enable
	}).(pulumi.StringPtrOutput)
}

// Enhancement level, value range: [0, 10], empty string (indicates automatic analysis).
func (o MediaVideoProcessTemplateMsSharpenPtrOutput) SharpenLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplateMsSharpen) *string {
		if v == nil {
			return nil
		}
		return v.SharpenLevel
	}).(pulumi.StringPtrOutput)
}

type MediaVoiceSeparateTemplateAudioConfig struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate *string `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2- When Codec is set to amr, only 1 is supported.
	Channels *string `pulumi:"channels"`
	// Codec format, value aac, mp3, flac, amr.
	Codec string `pulumi:"codec"`
	// Sampling Rate- 1: Unit: Hz- 2: Optional 8000, 11025, 22050, 32000, 44100, 48000, 96000- 3: When Codec is set to aac/flac, 8000 is not supported- 4: When Codec is set to mp3, 8000 and 96000 are not supported- 5: When Codec is set to amr, only 8000 is supported.
	Samplerate *string `pulumi:"samplerate"`
}

// MediaVoiceSeparateTemplateAudioConfigInput is an input type that accepts MediaVoiceSeparateTemplateAudioConfigArgs and MediaVoiceSeparateTemplateAudioConfigOutput values.
// You can construct a concrete instance of `MediaVoiceSeparateTemplateAudioConfigInput` via:
//
//	MediaVoiceSeparateTemplateAudioConfigArgs{...}
type MediaVoiceSeparateTemplateAudioConfigInput interface {
	pulumi.Input

	ToMediaVoiceSeparateTemplateAudioConfigOutput() MediaVoiceSeparateTemplateAudioConfigOutput
	ToMediaVoiceSeparateTemplateAudioConfigOutputWithContext(context.Context) MediaVoiceSeparateTemplateAudioConfigOutput
}

type MediaVoiceSeparateTemplateAudioConfigArgs struct {
	// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
	Bitrate pulumi.StringPtrInput `pulumi:"bitrate"`
	// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2- When Codec is set to amr, only 1 is supported.
	Channels pulumi.StringPtrInput `pulumi:"channels"`
	// Codec format, value aac, mp3, flac, amr.
	Codec pulumi.StringInput `pulumi:"codec"`
	// Sampling Rate- 1: Unit: Hz- 2: Optional 8000, 11025, 22050, 32000, 44100, 48000, 96000- 3: When Codec is set to aac/flac, 8000 is not supported- 4: When Codec is set to mp3, 8000 and 96000 are not supported- 5: When Codec is set to amr, only 8000 is supported.
	Samplerate pulumi.StringPtrInput `pulumi:"samplerate"`
}

func (MediaVoiceSeparateTemplateAudioConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVoiceSeparateTemplateAudioConfig)(nil)).Elem()
}

func (i MediaVoiceSeparateTemplateAudioConfigArgs) ToMediaVoiceSeparateTemplateAudioConfigOutput() MediaVoiceSeparateTemplateAudioConfigOutput {
	return i.ToMediaVoiceSeparateTemplateAudioConfigOutputWithContext(context.Background())
}

func (i MediaVoiceSeparateTemplateAudioConfigArgs) ToMediaVoiceSeparateTemplateAudioConfigOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateAudioConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVoiceSeparateTemplateAudioConfigOutput)
}

func (i MediaVoiceSeparateTemplateAudioConfigArgs) ToMediaVoiceSeparateTemplateAudioConfigPtrOutput() MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return i.ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(context.Background())
}

func (i MediaVoiceSeparateTemplateAudioConfigArgs) ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVoiceSeparateTemplateAudioConfigOutput).ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(ctx)
}

// MediaVoiceSeparateTemplateAudioConfigPtrInput is an input type that accepts MediaVoiceSeparateTemplateAudioConfigArgs, MediaVoiceSeparateTemplateAudioConfigPtr and MediaVoiceSeparateTemplateAudioConfigPtrOutput values.
// You can construct a concrete instance of `MediaVoiceSeparateTemplateAudioConfigPtrInput` via:
//
//	        MediaVoiceSeparateTemplateAudioConfigArgs{...}
//
//	or:
//
//	        nil
type MediaVoiceSeparateTemplateAudioConfigPtrInput interface {
	pulumi.Input

	ToMediaVoiceSeparateTemplateAudioConfigPtrOutput() MediaVoiceSeparateTemplateAudioConfigPtrOutput
	ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(context.Context) MediaVoiceSeparateTemplateAudioConfigPtrOutput
}

type mediaVoiceSeparateTemplateAudioConfigPtrType MediaVoiceSeparateTemplateAudioConfigArgs

func MediaVoiceSeparateTemplateAudioConfigPtr(v *MediaVoiceSeparateTemplateAudioConfigArgs) MediaVoiceSeparateTemplateAudioConfigPtrInput {
	return (*mediaVoiceSeparateTemplateAudioConfigPtrType)(v)
}

func (*mediaVoiceSeparateTemplateAudioConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVoiceSeparateTemplateAudioConfig)(nil)).Elem()
}

func (i *mediaVoiceSeparateTemplateAudioConfigPtrType) ToMediaVoiceSeparateTemplateAudioConfigPtrOutput() MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return i.ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(context.Background())
}

func (i *mediaVoiceSeparateTemplateAudioConfigPtrType) ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVoiceSeparateTemplateAudioConfigPtrOutput)
}

type MediaVoiceSeparateTemplateAudioConfigOutput struct{ *pulumi.OutputState }

func (MediaVoiceSeparateTemplateAudioConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaVoiceSeparateTemplateAudioConfig)(nil)).Elem()
}

func (o MediaVoiceSeparateTemplateAudioConfigOutput) ToMediaVoiceSeparateTemplateAudioConfigOutput() MediaVoiceSeparateTemplateAudioConfigOutput {
	return o
}

func (o MediaVoiceSeparateTemplateAudioConfigOutput) ToMediaVoiceSeparateTemplateAudioConfigOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateAudioConfigOutput {
	return o
}

func (o MediaVoiceSeparateTemplateAudioConfigOutput) ToMediaVoiceSeparateTemplateAudioConfigPtrOutput() MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return o.ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(context.Background())
}

func (o MediaVoiceSeparateTemplateAudioConfigOutput) ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaVoiceSeparateTemplateAudioConfig) *MediaVoiceSeparateTemplateAudioConfig {
		return &v
	}).(MediaVoiceSeparateTemplateAudioConfigPtrOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaVoiceSeparateTemplateAudioConfigOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVoiceSeparateTemplateAudioConfig) *string { return v.Bitrate }).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2- When Codec is set to amr, only 1 is supported.
func (o MediaVoiceSeparateTemplateAudioConfigOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVoiceSeparateTemplateAudioConfig) *string { return v.Channels }).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3, flac, amr.
func (o MediaVoiceSeparateTemplateAudioConfigOutput) Codec() pulumi.StringOutput {
	return o.ApplyT(func(v MediaVoiceSeparateTemplateAudioConfig) string { return v.Codec }).(pulumi.StringOutput)
}

// Sampling Rate- 1: Unit: Hz- 2: Optional 8000, 11025, 22050, 32000, 44100, 48000, 96000- 3: When Codec is set to aac/flac, 8000 is not supported- 4: When Codec is set to mp3, 8000 and 96000 are not supported- 5: When Codec is set to amr, only 8000 is supported.
func (o MediaVoiceSeparateTemplateAudioConfigOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaVoiceSeparateTemplateAudioConfig) *string { return v.Samplerate }).(pulumi.StringPtrOutput)
}

type MediaVoiceSeparateTemplateAudioConfigPtrOutput struct{ *pulumi.OutputState }

func (MediaVoiceSeparateTemplateAudioConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVoiceSeparateTemplateAudioConfig)(nil)).Elem()
}

func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) ToMediaVoiceSeparateTemplateAudioConfigPtrOutput() MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return o
}

func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) ToMediaVoiceSeparateTemplateAudioConfigPtrOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateAudioConfigPtrOutput {
	return o
}

func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) Elem() MediaVoiceSeparateTemplateAudioConfigOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplateAudioConfig) MediaVoiceSeparateTemplateAudioConfig {
		if v != nil {
			return *v
		}
		var ret MediaVoiceSeparateTemplateAudioConfig
		return ret
	}).(MediaVoiceSeparateTemplateAudioConfigOutput)
}

// Original audio bit rate, unit: Kbps, Value range: [8, 1000].
func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) Bitrate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplateAudioConfig) *string {
		if v == nil {
			return nil
		}
		return v.Bitrate
	}).(pulumi.StringPtrOutput)
}

// number of channels- When Codec is set to aac/flac, support 1, 2, 4, 5, 6, 8- When Codec is set to mp3, support 1, 2- When Codec is set to amr, only 1 is supported.
func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) Channels() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplateAudioConfig) *string {
		if v == nil {
			return nil
		}
		return v.Channels
	}).(pulumi.StringPtrOutput)
}

// Codec format, value aac, mp3, flac, amr.
func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) Codec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplateAudioConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Codec
	}).(pulumi.StringPtrOutput)
}

// Sampling Rate- 1: Unit: Hz- 2: Optional 8000, 11025, 22050, 32000, 44100, 48000, 96000- 3: When Codec is set to aac/flac, 8000 is not supported- 4: When Codec is set to mp3, 8000 and 96000 are not supported- 5: When Codec is set to amr, only 8000 is supported.
func (o MediaVoiceSeparateTemplateAudioConfigPtrOutput) Samplerate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplateAudioConfig) *string {
		if v == nil {
			return nil
		}
		return v.Samplerate
	}).(pulumi.StringPtrOutput)
}

type MediaWatermarkTemplateWatermark struct {
	// Horizontal offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ], 2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Top, Bottom and Center, the parameter is invalid.
	Dx string `pulumi:"dx"`
	// Vertical offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ],2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096],3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Left, Right and Center, the parameter is invalid.
	Dy string `pulumi:"dy"`
	// Watermark end time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
	EndTime *string `pulumi:"endTime"`
	// Image watermark node.
	Image *MediaWatermarkTemplateWatermarkImage `pulumi:"image"`
	// Offset method, Relativity: proportional, Absolute: fixed position.
	LocMode string `pulumi:"locMode"`
	// Reference position, TopRight, TopLeft, BottomRight, BottomLeft, Left, Right, Top, Bottom, Center.
	Pos string `pulumi:"pos"`
	// Watermark start time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
	StartTime *string `pulumi:"startTime"`
	// Text Watermark Node.
	Text *MediaWatermarkTemplateWatermarkText `pulumi:"text"`
	// Watermark type, Text: text watermark, Image: image watermark.
	Type string `pulumi:"type"`
}

// MediaWatermarkTemplateWatermarkInput is an input type that accepts MediaWatermarkTemplateWatermarkArgs and MediaWatermarkTemplateWatermarkOutput values.
// You can construct a concrete instance of `MediaWatermarkTemplateWatermarkInput` via:
//
//	MediaWatermarkTemplateWatermarkArgs{...}
type MediaWatermarkTemplateWatermarkInput interface {
	pulumi.Input

	ToMediaWatermarkTemplateWatermarkOutput() MediaWatermarkTemplateWatermarkOutput
	ToMediaWatermarkTemplateWatermarkOutputWithContext(context.Context) MediaWatermarkTemplateWatermarkOutput
}

type MediaWatermarkTemplateWatermarkArgs struct {
	// Horizontal offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ], 2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Top, Bottom and Center, the parameter is invalid.
	Dx pulumi.StringInput `pulumi:"dx"`
	// Vertical offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ],2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096],3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Left, Right and Center, the parameter is invalid.
	Dy pulumi.StringInput `pulumi:"dy"`
	// Watermark end time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Image watermark node.
	Image MediaWatermarkTemplateWatermarkImagePtrInput `pulumi:"image"`
	// Offset method, Relativity: proportional, Absolute: fixed position.
	LocMode pulumi.StringInput `pulumi:"locMode"`
	// Reference position, TopRight, TopLeft, BottomRight, BottomLeft, Left, Right, Top, Bottom, Center.
	Pos pulumi.StringInput `pulumi:"pos"`
	// Watermark start time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Text Watermark Node.
	Text MediaWatermarkTemplateWatermarkTextPtrInput `pulumi:"text"`
	// Watermark type, Text: text watermark, Image: image watermark.
	Type pulumi.StringInput `pulumi:"type"`
}

func (MediaWatermarkTemplateWatermarkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaWatermarkTemplateWatermark)(nil)).Elem()
}

func (i MediaWatermarkTemplateWatermarkArgs) ToMediaWatermarkTemplateWatermarkOutput() MediaWatermarkTemplateWatermarkOutput {
	return i.ToMediaWatermarkTemplateWatermarkOutputWithContext(context.Background())
}

func (i MediaWatermarkTemplateWatermarkArgs) ToMediaWatermarkTemplateWatermarkOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkOutput)
}

func (i MediaWatermarkTemplateWatermarkArgs) ToMediaWatermarkTemplateWatermarkPtrOutput() MediaWatermarkTemplateWatermarkPtrOutput {
	return i.ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(context.Background())
}

func (i MediaWatermarkTemplateWatermarkArgs) ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkOutput).ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(ctx)
}

// MediaWatermarkTemplateWatermarkPtrInput is an input type that accepts MediaWatermarkTemplateWatermarkArgs, MediaWatermarkTemplateWatermarkPtr and MediaWatermarkTemplateWatermarkPtrOutput values.
// You can construct a concrete instance of `MediaWatermarkTemplateWatermarkPtrInput` via:
//
//	        MediaWatermarkTemplateWatermarkArgs{...}
//
//	or:
//
//	        nil
type MediaWatermarkTemplateWatermarkPtrInput interface {
	pulumi.Input

	ToMediaWatermarkTemplateWatermarkPtrOutput() MediaWatermarkTemplateWatermarkPtrOutput
	ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(context.Context) MediaWatermarkTemplateWatermarkPtrOutput
}

type mediaWatermarkTemplateWatermarkPtrType MediaWatermarkTemplateWatermarkArgs

func MediaWatermarkTemplateWatermarkPtr(v *MediaWatermarkTemplateWatermarkArgs) MediaWatermarkTemplateWatermarkPtrInput {
	return (*mediaWatermarkTemplateWatermarkPtrType)(v)
}

func (*mediaWatermarkTemplateWatermarkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaWatermarkTemplateWatermark)(nil)).Elem()
}

func (i *mediaWatermarkTemplateWatermarkPtrType) ToMediaWatermarkTemplateWatermarkPtrOutput() MediaWatermarkTemplateWatermarkPtrOutput {
	return i.ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(context.Background())
}

func (i *mediaWatermarkTemplateWatermarkPtrType) ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkPtrOutput)
}

type MediaWatermarkTemplateWatermarkOutput struct{ *pulumi.OutputState }

func (MediaWatermarkTemplateWatermarkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaWatermarkTemplateWatermark)(nil)).Elem()
}

func (o MediaWatermarkTemplateWatermarkOutput) ToMediaWatermarkTemplateWatermarkOutput() MediaWatermarkTemplateWatermarkOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkOutput) ToMediaWatermarkTemplateWatermarkOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkOutput) ToMediaWatermarkTemplateWatermarkPtrOutput() MediaWatermarkTemplateWatermarkPtrOutput {
	return o.ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(context.Background())
}

func (o MediaWatermarkTemplateWatermarkOutput) ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaWatermarkTemplateWatermark) *MediaWatermarkTemplateWatermark {
		return &v
	}).(MediaWatermarkTemplateWatermarkPtrOutput)
}

// Horizontal offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ], 2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Top, Bottom and Center, the parameter is invalid.
func (o MediaWatermarkTemplateWatermarkOutput) Dx() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) string { return v.Dx }).(pulumi.StringOutput)
}

// Vertical offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ],2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096],3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Left, Right and Center, the parameter is invalid.
func (o MediaWatermarkTemplateWatermarkOutput) Dy() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) string { return v.Dy }).(pulumi.StringOutput)
}

// Watermark end time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
func (o MediaWatermarkTemplateWatermarkOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Image watermark node.
func (o MediaWatermarkTemplateWatermarkOutput) Image() MediaWatermarkTemplateWatermarkImagePtrOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) *MediaWatermarkTemplateWatermarkImage { return v.Image }).(MediaWatermarkTemplateWatermarkImagePtrOutput)
}

// Offset method, Relativity: proportional, Absolute: fixed position.
func (o MediaWatermarkTemplateWatermarkOutput) LocMode() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) string { return v.LocMode }).(pulumi.StringOutput)
}

// Reference position, TopRight, TopLeft, BottomRight, BottomLeft, Left, Right, Top, Bottom, Center.
func (o MediaWatermarkTemplateWatermarkOutput) Pos() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) string { return v.Pos }).(pulumi.StringOutput)
}

// Watermark start time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
func (o MediaWatermarkTemplateWatermarkOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Text Watermark Node.
func (o MediaWatermarkTemplateWatermarkOutput) Text() MediaWatermarkTemplateWatermarkTextPtrOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) *MediaWatermarkTemplateWatermarkText { return v.Text }).(MediaWatermarkTemplateWatermarkTextPtrOutput)
}

// Watermark type, Text: text watermark, Image: image watermark.
func (o MediaWatermarkTemplateWatermarkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermark) string { return v.Type }).(pulumi.StringOutput)
}

type MediaWatermarkTemplateWatermarkPtrOutput struct{ *pulumi.OutputState }

func (MediaWatermarkTemplateWatermarkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaWatermarkTemplateWatermark)(nil)).Elem()
}

func (o MediaWatermarkTemplateWatermarkPtrOutput) ToMediaWatermarkTemplateWatermarkPtrOutput() MediaWatermarkTemplateWatermarkPtrOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkPtrOutput) ToMediaWatermarkTemplateWatermarkPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkPtrOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkPtrOutput) Elem() MediaWatermarkTemplateWatermarkOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) MediaWatermarkTemplateWatermark {
		if v != nil {
			return *v
		}
		var ret MediaWatermarkTemplateWatermark
		return ret
	}).(MediaWatermarkTemplateWatermarkOutput)
}

// Horizontal offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ], 2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Top, Bottom and Center, the parameter is invalid.
func (o MediaWatermarkTemplateWatermarkPtrOutput) Dx() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return &v.Dx
	}).(pulumi.StringPtrOutput)
}

// Vertical offset, 1: In the picture watermark, if Background is true, when locMode is Relativity, it is %, value range: [-300 0]; when locMode is Absolute, it is px, value range: [-4096 0] ],2: In the picture watermark, if Background is false, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096],3: In text watermark, when locMode is Relativity, it is %, value range: [0 100]; when locMode is Absolute, it is px, value range: [0 4096], 4: When Pos is Left, Right and Center, the parameter is invalid.
func (o MediaWatermarkTemplateWatermarkPtrOutput) Dy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return &v.Dy
	}).(pulumi.StringPtrOutput)
}

// Watermark end time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
func (o MediaWatermarkTemplateWatermarkPtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Image watermark node.
func (o MediaWatermarkTemplateWatermarkPtrOutput) Image() MediaWatermarkTemplateWatermarkImagePtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *MediaWatermarkTemplateWatermarkImage {
		if v == nil {
			return nil
		}
		return v.Image
	}).(MediaWatermarkTemplateWatermarkImagePtrOutput)
}

// Offset method, Relativity: proportional, Absolute: fixed position.
func (o MediaWatermarkTemplateWatermarkPtrOutput) LocMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return &v.LocMode
	}).(pulumi.StringPtrOutput)
}

// Reference position, TopRight, TopLeft, BottomRight, BottomLeft, Left, Right, Top, Bottom, Center.
func (o MediaWatermarkTemplateWatermarkPtrOutput) Pos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return &v.Pos
	}).(pulumi.StringPtrOutput)
}

// Watermark start time, 1: [0 video duration], 2: unit is second, 3: support float format, execution accuracy is accurate to milliseconds.
func (o MediaWatermarkTemplateWatermarkPtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Text Watermark Node.
func (o MediaWatermarkTemplateWatermarkPtrOutput) Text() MediaWatermarkTemplateWatermarkTextPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *MediaWatermarkTemplateWatermarkText {
		if v == nil {
			return nil
		}
		return v.Text
	}).(MediaWatermarkTemplateWatermarkTextPtrOutput)
}

// Watermark type, Text: text watermark, Image: image watermark.
func (o MediaWatermarkTemplateWatermarkPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermark) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type MediaWatermarkTemplateWatermarkImage struct {
	// Whether the background image.
	Background string `pulumi:"background"`
	// High, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
	Height *string `pulumi:"height"`
	// Size mode, Original: original size, Proportion: proportional, Fixed: fixed size.
	Mode string `pulumi:"mode"`
	// Transparency, value range: [1 100], unit %.
	Transparency string `pulumi:"transparency"`
	// Address of watermark map (pass in after Urlencode is required).
	Url string `pulumi:"url"`
	// Width, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
	Width *string `pulumi:"width"`
}

// MediaWatermarkTemplateWatermarkImageInput is an input type that accepts MediaWatermarkTemplateWatermarkImageArgs and MediaWatermarkTemplateWatermarkImageOutput values.
// You can construct a concrete instance of `MediaWatermarkTemplateWatermarkImageInput` via:
//
//	MediaWatermarkTemplateWatermarkImageArgs{...}
type MediaWatermarkTemplateWatermarkImageInput interface {
	pulumi.Input

	ToMediaWatermarkTemplateWatermarkImageOutput() MediaWatermarkTemplateWatermarkImageOutput
	ToMediaWatermarkTemplateWatermarkImageOutputWithContext(context.Context) MediaWatermarkTemplateWatermarkImageOutput
}

type MediaWatermarkTemplateWatermarkImageArgs struct {
	// Whether the background image.
	Background pulumi.StringInput `pulumi:"background"`
	// High, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
	Height pulumi.StringPtrInput `pulumi:"height"`
	// Size mode, Original: original size, Proportion: proportional, Fixed: fixed size.
	Mode pulumi.StringInput `pulumi:"mode"`
	// Transparency, value range: [1 100], unit %.
	Transparency pulumi.StringInput `pulumi:"transparency"`
	// Address of watermark map (pass in after Urlencode is required).
	Url pulumi.StringInput `pulumi:"url"`
	// Width, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
	Width pulumi.StringPtrInput `pulumi:"width"`
}

func (MediaWatermarkTemplateWatermarkImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaWatermarkTemplateWatermarkImage)(nil)).Elem()
}

func (i MediaWatermarkTemplateWatermarkImageArgs) ToMediaWatermarkTemplateWatermarkImageOutput() MediaWatermarkTemplateWatermarkImageOutput {
	return i.ToMediaWatermarkTemplateWatermarkImageOutputWithContext(context.Background())
}

func (i MediaWatermarkTemplateWatermarkImageArgs) ToMediaWatermarkTemplateWatermarkImageOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkImageOutput)
}

func (i MediaWatermarkTemplateWatermarkImageArgs) ToMediaWatermarkTemplateWatermarkImagePtrOutput() MediaWatermarkTemplateWatermarkImagePtrOutput {
	return i.ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(context.Background())
}

func (i MediaWatermarkTemplateWatermarkImageArgs) ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkImageOutput).ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(ctx)
}

// MediaWatermarkTemplateWatermarkImagePtrInput is an input type that accepts MediaWatermarkTemplateWatermarkImageArgs, MediaWatermarkTemplateWatermarkImagePtr and MediaWatermarkTemplateWatermarkImagePtrOutput values.
// You can construct a concrete instance of `MediaWatermarkTemplateWatermarkImagePtrInput` via:
//
//	        MediaWatermarkTemplateWatermarkImageArgs{...}
//
//	or:
//
//	        nil
type MediaWatermarkTemplateWatermarkImagePtrInput interface {
	pulumi.Input

	ToMediaWatermarkTemplateWatermarkImagePtrOutput() MediaWatermarkTemplateWatermarkImagePtrOutput
	ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(context.Context) MediaWatermarkTemplateWatermarkImagePtrOutput
}

type mediaWatermarkTemplateWatermarkImagePtrType MediaWatermarkTemplateWatermarkImageArgs

func MediaWatermarkTemplateWatermarkImagePtr(v *MediaWatermarkTemplateWatermarkImageArgs) MediaWatermarkTemplateWatermarkImagePtrInput {
	return (*mediaWatermarkTemplateWatermarkImagePtrType)(v)
}

func (*mediaWatermarkTemplateWatermarkImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaWatermarkTemplateWatermarkImage)(nil)).Elem()
}

func (i *mediaWatermarkTemplateWatermarkImagePtrType) ToMediaWatermarkTemplateWatermarkImagePtrOutput() MediaWatermarkTemplateWatermarkImagePtrOutput {
	return i.ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(context.Background())
}

func (i *mediaWatermarkTemplateWatermarkImagePtrType) ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkImagePtrOutput)
}

type MediaWatermarkTemplateWatermarkImageOutput struct{ *pulumi.OutputState }

func (MediaWatermarkTemplateWatermarkImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaWatermarkTemplateWatermarkImage)(nil)).Elem()
}

func (o MediaWatermarkTemplateWatermarkImageOutput) ToMediaWatermarkTemplateWatermarkImageOutput() MediaWatermarkTemplateWatermarkImageOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkImageOutput) ToMediaWatermarkTemplateWatermarkImageOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkImageOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkImageOutput) ToMediaWatermarkTemplateWatermarkImagePtrOutput() MediaWatermarkTemplateWatermarkImagePtrOutput {
	return o.ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(context.Background())
}

func (o MediaWatermarkTemplateWatermarkImageOutput) ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaWatermarkTemplateWatermarkImage) *MediaWatermarkTemplateWatermarkImage {
		return &v
	}).(MediaWatermarkTemplateWatermarkImagePtrOutput)
}

// Whether the background image.
func (o MediaWatermarkTemplateWatermarkImageOutput) Background() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkImage) string { return v.Background }).(pulumi.StringOutput)
}

// High, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
func (o MediaWatermarkTemplateWatermarkImageOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkImage) *string { return v.Height }).(pulumi.StringPtrOutput)
}

// Size mode, Original: original size, Proportion: proportional, Fixed: fixed size.
func (o MediaWatermarkTemplateWatermarkImageOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkImage) string { return v.Mode }).(pulumi.StringOutput)
}

// Transparency, value range: [1 100], unit %.
func (o MediaWatermarkTemplateWatermarkImageOutput) Transparency() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkImage) string { return v.Transparency }).(pulumi.StringOutput)
}

// Address of watermark map (pass in after Urlencode is required).
func (o MediaWatermarkTemplateWatermarkImageOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkImage) string { return v.Url }).(pulumi.StringOutput)
}

// Width, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
func (o MediaWatermarkTemplateWatermarkImageOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkImage) *string { return v.Width }).(pulumi.StringPtrOutput)
}

type MediaWatermarkTemplateWatermarkImagePtrOutput struct{ *pulumi.OutputState }

func (MediaWatermarkTemplateWatermarkImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaWatermarkTemplateWatermarkImage)(nil)).Elem()
}

func (o MediaWatermarkTemplateWatermarkImagePtrOutput) ToMediaWatermarkTemplateWatermarkImagePtrOutput() MediaWatermarkTemplateWatermarkImagePtrOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkImagePtrOutput) ToMediaWatermarkTemplateWatermarkImagePtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkImagePtrOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Elem() MediaWatermarkTemplateWatermarkImageOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) MediaWatermarkTemplateWatermarkImage {
		if v != nil {
			return *v
		}
		var ret MediaWatermarkTemplateWatermarkImage
		return ret
	}).(MediaWatermarkTemplateWatermarkImageOutput)
}

// Whether the background image.
func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Background() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) *string {
		if v == nil {
			return nil
		}
		return &v.Background
	}).(pulumi.StringPtrOutput)
}

// High, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Height() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) *string {
		if v == nil {
			return nil
		}
		return v.Height
	}).(pulumi.StringPtrOutput)
}

// Size mode, Original: original size, Proportion: proportional, Fixed: fixed size.
func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) *string {
		if v == nil {
			return nil
		}
		return &v.Mode
	}).(pulumi.StringPtrOutput)
}

// Transparency, value range: [1 100], unit %.
func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Transparency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) *string {
		if v == nil {
			return nil
		}
		return &v.Transparency
	}).(pulumi.StringPtrOutput)
}

// Address of watermark map (pass in after Urlencode is required).
func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

// Width, 1: When the Mode is Original, it does not support setting the width of the watermark image, 2: When the Mode is Proportion, the unit is %, the value range of the background image: [100 300]; the value range of the foreground image: [1 100], relative to Video width, up to 4096px, 3: When Mode is Fixed, the unit is px, value range: [8, 4096], 4: If only Width is set, Height is calculated according to the proportion of the watermark image.
func (o MediaWatermarkTemplateWatermarkImagePtrOutput) Width() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkImage) *string {
		if v == nil {
			return nil
		}
		return v.Width
	}).(pulumi.StringPtrOutput)
}

type MediaWatermarkTemplateWatermarkText struct {
	// Font color, format: 0xRRGGBB.
	FontColor string `pulumi:"fontColor"`
	// Font size, value range: [5 100], unit px.
	FontSize string `pulumi:"fontSize"`
	// font type.
	FontType string `pulumi:"fontType"`
	// Watermark content, the length does not exceed 64 characters, only supports Chinese, English, numbers, _, - and *.
	Text string `pulumi:"text"`
	// Transparency, value range: [1 100], unit %.
	Transparency string `pulumi:"transparency"`
}

// MediaWatermarkTemplateWatermarkTextInput is an input type that accepts MediaWatermarkTemplateWatermarkTextArgs and MediaWatermarkTemplateWatermarkTextOutput values.
// You can construct a concrete instance of `MediaWatermarkTemplateWatermarkTextInput` via:
//
//	MediaWatermarkTemplateWatermarkTextArgs{...}
type MediaWatermarkTemplateWatermarkTextInput interface {
	pulumi.Input

	ToMediaWatermarkTemplateWatermarkTextOutput() MediaWatermarkTemplateWatermarkTextOutput
	ToMediaWatermarkTemplateWatermarkTextOutputWithContext(context.Context) MediaWatermarkTemplateWatermarkTextOutput
}

type MediaWatermarkTemplateWatermarkTextArgs struct {
	// Font color, format: 0xRRGGBB.
	FontColor pulumi.StringInput `pulumi:"fontColor"`
	// Font size, value range: [5 100], unit px.
	FontSize pulumi.StringInput `pulumi:"fontSize"`
	// font type.
	FontType pulumi.StringInput `pulumi:"fontType"`
	// Watermark content, the length does not exceed 64 characters, only supports Chinese, English, numbers, _, - and *.
	Text pulumi.StringInput `pulumi:"text"`
	// Transparency, value range: [1 100], unit %.
	Transparency pulumi.StringInput `pulumi:"transparency"`
}

func (MediaWatermarkTemplateWatermarkTextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaWatermarkTemplateWatermarkText)(nil)).Elem()
}

func (i MediaWatermarkTemplateWatermarkTextArgs) ToMediaWatermarkTemplateWatermarkTextOutput() MediaWatermarkTemplateWatermarkTextOutput {
	return i.ToMediaWatermarkTemplateWatermarkTextOutputWithContext(context.Background())
}

func (i MediaWatermarkTemplateWatermarkTextArgs) ToMediaWatermarkTemplateWatermarkTextOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkTextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkTextOutput)
}

func (i MediaWatermarkTemplateWatermarkTextArgs) ToMediaWatermarkTemplateWatermarkTextPtrOutput() MediaWatermarkTemplateWatermarkTextPtrOutput {
	return i.ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(context.Background())
}

func (i MediaWatermarkTemplateWatermarkTextArgs) ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkTextOutput).ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(ctx)
}

// MediaWatermarkTemplateWatermarkTextPtrInput is an input type that accepts MediaWatermarkTemplateWatermarkTextArgs, MediaWatermarkTemplateWatermarkTextPtr and MediaWatermarkTemplateWatermarkTextPtrOutput values.
// You can construct a concrete instance of `MediaWatermarkTemplateWatermarkTextPtrInput` via:
//
//	        MediaWatermarkTemplateWatermarkTextArgs{...}
//
//	or:
//
//	        nil
type MediaWatermarkTemplateWatermarkTextPtrInput interface {
	pulumi.Input

	ToMediaWatermarkTemplateWatermarkTextPtrOutput() MediaWatermarkTemplateWatermarkTextPtrOutput
	ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(context.Context) MediaWatermarkTemplateWatermarkTextPtrOutput
}

type mediaWatermarkTemplateWatermarkTextPtrType MediaWatermarkTemplateWatermarkTextArgs

func MediaWatermarkTemplateWatermarkTextPtr(v *MediaWatermarkTemplateWatermarkTextArgs) MediaWatermarkTemplateWatermarkTextPtrInput {
	return (*mediaWatermarkTemplateWatermarkTextPtrType)(v)
}

func (*mediaWatermarkTemplateWatermarkTextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaWatermarkTemplateWatermarkText)(nil)).Elem()
}

func (i *mediaWatermarkTemplateWatermarkTextPtrType) ToMediaWatermarkTemplateWatermarkTextPtrOutput() MediaWatermarkTemplateWatermarkTextPtrOutput {
	return i.ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(context.Background())
}

func (i *mediaWatermarkTemplateWatermarkTextPtrType) ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkTextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaWatermarkTemplateWatermarkTextPtrOutput)
}

type MediaWatermarkTemplateWatermarkTextOutput struct{ *pulumi.OutputState }

func (MediaWatermarkTemplateWatermarkTextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MediaWatermarkTemplateWatermarkText)(nil)).Elem()
}

func (o MediaWatermarkTemplateWatermarkTextOutput) ToMediaWatermarkTemplateWatermarkTextOutput() MediaWatermarkTemplateWatermarkTextOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkTextOutput) ToMediaWatermarkTemplateWatermarkTextOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkTextOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkTextOutput) ToMediaWatermarkTemplateWatermarkTextPtrOutput() MediaWatermarkTemplateWatermarkTextPtrOutput {
	return o.ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(context.Background())
}

func (o MediaWatermarkTemplateWatermarkTextOutput) ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkTextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MediaWatermarkTemplateWatermarkText) *MediaWatermarkTemplateWatermarkText {
		return &v
	}).(MediaWatermarkTemplateWatermarkTextPtrOutput)
}

// Font color, format: 0xRRGGBB.
func (o MediaWatermarkTemplateWatermarkTextOutput) FontColor() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkText) string { return v.FontColor }).(pulumi.StringOutput)
}

// Font size, value range: [5 100], unit px.
func (o MediaWatermarkTemplateWatermarkTextOutput) FontSize() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkText) string { return v.FontSize }).(pulumi.StringOutput)
}

// font type.
func (o MediaWatermarkTemplateWatermarkTextOutput) FontType() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkText) string { return v.FontType }).(pulumi.StringOutput)
}

// Watermark content, the length does not exceed 64 characters, only supports Chinese, English, numbers, _, - and *.
func (o MediaWatermarkTemplateWatermarkTextOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkText) string { return v.Text }).(pulumi.StringOutput)
}

// Transparency, value range: [1 100], unit %.
func (o MediaWatermarkTemplateWatermarkTextOutput) Transparency() pulumi.StringOutput {
	return o.ApplyT(func(v MediaWatermarkTemplateWatermarkText) string { return v.Transparency }).(pulumi.StringOutput)
}

type MediaWatermarkTemplateWatermarkTextPtrOutput struct{ *pulumi.OutputState }

func (MediaWatermarkTemplateWatermarkTextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaWatermarkTemplateWatermarkText)(nil)).Elem()
}

func (o MediaWatermarkTemplateWatermarkTextPtrOutput) ToMediaWatermarkTemplateWatermarkTextPtrOutput() MediaWatermarkTemplateWatermarkTextPtrOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkTextPtrOutput) ToMediaWatermarkTemplateWatermarkTextPtrOutputWithContext(ctx context.Context) MediaWatermarkTemplateWatermarkTextPtrOutput {
	return o
}

func (o MediaWatermarkTemplateWatermarkTextPtrOutput) Elem() MediaWatermarkTemplateWatermarkTextOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkText) MediaWatermarkTemplateWatermarkText {
		if v != nil {
			return *v
		}
		var ret MediaWatermarkTemplateWatermarkText
		return ret
	}).(MediaWatermarkTemplateWatermarkTextOutput)
}

// Font color, format: 0xRRGGBB.
func (o MediaWatermarkTemplateWatermarkTextPtrOutput) FontColor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkText) *string {
		if v == nil {
			return nil
		}
		return &v.FontColor
	}).(pulumi.StringPtrOutput)
}

// Font size, value range: [5 100], unit px.
func (o MediaWatermarkTemplateWatermarkTextPtrOutput) FontSize() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkText) *string {
		if v == nil {
			return nil
		}
		return &v.FontSize
	}).(pulumi.StringPtrOutput)
}

// font type.
func (o MediaWatermarkTemplateWatermarkTextPtrOutput) FontType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkText) *string {
		if v == nil {
			return nil
		}
		return &v.FontType
	}).(pulumi.StringPtrOutput)
}

// Watermark content, the length does not exceed 64 characters, only supports Chinese, English, numbers, _, - and *.
func (o MediaWatermarkTemplateWatermarkTextPtrOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkText) *string {
		if v == nil {
			return nil
		}
		return &v.Text
	}).(pulumi.StringPtrOutput)
}

// Transparency, value range: [1 100], unit %.
func (o MediaWatermarkTemplateWatermarkTextPtrOutput) Transparency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaWatermarkTemplateWatermarkText) *string {
		if v == nil {
			return nil
		}
		return &v.Transparency
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateContainerInput)(nil)).Elem(), MediaAnimationTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateContainerPtrInput)(nil)).Elem(), MediaAnimationTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateTimeIntervalInput)(nil)).Elem(), MediaAnimationTemplateTimeIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateTimeIntervalPtrInput)(nil)).Elem(), MediaAnimationTemplateTimeIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateVideoInput)(nil)).Elem(), MediaAnimationTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateVideoPtrInput)(nil)).Elem(), MediaAnimationTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplatePtrInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioPtrInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMixInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateAudioMixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMixArrayInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateAudioMixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMixEffectConfigInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateAudioMixEffectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateConcatFragmentInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateConcatFragmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateConcatFragmentArrayInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateConcatFragmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateContainerInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateContainerPtrInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateVideoInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaConcatTemplateConcatTemplateVideoPtrInput)(nil)).Elem(), MediaConcatTemplateConcatTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaPicProcessTemplatePicProcessInput)(nil)).Elem(), MediaPicProcessTemplatePicProcessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaPicProcessTemplatePicProcessPtrInput)(nil)).Elem(), MediaPicProcessTemplatePicProcessArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSmartCoverTemplateSmartCoverInput)(nil)).Elem(), MediaSmartCoverTemplateSmartCoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSmartCoverTemplateSmartCoverPtrInput)(nil)).Elem(), MediaSmartCoverTemplateSmartCoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSnapshotTemplateSnapshotInput)(nil)).Elem(), MediaSnapshotTemplateSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSnapshotTemplateSnapshotPtrInput)(nil)).Elem(), MediaSnapshotTemplateSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSnapshotTemplateSnapshotSpriteSnapshotConfigInput)(nil)).Elem(), MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrInput)(nil)).Elem(), MediaSnapshotTemplateSnapshotSpriteSnapshotConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSpeechRecognitionTemplateSpeechRecognitionInput)(nil)).Elem(), MediaSpeechRecognitionTemplateSpeechRecognitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSpeechRecognitionTemplateSpeechRecognitionPtrInput)(nil)).Elem(), MediaSpeechRecognitionTemplateSpeechRecognitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateAudioInput)(nil)).Elem(), MediaTranscodeProTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateAudioPtrInput)(nil)).Elem(), MediaTranscodeProTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateContainerInput)(nil)).Elem(), MediaTranscodeProTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateContainerPtrInput)(nil)).Elem(), MediaTranscodeProTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateContainerClipConfigInput)(nil)).Elem(), MediaTranscodeProTemplateContainerClipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateContainerClipConfigPtrInput)(nil)).Elem(), MediaTranscodeProTemplateContainerClipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateTimeIntervalInput)(nil)).Elem(), MediaTranscodeProTemplateTimeIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateTimeIntervalPtrInput)(nil)).Elem(), MediaTranscodeProTemplateTimeIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateTransConfigInput)(nil)).Elem(), MediaTranscodeProTemplateTransConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateTransConfigPtrInput)(nil)).Elem(), MediaTranscodeProTemplateTransConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateVideoInput)(nil)).Elem(), MediaTranscodeProTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateVideoPtrInput)(nil)).Elem(), MediaTranscodeProTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateAudioInput)(nil)).Elem(), MediaTranscodeTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateAudioPtrInput)(nil)).Elem(), MediaTranscodeTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateAudioMixInput)(nil)).Elem(), MediaTranscodeTemplateAudioMixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateAudioMixArrayInput)(nil)).Elem(), MediaTranscodeTemplateAudioMixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateAudioMixEffectConfigInput)(nil)).Elem(), MediaTranscodeTemplateAudioMixEffectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateAudioMixEffectConfigPtrInput)(nil)).Elem(), MediaTranscodeTemplateAudioMixEffectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateContainerInput)(nil)).Elem(), MediaTranscodeTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateContainerPtrInput)(nil)).Elem(), MediaTranscodeTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateContainerClipConfigInput)(nil)).Elem(), MediaTranscodeTemplateContainerClipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateContainerClipConfigPtrInput)(nil)).Elem(), MediaTranscodeTemplateContainerClipConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateTimeIntervalInput)(nil)).Elem(), MediaTranscodeTemplateTimeIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateTimeIntervalPtrInput)(nil)).Elem(), MediaTranscodeTemplateTimeIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateTransConfigInput)(nil)).Elem(), MediaTranscodeTemplateTransConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateTransConfigPtrInput)(nil)).Elem(), MediaTranscodeTemplateTransConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateTransConfigHlsEncryptInput)(nil)).Elem(), MediaTranscodeTemplateTransConfigHlsEncryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateTransConfigHlsEncryptPtrInput)(nil)).Elem(), MediaTranscodeTemplateTransConfigHlsEncryptArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateVideoInput)(nil)).Elem(), MediaTranscodeTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeTemplateVideoPtrInput)(nil)).Elem(), MediaTranscodeTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateAudioInput)(nil)).Elem(), MediaVideoMontageTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateAudioPtrInput)(nil)).Elem(), MediaVideoMontageTemplateAudioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateAudioMixInput)(nil)).Elem(), MediaVideoMontageTemplateAudioMixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateAudioMixArrayInput)(nil)).Elem(), MediaVideoMontageTemplateAudioMixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateAudioMixEffectConfigInput)(nil)).Elem(), MediaVideoMontageTemplateAudioMixEffectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateAudioMixEffectConfigPtrInput)(nil)).Elem(), MediaVideoMontageTemplateAudioMixEffectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateContainerInput)(nil)).Elem(), MediaVideoMontageTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateContainerPtrInput)(nil)).Elem(), MediaVideoMontageTemplateContainerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateVideoInput)(nil)).Elem(), MediaVideoMontageTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoMontageTemplateVideoPtrInput)(nil)).Elem(), MediaVideoMontageTemplateVideoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateColorEnhanceInput)(nil)).Elem(), MediaVideoProcessTemplateColorEnhanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateColorEnhancePtrInput)(nil)).Elem(), MediaVideoProcessTemplateColorEnhanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateMsSharpenInput)(nil)).Elem(), MediaVideoProcessTemplateMsSharpenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateMsSharpenPtrInput)(nil)).Elem(), MediaVideoProcessTemplateMsSharpenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVoiceSeparateTemplateAudioConfigInput)(nil)).Elem(), MediaVoiceSeparateTemplateAudioConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVoiceSeparateTemplateAudioConfigPtrInput)(nil)).Elem(), MediaVoiceSeparateTemplateAudioConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaWatermarkTemplateWatermarkInput)(nil)).Elem(), MediaWatermarkTemplateWatermarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaWatermarkTemplateWatermarkPtrInput)(nil)).Elem(), MediaWatermarkTemplateWatermarkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaWatermarkTemplateWatermarkImageInput)(nil)).Elem(), MediaWatermarkTemplateWatermarkImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaWatermarkTemplateWatermarkImagePtrInput)(nil)).Elem(), MediaWatermarkTemplateWatermarkImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaWatermarkTemplateWatermarkTextInput)(nil)).Elem(), MediaWatermarkTemplateWatermarkTextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaWatermarkTemplateWatermarkTextPtrInput)(nil)).Elem(), MediaWatermarkTemplateWatermarkTextArgs{})
	pulumi.RegisterOutputType(MediaAnimationTemplateContainerOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateContainerPtrOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateTimeIntervalOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateTimeIntervalPtrOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateVideoOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateVideoPtrOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplatePtrOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateAudioOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateAudioPtrOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateAudioMixOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateAudioMixArrayOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateAudioMixEffectConfigOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateAudioMixEffectConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateConcatFragmentOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateConcatFragmentArrayOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateContainerOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateContainerPtrOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateVideoOutput{})
	pulumi.RegisterOutputType(MediaConcatTemplateConcatTemplateVideoPtrOutput{})
	pulumi.RegisterOutputType(MediaPicProcessTemplatePicProcessOutput{})
	pulumi.RegisterOutputType(MediaPicProcessTemplatePicProcessPtrOutput{})
	pulumi.RegisterOutputType(MediaSmartCoverTemplateSmartCoverOutput{})
	pulumi.RegisterOutputType(MediaSmartCoverTemplateSmartCoverPtrOutput{})
	pulumi.RegisterOutputType(MediaSnapshotTemplateSnapshotOutput{})
	pulumi.RegisterOutputType(MediaSnapshotTemplateSnapshotPtrOutput{})
	pulumi.RegisterOutputType(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigOutput{})
	pulumi.RegisterOutputType(MediaSnapshotTemplateSnapshotSpriteSnapshotConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaSpeechRecognitionTemplateSpeechRecognitionOutput{})
	pulumi.RegisterOutputType(MediaSpeechRecognitionTemplateSpeechRecognitionPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateAudioOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateAudioPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateContainerOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateContainerPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateContainerClipConfigOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateContainerClipConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateTimeIntervalOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateTimeIntervalPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateTransConfigOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateTransConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateVideoOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateVideoPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateAudioOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateAudioPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateAudioMixOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateAudioMixArrayOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateAudioMixEffectConfigOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateAudioMixEffectConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateContainerOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateContainerPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateContainerClipConfigOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateContainerClipConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateTimeIntervalOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateTimeIntervalPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateTransConfigOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateTransConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateTransConfigHlsEncryptOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateTransConfigHlsEncryptPtrOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateVideoOutput{})
	pulumi.RegisterOutputType(MediaTranscodeTemplateVideoPtrOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateAudioOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateAudioPtrOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateAudioMixOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateAudioMixArrayOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateAudioMixEffectConfigOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateAudioMixEffectConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateContainerOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateContainerPtrOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateVideoOutput{})
	pulumi.RegisterOutputType(MediaVideoMontageTemplateVideoPtrOutput{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateColorEnhanceOutput{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateColorEnhancePtrOutput{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateMsSharpenOutput{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateMsSharpenPtrOutput{})
	pulumi.RegisterOutputType(MediaVoiceSeparateTemplateAudioConfigOutput{})
	pulumi.RegisterOutputType(MediaVoiceSeparateTemplateAudioConfigPtrOutput{})
	pulumi.RegisterOutputType(MediaWatermarkTemplateWatermarkOutput{})
	pulumi.RegisterOutputType(MediaWatermarkTemplateWatermarkPtrOutput{})
	pulumi.RegisterOutputType(MediaWatermarkTemplateWatermarkImageOutput{})
	pulumi.RegisterOutputType(MediaWatermarkTemplateWatermarkImagePtrOutput{})
	pulumi.RegisterOutputType(MediaWatermarkTemplateWatermarkTextOutput{})
	pulumi.RegisterOutputType(MediaWatermarkTemplateWatermarkTextPtrOutput{})
}
