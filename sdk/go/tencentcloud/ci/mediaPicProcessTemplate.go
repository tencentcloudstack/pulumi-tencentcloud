// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaPicProcessTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaPicProcessTemplate(ctx, "mediaPicProcessTemplate", &Ci.MediaPicProcessTemplateArgs{
//				Bucket: pulumi.String("terraform-ci-xxxxxx"),
//				PicProcess: &ci.MediaPicProcessTemplatePicProcessArgs{
//					IsPicInfo:   pulumi.String("true"),
//					ProcessRule: pulumi.String("imageMogr2/rotate/90"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_pic_process_template can be imported using the bucket#templateId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate media_pic_process_template terraform-ci-xxxxx#t184a8a26da4674c80bf260c1e34131a65
//
// ```
type MediaPicProcessTemplate struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// container format.
	PicProcess MediaPicProcessTemplatePicProcessPtrOutput `pulumi:"picProcess"`
}

// NewMediaPicProcessTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaPicProcessTemplate(ctx *pulumi.Context,
	name string, args *MediaPicProcessTemplateArgs, opts ...pulumi.ResourceOption) (*MediaPicProcessTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaPicProcessTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaPicProcessTemplate gets an existing MediaPicProcessTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaPicProcessTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaPicProcessTemplateState, opts ...pulumi.ResourceOption) (*MediaPicProcessTemplate, error) {
	var resource MediaPicProcessTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaPicProcessTemplate:MediaPicProcessTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaPicProcessTemplate resources.
type mediaPicProcessTemplateState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// container format.
	PicProcess *MediaPicProcessTemplatePicProcess `pulumi:"picProcess"`
}

type MediaPicProcessTemplateState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// container format.
	PicProcess MediaPicProcessTemplatePicProcessPtrInput
}

func (MediaPicProcessTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaPicProcessTemplateState)(nil)).Elem()
}

type mediaPicProcessTemplateArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// container format.
	PicProcess *MediaPicProcessTemplatePicProcess `pulumi:"picProcess"`
}

// The set of arguments for constructing a MediaPicProcessTemplate resource.
type MediaPicProcessTemplateArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// container format.
	PicProcess MediaPicProcessTemplatePicProcessPtrInput
}

func (MediaPicProcessTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaPicProcessTemplateArgs)(nil)).Elem()
}

type MediaPicProcessTemplateInput interface {
	pulumi.Input

	ToMediaPicProcessTemplateOutput() MediaPicProcessTemplateOutput
	ToMediaPicProcessTemplateOutputWithContext(ctx context.Context) MediaPicProcessTemplateOutput
}

func (*MediaPicProcessTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaPicProcessTemplate)(nil)).Elem()
}

func (i *MediaPicProcessTemplate) ToMediaPicProcessTemplateOutput() MediaPicProcessTemplateOutput {
	return i.ToMediaPicProcessTemplateOutputWithContext(context.Background())
}

func (i *MediaPicProcessTemplate) ToMediaPicProcessTemplateOutputWithContext(ctx context.Context) MediaPicProcessTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaPicProcessTemplateOutput)
}

// MediaPicProcessTemplateArrayInput is an input type that accepts MediaPicProcessTemplateArray and MediaPicProcessTemplateArrayOutput values.
// You can construct a concrete instance of `MediaPicProcessTemplateArrayInput` via:
//
//	MediaPicProcessTemplateArray{ MediaPicProcessTemplateArgs{...} }
type MediaPicProcessTemplateArrayInput interface {
	pulumi.Input

	ToMediaPicProcessTemplateArrayOutput() MediaPicProcessTemplateArrayOutput
	ToMediaPicProcessTemplateArrayOutputWithContext(context.Context) MediaPicProcessTemplateArrayOutput
}

type MediaPicProcessTemplateArray []MediaPicProcessTemplateInput

func (MediaPicProcessTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaPicProcessTemplate)(nil)).Elem()
}

func (i MediaPicProcessTemplateArray) ToMediaPicProcessTemplateArrayOutput() MediaPicProcessTemplateArrayOutput {
	return i.ToMediaPicProcessTemplateArrayOutputWithContext(context.Background())
}

func (i MediaPicProcessTemplateArray) ToMediaPicProcessTemplateArrayOutputWithContext(ctx context.Context) MediaPicProcessTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaPicProcessTemplateArrayOutput)
}

// MediaPicProcessTemplateMapInput is an input type that accepts MediaPicProcessTemplateMap and MediaPicProcessTemplateMapOutput values.
// You can construct a concrete instance of `MediaPicProcessTemplateMapInput` via:
//
//	MediaPicProcessTemplateMap{ "key": MediaPicProcessTemplateArgs{...} }
type MediaPicProcessTemplateMapInput interface {
	pulumi.Input

	ToMediaPicProcessTemplateMapOutput() MediaPicProcessTemplateMapOutput
	ToMediaPicProcessTemplateMapOutputWithContext(context.Context) MediaPicProcessTemplateMapOutput
}

type MediaPicProcessTemplateMap map[string]MediaPicProcessTemplateInput

func (MediaPicProcessTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaPicProcessTemplate)(nil)).Elem()
}

func (i MediaPicProcessTemplateMap) ToMediaPicProcessTemplateMapOutput() MediaPicProcessTemplateMapOutput {
	return i.ToMediaPicProcessTemplateMapOutputWithContext(context.Background())
}

func (i MediaPicProcessTemplateMap) ToMediaPicProcessTemplateMapOutputWithContext(ctx context.Context) MediaPicProcessTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaPicProcessTemplateMapOutput)
}

type MediaPicProcessTemplateOutput struct{ *pulumi.OutputState }

func (MediaPicProcessTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaPicProcessTemplate)(nil)).Elem()
}

func (o MediaPicProcessTemplateOutput) ToMediaPicProcessTemplateOutput() MediaPicProcessTemplateOutput {
	return o
}

func (o MediaPicProcessTemplateOutput) ToMediaPicProcessTemplateOutputWithContext(ctx context.Context) MediaPicProcessTemplateOutput {
	return o
}

// bucket name.
func (o MediaPicProcessTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaPicProcessTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaPicProcessTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaPicProcessTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// container format.
func (o MediaPicProcessTemplateOutput) PicProcess() MediaPicProcessTemplatePicProcessPtrOutput {
	return o.ApplyT(func(v *MediaPicProcessTemplate) MediaPicProcessTemplatePicProcessPtrOutput { return v.PicProcess }).(MediaPicProcessTemplatePicProcessPtrOutput)
}

type MediaPicProcessTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaPicProcessTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaPicProcessTemplate)(nil)).Elem()
}

func (o MediaPicProcessTemplateArrayOutput) ToMediaPicProcessTemplateArrayOutput() MediaPicProcessTemplateArrayOutput {
	return o
}

func (o MediaPicProcessTemplateArrayOutput) ToMediaPicProcessTemplateArrayOutputWithContext(ctx context.Context) MediaPicProcessTemplateArrayOutput {
	return o
}

func (o MediaPicProcessTemplateArrayOutput) Index(i pulumi.IntInput) MediaPicProcessTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaPicProcessTemplate {
		return vs[0].([]*MediaPicProcessTemplate)[vs[1].(int)]
	}).(MediaPicProcessTemplateOutput)
}

type MediaPicProcessTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaPicProcessTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaPicProcessTemplate)(nil)).Elem()
}

func (o MediaPicProcessTemplateMapOutput) ToMediaPicProcessTemplateMapOutput() MediaPicProcessTemplateMapOutput {
	return o
}

func (o MediaPicProcessTemplateMapOutput) ToMediaPicProcessTemplateMapOutputWithContext(ctx context.Context) MediaPicProcessTemplateMapOutput {
	return o
}

func (o MediaPicProcessTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaPicProcessTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaPicProcessTemplate {
		return vs[0].(map[string]*MediaPicProcessTemplate)[vs[1].(string)]
	}).(MediaPicProcessTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaPicProcessTemplateInput)(nil)).Elem(), &MediaPicProcessTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaPicProcessTemplateArrayInput)(nil)).Elem(), MediaPicProcessTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaPicProcessTemplateMapInput)(nil)).Elem(), MediaPicProcessTemplateMap{})
	pulumi.RegisterOutputType(MediaPicProcessTemplateOutput{})
	pulumi.RegisterOutputType(MediaPicProcessTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaPicProcessTemplateMapOutput{})
}
