// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaVoiceSeparateTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaVoiceSeparateTemplate(ctx, "mediaVoiceSeparateTemplate", &Ci.MediaVoiceSeparateTemplateArgs{
//				AudioConfig: &ci.MediaVoiceSeparateTemplateAudioConfigArgs{
//					Bitrate:    pulumi.String("128"),
//					Channels:   pulumi.String("4"),
//					Codec:      pulumi.String("aac"),
//					Samplerate: pulumi.String("44100"),
//				},
//				AudioMode: pulumi.String("IsAudio"),
//				Bucket:    pulumi.String("terraform-ci-xxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_voice_separate_template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate media_voice_separate_template terraform-ci-xxxxxx#t1c95566664530460d9bc2b6265feb7c32
//
// ```
type MediaVoiceSeparateTemplate struct {
	pulumi.CustomResourceState

	// audio configuration.
	AudioConfig MediaVoiceSeparateTemplateAudioConfigOutput `pulumi:"audioConfig"`
	// Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
	AudioMode pulumi.StringOutput `pulumi:"audioMode"`
	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMediaVoiceSeparateTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaVoiceSeparateTemplate(ctx *pulumi.Context,
	name string, args *MediaVoiceSeparateTemplateArgs, opts ...pulumi.ResourceOption) (*MediaVoiceSeparateTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AudioConfig == nil {
		return nil, errors.New("invalid value for required argument 'AudioConfig'")
	}
	if args.AudioMode == nil {
		return nil, errors.New("invalid value for required argument 'AudioMode'")
	}
	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaVoiceSeparateTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaVoiceSeparateTemplate gets an existing MediaVoiceSeparateTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaVoiceSeparateTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaVoiceSeparateTemplateState, opts ...pulumi.ResourceOption) (*MediaVoiceSeparateTemplate, error) {
	var resource MediaVoiceSeparateTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaVoiceSeparateTemplate:MediaVoiceSeparateTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaVoiceSeparateTemplate resources.
type mediaVoiceSeparateTemplateState struct {
	// audio configuration.
	AudioConfig *MediaVoiceSeparateTemplateAudioConfig `pulumi:"audioConfig"`
	// Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
	AudioMode *string `pulumi:"audioMode"`
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
}

type MediaVoiceSeparateTemplateState struct {
	// audio configuration.
	AudioConfig MediaVoiceSeparateTemplateAudioConfigPtrInput
	// Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
	AudioMode pulumi.StringPtrInput
	// bucket name.
	Bucket pulumi.StringPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
}

func (MediaVoiceSeparateTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaVoiceSeparateTemplateState)(nil)).Elem()
}

type mediaVoiceSeparateTemplateArgs struct {
	// audio configuration.
	AudioConfig MediaVoiceSeparateTemplateAudioConfig `pulumi:"audioConfig"`
	// Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
	AudioMode string `pulumi:"audioMode"`
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MediaVoiceSeparateTemplate resource.
type MediaVoiceSeparateTemplateArgs struct {
	// audio configuration.
	AudioConfig MediaVoiceSeparateTemplateAudioConfigInput
	// Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
	AudioMode pulumi.StringInput
	// bucket name.
	Bucket pulumi.StringInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
}

func (MediaVoiceSeparateTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaVoiceSeparateTemplateArgs)(nil)).Elem()
}

type MediaVoiceSeparateTemplateInput interface {
	pulumi.Input

	ToMediaVoiceSeparateTemplateOutput() MediaVoiceSeparateTemplateOutput
	ToMediaVoiceSeparateTemplateOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateOutput
}

func (*MediaVoiceSeparateTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVoiceSeparateTemplate)(nil)).Elem()
}

func (i *MediaVoiceSeparateTemplate) ToMediaVoiceSeparateTemplateOutput() MediaVoiceSeparateTemplateOutput {
	return i.ToMediaVoiceSeparateTemplateOutputWithContext(context.Background())
}

func (i *MediaVoiceSeparateTemplate) ToMediaVoiceSeparateTemplateOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVoiceSeparateTemplateOutput)
}

// MediaVoiceSeparateTemplateArrayInput is an input type that accepts MediaVoiceSeparateTemplateArray and MediaVoiceSeparateTemplateArrayOutput values.
// You can construct a concrete instance of `MediaVoiceSeparateTemplateArrayInput` via:
//
//	MediaVoiceSeparateTemplateArray{ MediaVoiceSeparateTemplateArgs{...} }
type MediaVoiceSeparateTemplateArrayInput interface {
	pulumi.Input

	ToMediaVoiceSeparateTemplateArrayOutput() MediaVoiceSeparateTemplateArrayOutput
	ToMediaVoiceSeparateTemplateArrayOutputWithContext(context.Context) MediaVoiceSeparateTemplateArrayOutput
}

type MediaVoiceSeparateTemplateArray []MediaVoiceSeparateTemplateInput

func (MediaVoiceSeparateTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaVoiceSeparateTemplate)(nil)).Elem()
}

func (i MediaVoiceSeparateTemplateArray) ToMediaVoiceSeparateTemplateArrayOutput() MediaVoiceSeparateTemplateArrayOutput {
	return i.ToMediaVoiceSeparateTemplateArrayOutputWithContext(context.Background())
}

func (i MediaVoiceSeparateTemplateArray) ToMediaVoiceSeparateTemplateArrayOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVoiceSeparateTemplateArrayOutput)
}

// MediaVoiceSeparateTemplateMapInput is an input type that accepts MediaVoiceSeparateTemplateMap and MediaVoiceSeparateTemplateMapOutput values.
// You can construct a concrete instance of `MediaVoiceSeparateTemplateMapInput` via:
//
//	MediaVoiceSeparateTemplateMap{ "key": MediaVoiceSeparateTemplateArgs{...} }
type MediaVoiceSeparateTemplateMapInput interface {
	pulumi.Input

	ToMediaVoiceSeparateTemplateMapOutput() MediaVoiceSeparateTemplateMapOutput
	ToMediaVoiceSeparateTemplateMapOutputWithContext(context.Context) MediaVoiceSeparateTemplateMapOutput
}

type MediaVoiceSeparateTemplateMap map[string]MediaVoiceSeparateTemplateInput

func (MediaVoiceSeparateTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaVoiceSeparateTemplate)(nil)).Elem()
}

func (i MediaVoiceSeparateTemplateMap) ToMediaVoiceSeparateTemplateMapOutput() MediaVoiceSeparateTemplateMapOutput {
	return i.ToMediaVoiceSeparateTemplateMapOutputWithContext(context.Background())
}

func (i MediaVoiceSeparateTemplateMap) ToMediaVoiceSeparateTemplateMapOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVoiceSeparateTemplateMapOutput)
}

type MediaVoiceSeparateTemplateOutput struct{ *pulumi.OutputState }

func (MediaVoiceSeparateTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVoiceSeparateTemplate)(nil)).Elem()
}

func (o MediaVoiceSeparateTemplateOutput) ToMediaVoiceSeparateTemplateOutput() MediaVoiceSeparateTemplateOutput {
	return o
}

func (o MediaVoiceSeparateTemplateOutput) ToMediaVoiceSeparateTemplateOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateOutput {
	return o
}

// audio configuration.
func (o MediaVoiceSeparateTemplateOutput) AudioConfig() MediaVoiceSeparateTemplateAudioConfigOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplate) MediaVoiceSeparateTemplateAudioConfigOutput { return v.AudioConfig }).(MediaVoiceSeparateTemplateAudioConfigOutput)
}

// Output audio IsAudio: output human voice, IsBackground: output background sound, AudioAndBackground: output vocal and background sound.
func (o MediaVoiceSeparateTemplateOutput) AudioMode() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplate) pulumi.StringOutput { return v.AudioMode }).(pulumi.StringOutput)
}

// bucket name.
func (o MediaVoiceSeparateTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaVoiceSeparateTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaVoiceSeparateTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MediaVoiceSeparateTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaVoiceSeparateTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaVoiceSeparateTemplate)(nil)).Elem()
}

func (o MediaVoiceSeparateTemplateArrayOutput) ToMediaVoiceSeparateTemplateArrayOutput() MediaVoiceSeparateTemplateArrayOutput {
	return o
}

func (o MediaVoiceSeparateTemplateArrayOutput) ToMediaVoiceSeparateTemplateArrayOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateArrayOutput {
	return o
}

func (o MediaVoiceSeparateTemplateArrayOutput) Index(i pulumi.IntInput) MediaVoiceSeparateTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaVoiceSeparateTemplate {
		return vs[0].([]*MediaVoiceSeparateTemplate)[vs[1].(int)]
	}).(MediaVoiceSeparateTemplateOutput)
}

type MediaVoiceSeparateTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaVoiceSeparateTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaVoiceSeparateTemplate)(nil)).Elem()
}

func (o MediaVoiceSeparateTemplateMapOutput) ToMediaVoiceSeparateTemplateMapOutput() MediaVoiceSeparateTemplateMapOutput {
	return o
}

func (o MediaVoiceSeparateTemplateMapOutput) ToMediaVoiceSeparateTemplateMapOutputWithContext(ctx context.Context) MediaVoiceSeparateTemplateMapOutput {
	return o
}

func (o MediaVoiceSeparateTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaVoiceSeparateTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaVoiceSeparateTemplate {
		return vs[0].(map[string]*MediaVoiceSeparateTemplate)[vs[1].(string)]
	}).(MediaVoiceSeparateTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVoiceSeparateTemplateInput)(nil)).Elem(), &MediaVoiceSeparateTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVoiceSeparateTemplateArrayInput)(nil)).Elem(), MediaVoiceSeparateTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVoiceSeparateTemplateMapInput)(nil)).Elem(), MediaVoiceSeparateTemplateMap{})
	pulumi.RegisterOutputType(MediaVoiceSeparateTemplateOutput{})
	pulumi.RegisterOutputType(MediaVoiceSeparateTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaVoiceSeparateTemplateMapOutput{})
}
