// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci bucket
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewBucketAttachment(ctx, "bucketAttachment", &Ci.BucketAttachmentArgs{
//				Bucket: pulumi.String("terraform-ci-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci bucket can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/bucketAttachment:BucketAttachment bucket_attachment terraform-ci-xxxxxx
//
// ```
type BucketAttachment struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Binding object storage state, `on`: bound, `off`: unbound, `unbinding`: unbinding.
	CiStatus pulumi.StringOutput `pulumi:"ciStatus"`
}

// NewBucketAttachment registers a new resource with the given unique name, arguments, and options.
func NewBucketAttachment(ctx *pulumi.Context,
	name string, args *BucketAttachmentArgs, opts ...pulumi.ResourceOption) (*BucketAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BucketAttachment
	err := ctx.RegisterResource("tencentcloud:Ci/bucketAttachment:BucketAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketAttachment gets an existing BucketAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketAttachmentState, opts ...pulumi.ResourceOption) (*BucketAttachment, error) {
	var resource BucketAttachment
	err := ctx.ReadResource("tencentcloud:Ci/bucketAttachment:BucketAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketAttachment resources.
type bucketAttachmentState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// Binding object storage state, `on`: bound, `off`: unbound, `unbinding`: unbinding.
	CiStatus *string `pulumi:"ciStatus"`
}

type BucketAttachmentState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// Binding object storage state, `on`: bound, `off`: unbound, `unbinding`: unbinding.
	CiStatus pulumi.StringPtrInput
}

func (BucketAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAttachmentState)(nil)).Elem()
}

type bucketAttachmentArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
}

// The set of arguments for constructing a BucketAttachment resource.
type BucketAttachmentArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
}

func (BucketAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketAttachmentArgs)(nil)).Elem()
}

type BucketAttachmentInput interface {
	pulumi.Input

	ToBucketAttachmentOutput() BucketAttachmentOutput
	ToBucketAttachmentOutputWithContext(ctx context.Context) BucketAttachmentOutput
}

func (*BucketAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAttachment)(nil)).Elem()
}

func (i *BucketAttachment) ToBucketAttachmentOutput() BucketAttachmentOutput {
	return i.ToBucketAttachmentOutputWithContext(context.Background())
}

func (i *BucketAttachment) ToBucketAttachmentOutputWithContext(ctx context.Context) BucketAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAttachmentOutput)
}

// BucketAttachmentArrayInput is an input type that accepts BucketAttachmentArray and BucketAttachmentArrayOutput values.
// You can construct a concrete instance of `BucketAttachmentArrayInput` via:
//
//	BucketAttachmentArray{ BucketAttachmentArgs{...} }
type BucketAttachmentArrayInput interface {
	pulumi.Input

	ToBucketAttachmentArrayOutput() BucketAttachmentArrayOutput
	ToBucketAttachmentArrayOutputWithContext(context.Context) BucketAttachmentArrayOutput
}

type BucketAttachmentArray []BucketAttachmentInput

func (BucketAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAttachment)(nil)).Elem()
}

func (i BucketAttachmentArray) ToBucketAttachmentArrayOutput() BucketAttachmentArrayOutput {
	return i.ToBucketAttachmentArrayOutputWithContext(context.Background())
}

func (i BucketAttachmentArray) ToBucketAttachmentArrayOutputWithContext(ctx context.Context) BucketAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAttachmentArrayOutput)
}

// BucketAttachmentMapInput is an input type that accepts BucketAttachmentMap and BucketAttachmentMapOutput values.
// You can construct a concrete instance of `BucketAttachmentMapInput` via:
//
//	BucketAttachmentMap{ "key": BucketAttachmentArgs{...} }
type BucketAttachmentMapInput interface {
	pulumi.Input

	ToBucketAttachmentMapOutput() BucketAttachmentMapOutput
	ToBucketAttachmentMapOutputWithContext(context.Context) BucketAttachmentMapOutput
}

type BucketAttachmentMap map[string]BucketAttachmentInput

func (BucketAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAttachment)(nil)).Elem()
}

func (i BucketAttachmentMap) ToBucketAttachmentMapOutput() BucketAttachmentMapOutput {
	return i.ToBucketAttachmentMapOutputWithContext(context.Background())
}

func (i BucketAttachmentMap) ToBucketAttachmentMapOutputWithContext(ctx context.Context) BucketAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketAttachmentMapOutput)
}

type BucketAttachmentOutput struct{ *pulumi.OutputState }

func (BucketAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketAttachment)(nil)).Elem()
}

func (o BucketAttachmentOutput) ToBucketAttachmentOutput() BucketAttachmentOutput {
	return o
}

func (o BucketAttachmentOutput) ToBucketAttachmentOutputWithContext(ctx context.Context) BucketAttachmentOutput {
	return o
}

// bucket name.
func (o BucketAttachmentOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAttachment) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Binding object storage state, `on`: bound, `off`: unbound, `unbinding`: unbinding.
func (o BucketAttachmentOutput) CiStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketAttachment) pulumi.StringOutput { return v.CiStatus }).(pulumi.StringOutput)
}

type BucketAttachmentArrayOutput struct{ *pulumi.OutputState }

func (BucketAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketAttachment)(nil)).Elem()
}

func (o BucketAttachmentArrayOutput) ToBucketAttachmentArrayOutput() BucketAttachmentArrayOutput {
	return o
}

func (o BucketAttachmentArrayOutput) ToBucketAttachmentArrayOutputWithContext(ctx context.Context) BucketAttachmentArrayOutput {
	return o
}

func (o BucketAttachmentArrayOutput) Index(i pulumi.IntInput) BucketAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketAttachment {
		return vs[0].([]*BucketAttachment)[vs[1].(int)]
	}).(BucketAttachmentOutput)
}

type BucketAttachmentMapOutput struct{ *pulumi.OutputState }

func (BucketAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketAttachment)(nil)).Elem()
}

func (o BucketAttachmentMapOutput) ToBucketAttachmentMapOutput() BucketAttachmentMapOutput {
	return o
}

func (o BucketAttachmentMapOutput) ToBucketAttachmentMapOutputWithContext(ctx context.Context) BucketAttachmentMapOutput {
	return o
}

func (o BucketAttachmentMapOutput) MapIndex(k pulumi.StringInput) BucketAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketAttachment {
		return vs[0].(map[string]*BucketAttachment)[vs[1].(string)]
	}).(BucketAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAttachmentInput)(nil)).Elem(), &BucketAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAttachmentArrayInput)(nil)).Elem(), BucketAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketAttachmentMapInput)(nil)).Elem(), BucketAttachmentMap{})
	pulumi.RegisterOutputType(BucketAttachmentOutput{})
	pulumi.RegisterOutputType(BucketAttachmentArrayOutput{})
	pulumi.RegisterOutputType(BucketAttachmentMapOutput{})
}
