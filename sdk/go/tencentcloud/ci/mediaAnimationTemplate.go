// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaAnimationTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaAnimationTemplate(ctx, "mediaAnimationTemplate", &Ci.MediaAnimationTemplateArgs{
//				Bucket: pulumi.String("terraform-ci-1308919341"),
//				Container: &ci.MediaAnimationTemplateContainerArgs{
//					Format: pulumi.String("gif"),
//				},
//				TimeInterval: &ci.MediaAnimationTemplateTimeIntervalArgs{
//					Duration: pulumi.String("60"),
//					Start:    pulumi.String("0"),
//				},
//				Video: &ci.MediaAnimationTemplateVideoArgs{
//					AnimateFramesPerSecond:     pulumi.String(""),
//					AnimateOnlyKeepKeyFrame:    pulumi.String("true"),
//					AnimateTimeIntervalOfFrame: pulumi.String(""),
//					Codec:                      pulumi.String("gif"),
//					Fps:                        pulumi.String("20"),
//					Height:                     pulumi.String(""),
//					Quality:                    pulumi.String(""),
//					Width:                      pulumi.String("1280"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type MediaAnimationTemplate struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// container format.
	Container MediaAnimationTemplateContainerOutput `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// time interval.
	TimeInterval MediaAnimationTemplateTimeIntervalPtrOutput `pulumi:"timeInterval"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaAnimationTemplateVideoPtrOutput `pulumi:"video"`
}

// NewMediaAnimationTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaAnimationTemplate(ctx *pulumi.Context,
	name string, args *MediaAnimationTemplateArgs, opts ...pulumi.ResourceOption) (*MediaAnimationTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaAnimationTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaAnimationTemplate:MediaAnimationTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaAnimationTemplate gets an existing MediaAnimationTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaAnimationTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaAnimationTemplateState, opts ...pulumi.ResourceOption) (*MediaAnimationTemplate, error) {
	var resource MediaAnimationTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaAnimationTemplate:MediaAnimationTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaAnimationTemplate resources.
type mediaAnimationTemplateState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// container format.
	Container *MediaAnimationTemplateContainer `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// time interval.
	TimeInterval *MediaAnimationTemplateTimeInterval `pulumi:"timeInterval"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaAnimationTemplateVideo `pulumi:"video"`
}

type MediaAnimationTemplateState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// container format.
	Container MediaAnimationTemplateContainerPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// time interval.
	TimeInterval MediaAnimationTemplateTimeIntervalPtrInput
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaAnimationTemplateVideoPtrInput
}

func (MediaAnimationTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaAnimationTemplateState)(nil)).Elem()
}

type mediaAnimationTemplateArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// container format.
	Container MediaAnimationTemplateContainer `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// time interval.
	TimeInterval *MediaAnimationTemplateTimeInterval `pulumi:"timeInterval"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaAnimationTemplateVideo `pulumi:"video"`
}

// The set of arguments for constructing a MediaAnimationTemplate resource.
type MediaAnimationTemplateArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
	// container format.
	Container MediaAnimationTemplateContainerInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// time interval.
	TimeInterval MediaAnimationTemplateTimeIntervalPtrInput
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaAnimationTemplateVideoPtrInput
}

func (MediaAnimationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaAnimationTemplateArgs)(nil)).Elem()
}

type MediaAnimationTemplateInput interface {
	pulumi.Input

	ToMediaAnimationTemplateOutput() MediaAnimationTemplateOutput
	ToMediaAnimationTemplateOutputWithContext(ctx context.Context) MediaAnimationTemplateOutput
}

func (*MediaAnimationTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplate)(nil)).Elem()
}

func (i *MediaAnimationTemplate) ToMediaAnimationTemplateOutput() MediaAnimationTemplateOutput {
	return i.ToMediaAnimationTemplateOutputWithContext(context.Background())
}

func (i *MediaAnimationTemplate) ToMediaAnimationTemplateOutputWithContext(ctx context.Context) MediaAnimationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateOutput)
}

// MediaAnimationTemplateArrayInput is an input type that accepts MediaAnimationTemplateArray and MediaAnimationTemplateArrayOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateArrayInput` via:
//
//	MediaAnimationTemplateArray{ MediaAnimationTemplateArgs{...} }
type MediaAnimationTemplateArrayInput interface {
	pulumi.Input

	ToMediaAnimationTemplateArrayOutput() MediaAnimationTemplateArrayOutput
	ToMediaAnimationTemplateArrayOutputWithContext(context.Context) MediaAnimationTemplateArrayOutput
}

type MediaAnimationTemplateArray []MediaAnimationTemplateInput

func (MediaAnimationTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaAnimationTemplate)(nil)).Elem()
}

func (i MediaAnimationTemplateArray) ToMediaAnimationTemplateArrayOutput() MediaAnimationTemplateArrayOutput {
	return i.ToMediaAnimationTemplateArrayOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateArray) ToMediaAnimationTemplateArrayOutputWithContext(ctx context.Context) MediaAnimationTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateArrayOutput)
}

// MediaAnimationTemplateMapInput is an input type that accepts MediaAnimationTemplateMap and MediaAnimationTemplateMapOutput values.
// You can construct a concrete instance of `MediaAnimationTemplateMapInput` via:
//
//	MediaAnimationTemplateMap{ "key": MediaAnimationTemplateArgs{...} }
type MediaAnimationTemplateMapInput interface {
	pulumi.Input

	ToMediaAnimationTemplateMapOutput() MediaAnimationTemplateMapOutput
	ToMediaAnimationTemplateMapOutputWithContext(context.Context) MediaAnimationTemplateMapOutput
}

type MediaAnimationTemplateMap map[string]MediaAnimationTemplateInput

func (MediaAnimationTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaAnimationTemplate)(nil)).Elem()
}

func (i MediaAnimationTemplateMap) ToMediaAnimationTemplateMapOutput() MediaAnimationTemplateMapOutput {
	return i.ToMediaAnimationTemplateMapOutputWithContext(context.Background())
}

func (i MediaAnimationTemplateMap) ToMediaAnimationTemplateMapOutputWithContext(ctx context.Context) MediaAnimationTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaAnimationTemplateMapOutput)
}

type MediaAnimationTemplateOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaAnimationTemplate)(nil)).Elem()
}

func (o MediaAnimationTemplateOutput) ToMediaAnimationTemplateOutput() MediaAnimationTemplateOutput {
	return o
}

func (o MediaAnimationTemplateOutput) ToMediaAnimationTemplateOutputWithContext(ctx context.Context) MediaAnimationTemplateOutput {
	return o
}

// bucket name.
func (o MediaAnimationTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAnimationTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// container format.
func (o MediaAnimationTemplateOutput) Container() MediaAnimationTemplateContainerOutput {
	return o.ApplyT(func(v *MediaAnimationTemplate) MediaAnimationTemplateContainerOutput { return v.Container }).(MediaAnimationTemplateContainerOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaAnimationTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaAnimationTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// time interval.
func (o MediaAnimationTemplateOutput) TimeInterval() MediaAnimationTemplateTimeIntervalPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplate) MediaAnimationTemplateTimeIntervalPtrOutput { return v.TimeInterval }).(MediaAnimationTemplateTimeIntervalPtrOutput)
}

// video information, do not upload Video, which is equivalent to deleting video information.
func (o MediaAnimationTemplateOutput) Video() MediaAnimationTemplateVideoPtrOutput {
	return o.ApplyT(func(v *MediaAnimationTemplate) MediaAnimationTemplateVideoPtrOutput { return v.Video }).(MediaAnimationTemplateVideoPtrOutput)
}

type MediaAnimationTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaAnimationTemplate)(nil)).Elem()
}

func (o MediaAnimationTemplateArrayOutput) ToMediaAnimationTemplateArrayOutput() MediaAnimationTemplateArrayOutput {
	return o
}

func (o MediaAnimationTemplateArrayOutput) ToMediaAnimationTemplateArrayOutputWithContext(ctx context.Context) MediaAnimationTemplateArrayOutput {
	return o
}

func (o MediaAnimationTemplateArrayOutput) Index(i pulumi.IntInput) MediaAnimationTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaAnimationTemplate {
		return vs[0].([]*MediaAnimationTemplate)[vs[1].(int)]
	}).(MediaAnimationTemplateOutput)
}

type MediaAnimationTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaAnimationTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaAnimationTemplate)(nil)).Elem()
}

func (o MediaAnimationTemplateMapOutput) ToMediaAnimationTemplateMapOutput() MediaAnimationTemplateMapOutput {
	return o
}

func (o MediaAnimationTemplateMapOutput) ToMediaAnimationTemplateMapOutputWithContext(ctx context.Context) MediaAnimationTemplateMapOutput {
	return o
}

func (o MediaAnimationTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaAnimationTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaAnimationTemplate {
		return vs[0].(map[string]*MediaAnimationTemplate)[vs[1].(string)]
	}).(MediaAnimationTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateInput)(nil)).Elem(), &MediaAnimationTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateArrayInput)(nil)).Elem(), MediaAnimationTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaAnimationTemplateMapInput)(nil)).Elem(), MediaAnimationTemplateMap{})
	pulumi.RegisterOutputType(MediaAnimationTemplateOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaAnimationTemplateMapOutput{})
}
