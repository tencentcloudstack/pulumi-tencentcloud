// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaSuperResolutionTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaSuperResolutionTemplate(ctx, "mediaSuperResolutionTemplate", &Ci.MediaSuperResolutionTemplateArgs{
//				Bucket:        pulumi.String("terraform-ci-1308919341"),
//				EnableScaleUp: pulumi.String("true"),
//				Resolution:    pulumi.String("sdtohd"),
//				Version:       pulumi.String("Enhance"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_super_resolution_template can be imported using the bucket#templateId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate media_super_resolution_template terraform-ci-xxxxxx#t1d707eb2be3294e22b47123894f85cb8f
//
// ```
type MediaSuperResolutionTemplate struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Auto scaling switch, off by default.
	EnableScaleUp pulumi.StringPtrOutput `pulumi:"enableScaleUp"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
	Resolution pulumi.StringOutput `pulumi:"resolution"`
	// version, default value Base, Base: basic version, Enhance: enhanced version.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewMediaSuperResolutionTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaSuperResolutionTemplate(ctx *pulumi.Context,
	name string, args *MediaSuperResolutionTemplateArgs, opts ...pulumi.ResourceOption) (*MediaSuperResolutionTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Resolution == nil {
		return nil, errors.New("invalid value for required argument 'Resolution'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaSuperResolutionTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaSuperResolutionTemplate gets an existing MediaSuperResolutionTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaSuperResolutionTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaSuperResolutionTemplateState, opts ...pulumi.ResourceOption) (*MediaSuperResolutionTemplate, error) {
	var resource MediaSuperResolutionTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaSuperResolutionTemplate:MediaSuperResolutionTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaSuperResolutionTemplate resources.
type mediaSuperResolutionTemplateState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// Auto scaling switch, off by default.
	EnableScaleUp *string `pulumi:"enableScaleUp"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
	Resolution *string `pulumi:"resolution"`
	// version, default value Base, Base: basic version, Enhance: enhanced version.
	Version *string `pulumi:"version"`
}

type MediaSuperResolutionTemplateState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// Auto scaling switch, off by default.
	EnableScaleUp pulumi.StringPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
	Resolution pulumi.StringPtrInput
	// version, default value Base, Base: basic version, Enhance: enhanced version.
	Version pulumi.StringPtrInput
}

func (MediaSuperResolutionTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaSuperResolutionTemplateState)(nil)).Elem()
}

type mediaSuperResolutionTemplateArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// Auto scaling switch, off by default.
	EnableScaleUp *string `pulumi:"enableScaleUp"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
	Resolution string `pulumi:"resolution"`
	// version, default value Base, Base: basic version, Enhance: enhanced version.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a MediaSuperResolutionTemplate resource.
type MediaSuperResolutionTemplateArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
	// Auto scaling switch, off by default.
	EnableScaleUp pulumi.StringPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
	Resolution pulumi.StringInput
	// version, default value Base, Base: basic version, Enhance: enhanced version.
	Version pulumi.StringPtrInput
}

func (MediaSuperResolutionTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaSuperResolutionTemplateArgs)(nil)).Elem()
}

type MediaSuperResolutionTemplateInput interface {
	pulumi.Input

	ToMediaSuperResolutionTemplateOutput() MediaSuperResolutionTemplateOutput
	ToMediaSuperResolutionTemplateOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateOutput
}

func (*MediaSuperResolutionTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSuperResolutionTemplate)(nil)).Elem()
}

func (i *MediaSuperResolutionTemplate) ToMediaSuperResolutionTemplateOutput() MediaSuperResolutionTemplateOutput {
	return i.ToMediaSuperResolutionTemplateOutputWithContext(context.Background())
}

func (i *MediaSuperResolutionTemplate) ToMediaSuperResolutionTemplateOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSuperResolutionTemplateOutput)
}

// MediaSuperResolutionTemplateArrayInput is an input type that accepts MediaSuperResolutionTemplateArray and MediaSuperResolutionTemplateArrayOutput values.
// You can construct a concrete instance of `MediaSuperResolutionTemplateArrayInput` via:
//
//	MediaSuperResolutionTemplateArray{ MediaSuperResolutionTemplateArgs{...} }
type MediaSuperResolutionTemplateArrayInput interface {
	pulumi.Input

	ToMediaSuperResolutionTemplateArrayOutput() MediaSuperResolutionTemplateArrayOutput
	ToMediaSuperResolutionTemplateArrayOutputWithContext(context.Context) MediaSuperResolutionTemplateArrayOutput
}

type MediaSuperResolutionTemplateArray []MediaSuperResolutionTemplateInput

func (MediaSuperResolutionTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaSuperResolutionTemplate)(nil)).Elem()
}

func (i MediaSuperResolutionTemplateArray) ToMediaSuperResolutionTemplateArrayOutput() MediaSuperResolutionTemplateArrayOutput {
	return i.ToMediaSuperResolutionTemplateArrayOutputWithContext(context.Background())
}

func (i MediaSuperResolutionTemplateArray) ToMediaSuperResolutionTemplateArrayOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSuperResolutionTemplateArrayOutput)
}

// MediaSuperResolutionTemplateMapInput is an input type that accepts MediaSuperResolutionTemplateMap and MediaSuperResolutionTemplateMapOutput values.
// You can construct a concrete instance of `MediaSuperResolutionTemplateMapInput` via:
//
//	MediaSuperResolutionTemplateMap{ "key": MediaSuperResolutionTemplateArgs{...} }
type MediaSuperResolutionTemplateMapInput interface {
	pulumi.Input

	ToMediaSuperResolutionTemplateMapOutput() MediaSuperResolutionTemplateMapOutput
	ToMediaSuperResolutionTemplateMapOutputWithContext(context.Context) MediaSuperResolutionTemplateMapOutput
}

type MediaSuperResolutionTemplateMap map[string]MediaSuperResolutionTemplateInput

func (MediaSuperResolutionTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaSuperResolutionTemplate)(nil)).Elem()
}

func (i MediaSuperResolutionTemplateMap) ToMediaSuperResolutionTemplateMapOutput() MediaSuperResolutionTemplateMapOutput {
	return i.ToMediaSuperResolutionTemplateMapOutputWithContext(context.Background())
}

func (i MediaSuperResolutionTemplateMap) ToMediaSuperResolutionTemplateMapOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaSuperResolutionTemplateMapOutput)
}

type MediaSuperResolutionTemplateOutput struct{ *pulumi.OutputState }

func (MediaSuperResolutionTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaSuperResolutionTemplate)(nil)).Elem()
}

func (o MediaSuperResolutionTemplateOutput) ToMediaSuperResolutionTemplateOutput() MediaSuperResolutionTemplateOutput {
	return o
}

func (o MediaSuperResolutionTemplateOutput) ToMediaSuperResolutionTemplateOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateOutput {
	return o
}

// bucket name.
func (o MediaSuperResolutionTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaSuperResolutionTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Auto scaling switch, off by default.
func (o MediaSuperResolutionTemplateOutput) EnableScaleUp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSuperResolutionTemplate) pulumi.StringPtrOutput { return v.EnableScaleUp }).(pulumi.StringPtrOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaSuperResolutionTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaSuperResolutionTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resolution Options sdtohd: Standard Definition to Ultra Definition, hdto4k: HD to 4K.
func (o MediaSuperResolutionTemplateOutput) Resolution() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaSuperResolutionTemplate) pulumi.StringOutput { return v.Resolution }).(pulumi.StringOutput)
}

// version, default value Base, Base: basic version, Enhance: enhanced version.
func (o MediaSuperResolutionTemplateOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MediaSuperResolutionTemplate) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type MediaSuperResolutionTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaSuperResolutionTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaSuperResolutionTemplate)(nil)).Elem()
}

func (o MediaSuperResolutionTemplateArrayOutput) ToMediaSuperResolutionTemplateArrayOutput() MediaSuperResolutionTemplateArrayOutput {
	return o
}

func (o MediaSuperResolutionTemplateArrayOutput) ToMediaSuperResolutionTemplateArrayOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateArrayOutput {
	return o
}

func (o MediaSuperResolutionTemplateArrayOutput) Index(i pulumi.IntInput) MediaSuperResolutionTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaSuperResolutionTemplate {
		return vs[0].([]*MediaSuperResolutionTemplate)[vs[1].(int)]
	}).(MediaSuperResolutionTemplateOutput)
}

type MediaSuperResolutionTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaSuperResolutionTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaSuperResolutionTemplate)(nil)).Elem()
}

func (o MediaSuperResolutionTemplateMapOutput) ToMediaSuperResolutionTemplateMapOutput() MediaSuperResolutionTemplateMapOutput {
	return o
}

func (o MediaSuperResolutionTemplateMapOutput) ToMediaSuperResolutionTemplateMapOutputWithContext(ctx context.Context) MediaSuperResolutionTemplateMapOutput {
	return o
}

func (o MediaSuperResolutionTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaSuperResolutionTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaSuperResolutionTemplate {
		return vs[0].(map[string]*MediaSuperResolutionTemplate)[vs[1].(string)]
	}).(MediaSuperResolutionTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSuperResolutionTemplateInput)(nil)).Elem(), &MediaSuperResolutionTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSuperResolutionTemplateArrayInput)(nil)).Elem(), MediaSuperResolutionTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaSuperResolutionTemplateMapInput)(nil)).Elem(), MediaSuperResolutionTemplateMap{})
	pulumi.RegisterOutputType(MediaSuperResolutionTemplateOutput{})
	pulumi.RegisterOutputType(MediaSuperResolutionTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaSuperResolutionTemplateMapOutput{})
}
