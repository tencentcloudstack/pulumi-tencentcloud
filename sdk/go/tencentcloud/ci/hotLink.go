// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci hotLink
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewHotLink(ctx, "hotLink", &Ci.HotLinkArgs{
//				Bucket: pulumi.String("terraform-ci-xxxxxx"),
//				Type:   pulumi.String("white"),
//				Urls: pulumi.StringArray{
//					pulumi.String("10.0.0.1"),
//					pulumi.String("10.0.0.2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci hot_link can be imported using the bucket, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/hotLink:HotLink hot_link terraform-ci-xxxxxx
//
// ```
type HotLink struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Anti-leech type, `white` is whitelist, `black` is blacklist.
	Type pulumi.StringOutput `pulumi:"type"`
	// domain address.
	Urls pulumi.StringArrayOutput `pulumi:"urls"`
}

// NewHotLink registers a new resource with the given unique name, arguments, and options.
func NewHotLink(ctx *pulumi.Context,
	name string, args *HotLinkArgs, opts ...pulumi.ResourceOption) (*HotLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Urls == nil {
		return nil, errors.New("invalid value for required argument 'Urls'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource HotLink
	err := ctx.RegisterResource("tencentcloud:Ci/hotLink:HotLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHotLink gets an existing HotLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHotLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HotLinkState, opts ...pulumi.ResourceOption) (*HotLink, error) {
	var resource HotLink
	err := ctx.ReadResource("tencentcloud:Ci/hotLink:HotLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HotLink resources.
type hotLinkState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// Anti-leech type, `white` is whitelist, `black` is blacklist.
	Type *string `pulumi:"type"`
	// domain address.
	Urls []string `pulumi:"urls"`
}

type HotLinkState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// Anti-leech type, `white` is whitelist, `black` is blacklist.
	Type pulumi.StringPtrInput
	// domain address.
	Urls pulumi.StringArrayInput
}

func (HotLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*hotLinkState)(nil)).Elem()
}

type hotLinkArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// Anti-leech type, `white` is whitelist, `black` is blacklist.
	Type string `pulumi:"type"`
	// domain address.
	Urls []string `pulumi:"urls"`
}

// The set of arguments for constructing a HotLink resource.
type HotLinkArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
	// Anti-leech type, `white` is whitelist, `black` is blacklist.
	Type pulumi.StringInput
	// domain address.
	Urls pulumi.StringArrayInput
}

func (HotLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hotLinkArgs)(nil)).Elem()
}

type HotLinkInput interface {
	pulumi.Input

	ToHotLinkOutput() HotLinkOutput
	ToHotLinkOutputWithContext(ctx context.Context) HotLinkOutput
}

func (*HotLink) ElementType() reflect.Type {
	return reflect.TypeOf((**HotLink)(nil)).Elem()
}

func (i *HotLink) ToHotLinkOutput() HotLinkOutput {
	return i.ToHotLinkOutputWithContext(context.Background())
}

func (i *HotLink) ToHotLinkOutputWithContext(ctx context.Context) HotLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HotLinkOutput)
}

// HotLinkArrayInput is an input type that accepts HotLinkArray and HotLinkArrayOutput values.
// You can construct a concrete instance of `HotLinkArrayInput` via:
//
//	HotLinkArray{ HotLinkArgs{...} }
type HotLinkArrayInput interface {
	pulumi.Input

	ToHotLinkArrayOutput() HotLinkArrayOutput
	ToHotLinkArrayOutputWithContext(context.Context) HotLinkArrayOutput
}

type HotLinkArray []HotLinkInput

func (HotLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HotLink)(nil)).Elem()
}

func (i HotLinkArray) ToHotLinkArrayOutput() HotLinkArrayOutput {
	return i.ToHotLinkArrayOutputWithContext(context.Background())
}

func (i HotLinkArray) ToHotLinkArrayOutputWithContext(ctx context.Context) HotLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HotLinkArrayOutput)
}

// HotLinkMapInput is an input type that accepts HotLinkMap and HotLinkMapOutput values.
// You can construct a concrete instance of `HotLinkMapInput` via:
//
//	HotLinkMap{ "key": HotLinkArgs{...} }
type HotLinkMapInput interface {
	pulumi.Input

	ToHotLinkMapOutput() HotLinkMapOutput
	ToHotLinkMapOutputWithContext(context.Context) HotLinkMapOutput
}

type HotLinkMap map[string]HotLinkInput

func (HotLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HotLink)(nil)).Elem()
}

func (i HotLinkMap) ToHotLinkMapOutput() HotLinkMapOutput {
	return i.ToHotLinkMapOutputWithContext(context.Background())
}

func (i HotLinkMap) ToHotLinkMapOutputWithContext(ctx context.Context) HotLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HotLinkMapOutput)
}

type HotLinkOutput struct{ *pulumi.OutputState }

func (HotLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HotLink)(nil)).Elem()
}

func (o HotLinkOutput) ToHotLinkOutput() HotLinkOutput {
	return o
}

func (o HotLinkOutput) ToHotLinkOutputWithContext(ctx context.Context) HotLinkOutput {
	return o
}

// bucket name.
func (o HotLinkOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *HotLink) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Anti-leech type, `white` is whitelist, `black` is blacklist.
func (o HotLinkOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HotLink) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// domain address.
func (o HotLinkOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HotLink) pulumi.StringArrayOutput { return v.Urls }).(pulumi.StringArrayOutput)
}

type HotLinkArrayOutput struct{ *pulumi.OutputState }

func (HotLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HotLink)(nil)).Elem()
}

func (o HotLinkArrayOutput) ToHotLinkArrayOutput() HotLinkArrayOutput {
	return o
}

func (o HotLinkArrayOutput) ToHotLinkArrayOutputWithContext(ctx context.Context) HotLinkArrayOutput {
	return o
}

func (o HotLinkArrayOutput) Index(i pulumi.IntInput) HotLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HotLink {
		return vs[0].([]*HotLink)[vs[1].(int)]
	}).(HotLinkOutput)
}

type HotLinkMapOutput struct{ *pulumi.OutputState }

func (HotLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HotLink)(nil)).Elem()
}

func (o HotLinkMapOutput) ToHotLinkMapOutput() HotLinkMapOutput {
	return o
}

func (o HotLinkMapOutput) ToHotLinkMapOutputWithContext(ctx context.Context) HotLinkMapOutput {
	return o
}

func (o HotLinkMapOutput) MapIndex(k pulumi.StringInput) HotLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HotLink {
		return vs[0].(map[string]*HotLink)[vs[1].(string)]
	}).(HotLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HotLinkInput)(nil)).Elem(), &HotLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*HotLinkArrayInput)(nil)).Elem(), HotLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HotLinkMapInput)(nil)).Elem(), HotLinkMap{})
	pulumi.RegisterOutputType(HotLinkOutput{})
	pulumi.RegisterOutputType(HotLinkArrayOutput{})
	pulumi.RegisterOutputType(HotLinkMapOutput{})
}
