// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaVideoProcessTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaVideoProcessTemplate(ctx, "mediaVideoProcessTemplate", &Ci.MediaVideoProcessTemplateArgs{
//				Bucket: pulumi.String("terraform-ci-xxxxxx"),
//				ColorEnhance: &ci.MediaVideoProcessTemplateColorEnhanceArgs{
//					Contrast:   pulumi.String(""),
//					Correction: pulumi.String(""),
//					Enable:     pulumi.String("true"),
//					Saturation: pulumi.String(""),
//				},
//				MsSharpen: &ci.MediaVideoProcessTemplateMsSharpenArgs{
//					Enable:       pulumi.String("false"),
//					SharpenLevel: pulumi.String(""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_video_process_template can be imported using the bucket#templateId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate media_video_process_template terraform-ci-xxxxxx#t1d5694d87639a4593a9fd7e9025d26f52
//
// ```
type MediaVideoProcessTemplate struct {
	pulumi.CustomResourceState

	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// color enhancement.
	ColorEnhance MediaVideoProcessTemplateColorEnhancePtrOutput `pulumi:"colorEnhance"`
	// detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
	MsSharpen MediaVideoProcessTemplateMsSharpenPtrOutput `pulumi:"msSharpen"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewMediaVideoProcessTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaVideoProcessTemplate(ctx *pulumi.Context,
	name string, args *MediaVideoProcessTemplateArgs, opts ...pulumi.ResourceOption) (*MediaVideoProcessTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaVideoProcessTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaVideoProcessTemplate gets an existing MediaVideoProcessTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaVideoProcessTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaVideoProcessTemplateState, opts ...pulumi.ResourceOption) (*MediaVideoProcessTemplate, error) {
	var resource MediaVideoProcessTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaVideoProcessTemplate:MediaVideoProcessTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaVideoProcessTemplate resources.
type mediaVideoProcessTemplateState struct {
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// color enhancement.
	ColorEnhance *MediaVideoProcessTemplateColorEnhance `pulumi:"colorEnhance"`
	// detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
	MsSharpen *MediaVideoProcessTemplateMsSharpen `pulumi:"msSharpen"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
}

type MediaVideoProcessTemplateState struct {
	// bucket name.
	Bucket pulumi.StringPtrInput
	// color enhancement.
	ColorEnhance MediaVideoProcessTemplateColorEnhancePtrInput
	// detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
	MsSharpen MediaVideoProcessTemplateMsSharpenPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
}

func (MediaVideoProcessTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaVideoProcessTemplateState)(nil)).Elem()
}

type mediaVideoProcessTemplateArgs struct {
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// color enhancement.
	ColorEnhance *MediaVideoProcessTemplateColorEnhance `pulumi:"colorEnhance"`
	// detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
	MsSharpen *MediaVideoProcessTemplateMsSharpen `pulumi:"msSharpen"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MediaVideoProcessTemplate resource.
type MediaVideoProcessTemplateArgs struct {
	// bucket name.
	Bucket pulumi.StringInput
	// color enhancement.
	ColorEnhance MediaVideoProcessTemplateColorEnhancePtrInput
	// detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
	MsSharpen MediaVideoProcessTemplateMsSharpenPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
}

func (MediaVideoProcessTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaVideoProcessTemplateArgs)(nil)).Elem()
}

type MediaVideoProcessTemplateInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateOutput() MediaVideoProcessTemplateOutput
	ToMediaVideoProcessTemplateOutputWithContext(ctx context.Context) MediaVideoProcessTemplateOutput
}

func (*MediaVideoProcessTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoProcessTemplate)(nil)).Elem()
}

func (i *MediaVideoProcessTemplate) ToMediaVideoProcessTemplateOutput() MediaVideoProcessTemplateOutput {
	return i.ToMediaVideoProcessTemplateOutputWithContext(context.Background())
}

func (i *MediaVideoProcessTemplate) ToMediaVideoProcessTemplateOutputWithContext(ctx context.Context) MediaVideoProcessTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateOutput)
}

// MediaVideoProcessTemplateArrayInput is an input type that accepts MediaVideoProcessTemplateArray and MediaVideoProcessTemplateArrayOutput values.
// You can construct a concrete instance of `MediaVideoProcessTemplateArrayInput` via:
//
//	MediaVideoProcessTemplateArray{ MediaVideoProcessTemplateArgs{...} }
type MediaVideoProcessTemplateArrayInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateArrayOutput() MediaVideoProcessTemplateArrayOutput
	ToMediaVideoProcessTemplateArrayOutputWithContext(context.Context) MediaVideoProcessTemplateArrayOutput
}

type MediaVideoProcessTemplateArray []MediaVideoProcessTemplateInput

func (MediaVideoProcessTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaVideoProcessTemplate)(nil)).Elem()
}

func (i MediaVideoProcessTemplateArray) ToMediaVideoProcessTemplateArrayOutput() MediaVideoProcessTemplateArrayOutput {
	return i.ToMediaVideoProcessTemplateArrayOutputWithContext(context.Background())
}

func (i MediaVideoProcessTemplateArray) ToMediaVideoProcessTemplateArrayOutputWithContext(ctx context.Context) MediaVideoProcessTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateArrayOutput)
}

// MediaVideoProcessTemplateMapInput is an input type that accepts MediaVideoProcessTemplateMap and MediaVideoProcessTemplateMapOutput values.
// You can construct a concrete instance of `MediaVideoProcessTemplateMapInput` via:
//
//	MediaVideoProcessTemplateMap{ "key": MediaVideoProcessTemplateArgs{...} }
type MediaVideoProcessTemplateMapInput interface {
	pulumi.Input

	ToMediaVideoProcessTemplateMapOutput() MediaVideoProcessTemplateMapOutput
	ToMediaVideoProcessTemplateMapOutputWithContext(context.Context) MediaVideoProcessTemplateMapOutput
}

type MediaVideoProcessTemplateMap map[string]MediaVideoProcessTemplateInput

func (MediaVideoProcessTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaVideoProcessTemplate)(nil)).Elem()
}

func (i MediaVideoProcessTemplateMap) ToMediaVideoProcessTemplateMapOutput() MediaVideoProcessTemplateMapOutput {
	return i.ToMediaVideoProcessTemplateMapOutputWithContext(context.Background())
}

func (i MediaVideoProcessTemplateMap) ToMediaVideoProcessTemplateMapOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaVideoProcessTemplateMapOutput)
}

type MediaVideoProcessTemplateOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaVideoProcessTemplate)(nil)).Elem()
}

func (o MediaVideoProcessTemplateOutput) ToMediaVideoProcessTemplateOutput() MediaVideoProcessTemplateOutput {
	return o
}

func (o MediaVideoProcessTemplateOutput) ToMediaVideoProcessTemplateOutputWithContext(ctx context.Context) MediaVideoProcessTemplateOutput {
	return o
}

// bucket name.
func (o MediaVideoProcessTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// color enhancement.
func (o MediaVideoProcessTemplateOutput) ColorEnhance() MediaVideoProcessTemplateColorEnhancePtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplate) MediaVideoProcessTemplateColorEnhancePtrOutput {
		return v.ColorEnhance
	}).(MediaVideoProcessTemplateColorEnhancePtrOutput)
}

// detail enhancement, ColorEnhance and MsSharpen cannot both be empty.
func (o MediaVideoProcessTemplateOutput) MsSharpen() MediaVideoProcessTemplateMsSharpenPtrOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplate) MediaVideoProcessTemplateMsSharpenPtrOutput { return v.MsSharpen }).(MediaVideoProcessTemplateMsSharpenPtrOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaVideoProcessTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaVideoProcessTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type MediaVideoProcessTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaVideoProcessTemplate)(nil)).Elem()
}

func (o MediaVideoProcessTemplateArrayOutput) ToMediaVideoProcessTemplateArrayOutput() MediaVideoProcessTemplateArrayOutput {
	return o
}

func (o MediaVideoProcessTemplateArrayOutput) ToMediaVideoProcessTemplateArrayOutputWithContext(ctx context.Context) MediaVideoProcessTemplateArrayOutput {
	return o
}

func (o MediaVideoProcessTemplateArrayOutput) Index(i pulumi.IntInput) MediaVideoProcessTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaVideoProcessTemplate {
		return vs[0].([]*MediaVideoProcessTemplate)[vs[1].(int)]
	}).(MediaVideoProcessTemplateOutput)
}

type MediaVideoProcessTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaVideoProcessTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaVideoProcessTemplate)(nil)).Elem()
}

func (o MediaVideoProcessTemplateMapOutput) ToMediaVideoProcessTemplateMapOutput() MediaVideoProcessTemplateMapOutput {
	return o
}

func (o MediaVideoProcessTemplateMapOutput) ToMediaVideoProcessTemplateMapOutputWithContext(ctx context.Context) MediaVideoProcessTemplateMapOutput {
	return o
}

func (o MediaVideoProcessTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaVideoProcessTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaVideoProcessTemplate {
		return vs[0].(map[string]*MediaVideoProcessTemplate)[vs[1].(string)]
	}).(MediaVideoProcessTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateInput)(nil)).Elem(), &MediaVideoProcessTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateArrayInput)(nil)).Elem(), MediaVideoProcessTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaVideoProcessTemplateMapInput)(nil)).Elem(), MediaVideoProcessTemplateMap{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateOutput{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaVideoProcessTemplateMapOutput{})
}
