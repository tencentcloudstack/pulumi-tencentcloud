// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ci mediaTranscodeProTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ci"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ci.NewMediaTranscodeProTemplate(ctx, "mediaTranscodeProTemplate", &Ci.MediaTranscodeProTemplateArgs{
//				Audio: &ci.MediaTranscodeProTemplateAudioArgs{
//					Codec:  pulumi.String("pcm_s24le"),
//					Remove: pulumi.String("true"),
//				},
//				Bucket: pulumi.String("terraform-ci-xxxxxx"),
//				Container: &ci.MediaTranscodeProTemplateContainerArgs{
//					Format: pulumi.String("mxf"),
//				},
//				TimeInterval: &ci.MediaTranscodeProTemplateTimeIntervalArgs{
//					Duration: pulumi.String(""),
//					Start:    pulumi.String(""),
//				},
//				TransConfig: &ci.MediaTranscodeProTemplateTransConfigArgs{
//					AdjDarMethod:          pulumi.String("scale"),
//					AudioBitrateAdjMethod: pulumi.String("0"),
//					DeleteMetadata:        pulumi.String("false"),
//					IsCheckAudioBitrate:   pulumi.String("false"),
//					IsCheckReso:           pulumi.String("false"),
//					IsCheckVideoBitrate:   pulumi.String("false"),
//					IsHdr2Sdr:             pulumi.String("false"),
//					ResoAdjMethod:         pulumi.String("1"),
//					VideoBitrateAdjMethod: pulumi.String("0"),
//				},
//				Video: &ci.MediaTranscodeProTemplateVideoArgs{
//					Bitrate:    pulumi.String("50000"),
//					Codec:      pulumi.String("xavc"),
//					Fps:        pulumi.String("30000/1001"),
//					Height:     pulumi.String("1080"),
//					Interlaced: pulumi.String("true"),
//					Profile:    pulumi.String("XAVC-HD_422_10bit"),
//					Width:      pulumi.String("1920"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ci media_transcode_pro_template can be imported using the bucket#templateId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate media_transcode_pro_template terraform-ci-xxxxxx#t13ed9af009da0414e9c7c63456ec8f4d2
//
// ```
type MediaTranscodeProTemplate struct {
	pulumi.CustomResourceState

	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio MediaTranscodeProTemplateAudioPtrOutput `pulumi:"audio"`
	// bucket name.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// container format.
	Container MediaTranscodeProTemplateContainerOutput `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringOutput `pulumi:"name"`
	// time interval.
	TimeInterval MediaTranscodeProTemplateTimeIntervalPtrOutput `pulumi:"timeInterval"`
	// transcoding configuration.
	TransConfig MediaTranscodeProTemplateTransConfigPtrOutput `pulumi:"transConfig"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaTranscodeProTemplateVideoPtrOutput `pulumi:"video"`
}

// NewMediaTranscodeProTemplate registers a new resource with the given unique name, arguments, and options.
func NewMediaTranscodeProTemplate(ctx *pulumi.Context,
	name string, args *MediaTranscodeProTemplateArgs, opts ...pulumi.ResourceOption) (*MediaTranscodeProTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Container == nil {
		return nil, errors.New("invalid value for required argument 'Container'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MediaTranscodeProTemplate
	err := ctx.RegisterResource("tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaTranscodeProTemplate gets an existing MediaTranscodeProTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaTranscodeProTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaTranscodeProTemplateState, opts ...pulumi.ResourceOption) (*MediaTranscodeProTemplate, error) {
	var resource MediaTranscodeProTemplate
	err := ctx.ReadResource("tencentcloud:Ci/mediaTranscodeProTemplate:MediaTranscodeProTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaTranscodeProTemplate resources.
type mediaTranscodeProTemplateState struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio *MediaTranscodeProTemplateAudio `pulumi:"audio"`
	// bucket name.
	Bucket *string `pulumi:"bucket"`
	// container format.
	Container *MediaTranscodeProTemplateContainer `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// time interval.
	TimeInterval *MediaTranscodeProTemplateTimeInterval `pulumi:"timeInterval"`
	// transcoding configuration.
	TransConfig *MediaTranscodeProTemplateTransConfig `pulumi:"transConfig"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaTranscodeProTemplateVideo `pulumi:"video"`
}

type MediaTranscodeProTemplateState struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio MediaTranscodeProTemplateAudioPtrInput
	// bucket name.
	Bucket pulumi.StringPtrInput
	// container format.
	Container MediaTranscodeProTemplateContainerPtrInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// time interval.
	TimeInterval MediaTranscodeProTemplateTimeIntervalPtrInput
	// transcoding configuration.
	TransConfig MediaTranscodeProTemplateTransConfigPtrInput
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaTranscodeProTemplateVideoPtrInput
}

func (MediaTranscodeProTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaTranscodeProTemplateState)(nil)).Elem()
}

type mediaTranscodeProTemplateArgs struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio *MediaTranscodeProTemplateAudio `pulumi:"audio"`
	// bucket name.
	Bucket string `pulumi:"bucket"`
	// container format.
	Container MediaTranscodeProTemplateContainer `pulumi:"container"`
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name *string `pulumi:"name"`
	// time interval.
	TimeInterval *MediaTranscodeProTemplateTimeInterval `pulumi:"timeInterval"`
	// transcoding configuration.
	TransConfig *MediaTranscodeProTemplateTransConfig `pulumi:"transConfig"`
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video *MediaTranscodeProTemplateVideo `pulumi:"video"`
}

// The set of arguments for constructing a MediaTranscodeProTemplate resource.
type MediaTranscodeProTemplateArgs struct {
	// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
	Audio MediaTranscodeProTemplateAudioPtrInput
	// bucket name.
	Bucket pulumi.StringInput
	// container format.
	Container MediaTranscodeProTemplateContainerInput
	// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
	Name pulumi.StringPtrInput
	// time interval.
	TimeInterval MediaTranscodeProTemplateTimeIntervalPtrInput
	// transcoding configuration.
	TransConfig MediaTranscodeProTemplateTransConfigPtrInput
	// video information, do not upload Video, which is equivalent to deleting video information.
	Video MediaTranscodeProTemplateVideoPtrInput
}

func (MediaTranscodeProTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaTranscodeProTemplateArgs)(nil)).Elem()
}

type MediaTranscodeProTemplateInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateOutput() MediaTranscodeProTemplateOutput
	ToMediaTranscodeProTemplateOutputWithContext(ctx context.Context) MediaTranscodeProTemplateOutput
}

func (*MediaTranscodeProTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplate)(nil)).Elem()
}

func (i *MediaTranscodeProTemplate) ToMediaTranscodeProTemplateOutput() MediaTranscodeProTemplateOutput {
	return i.ToMediaTranscodeProTemplateOutputWithContext(context.Background())
}

func (i *MediaTranscodeProTemplate) ToMediaTranscodeProTemplateOutputWithContext(ctx context.Context) MediaTranscodeProTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateOutput)
}

// MediaTranscodeProTemplateArrayInput is an input type that accepts MediaTranscodeProTemplateArray and MediaTranscodeProTemplateArrayOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateArrayInput` via:
//
//	MediaTranscodeProTemplateArray{ MediaTranscodeProTemplateArgs{...} }
type MediaTranscodeProTemplateArrayInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateArrayOutput() MediaTranscodeProTemplateArrayOutput
	ToMediaTranscodeProTemplateArrayOutputWithContext(context.Context) MediaTranscodeProTemplateArrayOutput
}

type MediaTranscodeProTemplateArray []MediaTranscodeProTemplateInput

func (MediaTranscodeProTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaTranscodeProTemplate)(nil)).Elem()
}

func (i MediaTranscodeProTemplateArray) ToMediaTranscodeProTemplateArrayOutput() MediaTranscodeProTemplateArrayOutput {
	return i.ToMediaTranscodeProTemplateArrayOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateArray) ToMediaTranscodeProTemplateArrayOutputWithContext(ctx context.Context) MediaTranscodeProTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateArrayOutput)
}

// MediaTranscodeProTemplateMapInput is an input type that accepts MediaTranscodeProTemplateMap and MediaTranscodeProTemplateMapOutput values.
// You can construct a concrete instance of `MediaTranscodeProTemplateMapInput` via:
//
//	MediaTranscodeProTemplateMap{ "key": MediaTranscodeProTemplateArgs{...} }
type MediaTranscodeProTemplateMapInput interface {
	pulumi.Input

	ToMediaTranscodeProTemplateMapOutput() MediaTranscodeProTemplateMapOutput
	ToMediaTranscodeProTemplateMapOutputWithContext(context.Context) MediaTranscodeProTemplateMapOutput
}

type MediaTranscodeProTemplateMap map[string]MediaTranscodeProTemplateInput

func (MediaTranscodeProTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaTranscodeProTemplate)(nil)).Elem()
}

func (i MediaTranscodeProTemplateMap) ToMediaTranscodeProTemplateMapOutput() MediaTranscodeProTemplateMapOutput {
	return i.ToMediaTranscodeProTemplateMapOutputWithContext(context.Background())
}

func (i MediaTranscodeProTemplateMap) ToMediaTranscodeProTemplateMapOutputWithContext(ctx context.Context) MediaTranscodeProTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MediaTranscodeProTemplateMapOutput)
}

type MediaTranscodeProTemplateOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MediaTranscodeProTemplate)(nil)).Elem()
}

func (o MediaTranscodeProTemplateOutput) ToMediaTranscodeProTemplateOutput() MediaTranscodeProTemplateOutput {
	return o
}

func (o MediaTranscodeProTemplateOutput) ToMediaTranscodeProTemplateOutputWithContext(ctx context.Context) MediaTranscodeProTemplateOutput {
	return o
}

// Audio information, do not transmit Audio, which is equivalent to deleting audio information.
func (o MediaTranscodeProTemplateOutput) Audio() MediaTranscodeProTemplateAudioPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) MediaTranscodeProTemplateAudioPtrOutput { return v.Audio }).(MediaTranscodeProTemplateAudioPtrOutput)
}

// bucket name.
func (o MediaTranscodeProTemplateOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// container format.
func (o MediaTranscodeProTemplateOutput) Container() MediaTranscodeProTemplateContainerOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) MediaTranscodeProTemplateContainerOutput { return v.Container }).(MediaTranscodeProTemplateContainerOutput)
}

// The template name only supports `Chinese`, `English`, `numbers`, `_`, `-` and `*`.
func (o MediaTranscodeProTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// time interval.
func (o MediaTranscodeProTemplateOutput) TimeInterval() MediaTranscodeProTemplateTimeIntervalPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) MediaTranscodeProTemplateTimeIntervalPtrOutput {
		return v.TimeInterval
	}).(MediaTranscodeProTemplateTimeIntervalPtrOutput)
}

// transcoding configuration.
func (o MediaTranscodeProTemplateOutput) TransConfig() MediaTranscodeProTemplateTransConfigPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) MediaTranscodeProTemplateTransConfigPtrOutput { return v.TransConfig }).(MediaTranscodeProTemplateTransConfigPtrOutput)
}

// video information, do not upload Video, which is equivalent to deleting video information.
func (o MediaTranscodeProTemplateOutput) Video() MediaTranscodeProTemplateVideoPtrOutput {
	return o.ApplyT(func(v *MediaTranscodeProTemplate) MediaTranscodeProTemplateVideoPtrOutput { return v.Video }).(MediaTranscodeProTemplateVideoPtrOutput)
}

type MediaTranscodeProTemplateArrayOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MediaTranscodeProTemplate)(nil)).Elem()
}

func (o MediaTranscodeProTemplateArrayOutput) ToMediaTranscodeProTemplateArrayOutput() MediaTranscodeProTemplateArrayOutput {
	return o
}

func (o MediaTranscodeProTemplateArrayOutput) ToMediaTranscodeProTemplateArrayOutputWithContext(ctx context.Context) MediaTranscodeProTemplateArrayOutput {
	return o
}

func (o MediaTranscodeProTemplateArrayOutput) Index(i pulumi.IntInput) MediaTranscodeProTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MediaTranscodeProTemplate {
		return vs[0].([]*MediaTranscodeProTemplate)[vs[1].(int)]
	}).(MediaTranscodeProTemplateOutput)
}

type MediaTranscodeProTemplateMapOutput struct{ *pulumi.OutputState }

func (MediaTranscodeProTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MediaTranscodeProTemplate)(nil)).Elem()
}

func (o MediaTranscodeProTemplateMapOutput) ToMediaTranscodeProTemplateMapOutput() MediaTranscodeProTemplateMapOutput {
	return o
}

func (o MediaTranscodeProTemplateMapOutput) ToMediaTranscodeProTemplateMapOutputWithContext(ctx context.Context) MediaTranscodeProTemplateMapOutput {
	return o
}

func (o MediaTranscodeProTemplateMapOutput) MapIndex(k pulumi.StringInput) MediaTranscodeProTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MediaTranscodeProTemplate {
		return vs[0].(map[string]*MediaTranscodeProTemplate)[vs[1].(string)]
	}).(MediaTranscodeProTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateInput)(nil)).Elem(), &MediaTranscodeProTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateArrayInput)(nil)).Elem(), MediaTranscodeProTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MediaTranscodeProTemplateMapInput)(nil)).Elem(), MediaTranscodeProTemplateMap{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateArrayOutput{})
	pulumi.RegisterOutputType(MediaTranscodeProTemplateMapOutput{})
}
