// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tdcpg

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tdcpg cluster.
//
// > **NOTE:** This resource is still in internal testing. To experience its functions, you need to apply for a whitelist from Tencent Cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tdcpg"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tdcpg.NewCluster(ctx, "cluster", &Tdcpg.ClusterArgs{
//				ClusterName:        pulumi.String("cluster_name"),
//				Cpu:                pulumi.Int(1),
//				DbVersion:          pulumi.String("10.17"),
//				InstanceCount:      pulumi.Int(1),
//				MasterUserPassword: pulumi.String(""),
//				Memory:             pulumi.Int(1),
//				PayMode:            pulumi.String("POSTPAID_BY_HOUR"),
//				Period:             pulumi.Int(1),
//				ProjectId:          pulumi.Int(0),
//				SubnetId:           pulumi.String("subnet_id"),
//				VpcId:              pulumi.String("vpc_id"),
//				Zone:               pulumi.String("ap-guangzhou-3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tdcpg cluster can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tdcpg/cluster:Cluster cluster cluster_id
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// cluster name.
	ClusterName pulumi.StringPtrOutput `pulumi:"clusterName"`
	// cpu cores.
	Cpu pulumi.IntOutput `pulumi:"cpu"`
	// community version number, default to 10.17.
	DbVersion pulumi.StringPtrOutput `pulumi:"dbVersion"`
	// instance count.
	InstanceCount pulumi.IntPtrOutput `pulumi:"instanceCount"`
	// user password.
	MasterUserPassword pulumi.StringOutput `pulumi:"masterUserPassword"`
	// memory size.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
	PayMode pulumi.StringOutput `pulumi:"payMode"`
	// purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
	Period pulumi.IntOutput `pulumi:"period"`
	// project id, default to 0, means default project.
	ProjectId pulumi.IntPtrOutput `pulumi:"projectId"`
	// max storage, the unit is GB.
	Storage pulumi.IntOutput `pulumi:"storage"`
	// subnet id.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// vpc id.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// available zone.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cpu == nil {
		return nil, errors.New("invalid value for required argument 'Cpu'")
	}
	if args.MasterUserPassword == nil {
		return nil, errors.New("invalid value for required argument 'MasterUserPassword'")
	}
	if args.Memory == nil {
		return nil, errors.New("invalid value for required argument 'Memory'")
	}
	if args.PayMode == nil {
		return nil, errors.New("invalid value for required argument 'PayMode'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("tencentcloud:Tdcpg/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("tencentcloud:Tdcpg/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// cpu cores.
	Cpu *int `pulumi:"cpu"`
	// community version number, default to 10.17.
	DbVersion *string `pulumi:"dbVersion"`
	// instance count.
	InstanceCount *int `pulumi:"instanceCount"`
	// user password.
	MasterUserPassword *string `pulumi:"masterUserPassword"`
	// memory size.
	Memory *int `pulumi:"memory"`
	// pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
	PayMode *string `pulumi:"payMode"`
	// purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
	Period *int `pulumi:"period"`
	// project id, default to 0, means default project.
	ProjectId *int `pulumi:"projectId"`
	// max storage, the unit is GB.
	Storage *int `pulumi:"storage"`
	// subnet id.
	SubnetId *string `pulumi:"subnetId"`
	// vpc id.
	VpcId *string `pulumi:"vpcId"`
	// available zone.
	Zone *string `pulumi:"zone"`
}

type ClusterState struct {
	// cluster name.
	ClusterName pulumi.StringPtrInput
	// cpu cores.
	Cpu pulumi.IntPtrInput
	// community version number, default to 10.17.
	DbVersion pulumi.StringPtrInput
	// instance count.
	InstanceCount pulumi.IntPtrInput
	// user password.
	MasterUserPassword pulumi.StringPtrInput
	// memory size.
	Memory pulumi.IntPtrInput
	// pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
	PayMode pulumi.StringPtrInput
	// purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
	Period pulumi.IntPtrInput
	// project id, default to 0, means default project.
	ProjectId pulumi.IntPtrInput
	// max storage, the unit is GB.
	Storage pulumi.IntPtrInput
	// subnet id.
	SubnetId pulumi.StringPtrInput
	// vpc id.
	VpcId pulumi.StringPtrInput
	// available zone.
	Zone pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// cpu cores.
	Cpu int `pulumi:"cpu"`
	// community version number, default to 10.17.
	DbVersion *string `pulumi:"dbVersion"`
	// instance count.
	InstanceCount *int `pulumi:"instanceCount"`
	// user password.
	MasterUserPassword string `pulumi:"masterUserPassword"`
	// memory size.
	Memory int `pulumi:"memory"`
	// pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
	PayMode string `pulumi:"payMode"`
	// purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
	Period *int `pulumi:"period"`
	// project id, default to 0, means default project.
	ProjectId *int `pulumi:"projectId"`
	// max storage, the unit is GB.
	Storage *int `pulumi:"storage"`
	// subnet id.
	SubnetId string `pulumi:"subnetId"`
	// vpc id.
	VpcId string `pulumi:"vpcId"`
	// available zone.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// cluster name.
	ClusterName pulumi.StringPtrInput
	// cpu cores.
	Cpu pulumi.IntInput
	// community version number, default to 10.17.
	DbVersion pulumi.StringPtrInput
	// instance count.
	InstanceCount pulumi.IntPtrInput
	// user password.
	MasterUserPassword pulumi.StringInput
	// memory size.
	Memory pulumi.IntInput
	// pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
	PayMode pulumi.StringInput
	// purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
	Period pulumi.IntPtrInput
	// project id, default to 0, means default project.
	ProjectId pulumi.IntPtrInput
	// max storage, the unit is GB.
	Storage pulumi.IntPtrInput
	// subnet id.
	SubnetId pulumi.StringInput
	// vpc id.
	VpcId pulumi.StringInput
	// available zone.
	Zone pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// cluster name.
func (o ClusterOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

// cpu cores.
func (o ClusterOutput) Cpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Cpu }).(pulumi.IntOutput)
}

// community version number, default to 10.17.
func (o ClusterOutput) DbVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.DbVersion }).(pulumi.StringPtrOutput)
}

// instance count.
func (o ClusterOutput) InstanceCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.InstanceCount }).(pulumi.IntPtrOutput)
}

// user password.
func (o ClusterOutput) MasterUserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.MasterUserPassword }).(pulumi.StringOutput)
}

// memory size.
func (o ClusterOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// pay mode, the value is either PREPAID or POSTPAID_BY_HOUR.
func (o ClusterOutput) PayMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.PayMode }).(pulumi.StringOutput)
}

// purchase time, required when PayMode is PREPAID, the value range is 1~60, default to 1.
func (o ClusterOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// project id, default to 0, means default project.
func (o ClusterOutput) ProjectId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.ProjectId }).(pulumi.IntPtrOutput)
}

// max storage, the unit is GB.
func (o ClusterOutput) Storage() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.Storage }).(pulumi.IntOutput)
}

// subnet id.
func (o ClusterOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// vpc id.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// available zone.
func (o ClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
