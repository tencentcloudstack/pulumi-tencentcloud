// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ckafka topic.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ckafka.NewTopic(ctx, "foo", &Ckafka.TopicArgs{
//				CleanUpPolicy:   pulumi.String("delete"),
//				EnableWhiteList: pulumi.Bool(true),
//				InstanceId:      pulumi.String("ckafka-f9ife4zz"),
//				IpWhiteLists: pulumi.StringArray{
//					pulumi.String("ip1"),
//					pulumi.String("ip2"),
//				},
//				MaxMessageBytes:             pulumi.Int(1024),
//				Note:                        pulumi.String("topic note"),
//				PartitionNum:                pulumi.Int(1),
//				ReplicaNum:                  pulumi.Int(2),
//				Retention:                   pulumi.Int(60000),
//				Segment:                     pulumi.Int(3600000),
//				SyncReplicaMinNum:           pulumi.Int(1),
//				TopicName:                   pulumi.String("example"),
//				UncleanLeaderElectionEnable: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTopics(ctx *pulumi.Context, args *GetTopicsArgs, opts ...pulumi.InvokeOption) (*GetTopicsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetTopicsResult
	err := ctx.Invoke("tencentcloud:Ckafka/getTopics:getTopics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopics.
type GetTopicsArgs struct {
	// Ckafka instance ID.
	InstanceId string `pulumi:"instanceId"`
	// Used to store results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-). The length range is from 1 to 64.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by getTopics.
type GetTopicsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	InstanceId string `pulumi:"instanceId"`
	// A list of instances. Each element contains the following attributes.
	InstanceLists    []GetTopicsInstanceList `pulumi:"instanceLists"`
	ResultOutputFile *string                 `pulumi:"resultOutputFile"`
	// Name of the CKafka topic.
	TopicName *string `pulumi:"topicName"`
}

func GetTopicsOutput(ctx *pulumi.Context, args GetTopicsOutputArgs, opts ...pulumi.InvokeOption) GetTopicsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTopicsResult, error) {
			args := v.(GetTopicsArgs)
			r, err := GetTopics(ctx, &args, opts...)
			var s GetTopicsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTopicsResultOutput)
}

// A collection of arguments for invoking getTopics.
type GetTopicsOutputArgs struct {
	// Ckafka instance ID.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Used to store results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Name of the CKafka topic. It must start with a letter, the rest can contain letters, numbers and dashes(-). The length range is from 1 to 64.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (GetTopicsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsArgs)(nil)).Elem()
}

// A collection of values returned by getTopics.
type GetTopicsResultOutput struct{ *pulumi.OutputState }

func (GetTopicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsResult)(nil)).Elem()
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutput() GetTopicsResultOutput {
	return o
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutputWithContext(ctx context.Context) GetTopicsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTopicsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTopicsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// A list of instances. Each element contains the following attributes.
func (o GetTopicsResultOutput) InstanceLists() GetTopicsInstanceListArrayOutput {
	return o.ApplyT(func(v GetTopicsResult) []GetTopicsInstanceList { return v.InstanceLists }).(GetTopicsInstanceListArrayOutput)
}

func (o GetTopicsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Name of the CKafka topic.
func (o GetTopicsResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTopicsResultOutput{})
}
