// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ckafka groupInfo
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ckafka.GetGroupInfo(ctx, &ckafka.GetGroupInfoArgs{
//				GroupLists: []string{
//					"xxxxxx",
//				},
//				InstanceId: "ckafka-xxxxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupGroupInfo(ctx *pulumi.Context, args *LookupGroupInfoArgs, opts ...pulumi.InvokeOption) (*LookupGroupInfoResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupGroupInfoResult
	err := ctx.Invoke("tencentcloud:Ckafka/getGroupInfo:getGroupInfo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupInfo.
type LookupGroupInfoArgs struct {
	// Kafka consumption group, Consumer-group, here is an array format, format GroupList.0=xxx&amp;amp;GroupList.1=yyy.
	GroupLists []string `pulumi:"groupLists"`
	// InstanceId.
	InstanceId string `pulumi:"instanceId"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getGroupInfo.
type LookupGroupInfoResult struct {
	GroupLists []string `pulumi:"groupLists"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	InstanceId       string  `pulumi:"instanceId"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// result.
	Results []GetGroupInfoResult `pulumi:"results"`
}

func LookupGroupInfoOutput(ctx *pulumi.Context, args LookupGroupInfoOutputArgs, opts ...pulumi.InvokeOption) LookupGroupInfoResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupGroupInfoResult, error) {
			args := v.(LookupGroupInfoArgs)
			r, err := LookupGroupInfo(ctx, &args, opts...)
			var s LookupGroupInfoResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupGroupInfoResultOutput)
}

// A collection of arguments for invoking getGroupInfo.
type LookupGroupInfoOutputArgs struct {
	// Kafka consumption group, Consumer-group, here is an array format, format GroupList.0=xxx&amp;amp;GroupList.1=yyy.
	GroupLists pulumi.StringArrayInput `pulumi:"groupLists"`
	// InstanceId.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupGroupInfoOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupInfoArgs)(nil)).Elem()
}

// A collection of values returned by getGroupInfo.
type LookupGroupInfoResultOutput struct{ *pulumi.OutputState }

func (LookupGroupInfoResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupGroupInfoResult)(nil)).Elem()
}

func (o LookupGroupInfoResultOutput) ToLookupGroupInfoResultOutput() LookupGroupInfoResultOutput {
	return o
}

func (o LookupGroupInfoResultOutput) ToLookupGroupInfoResultOutputWithContext(ctx context.Context) LookupGroupInfoResultOutput {
	return o
}

func (o LookupGroupInfoResultOutput) GroupLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupGroupInfoResult) []string { return v.GroupLists }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupGroupInfoResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupInfoResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupGroupInfoResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupGroupInfoResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupGroupInfoResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupGroupInfoResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// result.
func (o LookupGroupInfoResultOutput) Results() GetGroupInfoResultArrayOutput {
	return o.ApplyT(func(v LookupGroupInfoResult) []GetGroupInfoResult { return v.Results }).(GetGroupInfoResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupGroupInfoResultOutput{})
}
