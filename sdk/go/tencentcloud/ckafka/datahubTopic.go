// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ckafka datahubTopic
//
// ## Import
//
// ckafka datahub_topic can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ckafka/datahubTopic:DatahubTopic datahub_topic datahub_topic_name
//
// ```
type DatahubTopic struct {
	pulumi.CustomResourceState

	// Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
	Name pulumi.StringOutput `pulumi:"name"`
	// Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// Number of Partitions, greater than 0.
	PartitionNum pulumi.IntOutput `pulumi:"partitionNum"`
	// Message retention time, in ms, the current minimum value is 60000 ms.
	RetentionMs pulumi.IntOutput `pulumi:"retentionMs"`
	// Tags of dataHub topic.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewDatahubTopic registers a new resource with the given unique name, arguments, and options.
func NewDatahubTopic(ctx *pulumi.Context,
	name string, args *DatahubTopicArgs, opts ...pulumi.ResourceOption) (*DatahubTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PartitionNum == nil {
		return nil, errors.New("invalid value for required argument 'PartitionNum'")
	}
	if args.RetentionMs == nil {
		return nil, errors.New("invalid value for required argument 'RetentionMs'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DatahubTopic
	err := ctx.RegisterResource("tencentcloud:Ckafka/datahubTopic:DatahubTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatahubTopic gets an existing DatahubTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatahubTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatahubTopicState, opts ...pulumi.ResourceOption) (*DatahubTopic, error) {
	var resource DatahubTopic
	err := ctx.ReadResource("tencentcloud:Ckafka/datahubTopic:DatahubTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatahubTopic resources.
type datahubTopicState struct {
	// Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
	Name *string `pulumi:"name"`
	// Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
	Note *string `pulumi:"note"`
	// Number of Partitions, greater than 0.
	PartitionNum *int `pulumi:"partitionNum"`
	// Message retention time, in ms, the current minimum value is 60000 ms.
	RetentionMs *int `pulumi:"retentionMs"`
	// Tags of dataHub topic.
	Tags map[string]interface{} `pulumi:"tags"`
}

type DatahubTopicState struct {
	// Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
	Name pulumi.StringPtrInput
	// Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
	Note pulumi.StringPtrInput
	// Number of Partitions, greater than 0.
	PartitionNum pulumi.IntPtrInput
	// Message retention time, in ms, the current minimum value is 60000 ms.
	RetentionMs pulumi.IntPtrInput
	// Tags of dataHub topic.
	Tags pulumi.MapInput
}

func (DatahubTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*datahubTopicState)(nil)).Elem()
}

type datahubTopicArgs struct {
	// Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
	Name *string `pulumi:"name"`
	// Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
	Note *string `pulumi:"note"`
	// Number of Partitions, greater than 0.
	PartitionNum int `pulumi:"partitionNum"`
	// Message retention time, in ms, the current minimum value is 60000 ms.
	RetentionMs int `pulumi:"retentionMs"`
	// Tags of dataHub topic.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a DatahubTopic resource.
type DatahubTopicArgs struct {
	// Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
	Name pulumi.StringPtrInput
	// Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
	Note pulumi.StringPtrInput
	// Number of Partitions, greater than 0.
	PartitionNum pulumi.IntInput
	// Message retention time, in ms, the current minimum value is 60000 ms.
	RetentionMs pulumi.IntInput
	// Tags of dataHub topic.
	Tags pulumi.MapInput
}

func (DatahubTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datahubTopicArgs)(nil)).Elem()
}

type DatahubTopicInput interface {
	pulumi.Input

	ToDatahubTopicOutput() DatahubTopicOutput
	ToDatahubTopicOutputWithContext(ctx context.Context) DatahubTopicOutput
}

func (*DatahubTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**DatahubTopic)(nil)).Elem()
}

func (i *DatahubTopic) ToDatahubTopicOutput() DatahubTopicOutput {
	return i.ToDatahubTopicOutputWithContext(context.Background())
}

func (i *DatahubTopic) ToDatahubTopicOutputWithContext(ctx context.Context) DatahubTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatahubTopicOutput)
}

// DatahubTopicArrayInput is an input type that accepts DatahubTopicArray and DatahubTopicArrayOutput values.
// You can construct a concrete instance of `DatahubTopicArrayInput` via:
//
//	DatahubTopicArray{ DatahubTopicArgs{...} }
type DatahubTopicArrayInput interface {
	pulumi.Input

	ToDatahubTopicArrayOutput() DatahubTopicArrayOutput
	ToDatahubTopicArrayOutputWithContext(context.Context) DatahubTopicArrayOutput
}

type DatahubTopicArray []DatahubTopicInput

func (DatahubTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatahubTopic)(nil)).Elem()
}

func (i DatahubTopicArray) ToDatahubTopicArrayOutput() DatahubTopicArrayOutput {
	return i.ToDatahubTopicArrayOutputWithContext(context.Background())
}

func (i DatahubTopicArray) ToDatahubTopicArrayOutputWithContext(ctx context.Context) DatahubTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatahubTopicArrayOutput)
}

// DatahubTopicMapInput is an input type that accepts DatahubTopicMap and DatahubTopicMapOutput values.
// You can construct a concrete instance of `DatahubTopicMapInput` via:
//
//	DatahubTopicMap{ "key": DatahubTopicArgs{...} }
type DatahubTopicMapInput interface {
	pulumi.Input

	ToDatahubTopicMapOutput() DatahubTopicMapOutput
	ToDatahubTopicMapOutputWithContext(context.Context) DatahubTopicMapOutput
}

type DatahubTopicMap map[string]DatahubTopicInput

func (DatahubTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatahubTopic)(nil)).Elem()
}

func (i DatahubTopicMap) ToDatahubTopicMapOutput() DatahubTopicMapOutput {
	return i.ToDatahubTopicMapOutputWithContext(context.Background())
}

func (i DatahubTopicMap) ToDatahubTopicMapOutputWithContext(ctx context.Context) DatahubTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatahubTopicMapOutput)
}

type DatahubTopicOutput struct{ *pulumi.OutputState }

func (DatahubTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatahubTopic)(nil)).Elem()
}

func (o DatahubTopicOutput) ToDatahubTopicOutput() DatahubTopicOutput {
	return o
}

func (o DatahubTopicOutput) ToDatahubTopicOutputWithContext(ctx context.Context) DatahubTopicOutput {
	return o
}

// Name, start with appid, which is a string of no more than 128 characters, must start with a letter, and the rest can contain letters, numbers, and dashes (-).
func (o DatahubTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatahubTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Subject note, which is a string of no more than 64 characters, must start with a letter, and the rest can contain letters, numbers and dashes (-).
func (o DatahubTopicOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatahubTopic) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// Number of Partitions, greater than 0.
func (o DatahubTopicOutput) PartitionNum() pulumi.IntOutput {
	return o.ApplyT(func(v *DatahubTopic) pulumi.IntOutput { return v.PartitionNum }).(pulumi.IntOutput)
}

// Message retention time, in ms, the current minimum value is 60000 ms.
func (o DatahubTopicOutput) RetentionMs() pulumi.IntOutput {
	return o.ApplyT(func(v *DatahubTopic) pulumi.IntOutput { return v.RetentionMs }).(pulumi.IntOutput)
}

// Tags of dataHub topic.
func (o DatahubTopicOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *DatahubTopic) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type DatahubTopicArrayOutput struct{ *pulumi.OutputState }

func (DatahubTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatahubTopic)(nil)).Elem()
}

func (o DatahubTopicArrayOutput) ToDatahubTopicArrayOutput() DatahubTopicArrayOutput {
	return o
}

func (o DatahubTopicArrayOutput) ToDatahubTopicArrayOutputWithContext(ctx context.Context) DatahubTopicArrayOutput {
	return o
}

func (o DatahubTopicArrayOutput) Index(i pulumi.IntInput) DatahubTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatahubTopic {
		return vs[0].([]*DatahubTopic)[vs[1].(int)]
	}).(DatahubTopicOutput)
}

type DatahubTopicMapOutput struct{ *pulumi.OutputState }

func (DatahubTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatahubTopic)(nil)).Elem()
}

func (o DatahubTopicMapOutput) ToDatahubTopicMapOutput() DatahubTopicMapOutput {
	return o
}

func (o DatahubTopicMapOutput) ToDatahubTopicMapOutputWithContext(ctx context.Context) DatahubTopicMapOutput {
	return o
}

func (o DatahubTopicMapOutput) MapIndex(k pulumi.StringInput) DatahubTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatahubTopic {
		return vs[0].(map[string]*DatahubTopic)[vs[1].(string)]
	}).(DatahubTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatahubTopicInput)(nil)).Elem(), &DatahubTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatahubTopicArrayInput)(nil)).Elem(), DatahubTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatahubTopicMapInput)(nil)).Elem(), DatahubTopicMap{})
	pulumi.RegisterOutputType(DatahubTopicOutput{})
	pulumi.RegisterOutputType(DatahubTopicArrayOutput{})
	pulumi.RegisterOutputType(DatahubTopicMapOutput{})
}
