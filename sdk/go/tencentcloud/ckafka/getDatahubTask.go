// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ckafka datahubTask
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ckafka.GetDatahubTask(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDatahubTask(ctx *pulumi.Context, args *LookupDatahubTaskArgs, opts ...pulumi.InvokeOption) (*LookupDatahubTaskResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupDatahubTaskResult
	err := ctx.Invoke("tencentcloud:Ckafka/getDatahubTask:getDatahubTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatahubTask.
type LookupDatahubTaskArgs struct {
	// Resource.
	Resource *string `pulumi:"resource"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// search key.
	SearchWord *string `pulumi:"searchWord"`
	// The source type.
	SourceType *string `pulumi:"sourceType"`
	// Destination type of dump.
	TargetType *string `pulumi:"targetType"`
	// Task type, SOURCE|SINK.
	TaskType *string `pulumi:"taskType"`
}

// A collection of values returned by getDatahubTask.
type LookupDatahubTaskResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The topic name of the topic sold separately.
	Resource         *string `pulumi:"resource"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SearchWord       *string `pulumi:"searchWord"`
	SourceType       *string `pulumi:"sourceType"`
	TargetType       *string `pulumi:"targetType"`
	// Datahub task information list.
	TaskLists []GetDatahubTaskTaskList `pulumi:"taskLists"`
	// TaskType, SOURCE|SINK.
	TaskType *string `pulumi:"taskType"`
}

func LookupDatahubTaskOutput(ctx *pulumi.Context, args LookupDatahubTaskOutputArgs, opts ...pulumi.InvokeOption) LookupDatahubTaskResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatahubTaskResult, error) {
			args := v.(LookupDatahubTaskArgs)
			r, err := LookupDatahubTask(ctx, &args, opts...)
			var s LookupDatahubTaskResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatahubTaskResultOutput)
}

// A collection of arguments for invoking getDatahubTask.
type LookupDatahubTaskOutputArgs struct {
	// Resource.
	Resource pulumi.StringPtrInput `pulumi:"resource"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// search key.
	SearchWord pulumi.StringPtrInput `pulumi:"searchWord"`
	// The source type.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// Destination type of dump.
	TargetType pulumi.StringPtrInput `pulumi:"targetType"`
	// Task type, SOURCE|SINK.
	TaskType pulumi.StringPtrInput `pulumi:"taskType"`
}

func (LookupDatahubTaskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatahubTaskArgs)(nil)).Elem()
}

// A collection of values returned by getDatahubTask.
type LookupDatahubTaskResultOutput struct{ *pulumi.OutputState }

func (LookupDatahubTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatahubTaskResult)(nil)).Elem()
}

func (o LookupDatahubTaskResultOutput) ToLookupDatahubTaskResultOutput() LookupDatahubTaskResultOutput {
	return o
}

func (o LookupDatahubTaskResultOutput) ToLookupDatahubTaskResultOutputWithContext(ctx context.Context) LookupDatahubTaskResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatahubTaskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) string { return v.Id }).(pulumi.StringOutput)
}

// The topic name of the topic sold separately.
func (o LookupDatahubTaskResultOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

func (o LookupDatahubTaskResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o LookupDatahubTaskResultOutput) SearchWord() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) *string { return v.SearchWord }).(pulumi.StringPtrOutput)
}

func (o LookupDatahubTaskResultOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

func (o LookupDatahubTaskResultOutput) TargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) *string { return v.TargetType }).(pulumi.StringPtrOutput)
}

// Datahub task information list.
func (o LookupDatahubTaskResultOutput) TaskLists() GetDatahubTaskTaskListArrayOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) []GetDatahubTaskTaskList { return v.TaskLists }).(GetDatahubTaskTaskListArrayOutput)
}

// TaskType, SOURCE|SINK.
func (o LookupDatahubTaskResultOutput) TaskType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDatahubTaskResult) *string { return v.TaskType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatahubTaskResultOutput{})
}
