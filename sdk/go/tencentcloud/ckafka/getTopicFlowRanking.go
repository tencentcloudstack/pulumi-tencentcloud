// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of ckafka topicFlowRanking
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ckafka.GetTopicFlowRanking(ctx, &ckafka.GetTopicFlowRankingArgs{
//				BeginDate:   pulumi.StringRef("2023-05-29T00:00:00+08:00"),
//				EndDate:     pulumi.StringRef("2021-05-29T23:59:59+08:00"),
//				InstanceId:  "ckafka-xxxxxx",
//				RankingType: "PRO",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTopicFlowRanking(ctx *pulumi.Context, args *LookupTopicFlowRankingArgs, opts ...pulumi.InvokeOption) (*LookupTopicFlowRankingResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupTopicFlowRankingResult
	err := ctx.Invoke("tencentcloud:Ckafka/getTopicFlowRanking:getTopicFlowRanking", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopicFlowRanking.
type LookupTopicFlowRankingArgs struct {
	// BeginDate.
	BeginDate *string `pulumi:"beginDate"`
	// EndDate.
	EndDate *string `pulumi:"endDate"`
	// InstanceId.
	InstanceId string `pulumi:"instanceId"`
	// Ranking type. `PRO`: topic production flow, `CON`: topic consumption traffic.
	RankingType string `pulumi:"rankingType"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getTopicFlowRanking.
type LookupTopicFlowRankingResult struct {
	BeginDate *string `pulumi:"beginDate"`
	EndDate   *string `pulumi:"endDate"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	InstanceId       string  `pulumi:"instanceId"`
	RankingType      string  `pulumi:"rankingType"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// result.
	Results []GetTopicFlowRankingResult `pulumi:"results"`
}

func LookupTopicFlowRankingOutput(ctx *pulumi.Context, args LookupTopicFlowRankingOutputArgs, opts ...pulumi.InvokeOption) LookupTopicFlowRankingResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTopicFlowRankingResult, error) {
			args := v.(LookupTopicFlowRankingArgs)
			r, err := LookupTopicFlowRanking(ctx, &args, opts...)
			var s LookupTopicFlowRankingResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTopicFlowRankingResultOutput)
}

// A collection of arguments for invoking getTopicFlowRanking.
type LookupTopicFlowRankingOutputArgs struct {
	// BeginDate.
	BeginDate pulumi.StringPtrInput `pulumi:"beginDate"`
	// EndDate.
	EndDate pulumi.StringPtrInput `pulumi:"endDate"`
	// InstanceId.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Ranking type. `PRO`: topic production flow, `CON`: topic consumption traffic.
	RankingType pulumi.StringInput `pulumi:"rankingType"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupTopicFlowRankingOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicFlowRankingArgs)(nil)).Elem()
}

// A collection of values returned by getTopicFlowRanking.
type LookupTopicFlowRankingResultOutput struct{ *pulumi.OutputState }

func (LookupTopicFlowRankingResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicFlowRankingResult)(nil)).Elem()
}

func (o LookupTopicFlowRankingResultOutput) ToLookupTopicFlowRankingResultOutput() LookupTopicFlowRankingResultOutput {
	return o
}

func (o LookupTopicFlowRankingResultOutput) ToLookupTopicFlowRankingResultOutputWithContext(ctx context.Context) LookupTopicFlowRankingResultOutput {
	return o
}

func (o LookupTopicFlowRankingResultOutput) BeginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) *string { return v.BeginDate }).(pulumi.StringPtrOutput)
}

func (o LookupTopicFlowRankingResultOutput) EndDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) *string { return v.EndDate }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupTopicFlowRankingResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTopicFlowRankingResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o LookupTopicFlowRankingResultOutput) RankingType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) string { return v.RankingType }).(pulumi.StringOutput)
}

func (o LookupTopicFlowRankingResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// result.
func (o LookupTopicFlowRankingResultOutput) Results() GetTopicFlowRankingResultArrayOutput {
	return o.ApplyT(func(v LookupTopicFlowRankingResult) []GetTopicFlowRankingResult { return v.Results }).(GetTopicFlowRankingResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTopicFlowRankingResultOutput{})
}
