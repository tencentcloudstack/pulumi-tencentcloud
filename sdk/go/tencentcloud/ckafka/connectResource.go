// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ckafka

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a ckafka connectResource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Ckafka"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Ckafka.NewConnectResource(ctx, "connectResource", &Ckafka.ConnectResourceArgs{
//				Description: pulumi.String("for terraform test"),
//				MysqlConnectParam: &ckafka.ConnectResourceMysqlConnectParamArgs{
//					Password:   pulumi.String("xxxxxxxxx"),
//					Port:       pulumi.Int(3306),
//					Resource:   pulumi.String("cdb-fitq5t9h"),
//					SelfBuilt:  pulumi.Bool(false),
//					ServiceVip: pulumi.String("172.16.80.59"),
//					UniqVpcId:  pulumi.String("vpc-4owdpnwr"),
//					UserName:   pulumi.String("root"),
//				},
//				ResourceName: pulumi.String("terraform-test"),
//				Type:         pulumi.String("MYSQL"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ckafka connect_resource can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Ckafka/connectResource:ConnectResource connect_resource connect_resource_id
//
// ```
type ConnectResource struct {
	pulumi.CustomResourceState

	// ClickHouse configuration, required when Type is CLICKHOUSE.
	ClickhouseConnectParam ConnectResourceClickhouseConnectParamPtrOutput `pulumi:"clickhouseConnectParam"`
	// Connection source description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Doris configuration, required when Type is DORIS.
	DorisConnectParam ConnectResourceDorisConnectParamPtrOutput `pulumi:"dorisConnectParam"`
	// Dts configuration, required when Type is DTS.
	DtsConnectParam ConnectResourceDtsConnectParamPtrOutput `pulumi:"dtsConnectParam"`
	// Es configuration, required when Type is ES.
	EsConnectParam ConnectResourceEsConnectParamPtrOutput `pulumi:"esConnectParam"`
	// Kafka configuration, required when Type is KAFKA.
	KafkaConnectParam ConnectResourceKafkaConnectParamPtrOutput `pulumi:"kafkaConnectParam"`
	// Maria DB configuration, required when Type is MARIADB.
	MariadbConnectParam ConnectResourceMariadbConnectParamPtrOutput `pulumi:"mariadbConnectParam"`
	// Mongo DB configuration, required when Type is MONGODB.
	MongodbConnectParam ConnectResourceMongodbConnectParamPtrOutput `pulumi:"mongodbConnectParam"`
	// MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
	MysqlConnectParam ConnectResourceMysqlConnectParamPtrOutput `pulumi:"mysqlConnectParam"`
	// Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
	PostgresqlConnectParam ConnectResourcePostgresqlConnectParamPtrOutput `pulumi:"postgresqlConnectParam"`
	// connection source name.
	ResourceName pulumi.StringOutput `pulumi:"resourceName"`
	// SQLServer configuration, required when Type is SQLSERVER.
	SqlserverConnectParam ConnectResourceSqlserverConnectParamPtrOutput `pulumi:"sqlserverConnectParam"`
	// connection source type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewConnectResource registers a new resource with the given unique name, arguments, and options.
func NewConnectResource(ctx *pulumi.Context,
	name string, args *ConnectResourceArgs, opts ...pulumi.ResourceOption) (*ConnectResource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConnectResource
	err := ctx.RegisterResource("tencentcloud:Ckafka/connectResource:ConnectResource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectResource gets an existing ConnectResource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectResourceState, opts ...pulumi.ResourceOption) (*ConnectResource, error) {
	var resource ConnectResource
	err := ctx.ReadResource("tencentcloud:Ckafka/connectResource:ConnectResource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectResource resources.
type connectResourceState struct {
	// ClickHouse configuration, required when Type is CLICKHOUSE.
	ClickhouseConnectParam *ConnectResourceClickhouseConnectParam `pulumi:"clickhouseConnectParam"`
	// Connection source description.
	Description *string `pulumi:"description"`
	// Doris configuration, required when Type is DORIS.
	DorisConnectParam *ConnectResourceDorisConnectParam `pulumi:"dorisConnectParam"`
	// Dts configuration, required when Type is DTS.
	DtsConnectParam *ConnectResourceDtsConnectParam `pulumi:"dtsConnectParam"`
	// Es configuration, required when Type is ES.
	EsConnectParam *ConnectResourceEsConnectParam `pulumi:"esConnectParam"`
	// Kafka configuration, required when Type is KAFKA.
	KafkaConnectParam *ConnectResourceKafkaConnectParam `pulumi:"kafkaConnectParam"`
	// Maria DB configuration, required when Type is MARIADB.
	MariadbConnectParam *ConnectResourceMariadbConnectParam `pulumi:"mariadbConnectParam"`
	// Mongo DB configuration, required when Type is MONGODB.
	MongodbConnectParam *ConnectResourceMongodbConnectParam `pulumi:"mongodbConnectParam"`
	// MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
	MysqlConnectParam *ConnectResourceMysqlConnectParam `pulumi:"mysqlConnectParam"`
	// Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
	PostgresqlConnectParam *ConnectResourcePostgresqlConnectParam `pulumi:"postgresqlConnectParam"`
	// connection source name.
	ResourceName *string `pulumi:"resourceName"`
	// SQLServer configuration, required when Type is SQLSERVER.
	SqlserverConnectParam *ConnectResourceSqlserverConnectParam `pulumi:"sqlserverConnectParam"`
	// connection source type.
	Type *string `pulumi:"type"`
}

type ConnectResourceState struct {
	// ClickHouse configuration, required when Type is CLICKHOUSE.
	ClickhouseConnectParam ConnectResourceClickhouseConnectParamPtrInput
	// Connection source description.
	Description pulumi.StringPtrInput
	// Doris configuration, required when Type is DORIS.
	DorisConnectParam ConnectResourceDorisConnectParamPtrInput
	// Dts configuration, required when Type is DTS.
	DtsConnectParam ConnectResourceDtsConnectParamPtrInput
	// Es configuration, required when Type is ES.
	EsConnectParam ConnectResourceEsConnectParamPtrInput
	// Kafka configuration, required when Type is KAFKA.
	KafkaConnectParam ConnectResourceKafkaConnectParamPtrInput
	// Maria DB configuration, required when Type is MARIADB.
	MariadbConnectParam ConnectResourceMariadbConnectParamPtrInput
	// Mongo DB configuration, required when Type is MONGODB.
	MongodbConnectParam ConnectResourceMongodbConnectParamPtrInput
	// MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
	MysqlConnectParam ConnectResourceMysqlConnectParamPtrInput
	// Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
	PostgresqlConnectParam ConnectResourcePostgresqlConnectParamPtrInput
	// connection source name.
	ResourceName pulumi.StringPtrInput
	// SQLServer configuration, required when Type is SQLSERVER.
	SqlserverConnectParam ConnectResourceSqlserverConnectParamPtrInput
	// connection source type.
	Type pulumi.StringPtrInput
}

func (ConnectResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectResourceState)(nil)).Elem()
}

type connectResourceArgs struct {
	// ClickHouse configuration, required when Type is CLICKHOUSE.
	ClickhouseConnectParam *ConnectResourceClickhouseConnectParam `pulumi:"clickhouseConnectParam"`
	// Connection source description.
	Description *string `pulumi:"description"`
	// Doris configuration, required when Type is DORIS.
	DorisConnectParam *ConnectResourceDorisConnectParam `pulumi:"dorisConnectParam"`
	// Dts configuration, required when Type is DTS.
	DtsConnectParam *ConnectResourceDtsConnectParam `pulumi:"dtsConnectParam"`
	// Es configuration, required when Type is ES.
	EsConnectParam *ConnectResourceEsConnectParam `pulumi:"esConnectParam"`
	// Kafka configuration, required when Type is KAFKA.
	KafkaConnectParam *ConnectResourceKafkaConnectParam `pulumi:"kafkaConnectParam"`
	// Maria DB configuration, required when Type is MARIADB.
	MariadbConnectParam *ConnectResourceMariadbConnectParam `pulumi:"mariadbConnectParam"`
	// Mongo DB configuration, required when Type is MONGODB.
	MongodbConnectParam *ConnectResourceMongodbConnectParam `pulumi:"mongodbConnectParam"`
	// MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
	MysqlConnectParam *ConnectResourceMysqlConnectParam `pulumi:"mysqlConnectParam"`
	// Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
	PostgresqlConnectParam *ConnectResourcePostgresqlConnectParam `pulumi:"postgresqlConnectParam"`
	// connection source name.
	ResourceName string `pulumi:"resourceName"`
	// SQLServer configuration, required when Type is SQLSERVER.
	SqlserverConnectParam *ConnectResourceSqlserverConnectParam `pulumi:"sqlserverConnectParam"`
	// connection source type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a ConnectResource resource.
type ConnectResourceArgs struct {
	// ClickHouse configuration, required when Type is CLICKHOUSE.
	ClickhouseConnectParam ConnectResourceClickhouseConnectParamPtrInput
	// Connection source description.
	Description pulumi.StringPtrInput
	// Doris configuration, required when Type is DORIS.
	DorisConnectParam ConnectResourceDorisConnectParamPtrInput
	// Dts configuration, required when Type is DTS.
	DtsConnectParam ConnectResourceDtsConnectParamPtrInput
	// Es configuration, required when Type is ES.
	EsConnectParam ConnectResourceEsConnectParamPtrInput
	// Kafka configuration, required when Type is KAFKA.
	KafkaConnectParam ConnectResourceKafkaConnectParamPtrInput
	// Maria DB configuration, required when Type is MARIADB.
	MariadbConnectParam ConnectResourceMariadbConnectParamPtrInput
	// Mongo DB configuration, required when Type is MONGODB.
	MongodbConnectParam ConnectResourceMongodbConnectParamPtrInput
	// MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
	MysqlConnectParam ConnectResourceMysqlConnectParamPtrInput
	// Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
	PostgresqlConnectParam ConnectResourcePostgresqlConnectParamPtrInput
	// connection source name.
	ResourceName pulumi.StringInput
	// SQLServer configuration, required when Type is SQLSERVER.
	SqlserverConnectParam ConnectResourceSqlserverConnectParamPtrInput
	// connection source type.
	Type pulumi.StringInput
}

func (ConnectResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectResourceArgs)(nil)).Elem()
}

type ConnectResourceInput interface {
	pulumi.Input

	ToConnectResourceOutput() ConnectResourceOutput
	ToConnectResourceOutputWithContext(ctx context.Context) ConnectResourceOutput
}

func (*ConnectResource) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectResource)(nil)).Elem()
}

func (i *ConnectResource) ToConnectResourceOutput() ConnectResourceOutput {
	return i.ToConnectResourceOutputWithContext(context.Background())
}

func (i *ConnectResource) ToConnectResourceOutputWithContext(ctx context.Context) ConnectResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectResourceOutput)
}

// ConnectResourceArrayInput is an input type that accepts ConnectResourceArray and ConnectResourceArrayOutput values.
// You can construct a concrete instance of `ConnectResourceArrayInput` via:
//
//	ConnectResourceArray{ ConnectResourceArgs{...} }
type ConnectResourceArrayInput interface {
	pulumi.Input

	ToConnectResourceArrayOutput() ConnectResourceArrayOutput
	ToConnectResourceArrayOutputWithContext(context.Context) ConnectResourceArrayOutput
}

type ConnectResourceArray []ConnectResourceInput

func (ConnectResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectResource)(nil)).Elem()
}

func (i ConnectResourceArray) ToConnectResourceArrayOutput() ConnectResourceArrayOutput {
	return i.ToConnectResourceArrayOutputWithContext(context.Background())
}

func (i ConnectResourceArray) ToConnectResourceArrayOutputWithContext(ctx context.Context) ConnectResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectResourceArrayOutput)
}

// ConnectResourceMapInput is an input type that accepts ConnectResourceMap and ConnectResourceMapOutput values.
// You can construct a concrete instance of `ConnectResourceMapInput` via:
//
//	ConnectResourceMap{ "key": ConnectResourceArgs{...} }
type ConnectResourceMapInput interface {
	pulumi.Input

	ToConnectResourceMapOutput() ConnectResourceMapOutput
	ToConnectResourceMapOutputWithContext(context.Context) ConnectResourceMapOutput
}

type ConnectResourceMap map[string]ConnectResourceInput

func (ConnectResourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectResource)(nil)).Elem()
}

func (i ConnectResourceMap) ToConnectResourceMapOutput() ConnectResourceMapOutput {
	return i.ToConnectResourceMapOutputWithContext(context.Background())
}

func (i ConnectResourceMap) ToConnectResourceMapOutputWithContext(ctx context.Context) ConnectResourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectResourceMapOutput)
}

type ConnectResourceOutput struct{ *pulumi.OutputState }

func (ConnectResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectResource)(nil)).Elem()
}

func (o ConnectResourceOutput) ToConnectResourceOutput() ConnectResourceOutput {
	return o
}

func (o ConnectResourceOutput) ToConnectResourceOutputWithContext(ctx context.Context) ConnectResourceOutput {
	return o
}

// ClickHouse configuration, required when Type is CLICKHOUSE.
func (o ConnectResourceOutput) ClickhouseConnectParam() ConnectResourceClickhouseConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceClickhouseConnectParamPtrOutput {
		return v.ClickhouseConnectParam
	}).(ConnectResourceClickhouseConnectParamPtrOutput)
}

// Connection source description.
func (o ConnectResourceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectResource) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Doris configuration, required when Type is DORIS.
func (o ConnectResourceOutput) DorisConnectParam() ConnectResourceDorisConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceDorisConnectParamPtrOutput { return v.DorisConnectParam }).(ConnectResourceDorisConnectParamPtrOutput)
}

// Dts configuration, required when Type is DTS.
func (o ConnectResourceOutput) DtsConnectParam() ConnectResourceDtsConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceDtsConnectParamPtrOutput { return v.DtsConnectParam }).(ConnectResourceDtsConnectParamPtrOutput)
}

// Es configuration, required when Type is ES.
func (o ConnectResourceOutput) EsConnectParam() ConnectResourceEsConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceEsConnectParamPtrOutput { return v.EsConnectParam }).(ConnectResourceEsConnectParamPtrOutput)
}

// Kafka configuration, required when Type is KAFKA.
func (o ConnectResourceOutput) KafkaConnectParam() ConnectResourceKafkaConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceKafkaConnectParamPtrOutput { return v.KafkaConnectParam }).(ConnectResourceKafkaConnectParamPtrOutput)
}

// Maria DB configuration, required when Type is MARIADB.
func (o ConnectResourceOutput) MariadbConnectParam() ConnectResourceMariadbConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceMariadbConnectParamPtrOutput { return v.MariadbConnectParam }).(ConnectResourceMariadbConnectParamPtrOutput)
}

// Mongo DB configuration, required when Type is MONGODB.
func (o ConnectResourceOutput) MongodbConnectParam() ConnectResourceMongodbConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceMongodbConnectParamPtrOutput { return v.MongodbConnectParam }).(ConnectResourceMongodbConnectParamPtrOutput)
}

// MySQL configuration, required when Type is MYSQL or TDSQL C_MYSQL.
func (o ConnectResourceOutput) MysqlConnectParam() ConnectResourceMysqlConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceMysqlConnectParamPtrOutput { return v.MysqlConnectParam }).(ConnectResourceMysqlConnectParamPtrOutput)
}

// Postgresql configuration, required when Type is POSTGRESQL or TDSQL C POSTGRESQL.
func (o ConnectResourceOutput) PostgresqlConnectParam() ConnectResourcePostgresqlConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourcePostgresqlConnectParamPtrOutput {
		return v.PostgresqlConnectParam
	}).(ConnectResourcePostgresqlConnectParamPtrOutput)
}

// connection source name.
func (o ConnectResourceOutput) ResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectResource) pulumi.StringOutput { return v.ResourceName }).(pulumi.StringOutput)
}

// SQLServer configuration, required when Type is SQLSERVER.
func (o ConnectResourceOutput) SqlserverConnectParam() ConnectResourceSqlserverConnectParamPtrOutput {
	return o.ApplyT(func(v *ConnectResource) ConnectResourceSqlserverConnectParamPtrOutput { return v.SqlserverConnectParam }).(ConnectResourceSqlserverConnectParamPtrOutput)
}

// connection source type.
func (o ConnectResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectResource) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ConnectResourceArrayOutput struct{ *pulumi.OutputState }

func (ConnectResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectResource)(nil)).Elem()
}

func (o ConnectResourceArrayOutput) ToConnectResourceArrayOutput() ConnectResourceArrayOutput {
	return o
}

func (o ConnectResourceArrayOutput) ToConnectResourceArrayOutputWithContext(ctx context.Context) ConnectResourceArrayOutput {
	return o
}

func (o ConnectResourceArrayOutput) Index(i pulumi.IntInput) ConnectResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectResource {
		return vs[0].([]*ConnectResource)[vs[1].(int)]
	}).(ConnectResourceOutput)
}

type ConnectResourceMapOutput struct{ *pulumi.OutputState }

func (ConnectResourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectResource)(nil)).Elem()
}

func (o ConnectResourceMapOutput) ToConnectResourceMapOutput() ConnectResourceMapOutput {
	return o
}

func (o ConnectResourceMapOutput) ToConnectResourceMapOutputWithContext(ctx context.Context) ConnectResourceMapOutput {
	return o
}

func (o ConnectResourceMapOutput) MapIndex(k pulumi.StringInput) ConnectResourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectResource {
		return vs[0].(map[string]*ConnectResource)[vs[1].(string)]
	}).(ConnectResourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectResourceInput)(nil)).Elem(), &ConnectResource{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectResourceArrayInput)(nil)).Elem(), ConnectResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectResourceMapInput)(nil)).Elem(), ConnectResourceMap{})
	pulumi.RegisterOutputType(ConnectResourceOutput{})
	pulumi.RegisterOutputType(ConnectResourceArrayOutput{})
	pulumi.RegisterOutputType(ConnectResourceMapOutput{})
}
