// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a pts cronJobAbort
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pts.NewCronJobAbort(ctx, "cronJobAbort", &Pts.CronJobAbortArgs{
//				CronJobId: pulumi.String("job-dtm93vx0"),
//				ProjectId: pulumi.String("project-abc"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CronJobAbort struct {
	pulumi.CustomResourceState

	// Cron job ID.
	CronJobId pulumi.StringOutput `pulumi:"cronJobId"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewCronJobAbort registers a new resource with the given unique name, arguments, and options.
func NewCronJobAbort(ctx *pulumi.Context,
	name string, args *CronJobAbortArgs, opts ...pulumi.ResourceOption) (*CronJobAbort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronJobId == nil {
		return nil, errors.New("invalid value for required argument 'CronJobId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CronJobAbort
	err := ctx.RegisterResource("tencentcloud:Pts/cronJobAbort:CronJobAbort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCronJobAbort gets an existing CronJobAbort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCronJobAbort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CronJobAbortState, opts ...pulumi.ResourceOption) (*CronJobAbort, error) {
	var resource CronJobAbort
	err := ctx.ReadResource("tencentcloud:Pts/cronJobAbort:CronJobAbort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CronJobAbort resources.
type cronJobAbortState struct {
	// Cron job ID.
	CronJobId *string `pulumi:"cronJobId"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
}

type CronJobAbortState struct {
	// Cron job ID.
	CronJobId pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
}

func (CronJobAbortState) ElementType() reflect.Type {
	return reflect.TypeOf((*cronJobAbortState)(nil)).Elem()
}

type cronJobAbortArgs struct {
	// Cron job ID.
	CronJobId string `pulumi:"cronJobId"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a CronJobAbort resource.
type CronJobAbortArgs struct {
	// Cron job ID.
	CronJobId pulumi.StringInput
	// Project ID.
	ProjectId pulumi.StringInput
}

func (CronJobAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cronJobAbortArgs)(nil)).Elem()
}

type CronJobAbortInput interface {
	pulumi.Input

	ToCronJobAbortOutput() CronJobAbortOutput
	ToCronJobAbortOutputWithContext(ctx context.Context) CronJobAbortOutput
}

func (*CronJobAbort) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobAbort)(nil)).Elem()
}

func (i *CronJobAbort) ToCronJobAbortOutput() CronJobAbortOutput {
	return i.ToCronJobAbortOutputWithContext(context.Background())
}

func (i *CronJobAbort) ToCronJobAbortOutputWithContext(ctx context.Context) CronJobAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobAbortOutput)
}

// CronJobAbortArrayInput is an input type that accepts CronJobAbortArray and CronJobAbortArrayOutput values.
// You can construct a concrete instance of `CronJobAbortArrayInput` via:
//
//	CronJobAbortArray{ CronJobAbortArgs{...} }
type CronJobAbortArrayInput interface {
	pulumi.Input

	ToCronJobAbortArrayOutput() CronJobAbortArrayOutput
	ToCronJobAbortArrayOutputWithContext(context.Context) CronJobAbortArrayOutput
}

type CronJobAbortArray []CronJobAbortInput

func (CronJobAbortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CronJobAbort)(nil)).Elem()
}

func (i CronJobAbortArray) ToCronJobAbortArrayOutput() CronJobAbortArrayOutput {
	return i.ToCronJobAbortArrayOutputWithContext(context.Background())
}

func (i CronJobAbortArray) ToCronJobAbortArrayOutputWithContext(ctx context.Context) CronJobAbortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobAbortArrayOutput)
}

// CronJobAbortMapInput is an input type that accepts CronJobAbortMap and CronJobAbortMapOutput values.
// You can construct a concrete instance of `CronJobAbortMapInput` via:
//
//	CronJobAbortMap{ "key": CronJobAbortArgs{...} }
type CronJobAbortMapInput interface {
	pulumi.Input

	ToCronJobAbortMapOutput() CronJobAbortMapOutput
	ToCronJobAbortMapOutputWithContext(context.Context) CronJobAbortMapOutput
}

type CronJobAbortMap map[string]CronJobAbortInput

func (CronJobAbortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CronJobAbort)(nil)).Elem()
}

func (i CronJobAbortMap) ToCronJobAbortMapOutput() CronJobAbortMapOutput {
	return i.ToCronJobAbortMapOutputWithContext(context.Background())
}

func (i CronJobAbortMap) ToCronJobAbortMapOutputWithContext(ctx context.Context) CronJobAbortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobAbortMapOutput)
}

type CronJobAbortOutput struct{ *pulumi.OutputState }

func (CronJobAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobAbort)(nil)).Elem()
}

func (o CronJobAbortOutput) ToCronJobAbortOutput() CronJobAbortOutput {
	return o
}

func (o CronJobAbortOutput) ToCronJobAbortOutputWithContext(ctx context.Context) CronJobAbortOutput {
	return o
}

// Cron job ID.
func (o CronJobAbortOutput) CronJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *CronJobAbort) pulumi.StringOutput { return v.CronJobId }).(pulumi.StringOutput)
}

// Project ID.
func (o CronJobAbortOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CronJobAbort) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type CronJobAbortArrayOutput struct{ *pulumi.OutputState }

func (CronJobAbortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CronJobAbort)(nil)).Elem()
}

func (o CronJobAbortArrayOutput) ToCronJobAbortArrayOutput() CronJobAbortArrayOutput {
	return o
}

func (o CronJobAbortArrayOutput) ToCronJobAbortArrayOutputWithContext(ctx context.Context) CronJobAbortArrayOutput {
	return o
}

func (o CronJobAbortArrayOutput) Index(i pulumi.IntInput) CronJobAbortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CronJobAbort {
		return vs[0].([]*CronJobAbort)[vs[1].(int)]
	}).(CronJobAbortOutput)
}

type CronJobAbortMapOutput struct{ *pulumi.OutputState }

func (CronJobAbortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CronJobAbort)(nil)).Elem()
}

func (o CronJobAbortMapOutput) ToCronJobAbortMapOutput() CronJobAbortMapOutput {
	return o
}

func (o CronJobAbortMapOutput) ToCronJobAbortMapOutputWithContext(ctx context.Context) CronJobAbortMapOutput {
	return o
}

func (o CronJobAbortMapOutput) MapIndex(k pulumi.StringInput) CronJobAbortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CronJobAbort {
		return vs[0].(map[string]*CronJobAbort)[vs[1].(string)]
	}).(CronJobAbortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobAbortInput)(nil)).Elem(), &CronJobAbort{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobAbortArrayInput)(nil)).Elem(), CronJobAbortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobAbortMapInput)(nil)).Elem(), CronJobAbortMap{})
	pulumi.RegisterOutputType(CronJobAbortOutput{})
	pulumi.RegisterOutputType(CronJobAbortArrayOutput{})
	pulumi.RegisterOutputType(CronJobAbortMapOutput{})
}
