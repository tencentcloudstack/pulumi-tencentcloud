// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a pts cron_job_restart, restart a scheduled task whose status is `JobAborting`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pts.NewCronJobRestart(ctx, "cronJobRestart", &Pts.CronJobRestartArgs{
//				CronJobId: pulumi.String("job-dtm93vx0"),
//				ProjectId: pulumi.String("project-abc"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CronJobRestart struct {
	pulumi.CustomResourceState

	// Cron job ID.
	CronJobId pulumi.StringOutput `pulumi:"cronJobId"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewCronJobRestart registers a new resource with the given unique name, arguments, and options.
func NewCronJobRestart(ctx *pulumi.Context,
	name string, args *CronJobRestartArgs, opts ...pulumi.ResourceOption) (*CronJobRestart, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CronJobId == nil {
		return nil, errors.New("invalid value for required argument 'CronJobId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CronJobRestart
	err := ctx.RegisterResource("tencentcloud:Pts/cronJobRestart:CronJobRestart", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCronJobRestart gets an existing CronJobRestart resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCronJobRestart(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CronJobRestartState, opts ...pulumi.ResourceOption) (*CronJobRestart, error) {
	var resource CronJobRestart
	err := ctx.ReadResource("tencentcloud:Pts/cronJobRestart:CronJobRestart", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CronJobRestart resources.
type cronJobRestartState struct {
	// Cron job ID.
	CronJobId *string `pulumi:"cronJobId"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
}

type CronJobRestartState struct {
	// Cron job ID.
	CronJobId pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
}

func (CronJobRestartState) ElementType() reflect.Type {
	return reflect.TypeOf((*cronJobRestartState)(nil)).Elem()
}

type cronJobRestartArgs struct {
	// Cron job ID.
	CronJobId string `pulumi:"cronJobId"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a CronJobRestart resource.
type CronJobRestartArgs struct {
	// Cron job ID.
	CronJobId pulumi.StringInput
	// Project ID.
	ProjectId pulumi.StringInput
}

func (CronJobRestartArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cronJobRestartArgs)(nil)).Elem()
}

type CronJobRestartInput interface {
	pulumi.Input

	ToCronJobRestartOutput() CronJobRestartOutput
	ToCronJobRestartOutputWithContext(ctx context.Context) CronJobRestartOutput
}

func (*CronJobRestart) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobRestart)(nil)).Elem()
}

func (i *CronJobRestart) ToCronJobRestartOutput() CronJobRestartOutput {
	return i.ToCronJobRestartOutputWithContext(context.Background())
}

func (i *CronJobRestart) ToCronJobRestartOutputWithContext(ctx context.Context) CronJobRestartOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobRestartOutput)
}

// CronJobRestartArrayInput is an input type that accepts CronJobRestartArray and CronJobRestartArrayOutput values.
// You can construct a concrete instance of `CronJobRestartArrayInput` via:
//
//	CronJobRestartArray{ CronJobRestartArgs{...} }
type CronJobRestartArrayInput interface {
	pulumi.Input

	ToCronJobRestartArrayOutput() CronJobRestartArrayOutput
	ToCronJobRestartArrayOutputWithContext(context.Context) CronJobRestartArrayOutput
}

type CronJobRestartArray []CronJobRestartInput

func (CronJobRestartArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CronJobRestart)(nil)).Elem()
}

func (i CronJobRestartArray) ToCronJobRestartArrayOutput() CronJobRestartArrayOutput {
	return i.ToCronJobRestartArrayOutputWithContext(context.Background())
}

func (i CronJobRestartArray) ToCronJobRestartArrayOutputWithContext(ctx context.Context) CronJobRestartArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobRestartArrayOutput)
}

// CronJobRestartMapInput is an input type that accepts CronJobRestartMap and CronJobRestartMapOutput values.
// You can construct a concrete instance of `CronJobRestartMapInput` via:
//
//	CronJobRestartMap{ "key": CronJobRestartArgs{...} }
type CronJobRestartMapInput interface {
	pulumi.Input

	ToCronJobRestartMapOutput() CronJobRestartMapOutput
	ToCronJobRestartMapOutputWithContext(context.Context) CronJobRestartMapOutput
}

type CronJobRestartMap map[string]CronJobRestartInput

func (CronJobRestartMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CronJobRestart)(nil)).Elem()
}

func (i CronJobRestartMap) ToCronJobRestartMapOutput() CronJobRestartMapOutput {
	return i.ToCronJobRestartMapOutputWithContext(context.Background())
}

func (i CronJobRestartMap) ToCronJobRestartMapOutputWithContext(ctx context.Context) CronJobRestartMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CronJobRestartMapOutput)
}

type CronJobRestartOutput struct{ *pulumi.OutputState }

func (CronJobRestartOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CronJobRestart)(nil)).Elem()
}

func (o CronJobRestartOutput) ToCronJobRestartOutput() CronJobRestartOutput {
	return o
}

func (o CronJobRestartOutput) ToCronJobRestartOutputWithContext(ctx context.Context) CronJobRestartOutput {
	return o
}

// Cron job ID.
func (o CronJobRestartOutput) CronJobId() pulumi.StringOutput {
	return o.ApplyT(func(v *CronJobRestart) pulumi.StringOutput { return v.CronJobId }).(pulumi.StringOutput)
}

// Project ID.
func (o CronJobRestartOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CronJobRestart) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type CronJobRestartArrayOutput struct{ *pulumi.OutputState }

func (CronJobRestartArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CronJobRestart)(nil)).Elem()
}

func (o CronJobRestartArrayOutput) ToCronJobRestartArrayOutput() CronJobRestartArrayOutput {
	return o
}

func (o CronJobRestartArrayOutput) ToCronJobRestartArrayOutputWithContext(ctx context.Context) CronJobRestartArrayOutput {
	return o
}

func (o CronJobRestartArrayOutput) Index(i pulumi.IntInput) CronJobRestartOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CronJobRestart {
		return vs[0].([]*CronJobRestart)[vs[1].(int)]
	}).(CronJobRestartOutput)
}

type CronJobRestartMapOutput struct{ *pulumi.OutputState }

func (CronJobRestartMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CronJobRestart)(nil)).Elem()
}

func (o CronJobRestartMapOutput) ToCronJobRestartMapOutput() CronJobRestartMapOutput {
	return o
}

func (o CronJobRestartMapOutput) ToCronJobRestartMapOutputWithContext(ctx context.Context) CronJobRestartMapOutput {
	return o
}

func (o CronJobRestartMapOutput) MapIndex(k pulumi.StringInput) CronJobRestartOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CronJobRestart {
		return vs[0].(map[string]*CronJobRestart)[vs[1].(string)]
	}).(CronJobRestartOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobRestartInput)(nil)).Elem(), &CronJobRestart{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobRestartArrayInput)(nil)).Elem(), CronJobRestartArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CronJobRestartMapInput)(nil)).Elem(), CronJobRestartMap{})
	pulumi.RegisterOutputType(CronJobRestartOutput{})
	pulumi.RegisterOutputType(CronJobRestartArrayOutput{})
	pulumi.RegisterOutputType(CronJobRestartMapOutput{})
}
