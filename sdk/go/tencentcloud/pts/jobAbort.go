// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a pts jobAbort
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pts.NewJobAbort(ctx, "jobAbort", &Pts.JobAbortArgs{
//				JobId:      pulumi.String("job-my644ozi"),
//				ProjectId:  pulumi.String("project-45vw7v82"),
//				ScenarioId: pulumi.String("scenario-22q19f3k"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type JobAbort struct {
	pulumi.CustomResourceState

	// The reason for aborting the job.
	AbortReason pulumi.IntPtrOutput `pulumi:"abortReason"`
	// Job ID.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Scenario ID.
	ScenarioId pulumi.StringOutput `pulumi:"scenarioId"`
}

// NewJobAbort registers a new resource with the given unique name, arguments, and options.
func NewJobAbort(ctx *pulumi.Context,
	name string, args *JobAbortArgs, opts ...pulumi.ResourceOption) (*JobAbort, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobId == nil {
		return nil, errors.New("invalid value for required argument 'JobId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ScenarioId == nil {
		return nil, errors.New("invalid value for required argument 'ScenarioId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource JobAbort
	err := ctx.RegisterResource("tencentcloud:Pts/jobAbort:JobAbort", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJobAbort gets an existing JobAbort resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJobAbort(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobAbortState, opts ...pulumi.ResourceOption) (*JobAbort, error) {
	var resource JobAbort
	err := ctx.ReadResource("tencentcloud:Pts/jobAbort:JobAbort", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering JobAbort resources.
type jobAbortState struct {
	// The reason for aborting the job.
	AbortReason *int `pulumi:"abortReason"`
	// Job ID.
	JobId *string `pulumi:"jobId"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
	// Scenario ID.
	ScenarioId *string `pulumi:"scenarioId"`
}

type JobAbortState struct {
	// The reason for aborting the job.
	AbortReason pulumi.IntPtrInput
	// Job ID.
	JobId pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
	// Scenario ID.
	ScenarioId pulumi.StringPtrInput
}

func (JobAbortState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobAbortState)(nil)).Elem()
}

type jobAbortArgs struct {
	// The reason for aborting the job.
	AbortReason *int `pulumi:"abortReason"`
	// Job ID.
	JobId string `pulumi:"jobId"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
	// Scenario ID.
	ScenarioId string `pulumi:"scenarioId"`
}

// The set of arguments for constructing a JobAbort resource.
type JobAbortArgs struct {
	// The reason for aborting the job.
	AbortReason pulumi.IntPtrInput
	// Job ID.
	JobId pulumi.StringInput
	// Project ID.
	ProjectId pulumi.StringInput
	// Scenario ID.
	ScenarioId pulumi.StringInput
}

func (JobAbortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobAbortArgs)(nil)).Elem()
}

type JobAbortInput interface {
	pulumi.Input

	ToJobAbortOutput() JobAbortOutput
	ToJobAbortOutputWithContext(ctx context.Context) JobAbortOutput
}

func (*JobAbort) ElementType() reflect.Type {
	return reflect.TypeOf((**JobAbort)(nil)).Elem()
}

func (i *JobAbort) ToJobAbortOutput() JobAbortOutput {
	return i.ToJobAbortOutputWithContext(context.Background())
}

func (i *JobAbort) ToJobAbortOutputWithContext(ctx context.Context) JobAbortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobAbortOutput)
}

// JobAbortArrayInput is an input type that accepts JobAbortArray and JobAbortArrayOutput values.
// You can construct a concrete instance of `JobAbortArrayInput` via:
//
//	JobAbortArray{ JobAbortArgs{...} }
type JobAbortArrayInput interface {
	pulumi.Input

	ToJobAbortArrayOutput() JobAbortArrayOutput
	ToJobAbortArrayOutputWithContext(context.Context) JobAbortArrayOutput
}

type JobAbortArray []JobAbortInput

func (JobAbortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobAbort)(nil)).Elem()
}

func (i JobAbortArray) ToJobAbortArrayOutput() JobAbortArrayOutput {
	return i.ToJobAbortArrayOutputWithContext(context.Background())
}

func (i JobAbortArray) ToJobAbortArrayOutputWithContext(ctx context.Context) JobAbortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobAbortArrayOutput)
}

// JobAbortMapInput is an input type that accepts JobAbortMap and JobAbortMapOutput values.
// You can construct a concrete instance of `JobAbortMapInput` via:
//
//	JobAbortMap{ "key": JobAbortArgs{...} }
type JobAbortMapInput interface {
	pulumi.Input

	ToJobAbortMapOutput() JobAbortMapOutput
	ToJobAbortMapOutputWithContext(context.Context) JobAbortMapOutput
}

type JobAbortMap map[string]JobAbortInput

func (JobAbortMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobAbort)(nil)).Elem()
}

func (i JobAbortMap) ToJobAbortMapOutput() JobAbortMapOutput {
	return i.ToJobAbortMapOutputWithContext(context.Background())
}

func (i JobAbortMap) ToJobAbortMapOutputWithContext(ctx context.Context) JobAbortMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobAbortMapOutput)
}

type JobAbortOutput struct{ *pulumi.OutputState }

func (JobAbortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**JobAbort)(nil)).Elem()
}

func (o JobAbortOutput) ToJobAbortOutput() JobAbortOutput {
	return o
}

func (o JobAbortOutput) ToJobAbortOutputWithContext(ctx context.Context) JobAbortOutput {
	return o
}

// The reason for aborting the job.
func (o JobAbortOutput) AbortReason() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *JobAbort) pulumi.IntPtrOutput { return v.AbortReason }).(pulumi.IntPtrOutput)
}

// Job ID.
func (o JobAbortOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobAbort) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// Project ID.
func (o JobAbortOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobAbort) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Scenario ID.
func (o JobAbortOutput) ScenarioId() pulumi.StringOutput {
	return o.ApplyT(func(v *JobAbort) pulumi.StringOutput { return v.ScenarioId }).(pulumi.StringOutput)
}

type JobAbortArrayOutput struct{ *pulumi.OutputState }

func (JobAbortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*JobAbort)(nil)).Elem()
}

func (o JobAbortArrayOutput) ToJobAbortArrayOutput() JobAbortArrayOutput {
	return o
}

func (o JobAbortArrayOutput) ToJobAbortArrayOutputWithContext(ctx context.Context) JobAbortArrayOutput {
	return o
}

func (o JobAbortArrayOutput) Index(i pulumi.IntInput) JobAbortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *JobAbort {
		return vs[0].([]*JobAbort)[vs[1].(int)]
	}).(JobAbortOutput)
}

type JobAbortMapOutput struct{ *pulumi.OutputState }

func (JobAbortMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*JobAbort)(nil)).Elem()
}

func (o JobAbortMapOutput) ToJobAbortMapOutput() JobAbortMapOutput {
	return o
}

func (o JobAbortMapOutput) ToJobAbortMapOutputWithContext(ctx context.Context) JobAbortMapOutput {
	return o
}

func (o JobAbortMapOutput) MapIndex(k pulumi.StringInput) JobAbortOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *JobAbort {
		return vs[0].(map[string]*JobAbort)[vs[1].(string)]
	}).(JobAbortOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobAbortInput)(nil)).Elem(), &JobAbort{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobAbortArrayInput)(nil)).Elem(), JobAbortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobAbortMapInput)(nil)).Elem(), JobAbortMap{})
	pulumi.RegisterOutputType(JobAbortOutput{})
	pulumi.RegisterOutputType(JobAbortArrayOutput{})
	pulumi.RegisterOutputType(JobAbortMapOutput{})
}
