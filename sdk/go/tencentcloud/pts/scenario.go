// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a pts scenario
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pts.NewScenario(ctx, "scenario", &Pts.ScenarioArgs{
//				DomainNameConfig: nil,
//				Load: &pts.ScenarioLoadArgs{
//					GeoRegionsLoadDistributions: pts.ScenarioLoadGeoRegionsLoadDistributionArray{
//						&pts.ScenarioLoadGeoRegionsLoadDistributionArgs{
//							Percentage: pulumi.Int(100),
//							Region:     pulumi.String("ap-guangzhou"),
//							RegionId:   pulumi.Int(1),
//						},
//					},
//					LoadSpec: &pts.ScenarioLoadLoadSpecArgs{
//						Concurrency: &pts.ScenarioLoadLoadSpecConcurrencyArgs{
//							GracefulStopSeconds:  pulumi.Int(3),
//							IterationCount:       pulumi.Int(0),
//							MaxRequestsPerSecond: pulumi.Int(0),
//							Stages: pts.ScenarioLoadLoadSpecConcurrencyStageArray{
//								&pts.ScenarioLoadLoadSpecConcurrencyStageArgs{
//									DurationSeconds:    pulumi.Int(120),
//									TargetVirtualUsers: pulumi.Int(2),
//								},
//								&pts.ScenarioLoadLoadSpecConcurrencyStageArgs{
//									DurationSeconds:    pulumi.Int(120),
//									TargetVirtualUsers: pulumi.Int(4),
//								},
//								&pts.ScenarioLoadLoadSpecConcurrencyStageArgs{
//									DurationSeconds:    pulumi.Int(120),
//									TargetVirtualUsers: pulumi.Int(5),
//								},
//								&pts.ScenarioLoadLoadSpecConcurrencyStageArgs{
//									DurationSeconds:    pulumi.Int(240),
//									TargetVirtualUsers: pulumi.Int(5),
//								},
//							},
//						},
//					},
//				},
//				ProjectId: pulumi.String("project-45vw7v82"),
//				SlaPolicy: nil,
//				TestScripts: pts.ScenarioTestScriptArray{
//					&pts.ScenarioTestScriptArgs{
//						EncodedContent: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "            // Send a http get request\n", "            import http from 'pts/http';\n", "            import { check, sleep } from 'pts';\n", "\n", "            export default function () {\n", "              // simple get request\n", "              const resp1 = http.get('http://httpbin.org/get');\n", "              console.log(resp1.body);\n", "              // if resp1.body is a json string, resp1.json() transfer json format body to a json object\n", "              console.log(resp1.json());\n", "              check('status is 200', () => resp1.statusCode === 200);\n", "\n", "              // sleep 1 second\n", "              sleep(1);\n", "\n", "              // get request with headers and parameters\n", "              const resp2 = http.get('http://httpbin.org/get', {\n", "                headers: {\n", "                  Connection: 'keep-alive',\n", "                  'User-Agent': 'pts-engine',\n", "                },\n", "                query: {\n", "                  name1: 'value1',\n", "                  name2: 'value2',\n", "                },\n", "              });\n", "\n", "              console.log(resp2.json().args.name1); // 'value1'\n", "              check('body.args.name1 equals value1', () => resp2.json().args.name1 === 'value1');\n", "            }\n", "\n")),
//						LoadWeight:     pulumi.Int(100),
//						Name:           pulumi.String("script.js"),
//						Size:           pulumi.Int(838),
//						Type:           pulumi.String("js"),
//						UpdatedAt:      pulumi.String("2022-11-11T16:18:37+08:00"),
//					},
//				},
//				Type: pulumi.String("pts-js"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// pts scenario can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Pts/scenario:Scenario scenario scenario_id
//
// ```
type Scenario struct {
	pulumi.CustomResourceState

	// App ID Note: this field may return null, indicating that a valid value cannot be obtained.
	AppId pulumi.IntOutput `pulumi:"appId"`
	// Scene creation time.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// cron job ID.
	CronId pulumi.StringPtrOutput `pulumi:"cronId"`
	// Test data set.
	Datasets ScenarioDatasetArrayOutput `pulumi:"datasets"`
	// Pts Scenario Description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Domain name resolution configuration.
	DomainNameConfig ScenarioDomainNameConfigPtrOutput `pulumi:"domainNameConfig"`
	// deprecated.
	Extensions pulumi.StringArrayOutput `pulumi:"extensions"`
	// Pressure allocation.
	Load ScenarioLoadPtrOutput `pulumi:"load"`
	// Pts Scenario name.
	Name pulumi.StringOutput `pulumi:"name"`
	// SLA strategy.
	Plugins ScenarioPluginArrayOutput `pulumi:"plugins"`
	// Project id.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Protocol file path.
	Protocols ScenarioProtocolArrayOutput `pulumi:"protocols"`
	// Request file path.
	RequestFiles ScenarioRequestFileArrayOutput `pulumi:"requestFiles"`
	// SLA strategy.
	SlaPolicy ScenarioSlaPolicyPtrOutput `pulumi:"slaPolicy"`
	// Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
	Status pulumi.IntOutput `pulumi:"status"`
	// Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
	SubAccountUin pulumi.StringOutput `pulumi:"subAccountUin"`
	// Test script file information.
	TestScripts ScenarioTestScriptArrayOutput `pulumi:"testScripts"`
	// Pressure test engine type.
	Type pulumi.StringOutput `pulumi:"type"`
	// User ID Note: this field may return null, indicating that a valid value cannot be obtained.
	Uin pulumi.StringOutput `pulumi:"uin"`
	// Update time.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewScenario registers a new resource with the given unique name, arguments, and options.
func NewScenario(ctx *pulumi.Context,
	name string, args *ScenarioArgs, opts ...pulumi.ResourceOption) (*Scenario, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Scenario
	err := ctx.RegisterResource("tencentcloud:Pts/scenario:Scenario", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScenario gets an existing Scenario resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScenario(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScenarioState, opts ...pulumi.ResourceOption) (*Scenario, error) {
	var resource Scenario
	err := ctx.ReadResource("tencentcloud:Pts/scenario:Scenario", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Scenario resources.
type scenarioState struct {
	// App ID Note: this field may return null, indicating that a valid value cannot be obtained.
	AppId *int `pulumi:"appId"`
	// Scene creation time.
	CreatedAt *string `pulumi:"createdAt"`
	// cron job ID.
	CronId *string `pulumi:"cronId"`
	// Test data set.
	Datasets []ScenarioDataset `pulumi:"datasets"`
	// Pts Scenario Description.
	Description *string `pulumi:"description"`
	// Domain name resolution configuration.
	DomainNameConfig *ScenarioDomainNameConfig `pulumi:"domainNameConfig"`
	// deprecated.
	Extensions []string `pulumi:"extensions"`
	// Pressure allocation.
	Load *ScenarioLoad `pulumi:"load"`
	// Pts Scenario name.
	Name *string `pulumi:"name"`
	// SLA strategy.
	Plugins []ScenarioPlugin `pulumi:"plugins"`
	// Project id.
	ProjectId *string `pulumi:"projectId"`
	// Protocol file path.
	Protocols []ScenarioProtocol `pulumi:"protocols"`
	// Request file path.
	RequestFiles []ScenarioRequestFile `pulumi:"requestFiles"`
	// SLA strategy.
	SlaPolicy *ScenarioSlaPolicy `pulumi:"slaPolicy"`
	// Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
	Status *int `pulumi:"status"`
	// Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
	SubAccountUin *string `pulumi:"subAccountUin"`
	// Test script file information.
	TestScripts []ScenarioTestScript `pulumi:"testScripts"`
	// Pressure test engine type.
	Type *string `pulumi:"type"`
	// User ID Note: this field may return null, indicating that a valid value cannot be obtained.
	Uin *string `pulumi:"uin"`
	// Update time.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ScenarioState struct {
	// App ID Note: this field may return null, indicating that a valid value cannot be obtained.
	AppId pulumi.IntPtrInput
	// Scene creation time.
	CreatedAt pulumi.StringPtrInput
	// cron job ID.
	CronId pulumi.StringPtrInput
	// Test data set.
	Datasets ScenarioDatasetArrayInput
	// Pts Scenario Description.
	Description pulumi.StringPtrInput
	// Domain name resolution configuration.
	DomainNameConfig ScenarioDomainNameConfigPtrInput
	// deprecated.
	Extensions pulumi.StringArrayInput
	// Pressure allocation.
	Load ScenarioLoadPtrInput
	// Pts Scenario name.
	Name pulumi.StringPtrInput
	// SLA strategy.
	Plugins ScenarioPluginArrayInput
	// Project id.
	ProjectId pulumi.StringPtrInput
	// Protocol file path.
	Protocols ScenarioProtocolArrayInput
	// Request file path.
	RequestFiles ScenarioRequestFileArrayInput
	// SLA strategy.
	SlaPolicy ScenarioSlaPolicyPtrInput
	// Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
	Status pulumi.IntPtrInput
	// Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
	SubAccountUin pulumi.StringPtrInput
	// Test script file information.
	TestScripts ScenarioTestScriptArrayInput
	// Pressure test engine type.
	Type pulumi.StringPtrInput
	// User ID Note: this field may return null, indicating that a valid value cannot be obtained.
	Uin pulumi.StringPtrInput
	// Update time.
	UpdatedAt pulumi.StringPtrInput
}

func (ScenarioState) ElementType() reflect.Type {
	return reflect.TypeOf((*scenarioState)(nil)).Elem()
}

type scenarioArgs struct {
	// cron job ID.
	CronId *string `pulumi:"cronId"`
	// Test data set.
	Datasets []ScenarioDataset `pulumi:"datasets"`
	// Pts Scenario Description.
	Description *string `pulumi:"description"`
	// Domain name resolution configuration.
	DomainNameConfig *ScenarioDomainNameConfig `pulumi:"domainNameConfig"`
	// deprecated.
	Extensions []string `pulumi:"extensions"`
	// Pressure allocation.
	Load *ScenarioLoad `pulumi:"load"`
	// Pts Scenario name.
	Name *string `pulumi:"name"`
	// SLA strategy.
	Plugins []ScenarioPlugin `pulumi:"plugins"`
	// Project id.
	ProjectId string `pulumi:"projectId"`
	// Protocol file path.
	Protocols []ScenarioProtocol `pulumi:"protocols"`
	// Request file path.
	RequestFiles []ScenarioRequestFile `pulumi:"requestFiles"`
	// SLA strategy.
	SlaPolicy *ScenarioSlaPolicy `pulumi:"slaPolicy"`
	// Test script file information.
	TestScripts []ScenarioTestScript `pulumi:"testScripts"`
	// Pressure test engine type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Scenario resource.
type ScenarioArgs struct {
	// cron job ID.
	CronId pulumi.StringPtrInput
	// Test data set.
	Datasets ScenarioDatasetArrayInput
	// Pts Scenario Description.
	Description pulumi.StringPtrInput
	// Domain name resolution configuration.
	DomainNameConfig ScenarioDomainNameConfigPtrInput
	// deprecated.
	Extensions pulumi.StringArrayInput
	// Pressure allocation.
	Load ScenarioLoadPtrInput
	// Pts Scenario name.
	Name pulumi.StringPtrInput
	// SLA strategy.
	Plugins ScenarioPluginArrayInput
	// Project id.
	ProjectId pulumi.StringInput
	// Protocol file path.
	Protocols ScenarioProtocolArrayInput
	// Request file path.
	RequestFiles ScenarioRequestFileArrayInput
	// SLA strategy.
	SlaPolicy ScenarioSlaPolicyPtrInput
	// Test script file information.
	TestScripts ScenarioTestScriptArrayInput
	// Pressure test engine type.
	Type pulumi.StringInput
}

func (ScenarioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scenarioArgs)(nil)).Elem()
}

type ScenarioInput interface {
	pulumi.Input

	ToScenarioOutput() ScenarioOutput
	ToScenarioOutputWithContext(ctx context.Context) ScenarioOutput
}

func (*Scenario) ElementType() reflect.Type {
	return reflect.TypeOf((**Scenario)(nil)).Elem()
}

func (i *Scenario) ToScenarioOutput() ScenarioOutput {
	return i.ToScenarioOutputWithContext(context.Background())
}

func (i *Scenario) ToScenarioOutputWithContext(ctx context.Context) ScenarioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScenarioOutput)
}

// ScenarioArrayInput is an input type that accepts ScenarioArray and ScenarioArrayOutput values.
// You can construct a concrete instance of `ScenarioArrayInput` via:
//
//	ScenarioArray{ ScenarioArgs{...} }
type ScenarioArrayInput interface {
	pulumi.Input

	ToScenarioArrayOutput() ScenarioArrayOutput
	ToScenarioArrayOutputWithContext(context.Context) ScenarioArrayOutput
}

type ScenarioArray []ScenarioInput

func (ScenarioArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Scenario)(nil)).Elem()
}

func (i ScenarioArray) ToScenarioArrayOutput() ScenarioArrayOutput {
	return i.ToScenarioArrayOutputWithContext(context.Background())
}

func (i ScenarioArray) ToScenarioArrayOutputWithContext(ctx context.Context) ScenarioArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScenarioArrayOutput)
}

// ScenarioMapInput is an input type that accepts ScenarioMap and ScenarioMapOutput values.
// You can construct a concrete instance of `ScenarioMapInput` via:
//
//	ScenarioMap{ "key": ScenarioArgs{...} }
type ScenarioMapInput interface {
	pulumi.Input

	ToScenarioMapOutput() ScenarioMapOutput
	ToScenarioMapOutputWithContext(context.Context) ScenarioMapOutput
}

type ScenarioMap map[string]ScenarioInput

func (ScenarioMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Scenario)(nil)).Elem()
}

func (i ScenarioMap) ToScenarioMapOutput() ScenarioMapOutput {
	return i.ToScenarioMapOutputWithContext(context.Background())
}

func (i ScenarioMap) ToScenarioMapOutputWithContext(ctx context.Context) ScenarioMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScenarioMapOutput)
}

type ScenarioOutput struct{ *pulumi.OutputState }

func (ScenarioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Scenario)(nil)).Elem()
}

func (o ScenarioOutput) ToScenarioOutput() ScenarioOutput {
	return o
}

func (o ScenarioOutput) ToScenarioOutputWithContext(ctx context.Context) ScenarioOutput {
	return o
}

// App ID Note: this field may return null, indicating that a valid value cannot be obtained.
func (o ScenarioOutput) AppId() pulumi.IntOutput {
	return o.ApplyT(func(v *Scenario) pulumi.IntOutput { return v.AppId }).(pulumi.IntOutput)
}

// Scene creation time.
func (o ScenarioOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// cron job ID.
func (o ScenarioOutput) CronId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringPtrOutput { return v.CronId }).(pulumi.StringPtrOutput)
}

// Test data set.
func (o ScenarioOutput) Datasets() ScenarioDatasetArrayOutput {
	return o.ApplyT(func(v *Scenario) ScenarioDatasetArrayOutput { return v.Datasets }).(ScenarioDatasetArrayOutput)
}

// Pts Scenario Description.
func (o ScenarioOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Domain name resolution configuration.
func (o ScenarioOutput) DomainNameConfig() ScenarioDomainNameConfigPtrOutput {
	return o.ApplyT(func(v *Scenario) ScenarioDomainNameConfigPtrOutput { return v.DomainNameConfig }).(ScenarioDomainNameConfigPtrOutput)
}

// deprecated.
func (o ScenarioOutput) Extensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringArrayOutput { return v.Extensions }).(pulumi.StringArrayOutput)
}

// Pressure allocation.
func (o ScenarioOutput) Load() ScenarioLoadPtrOutput {
	return o.ApplyT(func(v *Scenario) ScenarioLoadPtrOutput { return v.Load }).(ScenarioLoadPtrOutput)
}

// Pts Scenario name.
func (o ScenarioOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SLA strategy.
func (o ScenarioOutput) Plugins() ScenarioPluginArrayOutput {
	return o.ApplyT(func(v *Scenario) ScenarioPluginArrayOutput { return v.Plugins }).(ScenarioPluginArrayOutput)
}

// Project id.
func (o ScenarioOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Protocol file path.
func (o ScenarioOutput) Protocols() ScenarioProtocolArrayOutput {
	return o.ApplyT(func(v *Scenario) ScenarioProtocolArrayOutput { return v.Protocols }).(ScenarioProtocolArrayOutput)
}

// Request file path.
func (o ScenarioOutput) RequestFiles() ScenarioRequestFileArrayOutput {
	return o.ApplyT(func(v *Scenario) ScenarioRequestFileArrayOutput { return v.RequestFiles }).(ScenarioRequestFileArrayOutput)
}

// SLA strategy.
func (o ScenarioOutput) SlaPolicy() ScenarioSlaPolicyPtrOutput {
	return o.ApplyT(func(v *Scenario) ScenarioSlaPolicyPtrOutput { return v.SlaPolicy }).(ScenarioSlaPolicyPtrOutput)
}

// Scene statu Note: this field may return null, indicating that a valid value cannot be obtained.
func (o ScenarioOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Scenario) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Sub-user ID Note: this field may return null, indicating that a valid value cannot be obtained.
func (o ScenarioOutput) SubAccountUin() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.SubAccountUin }).(pulumi.StringOutput)
}

// Test script file information.
func (o ScenarioOutput) TestScripts() ScenarioTestScriptArrayOutput {
	return o.ApplyT(func(v *Scenario) ScenarioTestScriptArrayOutput { return v.TestScripts }).(ScenarioTestScriptArrayOutput)
}

// Pressure test engine type.
func (o ScenarioOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// User ID Note: this field may return null, indicating that a valid value cannot be obtained.
func (o ScenarioOutput) Uin() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.Uin }).(pulumi.StringOutput)
}

// Update time.
func (o ScenarioOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Scenario) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ScenarioArrayOutput struct{ *pulumi.OutputState }

func (ScenarioArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Scenario)(nil)).Elem()
}

func (o ScenarioArrayOutput) ToScenarioArrayOutput() ScenarioArrayOutput {
	return o
}

func (o ScenarioArrayOutput) ToScenarioArrayOutputWithContext(ctx context.Context) ScenarioArrayOutput {
	return o
}

func (o ScenarioArrayOutput) Index(i pulumi.IntInput) ScenarioOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Scenario {
		return vs[0].([]*Scenario)[vs[1].(int)]
	}).(ScenarioOutput)
}

type ScenarioMapOutput struct{ *pulumi.OutputState }

func (ScenarioMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Scenario)(nil)).Elem()
}

func (o ScenarioMapOutput) ToScenarioMapOutput() ScenarioMapOutput {
	return o
}

func (o ScenarioMapOutput) ToScenarioMapOutputWithContext(ctx context.Context) ScenarioMapOutput {
	return o
}

func (o ScenarioMapOutput) MapIndex(k pulumi.StringInput) ScenarioOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Scenario {
		return vs[0].(map[string]*Scenario)[vs[1].(string)]
	}).(ScenarioOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScenarioInput)(nil)).Elem(), &Scenario{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScenarioArrayInput)(nil)).Elem(), ScenarioArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScenarioMapInput)(nil)).Elem(), ScenarioMap{})
	pulumi.RegisterOutputType(ScenarioOutput{})
	pulumi.RegisterOutputType(ScenarioArrayOutput{})
	pulumi.RegisterOutputType(ScenarioMapOutput{})
}
