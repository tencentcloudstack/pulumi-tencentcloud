// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a pts file
//
// > **NOTE:** Modification is not currently supported, please go to the console to modify.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pts.NewFile(ctx, "file", &Pts.FileArgs{
//				FileId:       pulumi.String("file-de2dbaf8"),
//				HeaderInFile: pulumi.Bool(false),
//				Kind:         pulumi.Int(3),
//				LineCount:    pulumi.Int(0),
//				ProjectId:    pulumi.String("project-45vw7v82"),
//				Size:         pulumi.Int(10799),
//				Type:         pulumi.String("text/plain"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// pts file can be imported using the project_id#file_id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Pts/file:File file project-45vw7v82#file-de2dbaf8
//
// ```
type File struct {
	pulumi.CustomResourceState

	// File id.
	FileId pulumi.StringOutput `pulumi:"fileId"`
	// Files in a folder.
	FileInfos FileFileInfoArrayOutput `pulumi:"fileInfos"`
	// The first few lines of data.
	HeadLines pulumi.StringArrayOutput `pulumi:"headLines"`
	// Meter head.
	HeaderColumns pulumi.StringArrayOutput `pulumi:"headerColumns"`
	// Whether the header is in the file.
	HeaderInFile pulumi.BoolPtrOutput `pulumi:"headerInFile"`
	// File kind, parameter file-1, protocol file-2, request file-3.
	Kind pulumi.IntOutput `pulumi:"kind"`
	// Line count.
	LineCount pulumi.IntPtrOutput `pulumi:"lineCount"`
	// File name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Project id.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// File size.
	Size pulumi.IntOutput `pulumi:"size"`
	// The last few lines of data.
	TailLines pulumi.StringArrayOutput `pulumi:"tailLines"`
	// File type, folder-folder.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOption) (*File, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileId == nil {
		return nil, errors.New("invalid value for required argument 'FileId'")
	}
	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource File
	err := ctx.RegisterResource("tencentcloud:Pts/file:File", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileState, opts ...pulumi.ResourceOption) (*File, error) {
	var resource File
	err := ctx.ReadResource("tencentcloud:Pts/file:File", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering File resources.
type fileState struct {
	// File id.
	FileId *string `pulumi:"fileId"`
	// Files in a folder.
	FileInfos []FileFileInfo `pulumi:"fileInfos"`
	// The first few lines of data.
	HeadLines []string `pulumi:"headLines"`
	// Meter head.
	HeaderColumns []string `pulumi:"headerColumns"`
	// Whether the header is in the file.
	HeaderInFile *bool `pulumi:"headerInFile"`
	// File kind, parameter file-1, protocol file-2, request file-3.
	Kind *int `pulumi:"kind"`
	// Line count.
	LineCount *int `pulumi:"lineCount"`
	// File name.
	Name *string `pulumi:"name"`
	// Project id.
	ProjectId *string `pulumi:"projectId"`
	// File size.
	Size *int `pulumi:"size"`
	// The last few lines of data.
	TailLines []string `pulumi:"tailLines"`
	// File type, folder-folder.
	Type *string `pulumi:"type"`
}

type FileState struct {
	// File id.
	FileId pulumi.StringPtrInput
	// Files in a folder.
	FileInfos FileFileInfoArrayInput
	// The first few lines of data.
	HeadLines pulumi.StringArrayInput
	// Meter head.
	HeaderColumns pulumi.StringArrayInput
	// Whether the header is in the file.
	HeaderInFile pulumi.BoolPtrInput
	// File kind, parameter file-1, protocol file-2, request file-3.
	Kind pulumi.IntPtrInput
	// Line count.
	LineCount pulumi.IntPtrInput
	// File name.
	Name pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringPtrInput
	// File size.
	Size pulumi.IntPtrInput
	// The last few lines of data.
	TailLines pulumi.StringArrayInput
	// File type, folder-folder.
	Type pulumi.StringPtrInput
}

func (FileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileState)(nil)).Elem()
}

type fileArgs struct {
	// File id.
	FileId string `pulumi:"fileId"`
	// Files in a folder.
	FileInfos []FileFileInfo `pulumi:"fileInfos"`
	// The first few lines of data.
	HeadLines []string `pulumi:"headLines"`
	// Meter head.
	HeaderColumns []string `pulumi:"headerColumns"`
	// Whether the header is in the file.
	HeaderInFile *bool `pulumi:"headerInFile"`
	// File kind, parameter file-1, protocol file-2, request file-3.
	Kind int `pulumi:"kind"`
	// Line count.
	LineCount *int `pulumi:"lineCount"`
	// File name.
	Name *string `pulumi:"name"`
	// Project id.
	ProjectId string `pulumi:"projectId"`
	// File size.
	Size int `pulumi:"size"`
	// The last few lines of data.
	TailLines []string `pulumi:"tailLines"`
	// File type, folder-folder.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	// File id.
	FileId pulumi.StringInput
	// Files in a folder.
	FileInfos FileFileInfoArrayInput
	// The first few lines of data.
	HeadLines pulumi.StringArrayInput
	// Meter head.
	HeaderColumns pulumi.StringArrayInput
	// Whether the header is in the file.
	HeaderInFile pulumi.BoolPtrInput
	// File kind, parameter file-1, protocol file-2, request file-3.
	Kind pulumi.IntInput
	// Line count.
	LineCount pulumi.IntPtrInput
	// File name.
	Name pulumi.StringPtrInput
	// Project id.
	ProjectId pulumi.StringInput
	// File size.
	Size pulumi.IntInput
	// The last few lines of data.
	TailLines pulumi.StringArrayInput
	// File type, folder-folder.
	Type pulumi.StringInput
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileArgs)(nil)).Elem()
}

type FileInput interface {
	pulumi.Input

	ToFileOutput() FileOutput
	ToFileOutputWithContext(ctx context.Context) FileOutput
}

func (*File) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (i *File) ToFileOutput() FileOutput {
	return i.ToFileOutputWithContext(context.Background())
}

func (i *File) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOutput)
}

// FileArrayInput is an input type that accepts FileArray and FileArrayOutput values.
// You can construct a concrete instance of `FileArrayInput` via:
//
//	FileArray{ FileArgs{...} }
type FileArrayInput interface {
	pulumi.Input

	ToFileArrayOutput() FileArrayOutput
	ToFileArrayOutputWithContext(context.Context) FileArrayOutput
}

type FileArray []FileInput

func (FileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (i FileArray) ToFileArrayOutput() FileArrayOutput {
	return i.ToFileArrayOutputWithContext(context.Background())
}

func (i FileArray) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileArrayOutput)
}

// FileMapInput is an input type that accepts FileMap and FileMapOutput values.
// You can construct a concrete instance of `FileMapInput` via:
//
//	FileMap{ "key": FileArgs{...} }
type FileMapInput interface {
	pulumi.Input

	ToFileMapOutput() FileMapOutput
	ToFileMapOutputWithContext(context.Context) FileMapOutput
}

type FileMap map[string]FileInput

func (FileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (i FileMap) ToFileMapOutput() FileMapOutput {
	return i.ToFileMapOutputWithContext(context.Background())
}

func (i FileMap) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileMapOutput)
}

type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

// File id.
func (o FileOutput) FileId() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.FileId }).(pulumi.StringOutput)
}

// Files in a folder.
func (o FileOutput) FileInfos() FileFileInfoArrayOutput {
	return o.ApplyT(func(v *File) FileFileInfoArrayOutput { return v.FileInfos }).(FileFileInfoArrayOutput)
}

// The first few lines of data.
func (o FileOutput) HeadLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *File) pulumi.StringArrayOutput { return v.HeadLines }).(pulumi.StringArrayOutput)
}

// Meter head.
func (o FileOutput) HeaderColumns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *File) pulumi.StringArrayOutput { return v.HeaderColumns }).(pulumi.StringArrayOutput)
}

// Whether the header is in the file.
func (o FileOutput) HeaderInFile() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *File) pulumi.BoolPtrOutput { return v.HeaderInFile }).(pulumi.BoolPtrOutput)
}

// File kind, parameter file-1, protocol file-2, request file-3.
func (o FileOutput) Kind() pulumi.IntOutput {
	return o.ApplyT(func(v *File) pulumi.IntOutput { return v.Kind }).(pulumi.IntOutput)
}

// Line count.
func (o FileOutput) LineCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *File) pulumi.IntPtrOutput { return v.LineCount }).(pulumi.IntPtrOutput)
}

// File name.
func (o FileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Project id.
func (o FileOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// File size.
func (o FileOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *File) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The last few lines of data.
func (o FileOutput) TailLines() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *File) pulumi.StringArrayOutput { return v.TailLines }).(pulumi.StringArrayOutput)
}

// File type, folder-folder.
func (o FileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type FileArrayOutput struct{ *pulumi.OutputState }

func (FileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (o FileArrayOutput) ToFileArrayOutput() FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return o
}

func (o FileArrayOutput) Index(i pulumi.IntInput) FileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *File {
		return vs[0].([]*File)[vs[1].(int)]
	}).(FileOutput)
}

type FileMapOutput struct{ *pulumi.OutputState }

func (FileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (o FileMapOutput) ToFileMapOutput() FileMapOutput {
	return o
}

func (o FileMapOutput) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return o
}

func (o FileMapOutput) MapIndex(k pulumi.StringInput) FileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *File {
		return vs[0].(map[string]*File)[vs[1].(string)]
	}).(FileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileInput)(nil)).Elem(), &File{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileArrayInput)(nil)).Elem(), FileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileMapInput)(nil)).Elem(), FileMap{})
	pulumi.RegisterOutputType(FileOutput{})
	pulumi.RegisterOutputType(FileArrayOutput{})
	pulumi.RegisterOutputType(FileMapOutput{})
}
