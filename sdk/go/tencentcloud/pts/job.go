// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pts

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a pts job
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Pts"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Pts.NewJob(ctx, "job", &Pts.JobArgs{
//				JobOwner:   pulumi.String("username"),
//				Note:       pulumi.String("desc"),
//				ProjectId:  pulumi.String("project-45vw7v82"),
//				ScenarioId: pulumi.String("scenario-22q19f3k"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// pts job can be imported using the projectId#scenarioId#jobId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Pts/job:Job job project-45vw7v82#scenario-22q19f3k#job-dtm93vx0
//
// ```
type Job struct {
	pulumi.CustomResourceState

	// Cause of interruption.
	AbortReason pulumi.IntOutput `pulumi:"abortReason"`
	// Creation time of the job.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Scheduled job ID.
	CronId pulumi.StringOutput `pulumi:"cronId"`
	// Dataset file for the job.
	Datasets JobDatasetArrayOutput `pulumi:"datasets"`
	// Whether to debug.
	Debug pulumi.BoolPtrOutput `pulumi:"debug"`
	// Domain name binding configuration.
	DomainNameConfigs JobDomainNameConfigArrayOutput `pulumi:"domainNameConfigs"`
	// Job duration.
	Duration pulumi.IntOutput `pulumi:"duration"`
	// End time of the job.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Percentage of error rate.
	ErrorRate pulumi.Float64Output `pulumi:"errorRate"`
	// Job Id.
	JobId pulumi.StringOutput `pulumi:"jobId"`
	// Job owner.
	JobOwner pulumi.StringOutput `pulumi:"jobOwner"`
	// Pressure configuration of job.
	Loads JobLoadArrayOutput `pulumi:"loads"`
	// Maximum requests per second.
	MaxRequestsPerSecond pulumi.IntOutput `pulumi:"maxRequestsPerSecond"`
	// Maximum number of VU for the job.
	MaxVirtualUserCount pulumi.IntOutput `pulumi:"maxVirtualUserCount"`
	// Note.
	Note pulumi.StringPtrOutput `pulumi:"note"`
	// Expansion package file information.
	Plugins JobPluginArrayOutput `pulumi:"plugins"`
	// Project ID.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Protocol script information.
	Protocols JobProtocolArrayOutput `pulumi:"protocols"`
	// Request file information.
	RequestFiles JobRequestFileArrayOutput `pulumi:"requestFiles"`
	// Total number of requests.
	RequestTotal pulumi.Float64Output `pulumi:"requestTotal"`
	// Average number of requests per second.
	RequestsPerSecond pulumi.Float64Output `pulumi:"requestsPerSecond"`
	// Average response time.
	ResponseTimeAverage pulumi.Float64Output `pulumi:"responseTimeAverage"`
	// Maximum response time.
	ResponseTimeMax pulumi.Float64Output `pulumi:"responseTimeMax"`
	// Minimum response time.
	ResponseTimeMin pulumi.Float64Output `pulumi:"responseTimeMin"`
	// 90th percentile response time.
	ResponseTimeP90 pulumi.Float64Output `pulumi:"responseTimeP90"`
	// 95th percentile response time.
	ResponseTimeP95 pulumi.Float64Output `pulumi:"responseTimeP95"`
	// 99th percentile response time.
	ResponseTimeP99 pulumi.Float64Output `pulumi:"responseTimeP99"`
	// Pts scenario id.
	ScenarioId pulumi.StringOutput `pulumi:"scenarioId"`
	// Start time of the job.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
	Status pulumi.IntOutput `pulumi:"status"`
	// Test script information.
	TestScripts JobTestScriptArrayOutput `pulumi:"testScripts"`
	// Scene Type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewJob registers a new resource with the given unique name, arguments, and options.
func NewJob(ctx *pulumi.Context,
	name string, args *JobArgs, opts ...pulumi.ResourceOption) (*Job, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.JobOwner == nil {
		return nil, errors.New("invalid value for required argument 'JobOwner'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ScenarioId == nil {
		return nil, errors.New("invalid value for required argument 'ScenarioId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Job
	err := ctx.RegisterResource("tencentcloud:Pts/job:Job", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetJob gets an existing Job resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *JobState, opts ...pulumi.ResourceOption) (*Job, error) {
	var resource Job
	err := ctx.ReadResource("tencentcloud:Pts/job:Job", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Job resources.
type jobState struct {
	// Cause of interruption.
	AbortReason *int `pulumi:"abortReason"`
	// Creation time of the job.
	CreatedAt *string `pulumi:"createdAt"`
	// Scheduled job ID.
	CronId *string `pulumi:"cronId"`
	// Dataset file for the job.
	Datasets []JobDataset `pulumi:"datasets"`
	// Whether to debug.
	Debug *bool `pulumi:"debug"`
	// Domain name binding configuration.
	DomainNameConfigs []JobDomainNameConfig `pulumi:"domainNameConfigs"`
	// Job duration.
	Duration *int `pulumi:"duration"`
	// End time of the job.
	EndTime *string `pulumi:"endTime"`
	// Percentage of error rate.
	ErrorRate *float64 `pulumi:"errorRate"`
	// Job Id.
	JobId *string `pulumi:"jobId"`
	// Job owner.
	JobOwner *string `pulumi:"jobOwner"`
	// Pressure configuration of job.
	Loads []JobLoad `pulumi:"loads"`
	// Maximum requests per second.
	MaxRequestsPerSecond *int `pulumi:"maxRequestsPerSecond"`
	// Maximum number of VU for the job.
	MaxVirtualUserCount *int `pulumi:"maxVirtualUserCount"`
	// Note.
	Note *string `pulumi:"note"`
	// Expansion package file information.
	Plugins []JobPlugin `pulumi:"plugins"`
	// Project ID.
	ProjectId *string `pulumi:"projectId"`
	// Protocol script information.
	Protocols []JobProtocol `pulumi:"protocols"`
	// Request file information.
	RequestFiles []JobRequestFile `pulumi:"requestFiles"`
	// Total number of requests.
	RequestTotal *float64 `pulumi:"requestTotal"`
	// Average number of requests per second.
	RequestsPerSecond *float64 `pulumi:"requestsPerSecond"`
	// Average response time.
	ResponseTimeAverage *float64 `pulumi:"responseTimeAverage"`
	// Maximum response time.
	ResponseTimeMax *float64 `pulumi:"responseTimeMax"`
	// Minimum response time.
	ResponseTimeMin *float64 `pulumi:"responseTimeMin"`
	// 90th percentile response time.
	ResponseTimeP90 *float64 `pulumi:"responseTimeP90"`
	// 95th percentile response time.
	ResponseTimeP95 *float64 `pulumi:"responseTimeP95"`
	// 99th percentile response time.
	ResponseTimeP99 *float64 `pulumi:"responseTimeP99"`
	// Pts scenario id.
	ScenarioId *string `pulumi:"scenarioId"`
	// Start time of the job.
	StartTime *string `pulumi:"startTime"`
	// The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
	Status *int `pulumi:"status"`
	// Test script information.
	TestScripts []JobTestScript `pulumi:"testScripts"`
	// Scene Type.
	Type *string `pulumi:"type"`
}

type JobState struct {
	// Cause of interruption.
	AbortReason pulumi.IntPtrInput
	// Creation time of the job.
	CreatedAt pulumi.StringPtrInput
	// Scheduled job ID.
	CronId pulumi.StringPtrInput
	// Dataset file for the job.
	Datasets JobDatasetArrayInput
	// Whether to debug.
	Debug pulumi.BoolPtrInput
	// Domain name binding configuration.
	DomainNameConfigs JobDomainNameConfigArrayInput
	// Job duration.
	Duration pulumi.IntPtrInput
	// End time of the job.
	EndTime pulumi.StringPtrInput
	// Percentage of error rate.
	ErrorRate pulumi.Float64PtrInput
	// Job Id.
	JobId pulumi.StringPtrInput
	// Job owner.
	JobOwner pulumi.StringPtrInput
	// Pressure configuration of job.
	Loads JobLoadArrayInput
	// Maximum requests per second.
	MaxRequestsPerSecond pulumi.IntPtrInput
	// Maximum number of VU for the job.
	MaxVirtualUserCount pulumi.IntPtrInput
	// Note.
	Note pulumi.StringPtrInput
	// Expansion package file information.
	Plugins JobPluginArrayInput
	// Project ID.
	ProjectId pulumi.StringPtrInput
	// Protocol script information.
	Protocols JobProtocolArrayInput
	// Request file information.
	RequestFiles JobRequestFileArrayInput
	// Total number of requests.
	RequestTotal pulumi.Float64PtrInput
	// Average number of requests per second.
	RequestsPerSecond pulumi.Float64PtrInput
	// Average response time.
	ResponseTimeAverage pulumi.Float64PtrInput
	// Maximum response time.
	ResponseTimeMax pulumi.Float64PtrInput
	// Minimum response time.
	ResponseTimeMin pulumi.Float64PtrInput
	// 90th percentile response time.
	ResponseTimeP90 pulumi.Float64PtrInput
	// 95th percentile response time.
	ResponseTimeP95 pulumi.Float64PtrInput
	// 99th percentile response time.
	ResponseTimeP99 pulumi.Float64PtrInput
	// Pts scenario id.
	ScenarioId pulumi.StringPtrInput
	// Start time of the job.
	StartTime pulumi.StringPtrInput
	// The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
	Status pulumi.IntPtrInput
	// Test script information.
	TestScripts JobTestScriptArrayInput
	// Scene Type.
	Type pulumi.StringPtrInput
}

func (JobState) ElementType() reflect.Type {
	return reflect.TypeOf((*jobState)(nil)).Elem()
}

type jobArgs struct {
	// Whether to debug.
	Debug *bool `pulumi:"debug"`
	// Job owner.
	JobOwner string `pulumi:"jobOwner"`
	// Note.
	Note *string `pulumi:"note"`
	// Project ID.
	ProjectId string `pulumi:"projectId"`
	// Pts scenario id.
	ScenarioId string `pulumi:"scenarioId"`
}

// The set of arguments for constructing a Job resource.
type JobArgs struct {
	// Whether to debug.
	Debug pulumi.BoolPtrInput
	// Job owner.
	JobOwner pulumi.StringInput
	// Note.
	Note pulumi.StringPtrInput
	// Project ID.
	ProjectId pulumi.StringInput
	// Pts scenario id.
	ScenarioId pulumi.StringInput
}

func (JobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*jobArgs)(nil)).Elem()
}

type JobInput interface {
	pulumi.Input

	ToJobOutput() JobOutput
	ToJobOutputWithContext(ctx context.Context) JobOutput
}

func (*Job) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (i *Job) ToJobOutput() JobOutput {
	return i.ToJobOutputWithContext(context.Background())
}

func (i *Job) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobOutput)
}

// JobArrayInput is an input type that accepts JobArray and JobArrayOutput values.
// You can construct a concrete instance of `JobArrayInput` via:
//
//	JobArray{ JobArgs{...} }
type JobArrayInput interface {
	pulumi.Input

	ToJobArrayOutput() JobArrayOutput
	ToJobArrayOutputWithContext(context.Context) JobArrayOutput
}

type JobArray []JobInput

func (JobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (i JobArray) ToJobArrayOutput() JobArrayOutput {
	return i.ToJobArrayOutputWithContext(context.Background())
}

func (i JobArray) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobArrayOutput)
}

// JobMapInput is an input type that accepts JobMap and JobMapOutput values.
// You can construct a concrete instance of `JobMapInput` via:
//
//	JobMap{ "key": JobArgs{...} }
type JobMapInput interface {
	pulumi.Input

	ToJobMapOutput() JobMapOutput
	ToJobMapOutputWithContext(context.Context) JobMapOutput
}

type JobMap map[string]JobInput

func (JobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (i JobMap) ToJobMapOutput() JobMapOutput {
	return i.ToJobMapOutputWithContext(context.Background())
}

func (i JobMap) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(JobMapOutput)
}

type JobOutput struct{ *pulumi.OutputState }

func (JobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Job)(nil)).Elem()
}

func (o JobOutput) ToJobOutput() JobOutput {
	return o
}

func (o JobOutput) ToJobOutputWithContext(ctx context.Context) JobOutput {
	return o
}

// Cause of interruption.
func (o JobOutput) AbortReason() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.AbortReason }).(pulumi.IntOutput)
}

// Creation time of the job.
func (o JobOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Scheduled job ID.
func (o JobOutput) CronId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.CronId }).(pulumi.StringOutput)
}

// Dataset file for the job.
func (o JobOutput) Datasets() JobDatasetArrayOutput {
	return o.ApplyT(func(v *Job) JobDatasetArrayOutput { return v.Datasets }).(JobDatasetArrayOutput)
}

// Whether to debug.
func (o JobOutput) Debug() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.BoolPtrOutput { return v.Debug }).(pulumi.BoolPtrOutput)
}

// Domain name binding configuration.
func (o JobOutput) DomainNameConfigs() JobDomainNameConfigArrayOutput {
	return o.ApplyT(func(v *Job) JobDomainNameConfigArrayOutput { return v.DomainNameConfigs }).(JobDomainNameConfigArrayOutput)
}

// Job duration.
func (o JobOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

// End time of the job.
func (o JobOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Percentage of error rate.
func (o JobOutput) ErrorRate() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ErrorRate }).(pulumi.Float64Output)
}

// Job Id.
func (o JobOutput) JobId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobId }).(pulumi.StringOutput)
}

// Job owner.
func (o JobOutput) JobOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.JobOwner }).(pulumi.StringOutput)
}

// Pressure configuration of job.
func (o JobOutput) Loads() JobLoadArrayOutput {
	return o.ApplyT(func(v *Job) JobLoadArrayOutput { return v.Loads }).(JobLoadArrayOutput)
}

// Maximum requests per second.
func (o JobOutput) MaxRequestsPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.MaxRequestsPerSecond }).(pulumi.IntOutput)
}

// Maximum number of VU for the job.
func (o JobOutput) MaxVirtualUserCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.MaxVirtualUserCount }).(pulumi.IntOutput)
}

// Note.
func (o JobOutput) Note() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Job) pulumi.StringPtrOutput { return v.Note }).(pulumi.StringPtrOutput)
}

// Expansion package file information.
func (o JobOutput) Plugins() JobPluginArrayOutput {
	return o.ApplyT(func(v *Job) JobPluginArrayOutput { return v.Plugins }).(JobPluginArrayOutput)
}

// Project ID.
func (o JobOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Protocol script information.
func (o JobOutput) Protocols() JobProtocolArrayOutput {
	return o.ApplyT(func(v *Job) JobProtocolArrayOutput { return v.Protocols }).(JobProtocolArrayOutput)
}

// Request file information.
func (o JobOutput) RequestFiles() JobRequestFileArrayOutput {
	return o.ApplyT(func(v *Job) JobRequestFileArrayOutput { return v.RequestFiles }).(JobRequestFileArrayOutput)
}

// Total number of requests.
func (o JobOutput) RequestTotal() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.RequestTotal }).(pulumi.Float64Output)
}

// Average number of requests per second.
func (o JobOutput) RequestsPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.RequestsPerSecond }).(pulumi.Float64Output)
}

// Average response time.
func (o JobOutput) ResponseTimeAverage() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ResponseTimeAverage }).(pulumi.Float64Output)
}

// Maximum response time.
func (o JobOutput) ResponseTimeMax() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ResponseTimeMax }).(pulumi.Float64Output)
}

// Minimum response time.
func (o JobOutput) ResponseTimeMin() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ResponseTimeMin }).(pulumi.Float64Output)
}

// 90th percentile response time.
func (o JobOutput) ResponseTimeP90() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ResponseTimeP90 }).(pulumi.Float64Output)
}

// 95th percentile response time.
func (o JobOutput) ResponseTimeP95() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ResponseTimeP95 }).(pulumi.Float64Output)
}

// 99th percentile response time.
func (o JobOutput) ResponseTimeP99() pulumi.Float64Output {
	return o.ApplyT(func(v *Job) pulumi.Float64Output { return v.ResponseTimeP99 }).(pulumi.Float64Output)
}

// Pts scenario id.
func (o JobOutput) ScenarioId() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.ScenarioId }).(pulumi.StringOutput)
}

// Start time of the job.
func (o JobOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The running status of the task; `0`: JobUnknown, `1`: JobCreated, `2`: JobPending, `3`: JobPreparing, `4`: JobSelectClustering, `5`: JobCreateTasking, `6`: JobSyncTasking, `11`: JobRunning, `12`: JobFinished, `13`: JobPrepareException, `14`: JobFinishException, `15`: JobAborting, `16`: JobAborted, `17`: JobAbortException, `18`: JobDeleted, `19`: JobSelectClusterException, `20`: JobCreateTaskException, `21`: JobSyncTaskException.
func (o JobOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *Job) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// Test script information.
func (o JobOutput) TestScripts() JobTestScriptArrayOutput {
	return o.ApplyT(func(v *Job) JobTestScriptArrayOutput { return v.TestScripts }).(JobTestScriptArrayOutput)
}

// Scene Type.
func (o JobOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Job) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type JobArrayOutput struct{ *pulumi.OutputState }

func (JobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Job)(nil)).Elem()
}

func (o JobArrayOutput) ToJobArrayOutput() JobArrayOutput {
	return o
}

func (o JobArrayOutput) ToJobArrayOutputWithContext(ctx context.Context) JobArrayOutput {
	return o
}

func (o JobArrayOutput) Index(i pulumi.IntInput) JobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Job {
		return vs[0].([]*Job)[vs[1].(int)]
	}).(JobOutput)
}

type JobMapOutput struct{ *pulumi.OutputState }

func (JobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Job)(nil)).Elem()
}

func (o JobMapOutput) ToJobMapOutput() JobMapOutput {
	return o
}

func (o JobMapOutput) ToJobMapOutputWithContext(ctx context.Context) JobMapOutput {
	return o
}

func (o JobMapOutput) MapIndex(k pulumi.StringInput) JobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Job {
		return vs[0].(map[string]*Job)[vs[1].(string)]
	}).(JobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*JobInput)(nil)).Elem(), &Job{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobArrayInput)(nil)).Elem(), JobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*JobMapInput)(nil)).Elem(), JobMap{})
	pulumi.RegisterOutputType(JobOutput{})
	pulumi.RegisterOutputType(JobArrayOutput{})
	pulumi.RegisterOutputType(JobMapOutput{})
}
