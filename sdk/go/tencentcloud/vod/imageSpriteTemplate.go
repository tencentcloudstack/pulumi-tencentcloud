// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a VOD image sprite template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vod.NewImageSpriteTemplate(ctx, "foo", &Vod.ImageSpriteTemplateArgs{
//				ColumnCount:        pulumi.Int(3),
//				Comment:            pulumi.String("test"),
//				FillType:           pulumi.String("stretch"),
//				Height:             pulumi.Int(128),
//				ResolutionAdaptive: pulumi.Bool(false),
//				RowCount:           pulumi.Int(3),
//				SampleInterval:     pulumi.Int(10),
//				SampleType:         pulumi.String("Percent"),
//				Width:              pulumi.Int(128),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VOD image sprite template can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vod/imageSpriteTemplate:ImageSpriteTemplate foo 51156
//
// ```
type ImageSpriteTemplate struct {
	pulumi.CustomResourceState

	// Subimage column count of an image sprite.
	ColumnCount pulumi.IntOutput `pulumi:"columnCount"`
	// Template description. Length limit: 256 characters.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Creation time of template in ISO date format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType pulumi.StringPtrOutput `pulumi:"fillType"`
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height pulumi.IntPtrOutput `pulumi:"height"`
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive pulumi.BoolPtrOutput `pulumi:"resolutionAdaptive"`
	// Subimage row count of an image sprite.
	RowCount pulumi.IntOutput `pulumi:"rowCount"`
	// Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval pulumi.IntOutput `pulumi:"sampleInterval"`
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType pulumi.StringOutput `pulumi:"sampleType"`
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId pulumi.IntPtrOutput `pulumi:"subAppId"`
	// Last modified time of template in ISO date format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width pulumi.IntPtrOutput `pulumi:"width"`
}

// NewImageSpriteTemplate registers a new resource with the given unique name, arguments, and options.
func NewImageSpriteTemplate(ctx *pulumi.Context,
	name string, args *ImageSpriteTemplateArgs, opts ...pulumi.ResourceOption) (*ImageSpriteTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ColumnCount == nil {
		return nil, errors.New("invalid value for required argument 'ColumnCount'")
	}
	if args.RowCount == nil {
		return nil, errors.New("invalid value for required argument 'RowCount'")
	}
	if args.SampleInterval == nil {
		return nil, errors.New("invalid value for required argument 'SampleInterval'")
	}
	if args.SampleType == nil {
		return nil, errors.New("invalid value for required argument 'SampleType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImageSpriteTemplate
	err := ctx.RegisterResource("tencentcloud:Vod/imageSpriteTemplate:ImageSpriteTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImageSpriteTemplate gets an existing ImageSpriteTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImageSpriteTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageSpriteTemplateState, opts ...pulumi.ResourceOption) (*ImageSpriteTemplate, error) {
	var resource ImageSpriteTemplate
	err := ctx.ReadResource("tencentcloud:Vod/imageSpriteTemplate:ImageSpriteTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImageSpriteTemplate resources.
type imageSpriteTemplateState struct {
	// Subimage column count of an image sprite.
	ColumnCount *int `pulumi:"columnCount"`
	// Template description. Length limit: 256 characters.
	Comment *string `pulumi:"comment"`
	// Creation time of template in ISO date format.
	CreateTime *string `pulumi:"createTime"`
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType *string `pulumi:"fillType"`
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height *int `pulumi:"height"`
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name *string `pulumi:"name"`
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive *bool `pulumi:"resolutionAdaptive"`
	// Subimage row count of an image sprite.
	RowCount *int `pulumi:"rowCount"`
	// Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval *int `pulumi:"sampleInterval"`
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType *string `pulumi:"sampleType"`
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId *int `pulumi:"subAppId"`
	// Last modified time of template in ISO date format.
	UpdateTime *string `pulumi:"updateTime"`
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width *int `pulumi:"width"`
}

type ImageSpriteTemplateState struct {
	// Subimage column count of an image sprite.
	ColumnCount pulumi.IntPtrInput
	// Template description. Length limit: 256 characters.
	Comment pulumi.StringPtrInput
	// Creation time of template in ISO date format.
	CreateTime pulumi.StringPtrInput
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType pulumi.StringPtrInput
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height pulumi.IntPtrInput
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name pulumi.StringPtrInput
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive pulumi.BoolPtrInput
	// Subimage row count of an image sprite.
	RowCount pulumi.IntPtrInput
	// Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval pulumi.IntPtrInput
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType pulumi.StringPtrInput
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId pulumi.IntPtrInput
	// Last modified time of template in ISO date format.
	UpdateTime pulumi.StringPtrInput
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width pulumi.IntPtrInput
}

func (ImageSpriteTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageSpriteTemplateState)(nil)).Elem()
}

type imageSpriteTemplateArgs struct {
	// Subimage column count of an image sprite.
	ColumnCount int `pulumi:"columnCount"`
	// Template description. Length limit: 256 characters.
	Comment *string `pulumi:"comment"`
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType *string `pulumi:"fillType"`
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height *int `pulumi:"height"`
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name *string `pulumi:"name"`
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive *bool `pulumi:"resolutionAdaptive"`
	// Subimage row count of an image sprite.
	RowCount int `pulumi:"rowCount"`
	// Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval int `pulumi:"sampleInterval"`
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType string `pulumi:"sampleType"`
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId *int `pulumi:"subAppId"`
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width *int `pulumi:"width"`
}

// The set of arguments for constructing a ImageSpriteTemplate resource.
type ImageSpriteTemplateArgs struct {
	// Subimage column count of an image sprite.
	ColumnCount pulumi.IntInput
	// Template description. Length limit: 256 characters.
	Comment pulumi.StringPtrInput
	// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
	FillType pulumi.StringPtrInput
	// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Height pulumi.IntPtrInput
	// Name of a time point screen capturing template. Length limit: 64 characters.
	Name pulumi.StringPtrInput
	// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
	ResolutionAdaptive pulumi.BoolPtrInput
	// Subimage row count of an image sprite.
	RowCount pulumi.IntInput
	// Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
	SampleInterval pulumi.IntInput
	// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
	SampleType pulumi.StringInput
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId pulumi.IntPtrInput
	// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
	Width pulumi.IntPtrInput
}

func (ImageSpriteTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageSpriteTemplateArgs)(nil)).Elem()
}

type ImageSpriteTemplateInput interface {
	pulumi.Input

	ToImageSpriteTemplateOutput() ImageSpriteTemplateOutput
	ToImageSpriteTemplateOutputWithContext(ctx context.Context) ImageSpriteTemplateOutput
}

func (*ImageSpriteTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSpriteTemplate)(nil)).Elem()
}

func (i *ImageSpriteTemplate) ToImageSpriteTemplateOutput() ImageSpriteTemplateOutput {
	return i.ToImageSpriteTemplateOutputWithContext(context.Background())
}

func (i *ImageSpriteTemplate) ToImageSpriteTemplateOutputWithContext(ctx context.Context) ImageSpriteTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSpriteTemplateOutput)
}

// ImageSpriteTemplateArrayInput is an input type that accepts ImageSpriteTemplateArray and ImageSpriteTemplateArrayOutput values.
// You can construct a concrete instance of `ImageSpriteTemplateArrayInput` via:
//
//	ImageSpriteTemplateArray{ ImageSpriteTemplateArgs{...} }
type ImageSpriteTemplateArrayInput interface {
	pulumi.Input

	ToImageSpriteTemplateArrayOutput() ImageSpriteTemplateArrayOutput
	ToImageSpriteTemplateArrayOutputWithContext(context.Context) ImageSpriteTemplateArrayOutput
}

type ImageSpriteTemplateArray []ImageSpriteTemplateInput

func (ImageSpriteTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageSpriteTemplate)(nil)).Elem()
}

func (i ImageSpriteTemplateArray) ToImageSpriteTemplateArrayOutput() ImageSpriteTemplateArrayOutput {
	return i.ToImageSpriteTemplateArrayOutputWithContext(context.Background())
}

func (i ImageSpriteTemplateArray) ToImageSpriteTemplateArrayOutputWithContext(ctx context.Context) ImageSpriteTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSpriteTemplateArrayOutput)
}

// ImageSpriteTemplateMapInput is an input type that accepts ImageSpriteTemplateMap and ImageSpriteTemplateMapOutput values.
// You can construct a concrete instance of `ImageSpriteTemplateMapInput` via:
//
//	ImageSpriteTemplateMap{ "key": ImageSpriteTemplateArgs{...} }
type ImageSpriteTemplateMapInput interface {
	pulumi.Input

	ToImageSpriteTemplateMapOutput() ImageSpriteTemplateMapOutput
	ToImageSpriteTemplateMapOutputWithContext(context.Context) ImageSpriteTemplateMapOutput
}

type ImageSpriteTemplateMap map[string]ImageSpriteTemplateInput

func (ImageSpriteTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageSpriteTemplate)(nil)).Elem()
}

func (i ImageSpriteTemplateMap) ToImageSpriteTemplateMapOutput() ImageSpriteTemplateMapOutput {
	return i.ToImageSpriteTemplateMapOutputWithContext(context.Background())
}

func (i ImageSpriteTemplateMap) ToImageSpriteTemplateMapOutputWithContext(ctx context.Context) ImageSpriteTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSpriteTemplateMapOutput)
}

type ImageSpriteTemplateOutput struct{ *pulumi.OutputState }

func (ImageSpriteTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageSpriteTemplate)(nil)).Elem()
}

func (o ImageSpriteTemplateOutput) ToImageSpriteTemplateOutput() ImageSpriteTemplateOutput {
	return o
}

func (o ImageSpriteTemplateOutput) ToImageSpriteTemplateOutputWithContext(ctx context.Context) ImageSpriteTemplateOutput {
	return o
}

// Subimage column count of an image sprite.
func (o ImageSpriteTemplateOutput) ColumnCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.IntOutput { return v.ColumnCount }).(pulumi.IntOutput)
}

// Template description. Length limit: 256 characters.
func (o ImageSpriteTemplateOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Creation time of template in ISO date format.
func (o ImageSpriteTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Fill refers to the way of processing a screenshot when its aspect ratio is different from that of the source video. The following fill types are supported: `stretch`: stretch. The screenshot will be stretched frame by frame to match the aspect ratio of the source video, which may make the screenshot shorter or longer; `black`: fill with black. This option retains the aspect ratio of the source video for the screenshot and fills the unmatched area with black color blocks. Default value: `black`.
func (o ImageSpriteTemplateOutput) FillType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.StringPtrOutput { return v.FillType }).(pulumi.StringPtrOutput)
}

// Maximum value of the `height` (or short side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, `width` will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
func (o ImageSpriteTemplateOutput) Height() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.IntPtrOutput { return v.Height }).(pulumi.IntPtrOutput)
}

// Name of a time point screen capturing template. Length limit: 64 characters.
func (o ImageSpriteTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Resolution adaption. Valid values: `true`,`false`. `true`: enabled. In this case, `width` represents the long side of a video, while `height` the short side; `false`: disabled. In this case, `width` represents the width of a video, while `height` the height. Default value: `true`.
func (o ImageSpriteTemplateOutput) ResolutionAdaptive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.BoolPtrOutput { return v.ResolutionAdaptive }).(pulumi.BoolPtrOutput)
}

// Subimage row count of an image sprite.
func (o ImageSpriteTemplateOutput) RowCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.IntOutput { return v.RowCount }).(pulumi.IntOutput)
}

// Sampling interval. If `sampleType` is `Percent`, sampling will be performed at an interval of the specified percentage. If `sampleType` is `Time`, sampling will be performed at the specified time interval in seconds.
func (o ImageSpriteTemplateOutput) SampleInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.IntOutput { return v.SampleInterval }).(pulumi.IntOutput)
}

// Sampling type. Valid values: `Percent`, `Time`. `Percent`: by percent. `Time`: by time interval.
func (o ImageSpriteTemplateOutput) SampleType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.StringOutput { return v.SampleType }).(pulumi.StringOutput)
}

// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
func (o ImageSpriteTemplateOutput) SubAppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.IntPtrOutput { return v.SubAppId }).(pulumi.IntPtrOutput)
}

// Last modified time of template in ISO date format.
func (o ImageSpriteTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Maximum value of the `width` (or long side) of a screenshot in px. Value range: 0 and [128, 4,096]. If both `width` and `height` are `0`, the resolution will be the same as that of the source video; If `width` is `0`, but `height` is not `0`, width will be proportionally scaled; If `width` is not `0`, but `height` is `0`, `height` will be proportionally scaled; If both `width` and `height` are not `0`, the custom resolution will be used. Default value: `0`.
func (o ImageSpriteTemplateOutput) Width() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ImageSpriteTemplate) pulumi.IntPtrOutput { return v.Width }).(pulumi.IntPtrOutput)
}

type ImageSpriteTemplateArrayOutput struct{ *pulumi.OutputState }

func (ImageSpriteTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImageSpriteTemplate)(nil)).Elem()
}

func (o ImageSpriteTemplateArrayOutput) ToImageSpriteTemplateArrayOutput() ImageSpriteTemplateArrayOutput {
	return o
}

func (o ImageSpriteTemplateArrayOutput) ToImageSpriteTemplateArrayOutputWithContext(ctx context.Context) ImageSpriteTemplateArrayOutput {
	return o
}

func (o ImageSpriteTemplateArrayOutput) Index(i pulumi.IntInput) ImageSpriteTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImageSpriteTemplate {
		return vs[0].([]*ImageSpriteTemplate)[vs[1].(int)]
	}).(ImageSpriteTemplateOutput)
}

type ImageSpriteTemplateMapOutput struct{ *pulumi.OutputState }

func (ImageSpriteTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImageSpriteTemplate)(nil)).Elem()
}

func (o ImageSpriteTemplateMapOutput) ToImageSpriteTemplateMapOutput() ImageSpriteTemplateMapOutput {
	return o
}

func (o ImageSpriteTemplateMapOutput) ToImageSpriteTemplateMapOutputWithContext(ctx context.Context) ImageSpriteTemplateMapOutput {
	return o
}

func (o ImageSpriteTemplateMapOutput) MapIndex(k pulumi.StringInput) ImageSpriteTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImageSpriteTemplate {
		return vs[0].(map[string]*ImageSpriteTemplate)[vs[1].(string)]
	}).(ImageSpriteTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSpriteTemplateInput)(nil)).Elem(), &ImageSpriteTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSpriteTemplateArrayInput)(nil)).Elem(), ImageSpriteTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSpriteTemplateMapInput)(nil)).Elem(), ImageSpriteTemplateMap{})
	pulumi.RegisterOutputType(ImageSpriteTemplateOutput{})
	pulumi.RegisterOutputType(ImageSpriteTemplateArrayOutput{})
	pulumi.RegisterOutputType(ImageSpriteTemplateMapOutput{})
}
