// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vod

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provide a resource to create a VOD procedure template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vod"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vod"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooAdaptiveDynamicStreamingTemplate, err := Vod.NewAdaptiveDynamicStreamingTemplate(ctx, "fooAdaptiveDynamicStreamingTemplate", &Vod.AdaptiveDynamicStreamingTemplateArgs{
//				Format:                       pulumi.String("HLS"),
//				DrmType:                      pulumi.String("SimpleAES"),
//				DisableHigherVideoBitrate:    pulumi.Bool(false),
//				DisableHigherVideoResolution: pulumi.Bool(false),
//				Comment:                      pulumi.String("test"),
//				StreamInfos: vod.AdaptiveDynamicStreamingTemplateStreamInfoArray{
//					&vod.AdaptiveDynamicStreamingTemplateStreamInfoArgs{
//						Video: &vod.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs{
//							Codec:              pulumi.String("libx265"),
//							Fps:                pulumi.Int(4),
//							Bitrate:            pulumi.Int(129),
//							ResolutionAdaptive: pulumi.Bool(false),
//							Width:              pulumi.Int(128),
//							Height:             pulumi.Int(128),
//							FillType:           pulumi.String("stretch"),
//						},
//						Audio: &vod.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs{
//							Codec:        pulumi.String("libmp3lame"),
//							Bitrate:      pulumi.Int(129),
//							SampleRate:   pulumi.Int(44100),
//							AudioChannel: pulumi.String("dual"),
//						},
//						RemoveAudio: pulumi.Bool(false),
//					},
//					&vod.AdaptiveDynamicStreamingTemplateStreamInfoArgs{
//						Video: &vod.AdaptiveDynamicStreamingTemplateStreamInfoVideoArgs{
//							Codec:   pulumi.String("libx264"),
//							Fps:     pulumi.Int(4),
//							Bitrate: pulumi.Int(256),
//						},
//						Audio: &vod.AdaptiveDynamicStreamingTemplateStreamInfoAudioArgs{
//							Codec:      pulumi.String("libfdk_aac"),
//							Bitrate:    pulumi.Int(256),
//							SampleRate: pulumi.Int(44100),
//						},
//						RemoveAudio: pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooSnapshotByTimeOffsetTemplate, err := Vod.NewSnapshotByTimeOffsetTemplate(ctx, "fooSnapshotByTimeOffsetTemplate", &Vod.SnapshotByTimeOffsetTemplateArgs{
//				Width:              pulumi.Int(130),
//				Height:             pulumi.Int(128),
//				ResolutionAdaptive: pulumi.Bool(false),
//				Format:             pulumi.String("png"),
//				Comment:            pulumi.String("test"),
//				FillType:           pulumi.String("white"),
//			})
//			if err != nil {
//				return err
//			}
//			fooImageSpriteTemplate, err := Vod.NewImageSpriteTemplate(ctx, "fooImageSpriteTemplate", &Vod.ImageSpriteTemplateArgs{
//				SampleType:         pulumi.String("Percent"),
//				SampleInterval:     pulumi.Int(10),
//				RowCount:           pulumi.Int(3),
//				ColumnCount:        pulumi.Int(3),
//				Comment:            pulumi.String("test"),
//				FillType:           pulumi.String("stretch"),
//				Width:              pulumi.Int(128),
//				Height:             pulumi.Int(128),
//				ResolutionAdaptive: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Vod.NewProcedureTemplate(ctx, "fooProcedureTemplate", &Vod.ProcedureTemplateArgs{
//				Comment: pulumi.String("test"),
//				MediaProcessTask: &vod.ProcedureTemplateMediaProcessTaskArgs{
//					AdaptiveDynamicStreamingTaskLists: vod.ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListArray{
//						&vod.ProcedureTemplateMediaProcessTaskAdaptiveDynamicStreamingTaskListArgs{
//							Definition: fooAdaptiveDynamicStreamingTemplate.ID(),
//						},
//					},
//					SnapshotByTimeOffsetTaskLists: vod.ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListArray{
//						&vod.ProcedureTemplateMediaProcessTaskSnapshotByTimeOffsetTaskListArgs{
//							Definition: fooSnapshotByTimeOffsetTemplate.ID(),
//							ExtTimeOffsetLists: pulumi.StringArray{
//								pulumi.String("3.5s"),
//							},
//						},
//					},
//					ImageSpriteTaskLists: vod.ProcedureTemplateMediaProcessTaskImageSpriteTaskListArray{
//						&vod.ProcedureTemplateMediaProcessTaskImageSpriteTaskListArgs{
//							Definition: fooImageSpriteTemplate.ID(),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VOD procedure template can be imported using the name, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vod/procedureTemplate:ProcedureTemplate foo tf-procedure
//
// ```
type ProcedureTemplate struct {
	pulumi.CustomResourceState

	// Template description. Length limit: 256 characters.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// Creation time of template in ISO date format.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Parameter of video processing task.
	MediaProcessTask ProcedureTemplateMediaProcessTaskPtrOutput `pulumi:"mediaProcessTask"`
	// Task flow name (up to 20 characters).
	Name pulumi.StringOutput `pulumi:"name"`
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId pulumi.IntPtrOutput `pulumi:"subAppId"`
	// Last modified time of template in ISO date format.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewProcedureTemplate registers a new resource with the given unique name, arguments, and options.
func NewProcedureTemplate(ctx *pulumi.Context,
	name string, args *ProcedureTemplateArgs, opts ...pulumi.ResourceOption) (*ProcedureTemplate, error) {
	if args == nil {
		args = &ProcedureTemplateArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ProcedureTemplate
	err := ctx.RegisterResource("tencentcloud:Vod/procedureTemplate:ProcedureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProcedureTemplate gets an existing ProcedureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProcedureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProcedureTemplateState, opts ...pulumi.ResourceOption) (*ProcedureTemplate, error) {
	var resource ProcedureTemplate
	err := ctx.ReadResource("tencentcloud:Vod/procedureTemplate:ProcedureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProcedureTemplate resources.
type procedureTemplateState struct {
	// Template description. Length limit: 256 characters.
	Comment *string `pulumi:"comment"`
	// Creation time of template in ISO date format.
	CreateTime *string `pulumi:"createTime"`
	// Parameter of video processing task.
	MediaProcessTask *ProcedureTemplateMediaProcessTask `pulumi:"mediaProcessTask"`
	// Task flow name (up to 20 characters).
	Name *string `pulumi:"name"`
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId *int `pulumi:"subAppId"`
	// Last modified time of template in ISO date format.
	UpdateTime *string `pulumi:"updateTime"`
}

type ProcedureTemplateState struct {
	// Template description. Length limit: 256 characters.
	Comment pulumi.StringPtrInput
	// Creation time of template in ISO date format.
	CreateTime pulumi.StringPtrInput
	// Parameter of video processing task.
	MediaProcessTask ProcedureTemplateMediaProcessTaskPtrInput
	// Task flow name (up to 20 characters).
	Name pulumi.StringPtrInput
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId pulumi.IntPtrInput
	// Last modified time of template in ISO date format.
	UpdateTime pulumi.StringPtrInput
}

func (ProcedureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*procedureTemplateState)(nil)).Elem()
}

type procedureTemplateArgs struct {
	// Template description. Length limit: 256 characters.
	Comment *string `pulumi:"comment"`
	// Parameter of video processing task.
	MediaProcessTask *ProcedureTemplateMediaProcessTask `pulumi:"mediaProcessTask"`
	// Task flow name (up to 20 characters).
	Name *string `pulumi:"name"`
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId *int `pulumi:"subAppId"`
}

// The set of arguments for constructing a ProcedureTemplate resource.
type ProcedureTemplateArgs struct {
	// Template description. Length limit: 256 characters.
	Comment pulumi.StringPtrInput
	// Parameter of video processing task.
	MediaProcessTask ProcedureTemplateMediaProcessTaskPtrInput
	// Task flow name (up to 20 characters).
	Name pulumi.StringPtrInput
	// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
	SubAppId pulumi.IntPtrInput
}

func (ProcedureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*procedureTemplateArgs)(nil)).Elem()
}

type ProcedureTemplateInput interface {
	pulumi.Input

	ToProcedureTemplateOutput() ProcedureTemplateOutput
	ToProcedureTemplateOutputWithContext(ctx context.Context) ProcedureTemplateOutput
}

func (*ProcedureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcedureTemplate)(nil)).Elem()
}

func (i *ProcedureTemplate) ToProcedureTemplateOutput() ProcedureTemplateOutput {
	return i.ToProcedureTemplateOutputWithContext(context.Background())
}

func (i *ProcedureTemplate) ToProcedureTemplateOutputWithContext(ctx context.Context) ProcedureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureTemplateOutput)
}

// ProcedureTemplateArrayInput is an input type that accepts ProcedureTemplateArray and ProcedureTemplateArrayOutput values.
// You can construct a concrete instance of `ProcedureTemplateArrayInput` via:
//
//	ProcedureTemplateArray{ ProcedureTemplateArgs{...} }
type ProcedureTemplateArrayInput interface {
	pulumi.Input

	ToProcedureTemplateArrayOutput() ProcedureTemplateArrayOutput
	ToProcedureTemplateArrayOutputWithContext(context.Context) ProcedureTemplateArrayOutput
}

type ProcedureTemplateArray []ProcedureTemplateInput

func (ProcedureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcedureTemplate)(nil)).Elem()
}

func (i ProcedureTemplateArray) ToProcedureTemplateArrayOutput() ProcedureTemplateArrayOutput {
	return i.ToProcedureTemplateArrayOutputWithContext(context.Background())
}

func (i ProcedureTemplateArray) ToProcedureTemplateArrayOutputWithContext(ctx context.Context) ProcedureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureTemplateArrayOutput)
}

// ProcedureTemplateMapInput is an input type that accepts ProcedureTemplateMap and ProcedureTemplateMapOutput values.
// You can construct a concrete instance of `ProcedureTemplateMapInput` via:
//
//	ProcedureTemplateMap{ "key": ProcedureTemplateArgs{...} }
type ProcedureTemplateMapInput interface {
	pulumi.Input

	ToProcedureTemplateMapOutput() ProcedureTemplateMapOutput
	ToProcedureTemplateMapOutputWithContext(context.Context) ProcedureTemplateMapOutput
}

type ProcedureTemplateMap map[string]ProcedureTemplateInput

func (ProcedureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcedureTemplate)(nil)).Elem()
}

func (i ProcedureTemplateMap) ToProcedureTemplateMapOutput() ProcedureTemplateMapOutput {
	return i.ToProcedureTemplateMapOutputWithContext(context.Background())
}

func (i ProcedureTemplateMap) ToProcedureTemplateMapOutputWithContext(ctx context.Context) ProcedureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProcedureTemplateMapOutput)
}

type ProcedureTemplateOutput struct{ *pulumi.OutputState }

func (ProcedureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProcedureTemplate)(nil)).Elem()
}

func (o ProcedureTemplateOutput) ToProcedureTemplateOutput() ProcedureTemplateOutput {
	return o
}

func (o ProcedureTemplateOutput) ToProcedureTemplateOutputWithContext(ctx context.Context) ProcedureTemplateOutput {
	return o
}

// Template description. Length limit: 256 characters.
func (o ProcedureTemplateOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProcedureTemplate) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// Creation time of template in ISO date format.
func (o ProcedureTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Parameter of video processing task.
func (o ProcedureTemplateOutput) MediaProcessTask() ProcedureTemplateMediaProcessTaskPtrOutput {
	return o.ApplyT(func(v *ProcedureTemplate) ProcedureTemplateMediaProcessTaskPtrOutput { return v.MediaProcessTask }).(ProcedureTemplateMediaProcessTaskPtrOutput)
}

// Task flow name (up to 20 characters).
func (o ProcedureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Subapplication ID in VOD. If you need to access a resource in a subapplication, enter the subapplication ID in this field; otherwise, leave it empty.
func (o ProcedureTemplateOutput) SubAppId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProcedureTemplate) pulumi.IntPtrOutput { return v.SubAppId }).(pulumi.IntPtrOutput)
}

// Last modified time of template in ISO date format.
func (o ProcedureTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ProcedureTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ProcedureTemplateArrayOutput struct{ *pulumi.OutputState }

func (ProcedureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProcedureTemplate)(nil)).Elem()
}

func (o ProcedureTemplateArrayOutput) ToProcedureTemplateArrayOutput() ProcedureTemplateArrayOutput {
	return o
}

func (o ProcedureTemplateArrayOutput) ToProcedureTemplateArrayOutputWithContext(ctx context.Context) ProcedureTemplateArrayOutput {
	return o
}

func (o ProcedureTemplateArrayOutput) Index(i pulumi.IntInput) ProcedureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProcedureTemplate {
		return vs[0].([]*ProcedureTemplate)[vs[1].(int)]
	}).(ProcedureTemplateOutput)
}

type ProcedureTemplateMapOutput struct{ *pulumi.OutputState }

func (ProcedureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProcedureTemplate)(nil)).Elem()
}

func (o ProcedureTemplateMapOutput) ToProcedureTemplateMapOutput() ProcedureTemplateMapOutput {
	return o
}

func (o ProcedureTemplateMapOutput) ToProcedureTemplateMapOutputWithContext(ctx context.Context) ProcedureTemplateMapOutput {
	return o
}

func (o ProcedureTemplateMapOutput) MapIndex(k pulumi.StringInput) ProcedureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProcedureTemplate {
		return vs[0].(map[string]*ProcedureTemplate)[vs[1].(string)]
	}).(ProcedureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureTemplateInput)(nil)).Elem(), &ProcedureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureTemplateArrayInput)(nil)).Elem(), ProcedureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProcedureTemplateMapInput)(nil)).Elem(), ProcedureTemplateMap{})
	pulumi.RegisterOutputType(ProcedureTemplateOutput{})
	pulumi.RegisterOutputType(ProcedureTemplateArrayOutput{})
	pulumi.RegisterOutputType(ProcedureTemplateMapOutput{})
}
