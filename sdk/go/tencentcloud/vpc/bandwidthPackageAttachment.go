// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc bandwidthPackageAttachment
type BandwidthPackageAttachment struct {
	pulumi.CustomResourceState

	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	BandwidthPackageId pulumi.StringOutput `pulumi:"bandwidthPackageId"`
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType pulumi.StringPtrOutput `pulumi:"networkType"`
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType pulumi.StringPtrOutput `pulumi:"resourceType"`
}

// NewBandwidthPackageAttachment registers a new resource with the given unique name, arguments, and options.
func NewBandwidthPackageAttachment(ctx *pulumi.Context,
	name string, args *BandwidthPackageAttachmentArgs, opts ...pulumi.ResourceOption) (*BandwidthPackageAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BandwidthPackageId == nil {
		return nil, errors.New("invalid value for required argument 'BandwidthPackageId'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BandwidthPackageAttachment
	err := ctx.RegisterResource("tencentcloud:Vpc/bandwidthPackageAttachment:BandwidthPackageAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBandwidthPackageAttachment gets an existing BandwidthPackageAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBandwidthPackageAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BandwidthPackageAttachmentState, opts ...pulumi.ResourceOption) (*BandwidthPackageAttachment, error) {
	var resource BandwidthPackageAttachment
	err := ctx.ReadResource("tencentcloud:Vpc/bandwidthPackageAttachment:BandwidthPackageAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BandwidthPackageAttachment resources.
type bandwidthPackageAttachmentState struct {
	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType *string `pulumi:"networkType"`
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol *string `pulumi:"protocol"`
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceId *string `pulumi:"resourceId"`
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType *string `pulumi:"resourceType"`
}

type BandwidthPackageAttachmentState struct {
	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	BandwidthPackageId pulumi.StringPtrInput
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType pulumi.StringPtrInput
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol pulumi.StringPtrInput
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceId pulumi.StringPtrInput
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType pulumi.StringPtrInput
}

func (BandwidthPackageAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPackageAttachmentState)(nil)).Elem()
}

type bandwidthPackageAttachmentArgs struct {
	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	BandwidthPackageId string `pulumi:"bandwidthPackageId"`
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType *string `pulumi:"networkType"`
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol *string `pulumi:"protocol"`
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceId string `pulumi:"resourceId"`
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType *string `pulumi:"resourceType"`
}

// The set of arguments for constructing a BandwidthPackageAttachment resource.
type BandwidthPackageAttachmentArgs struct {
	// Bandwidth package unique ID, in the form of `bwp-xxxx`.
	BandwidthPackageId pulumi.StringInput
	// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
	NetworkType pulumi.StringPtrInput
	// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
	Protocol pulumi.StringPtrInput
	// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
	ResourceId pulumi.StringInput
	// Resource types, including `Address`, `LoadBalance`.
	ResourceType pulumi.StringPtrInput
}

func (BandwidthPackageAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bandwidthPackageAttachmentArgs)(nil)).Elem()
}

type BandwidthPackageAttachmentInput interface {
	pulumi.Input

	ToBandwidthPackageAttachmentOutput() BandwidthPackageAttachmentOutput
	ToBandwidthPackageAttachmentOutputWithContext(ctx context.Context) BandwidthPackageAttachmentOutput
}

func (*BandwidthPackageAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPackageAttachment)(nil)).Elem()
}

func (i *BandwidthPackageAttachment) ToBandwidthPackageAttachmentOutput() BandwidthPackageAttachmentOutput {
	return i.ToBandwidthPackageAttachmentOutputWithContext(context.Background())
}

func (i *BandwidthPackageAttachment) ToBandwidthPackageAttachmentOutputWithContext(ctx context.Context) BandwidthPackageAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageAttachmentOutput)
}

// BandwidthPackageAttachmentArrayInput is an input type that accepts BandwidthPackageAttachmentArray and BandwidthPackageAttachmentArrayOutput values.
// You can construct a concrete instance of `BandwidthPackageAttachmentArrayInput` via:
//
//	BandwidthPackageAttachmentArray{ BandwidthPackageAttachmentArgs{...} }
type BandwidthPackageAttachmentArrayInput interface {
	pulumi.Input

	ToBandwidthPackageAttachmentArrayOutput() BandwidthPackageAttachmentArrayOutput
	ToBandwidthPackageAttachmentArrayOutputWithContext(context.Context) BandwidthPackageAttachmentArrayOutput
}

type BandwidthPackageAttachmentArray []BandwidthPackageAttachmentInput

func (BandwidthPackageAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPackageAttachment)(nil)).Elem()
}

func (i BandwidthPackageAttachmentArray) ToBandwidthPackageAttachmentArrayOutput() BandwidthPackageAttachmentArrayOutput {
	return i.ToBandwidthPackageAttachmentArrayOutputWithContext(context.Background())
}

func (i BandwidthPackageAttachmentArray) ToBandwidthPackageAttachmentArrayOutputWithContext(ctx context.Context) BandwidthPackageAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageAttachmentArrayOutput)
}

// BandwidthPackageAttachmentMapInput is an input type that accepts BandwidthPackageAttachmentMap and BandwidthPackageAttachmentMapOutput values.
// You can construct a concrete instance of `BandwidthPackageAttachmentMapInput` via:
//
//	BandwidthPackageAttachmentMap{ "key": BandwidthPackageAttachmentArgs{...} }
type BandwidthPackageAttachmentMapInput interface {
	pulumi.Input

	ToBandwidthPackageAttachmentMapOutput() BandwidthPackageAttachmentMapOutput
	ToBandwidthPackageAttachmentMapOutputWithContext(context.Context) BandwidthPackageAttachmentMapOutput
}

type BandwidthPackageAttachmentMap map[string]BandwidthPackageAttachmentInput

func (BandwidthPackageAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPackageAttachment)(nil)).Elem()
}

func (i BandwidthPackageAttachmentMap) ToBandwidthPackageAttachmentMapOutput() BandwidthPackageAttachmentMapOutput {
	return i.ToBandwidthPackageAttachmentMapOutputWithContext(context.Background())
}

func (i BandwidthPackageAttachmentMap) ToBandwidthPackageAttachmentMapOutputWithContext(ctx context.Context) BandwidthPackageAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageAttachmentMapOutput)
}

type BandwidthPackageAttachmentOutput struct{ *pulumi.OutputState }

func (BandwidthPackageAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BandwidthPackageAttachment)(nil)).Elem()
}

func (o BandwidthPackageAttachmentOutput) ToBandwidthPackageAttachmentOutput() BandwidthPackageAttachmentOutput {
	return o
}

func (o BandwidthPackageAttachmentOutput) ToBandwidthPackageAttachmentOutputWithContext(ctx context.Context) BandwidthPackageAttachmentOutput {
	return o
}

// Bandwidth package unique ID, in the form of `bwp-xxxx`.
func (o BandwidthPackageAttachmentOutput) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringOutput { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// Bandwidth packet type, currently supports `BGP` type, indicating that the internal resource is BGP IP.
func (o BandwidthPackageAttachmentOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringPtrOutput { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// Bandwidth packet protocol type. Currently `ipv4` and `ipv6` protocol types are supported.
func (o BandwidthPackageAttachmentOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The unique ID of the resource, currently supports EIP resources and LB resources, such as `eip-xxxx`, `lb-xxxx`.
func (o BandwidthPackageAttachmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Resource types, including `Address`, `LoadBalance`.
func (o BandwidthPackageAttachmentOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BandwidthPackageAttachment) pulumi.StringPtrOutput { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type BandwidthPackageAttachmentArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPackageAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BandwidthPackageAttachment)(nil)).Elem()
}

func (o BandwidthPackageAttachmentArrayOutput) ToBandwidthPackageAttachmentArrayOutput() BandwidthPackageAttachmentArrayOutput {
	return o
}

func (o BandwidthPackageAttachmentArrayOutput) ToBandwidthPackageAttachmentArrayOutputWithContext(ctx context.Context) BandwidthPackageAttachmentArrayOutput {
	return o
}

func (o BandwidthPackageAttachmentArrayOutput) Index(i pulumi.IntInput) BandwidthPackageAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BandwidthPackageAttachment {
		return vs[0].([]*BandwidthPackageAttachment)[vs[1].(int)]
	}).(BandwidthPackageAttachmentOutput)
}

type BandwidthPackageAttachmentMapOutput struct{ *pulumi.OutputState }

func (BandwidthPackageAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BandwidthPackageAttachment)(nil)).Elem()
}

func (o BandwidthPackageAttachmentMapOutput) ToBandwidthPackageAttachmentMapOutput() BandwidthPackageAttachmentMapOutput {
	return o
}

func (o BandwidthPackageAttachmentMapOutput) ToBandwidthPackageAttachmentMapOutputWithContext(ctx context.Context) BandwidthPackageAttachmentMapOutput {
	return o
}

func (o BandwidthPackageAttachmentMapOutput) MapIndex(k pulumi.StringInput) BandwidthPackageAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BandwidthPackageAttachment {
		return vs[0].(map[string]*BandwidthPackageAttachment)[vs[1].(string)]
	}).(BandwidthPackageAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageAttachmentInput)(nil)).Elem(), &BandwidthPackageAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageAttachmentArrayInput)(nil)).Elem(), BandwidthPackageAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageAttachmentMapInput)(nil)).Elem(), BandwidthPackageAttachmentMap{})
	pulumi.RegisterOutputType(BandwidthPackageAttachmentOutput{})
	pulumi.RegisterOutputType(BandwidthPackageAttachmentArrayOutput{})
	pulumi.RegisterOutputType(BandwidthPackageAttachmentMapOutput{})
}
