// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of vpc netDetectStateCheck
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.GetNetDetectStateCheck(ctx, &vpc.GetNetDetectStateCheckArgs{
//				DetectDestinationIps: []string{
//					"10.0.0.3",
//					"10.0.0.2",
//				},
//				NetDetectId:        pulumi.StringRef("netd-12345678"),
//				NextHopDestination: "10.0.0.4",
//				NextHopType:        "NORMAL_CVM",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetNetDetectStateCheck(ctx *pulumi.Context, args *GetNetDetectStateCheckArgs, opts ...pulumi.InvokeOption) (*GetNetDetectStateCheckResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetNetDetectStateCheckResult
	err := ctx.Invoke("tencentcloud:Vpc/getNetDetectStateCheck:getNetDetectStateCheck", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetDetectStateCheck.
type GetNetDetectStateCheckArgs struct {
	// The array of detection destination IPv4 addresses, which contains at most two IP addresses.
	DetectDestinationIps []string `pulumi:"detectDestinationIps"`
	// ID of a network inspector instance, e.g. netd-12345678. Enter at least one of this parameter, VpcId, SubnetId, and NetDetectName. Use NetDetectId if it is present.
	NetDetectId *string `pulumi:"netDetectId"`
	// The name of a network inspector, up to 60 bytes in length. It is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
	NetDetectName *string `pulumi:"netDetectName"`
	// The next-hop destination gateway. The value is related to NextHopType.If NextHopType is set to VPN, the value of this parameter is the VPN gateway ID, such as vpngw-12345678.If NextHopType is set to DIRECTCONNECT, the value of this parameter is the direct connect gateway ID, such as dcg-12345678.If NextHopType is set to PEERCONNECTION, the value of this parameter is the peering connection ID, such as pcx-12345678.If NextHopType is set to NAT, the value of this parameter is the NAT gateway ID, such as nat-12345678.If NextHopType is set to NORMAL_CVM, the value of this parameter is the IPv4 address of the CVM, such as 10.0.0.12.
	NextHopDestination string `pulumi:"nextHopDestination"`
	// The type of the next hop. Currently supported types are:VPN: VPN gateway;DIRECTCONNECT: direct connect gateway;PEERCONNECTION: peering connection;NAT: NAT gateway;NORMAL_CVM: normal CVM.
	NextHopType string `pulumi:"nextHopType"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of a subnet instance, e.g. `subnet-12345678`, which is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
	SubnetId *string `pulumi:"subnetId"`
	// ID of a `VPC` instance, e.g. `vpc-12345678`, which is used together with SubnetId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getNetDetectStateCheck.
type GetNetDetectStateCheckResult struct {
	// The destination IPv4 address of network detection.
	DetectDestinationIps []string `pulumi:"detectDestinationIps"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	NetDetectId *string `pulumi:"netDetectId"`
	// The array of network detection verification results.
	NetDetectIpStateSets []GetNetDetectStateCheckNetDetectIpStateSet `pulumi:"netDetectIpStateSets"`
	NetDetectName        *string                                     `pulumi:"netDetectName"`
	NextHopDestination   string                                      `pulumi:"nextHopDestination"`
	NextHopType          string                                      `pulumi:"nextHopType"`
	ResultOutputFile     *string                                     `pulumi:"resultOutputFile"`
	SubnetId             *string                                     `pulumi:"subnetId"`
	VpcId                *string                                     `pulumi:"vpcId"`
}

func GetNetDetectStateCheckOutput(ctx *pulumi.Context, args GetNetDetectStateCheckOutputArgs, opts ...pulumi.InvokeOption) GetNetDetectStateCheckResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNetDetectStateCheckResult, error) {
			args := v.(GetNetDetectStateCheckArgs)
			r, err := GetNetDetectStateCheck(ctx, &args, opts...)
			var s GetNetDetectStateCheckResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNetDetectStateCheckResultOutput)
}

// A collection of arguments for invoking getNetDetectStateCheck.
type GetNetDetectStateCheckOutputArgs struct {
	// The array of detection destination IPv4 addresses, which contains at most two IP addresses.
	DetectDestinationIps pulumi.StringArrayInput `pulumi:"detectDestinationIps"`
	// ID of a network inspector instance, e.g. netd-12345678. Enter at least one of this parameter, VpcId, SubnetId, and NetDetectName. Use NetDetectId if it is present.
	NetDetectId pulumi.StringPtrInput `pulumi:"netDetectId"`
	// The name of a network inspector, up to 60 bytes in length. It is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
	NetDetectName pulumi.StringPtrInput `pulumi:"netDetectName"`
	// The next-hop destination gateway. The value is related to NextHopType.If NextHopType is set to VPN, the value of this parameter is the VPN gateway ID, such as vpngw-12345678.If NextHopType is set to DIRECTCONNECT, the value of this parameter is the direct connect gateway ID, such as dcg-12345678.If NextHopType is set to PEERCONNECTION, the value of this parameter is the peering connection ID, such as pcx-12345678.If NextHopType is set to NAT, the value of this parameter is the NAT gateway ID, such as nat-12345678.If NextHopType is set to NORMAL_CVM, the value of this parameter is the IPv4 address of the CVM, such as 10.0.0.12.
	NextHopDestination pulumi.StringInput `pulumi:"nextHopDestination"`
	// The type of the next hop. Currently supported types are:VPN: VPN gateway;DIRECTCONNECT: direct connect gateway;PEERCONNECTION: peering connection;NAT: NAT gateway;NORMAL_CVM: normal CVM.
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// ID of a subnet instance, e.g. `subnet-12345678`, which is used together with VpcId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// ID of a `VPC` instance, e.g. `vpc-12345678`, which is used together with SubnetId and NetDetectName. You should enter either this parameter or NetDetectId, or both. Use NetDetectId if it is present.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetNetDetectStateCheckOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetDetectStateCheckArgs)(nil)).Elem()
}

// A collection of values returned by getNetDetectStateCheck.
type GetNetDetectStateCheckResultOutput struct{ *pulumi.OutputState }

func (GetNetDetectStateCheckResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetDetectStateCheckResult)(nil)).Elem()
}

func (o GetNetDetectStateCheckResultOutput) ToGetNetDetectStateCheckResultOutput() GetNetDetectStateCheckResultOutput {
	return o
}

func (o GetNetDetectStateCheckResultOutput) ToGetNetDetectStateCheckResultOutputWithContext(ctx context.Context) GetNetDetectStateCheckResultOutput {
	return o
}

// The destination IPv4 address of network detection.
func (o GetNetDetectStateCheckResultOutput) DetectDestinationIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) []string { return v.DetectDestinationIps }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetNetDetectStateCheckResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNetDetectStateCheckResultOutput) NetDetectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) *string { return v.NetDetectId }).(pulumi.StringPtrOutput)
}

// The array of network detection verification results.
func (o GetNetDetectStateCheckResultOutput) NetDetectIpStateSets() GetNetDetectStateCheckNetDetectIpStateSetArrayOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) []GetNetDetectStateCheckNetDetectIpStateSet {
		return v.NetDetectIpStateSets
	}).(GetNetDetectStateCheckNetDetectIpStateSetArrayOutput)
}

func (o GetNetDetectStateCheckResultOutput) NetDetectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) *string { return v.NetDetectName }).(pulumi.StringPtrOutput)
}

func (o GetNetDetectStateCheckResultOutput) NextHopDestination() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) string { return v.NextHopDestination }).(pulumi.StringOutput)
}

func (o GetNetDetectStateCheckResultOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) string { return v.NextHopType }).(pulumi.StringOutput)
}

func (o GetNetDetectStateCheckResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetNetDetectStateCheckResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o GetNetDetectStateCheckResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNetDetectStateCheckResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNetDetectStateCheckResultOutput{})
}
