// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a vpc notifyRoutes
//
// ## Import
//
// vpc notify_routes can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Vpc/notifyRoutes:NotifyRoutes notify_routes route_table_id#route_item_id
// ```
type NotifyRoutes struct {
	pulumi.CustomResourceState

	// If published to vbc.
	PublishedToVbc pulumi.BoolOutput `pulumi:"publishedToVbc"`
	// The unique ID of the routing policy.
	RouteItemIds pulumi.StringOutput `pulumi:"routeItemIds"`
	// The unique ID of the routing table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
}

// NewNotifyRoutes registers a new resource with the given unique name, arguments, and options.
func NewNotifyRoutes(ctx *pulumi.Context,
	name string, args *NotifyRoutesArgs, opts ...pulumi.ResourceOption) (*NotifyRoutes, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteItemIds == nil {
		return nil, errors.New("invalid value for required argument 'RouteItemIds'")
	}
	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotifyRoutes
	err := ctx.RegisterResource("tencentcloud:Vpc/notifyRoutes:NotifyRoutes", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotifyRoutes gets an existing NotifyRoutes resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotifyRoutes(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotifyRoutesState, opts ...pulumi.ResourceOption) (*NotifyRoutes, error) {
	var resource NotifyRoutes
	err := ctx.ReadResource("tencentcloud:Vpc/notifyRoutes:NotifyRoutes", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotifyRoutes resources.
type notifyRoutesState struct {
	// If published to vbc.
	PublishedToVbc *bool `pulumi:"publishedToVbc"`
	// The unique ID of the routing policy.
	RouteItemIds *string `pulumi:"routeItemIds"`
	// The unique ID of the routing table.
	RouteTableId *string `pulumi:"routeTableId"`
}

type NotifyRoutesState struct {
	// If published to vbc.
	PublishedToVbc pulumi.BoolPtrInput
	// The unique ID of the routing policy.
	RouteItemIds pulumi.StringPtrInput
	// The unique ID of the routing table.
	RouteTableId pulumi.StringPtrInput
}

func (NotifyRoutesState) ElementType() reflect.Type {
	return reflect.TypeOf((*notifyRoutesState)(nil)).Elem()
}

type notifyRoutesArgs struct {
	// The unique ID of the routing policy.
	RouteItemIds string `pulumi:"routeItemIds"`
	// The unique ID of the routing table.
	RouteTableId string `pulumi:"routeTableId"`
}

// The set of arguments for constructing a NotifyRoutes resource.
type NotifyRoutesArgs struct {
	// The unique ID of the routing policy.
	RouteItemIds pulumi.StringInput
	// The unique ID of the routing table.
	RouteTableId pulumi.StringInput
}

func (NotifyRoutesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notifyRoutesArgs)(nil)).Elem()
}

type NotifyRoutesInput interface {
	pulumi.Input

	ToNotifyRoutesOutput() NotifyRoutesOutput
	ToNotifyRoutesOutputWithContext(ctx context.Context) NotifyRoutesOutput
}

func (*NotifyRoutes) ElementType() reflect.Type {
	return reflect.TypeOf((**NotifyRoutes)(nil)).Elem()
}

func (i *NotifyRoutes) ToNotifyRoutesOutput() NotifyRoutesOutput {
	return i.ToNotifyRoutesOutputWithContext(context.Background())
}

func (i *NotifyRoutes) ToNotifyRoutesOutputWithContext(ctx context.Context) NotifyRoutesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyRoutesOutput)
}

// NotifyRoutesArrayInput is an input type that accepts NotifyRoutesArray and NotifyRoutesArrayOutput values.
// You can construct a concrete instance of `NotifyRoutesArrayInput` via:
//
//	NotifyRoutesArray{ NotifyRoutesArgs{...} }
type NotifyRoutesArrayInput interface {
	pulumi.Input

	ToNotifyRoutesArrayOutput() NotifyRoutesArrayOutput
	ToNotifyRoutesArrayOutputWithContext(context.Context) NotifyRoutesArrayOutput
}

type NotifyRoutesArray []NotifyRoutesInput

func (NotifyRoutesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotifyRoutes)(nil)).Elem()
}

func (i NotifyRoutesArray) ToNotifyRoutesArrayOutput() NotifyRoutesArrayOutput {
	return i.ToNotifyRoutesArrayOutputWithContext(context.Background())
}

func (i NotifyRoutesArray) ToNotifyRoutesArrayOutputWithContext(ctx context.Context) NotifyRoutesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyRoutesArrayOutput)
}

// NotifyRoutesMapInput is an input type that accepts NotifyRoutesMap and NotifyRoutesMapOutput values.
// You can construct a concrete instance of `NotifyRoutesMapInput` via:
//
//	NotifyRoutesMap{ "key": NotifyRoutesArgs{...} }
type NotifyRoutesMapInput interface {
	pulumi.Input

	ToNotifyRoutesMapOutput() NotifyRoutesMapOutput
	ToNotifyRoutesMapOutputWithContext(context.Context) NotifyRoutesMapOutput
}

type NotifyRoutesMap map[string]NotifyRoutesInput

func (NotifyRoutesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotifyRoutes)(nil)).Elem()
}

func (i NotifyRoutesMap) ToNotifyRoutesMapOutput() NotifyRoutesMapOutput {
	return i.ToNotifyRoutesMapOutputWithContext(context.Background())
}

func (i NotifyRoutesMap) ToNotifyRoutesMapOutputWithContext(ctx context.Context) NotifyRoutesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyRoutesMapOutput)
}

type NotifyRoutesOutput struct{ *pulumi.OutputState }

func (NotifyRoutesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotifyRoutes)(nil)).Elem()
}

func (o NotifyRoutesOutput) ToNotifyRoutesOutput() NotifyRoutesOutput {
	return o
}

func (o NotifyRoutesOutput) ToNotifyRoutesOutputWithContext(ctx context.Context) NotifyRoutesOutput {
	return o
}

// If published to vbc.
func (o NotifyRoutesOutput) PublishedToVbc() pulumi.BoolOutput {
	return o.ApplyT(func(v *NotifyRoutes) pulumi.BoolOutput { return v.PublishedToVbc }).(pulumi.BoolOutput)
}

// The unique ID of the routing policy.
func (o NotifyRoutesOutput) RouteItemIds() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyRoutes) pulumi.StringOutput { return v.RouteItemIds }).(pulumi.StringOutput)
}

// The unique ID of the routing table.
func (o NotifyRoutesOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyRoutes) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

type NotifyRoutesArrayOutput struct{ *pulumi.OutputState }

func (NotifyRoutesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotifyRoutes)(nil)).Elem()
}

func (o NotifyRoutesArrayOutput) ToNotifyRoutesArrayOutput() NotifyRoutesArrayOutput {
	return o
}

func (o NotifyRoutesArrayOutput) ToNotifyRoutesArrayOutputWithContext(ctx context.Context) NotifyRoutesArrayOutput {
	return o
}

func (o NotifyRoutesArrayOutput) Index(i pulumi.IntInput) NotifyRoutesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotifyRoutes {
		return vs[0].([]*NotifyRoutes)[vs[1].(int)]
	}).(NotifyRoutesOutput)
}

type NotifyRoutesMapOutput struct{ *pulumi.OutputState }

func (NotifyRoutesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotifyRoutes)(nil)).Elem()
}

func (o NotifyRoutesMapOutput) ToNotifyRoutesMapOutput() NotifyRoutesMapOutput {
	return o
}

func (o NotifyRoutesMapOutput) ToNotifyRoutesMapOutputWithContext(ctx context.Context) NotifyRoutesMapOutput {
	return o
}

func (o NotifyRoutesMapOutput) MapIndex(k pulumi.StringInput) NotifyRoutesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotifyRoutes {
		return vs[0].(map[string]*NotifyRoutes)[vs[1].(string)]
	}).(NotifyRoutesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyRoutesInput)(nil)).Elem(), &NotifyRoutes{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyRoutesArrayInput)(nil)).Elem(), NotifyRoutesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyRoutesMapInput)(nil)).Elem(), NotifyRoutesMap{})
	pulumi.RegisterOutputType(NotifyRoutesOutput{})
	pulumi.RegisterOutputType(NotifyRoutesArrayOutput{})
	pulumi.RegisterOutputType(NotifyRoutesMapOutput{})
}
