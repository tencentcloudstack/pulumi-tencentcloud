// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc enableEndPointConnect
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.NewEnableEndPointConnect(ctx, "enableEndPointConnect", &Vpc.EnableEndPointConnectArgs{
//				AcceptFlag: pulumi.Bool(true),
//				EndPointIds: pulumi.StringArray{
//					pulumi.String("vpce-6q0ftmke"),
//				},
//				EndPointServiceId: pulumi.String("vpcsvc-98jddhcz"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type EnableEndPointConnect struct {
	pulumi.CustomResourceState

	// Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
	AcceptFlag pulumi.BoolOutput `pulumi:"acceptFlag"`
	// Endpoint ID.
	EndPointIds pulumi.StringArrayOutput `pulumi:"endPointIds"`
	// Endpoint service ID.
	EndPointServiceId pulumi.StringOutput `pulumi:"endPointServiceId"`
}

// NewEnableEndPointConnect registers a new resource with the given unique name, arguments, and options.
func NewEnableEndPointConnect(ctx *pulumi.Context,
	name string, args *EnableEndPointConnectArgs, opts ...pulumi.ResourceOption) (*EnableEndPointConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AcceptFlag == nil {
		return nil, errors.New("invalid value for required argument 'AcceptFlag'")
	}
	if args.EndPointIds == nil {
		return nil, errors.New("invalid value for required argument 'EndPointIds'")
	}
	if args.EndPointServiceId == nil {
		return nil, errors.New("invalid value for required argument 'EndPointServiceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EnableEndPointConnect
	err := ctx.RegisterResource("tencentcloud:Vpc/enableEndPointConnect:EnableEndPointConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnableEndPointConnect gets an existing EnableEndPointConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnableEndPointConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnableEndPointConnectState, opts ...pulumi.ResourceOption) (*EnableEndPointConnect, error) {
	var resource EnableEndPointConnect
	err := ctx.ReadResource("tencentcloud:Vpc/enableEndPointConnect:EnableEndPointConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnableEndPointConnect resources.
type enableEndPointConnectState struct {
	// Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
	AcceptFlag *bool `pulumi:"acceptFlag"`
	// Endpoint ID.
	EndPointIds []string `pulumi:"endPointIds"`
	// Endpoint service ID.
	EndPointServiceId *string `pulumi:"endPointServiceId"`
}

type EnableEndPointConnectState struct {
	// Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
	AcceptFlag pulumi.BoolPtrInput
	// Endpoint ID.
	EndPointIds pulumi.StringArrayInput
	// Endpoint service ID.
	EndPointServiceId pulumi.StringPtrInput
}

func (EnableEndPointConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*enableEndPointConnectState)(nil)).Elem()
}

type enableEndPointConnectArgs struct {
	// Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
	AcceptFlag bool `pulumi:"acceptFlag"`
	// Endpoint ID.
	EndPointIds []string `pulumi:"endPointIds"`
	// Endpoint service ID.
	EndPointServiceId string `pulumi:"endPointServiceId"`
}

// The set of arguments for constructing a EnableEndPointConnect resource.
type EnableEndPointConnectArgs struct {
	// Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
	AcceptFlag pulumi.BoolInput
	// Endpoint ID.
	EndPointIds pulumi.StringArrayInput
	// Endpoint service ID.
	EndPointServiceId pulumi.StringInput
}

func (EnableEndPointConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enableEndPointConnectArgs)(nil)).Elem()
}

type EnableEndPointConnectInput interface {
	pulumi.Input

	ToEnableEndPointConnectOutput() EnableEndPointConnectOutput
	ToEnableEndPointConnectOutputWithContext(ctx context.Context) EnableEndPointConnectOutput
}

func (*EnableEndPointConnect) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableEndPointConnect)(nil)).Elem()
}

func (i *EnableEndPointConnect) ToEnableEndPointConnectOutput() EnableEndPointConnectOutput {
	return i.ToEnableEndPointConnectOutputWithContext(context.Background())
}

func (i *EnableEndPointConnect) ToEnableEndPointConnectOutputWithContext(ctx context.Context) EnableEndPointConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableEndPointConnectOutput)
}

// EnableEndPointConnectArrayInput is an input type that accepts EnableEndPointConnectArray and EnableEndPointConnectArrayOutput values.
// You can construct a concrete instance of `EnableEndPointConnectArrayInput` via:
//
//	EnableEndPointConnectArray{ EnableEndPointConnectArgs{...} }
type EnableEndPointConnectArrayInput interface {
	pulumi.Input

	ToEnableEndPointConnectArrayOutput() EnableEndPointConnectArrayOutput
	ToEnableEndPointConnectArrayOutputWithContext(context.Context) EnableEndPointConnectArrayOutput
}

type EnableEndPointConnectArray []EnableEndPointConnectInput

func (EnableEndPointConnectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnableEndPointConnect)(nil)).Elem()
}

func (i EnableEndPointConnectArray) ToEnableEndPointConnectArrayOutput() EnableEndPointConnectArrayOutput {
	return i.ToEnableEndPointConnectArrayOutputWithContext(context.Background())
}

func (i EnableEndPointConnectArray) ToEnableEndPointConnectArrayOutputWithContext(ctx context.Context) EnableEndPointConnectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableEndPointConnectArrayOutput)
}

// EnableEndPointConnectMapInput is an input type that accepts EnableEndPointConnectMap and EnableEndPointConnectMapOutput values.
// You can construct a concrete instance of `EnableEndPointConnectMapInput` via:
//
//	EnableEndPointConnectMap{ "key": EnableEndPointConnectArgs{...} }
type EnableEndPointConnectMapInput interface {
	pulumi.Input

	ToEnableEndPointConnectMapOutput() EnableEndPointConnectMapOutput
	ToEnableEndPointConnectMapOutputWithContext(context.Context) EnableEndPointConnectMapOutput
}

type EnableEndPointConnectMap map[string]EnableEndPointConnectInput

func (EnableEndPointConnectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnableEndPointConnect)(nil)).Elem()
}

func (i EnableEndPointConnectMap) ToEnableEndPointConnectMapOutput() EnableEndPointConnectMapOutput {
	return i.ToEnableEndPointConnectMapOutputWithContext(context.Background())
}

func (i EnableEndPointConnectMap) ToEnableEndPointConnectMapOutputWithContext(ctx context.Context) EnableEndPointConnectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableEndPointConnectMapOutput)
}

type EnableEndPointConnectOutput struct{ *pulumi.OutputState }

func (EnableEndPointConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableEndPointConnect)(nil)).Elem()
}

func (o EnableEndPointConnectOutput) ToEnableEndPointConnectOutput() EnableEndPointConnectOutput {
	return o
}

func (o EnableEndPointConnectOutput) ToEnableEndPointConnectOutputWithContext(ctx context.Context) EnableEndPointConnectOutput {
	return o
}

// Whether to accept endpoint connection requests. `true`: Accept automatically. `false`: Do not automatically accept.
func (o EnableEndPointConnectOutput) AcceptFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v *EnableEndPointConnect) pulumi.BoolOutput { return v.AcceptFlag }).(pulumi.BoolOutput)
}

// Endpoint ID.
func (o EnableEndPointConnectOutput) EndPointIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EnableEndPointConnect) pulumi.StringArrayOutput { return v.EndPointIds }).(pulumi.StringArrayOutput)
}

// Endpoint service ID.
func (o EnableEndPointConnectOutput) EndPointServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnableEndPointConnect) pulumi.StringOutput { return v.EndPointServiceId }).(pulumi.StringOutput)
}

type EnableEndPointConnectArrayOutput struct{ *pulumi.OutputState }

func (EnableEndPointConnectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnableEndPointConnect)(nil)).Elem()
}

func (o EnableEndPointConnectArrayOutput) ToEnableEndPointConnectArrayOutput() EnableEndPointConnectArrayOutput {
	return o
}

func (o EnableEndPointConnectArrayOutput) ToEnableEndPointConnectArrayOutputWithContext(ctx context.Context) EnableEndPointConnectArrayOutput {
	return o
}

func (o EnableEndPointConnectArrayOutput) Index(i pulumi.IntInput) EnableEndPointConnectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnableEndPointConnect {
		return vs[0].([]*EnableEndPointConnect)[vs[1].(int)]
	}).(EnableEndPointConnectOutput)
}

type EnableEndPointConnectMapOutput struct{ *pulumi.OutputState }

func (EnableEndPointConnectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnableEndPointConnect)(nil)).Elem()
}

func (o EnableEndPointConnectMapOutput) ToEnableEndPointConnectMapOutput() EnableEndPointConnectMapOutput {
	return o
}

func (o EnableEndPointConnectMapOutput) ToEnableEndPointConnectMapOutputWithContext(ctx context.Context) EnableEndPointConnectMapOutput {
	return o
}

func (o EnableEndPointConnectMapOutput) MapIndex(k pulumi.StringInput) EnableEndPointConnectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnableEndPointConnect {
		return vs[0].(map[string]*EnableEndPointConnect)[vs[1].(string)]
	}).(EnableEndPointConnectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnableEndPointConnectInput)(nil)).Elem(), &EnableEndPointConnect{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnableEndPointConnectArrayInput)(nil)).Elem(), EnableEndPointConnectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnableEndPointConnectMapInput)(nil)).Elem(), EnableEndPointConnectMap{})
	pulumi.RegisterOutputType(EnableEndPointConnectOutput{})
	pulumi.RegisterOutputType(EnableEndPointConnectArrayOutput{})
	pulumi.RegisterOutputType(EnableEndPointConnectMapOutput{})
}
