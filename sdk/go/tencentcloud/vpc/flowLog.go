// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc flowLog
//
// > **NOTE:** The cloud server instance specifications that support stream log collection include: M6ce, M6p, SA3se, S4m, DA3, ITA3, I6t, I6, S5se, SA2, SK1, S4, S5, SN3ne, S3ne, S2ne, SA2a, S3ne, SW3a, SW3b, SW3ne, ITA3, IT5c, IT5, IT5c, IT3, I3, D3, DA2, D2, M6, MA2, M4, C6, IT3a, IT3b, IT3c, C4ne, CN3ne, C3ne, GI1, PNV4, GNV4v, GNV4, GT4, GI3X, GN7, GN7vw.
//
// > **NOTE:** The following models no longer support the collection of new stream logs, and the stock stream logs will no longer be reported for data from July 25, 2022: Standard models: S3, SA1, S2, S1;Memory type: M3, M2, M1;Calculation type: C4, CN3, C3, C2;Batch calculation type: BC1, BS1;HPCC: HCCIC5, HCCG5v.
//
// ## Import
//
// vpc flow_log can be imported using the flow log Id combine vpc Id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpc/flowLog:FlowLog flow_log flow_log_id fl-xxxx1234#vpc-yyyy5678
//
// ```
type FlowLog struct {
	pulumi.CustomResourceState

	// Specify flow log storage id, just set cls topic id.
	CloudLogId pulumi.StringPtrOutput `pulumi:"cloudLogId"`
	// Specify flow log storage region, default using current.
	CloudLogRegion pulumi.StringOutput `pulumi:"cloudLogRegion"`
	// Specify flow Log description.
	FlowLogDescription pulumi.StringPtrOutput `pulumi:"flowLogDescription"`
	// Specify flow log name.
	FlowLogName pulumi.StringOutput `pulumi:"flowLogName"`
	// Specify consumer detail, required while `storageType` is `ckafka`.
	FlowLogStorage FlowLogFlowLogStorageOutput `pulumi:"flowLogStorage"`
	// Specify resource unique Id of `resourceType` configured.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`, `CCN`, `NAT`, `DCG`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// Specify consumer type, values: `cls`, `ckafka`.
	StorageType pulumi.StringPtrOutput `pulumi:"storageType"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`
	// Specify vpc Id, ignore while `resourceType` is `CCN` (unsupported) but required while other types.
	VpcId pulumi.StringPtrOutput `pulumi:"vpcId"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlowLogName == nil {
		return nil, errors.New("invalid value for required argument 'FlowLogName'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.TrafficType == nil {
		return nil, errors.New("invalid value for required argument 'TrafficType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FlowLog
	err := ctx.RegisterResource("tencentcloud:Vpc/flowLog:FlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogState, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	var resource FlowLog
	err := ctx.ReadResource("tencentcloud:Vpc/flowLog:FlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLog resources.
type flowLogState struct {
	// Specify flow log storage id, just set cls topic id.
	CloudLogId *string `pulumi:"cloudLogId"`
	// Specify flow log storage region, default using current.
	CloudLogRegion *string `pulumi:"cloudLogRegion"`
	// Specify flow Log description.
	FlowLogDescription *string `pulumi:"flowLogDescription"`
	// Specify flow log name.
	FlowLogName *string `pulumi:"flowLogName"`
	// Specify consumer detail, required while `storageType` is `ckafka`.
	FlowLogStorage *FlowLogFlowLogStorage `pulumi:"flowLogStorage"`
	// Specify resource unique Id of `resourceType` configured.
	ResourceId *string `pulumi:"resourceId"`
	// Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`, `CCN`, `NAT`, `DCG`.
	ResourceType *string `pulumi:"resourceType"`
	// Specify consumer type, values: `cls`, `ckafka`.
	StorageType *string `pulumi:"storageType"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
	TrafficType *string `pulumi:"trafficType"`
	// Specify vpc Id, ignore while `resourceType` is `CCN` (unsupported) but required while other types.
	VpcId *string `pulumi:"vpcId"`
}

type FlowLogState struct {
	// Specify flow log storage id, just set cls topic id.
	CloudLogId pulumi.StringPtrInput
	// Specify flow log storage region, default using current.
	CloudLogRegion pulumi.StringPtrInput
	// Specify flow Log description.
	FlowLogDescription pulumi.StringPtrInput
	// Specify flow log name.
	FlowLogName pulumi.StringPtrInput
	// Specify consumer detail, required while `storageType` is `ckafka`.
	FlowLogStorage FlowLogFlowLogStoragePtrInput
	// Specify resource unique Id of `resourceType` configured.
	ResourceId pulumi.StringPtrInput
	// Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`, `CCN`, `NAT`, `DCG`.
	ResourceType pulumi.StringPtrInput
	// Specify consumer type, values: `cls`, `ckafka`.
	StorageType pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
	TrafficType pulumi.StringPtrInput
	// Specify vpc Id, ignore while `resourceType` is `CCN` (unsupported) but required while other types.
	VpcId pulumi.StringPtrInput
}

func (FlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogState)(nil)).Elem()
}

type flowLogArgs struct {
	// Specify flow log storage id, just set cls topic id.
	CloudLogId *string `pulumi:"cloudLogId"`
	// Specify flow log storage region, default using current.
	CloudLogRegion *string `pulumi:"cloudLogRegion"`
	// Specify flow Log description.
	FlowLogDescription *string `pulumi:"flowLogDescription"`
	// Specify flow log name.
	FlowLogName string `pulumi:"flowLogName"`
	// Specify consumer detail, required while `storageType` is `ckafka`.
	FlowLogStorage *FlowLogFlowLogStorage `pulumi:"flowLogStorage"`
	// Specify resource unique Id of `resourceType` configured.
	ResourceId string `pulumi:"resourceId"`
	// Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`, `CCN`, `NAT`, `DCG`.
	ResourceType string `pulumi:"resourceType"`
	// Specify consumer type, values: `cls`, `ckafka`.
	StorageType *string `pulumi:"storageType"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
	TrafficType string `pulumi:"trafficType"`
	// Specify vpc Id, ignore while `resourceType` is `CCN` (unsupported) but required while other types.
	VpcId *string `pulumi:"vpcId"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	// Specify flow log storage id, just set cls topic id.
	CloudLogId pulumi.StringPtrInput
	// Specify flow log storage region, default using current.
	CloudLogRegion pulumi.StringPtrInput
	// Specify flow Log description.
	FlowLogDescription pulumi.StringPtrInput
	// Specify flow log name.
	FlowLogName pulumi.StringInput
	// Specify consumer detail, required while `storageType` is `ckafka`.
	FlowLogStorage FlowLogFlowLogStoragePtrInput
	// Specify resource unique Id of `resourceType` configured.
	ResourceId pulumi.StringInput
	// Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`, `CCN`, `NAT`, `DCG`.
	ResourceType pulumi.StringInput
	// Specify consumer type, values: `cls`, `ckafka`.
	StorageType pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
	TrafficType pulumi.StringInput
	// Specify vpc Id, ignore while `resourceType` is `CCN` (unsupported) but required while other types.
	VpcId pulumi.StringPtrInput
}

func (FlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogArgs)(nil)).Elem()
}

type FlowLogInput interface {
	pulumi.Input

	ToFlowLogOutput() FlowLogOutput
	ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput
}

func (*FlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (i *FlowLog) ToFlowLogOutput() FlowLogOutput {
	return i.ToFlowLogOutputWithContext(context.Background())
}

func (i *FlowLog) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogOutput)
}

// FlowLogArrayInput is an input type that accepts FlowLogArray and FlowLogArrayOutput values.
// You can construct a concrete instance of `FlowLogArrayInput` via:
//
//	FlowLogArray{ FlowLogArgs{...} }
type FlowLogArrayInput interface {
	pulumi.Input

	ToFlowLogArrayOutput() FlowLogArrayOutput
	ToFlowLogArrayOutputWithContext(context.Context) FlowLogArrayOutput
}

type FlowLogArray []FlowLogInput

func (FlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (i FlowLogArray) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return i.ToFlowLogArrayOutputWithContext(context.Background())
}

func (i FlowLogArray) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogArrayOutput)
}

// FlowLogMapInput is an input type that accepts FlowLogMap and FlowLogMapOutput values.
// You can construct a concrete instance of `FlowLogMapInput` via:
//
//	FlowLogMap{ "key": FlowLogArgs{...} }
type FlowLogMapInput interface {
	pulumi.Input

	ToFlowLogMapOutput() FlowLogMapOutput
	ToFlowLogMapOutputWithContext(context.Context) FlowLogMapOutput
}

type FlowLogMap map[string]FlowLogInput

func (FlowLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (i FlowLogMap) ToFlowLogMapOutput() FlowLogMapOutput {
	return i.ToFlowLogMapOutputWithContext(context.Background())
}

func (i FlowLogMap) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogMapOutput)
}

type FlowLogOutput struct{ *pulumi.OutputState }

func (FlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (o FlowLogOutput) ToFlowLogOutput() FlowLogOutput {
	return o
}

func (o FlowLogOutput) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return o
}

// Specify flow log storage id, just set cls topic id.
func (o FlowLogOutput) CloudLogId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.CloudLogId }).(pulumi.StringPtrOutput)
}

// Specify flow log storage region, default using current.
func (o FlowLogOutput) CloudLogRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.CloudLogRegion }).(pulumi.StringOutput)
}

// Specify flow Log description.
func (o FlowLogOutput) FlowLogDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.FlowLogDescription }).(pulumi.StringPtrOutput)
}

// Specify flow log name.
func (o FlowLogOutput) FlowLogName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.FlowLogName }).(pulumi.StringOutput)
}

// Specify consumer detail, required while `storageType` is `ckafka`.
func (o FlowLogOutput) FlowLogStorage() FlowLogFlowLogStorageOutput {
	return o.ApplyT(func(v *FlowLog) FlowLogFlowLogStorageOutput { return v.FlowLogStorage }).(FlowLogFlowLogStorageOutput)
}

// Specify resource unique Id of `resourceType` configured.
func (o FlowLogOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// Specify resource type. NOTE: Only support `NETWORKINTERFACE` for now. Values: `VPC`, `SUBNET`, `NETWORKINTERFACE`, `CCN`, `NAT`, `DCG`.
func (o FlowLogOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// Specify consumer type, values: `cls`, `ckafka`.
func (o FlowLogOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.StorageType }).(pulumi.StringPtrOutput)
}

// Tag description list.
func (o FlowLogOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// Specify log traffic type, values: `ACCEPT`, `REJECT`, `ALL`.
func (o FlowLogOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.TrafficType }).(pulumi.StringOutput)
}

// Specify vpc Id, ignore while `resourceType` is `CCN` (unsupported) but required while other types.
func (o FlowLogOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.VpcId }).(pulumi.StringPtrOutput)
}

type FlowLogArrayOutput struct{ *pulumi.OutputState }

func (FlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) Index(i pulumi.IntInput) FlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].([]*FlowLog)[vs[1].(int)]
	}).(FlowLogOutput)
}

type FlowLogMapOutput struct{ *pulumi.OutputState }

func (FlowLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (o FlowLogMapOutput) ToFlowLogMapOutput() FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) MapIndex(k pulumi.StringInput) FlowLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].(map[string]*FlowLog)[vs[1].(string)]
	}).(FlowLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogInput)(nil)).Elem(), &FlowLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogArrayInput)(nil)).Elem(), FlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogMapInput)(nil)).Elem(), FlowLogMap{})
	pulumi.RegisterOutputType(FlowLogOutput{})
	pulumi.RegisterOutputType(FlowLogArrayOutput{})
	pulumi.RegisterOutputType(FlowLogMapOutput{})
}
