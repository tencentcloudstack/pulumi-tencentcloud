// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc ipv6SubnetCidrBlock
//
// ## Import
//
// vpc ipv6_subnet_cidr_block can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock ipv6_subnet_cidr_block ipv6_subnet_cidr_block_id
//
// ```
type Ipv6SubnetCidrBlock struct {
	pulumi.CustomResourceState

	// Allocate a list of `IPv6` subnets.
	Ipv6SubnetCidrBlocks Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksOutput `pulumi:"ipv6SubnetCidrBlocks"`
	// The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewIpv6SubnetCidrBlock registers a new resource with the given unique name, arguments, and options.
func NewIpv6SubnetCidrBlock(ctx *pulumi.Context,
	name string, args *Ipv6SubnetCidrBlockArgs, opts ...pulumi.ResourceOption) (*Ipv6SubnetCidrBlock, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ipv6SubnetCidrBlocks == nil {
		return nil, errors.New("invalid value for required argument 'Ipv6SubnetCidrBlocks'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Ipv6SubnetCidrBlock
	err := ctx.RegisterResource("tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv6SubnetCidrBlock gets an existing Ipv6SubnetCidrBlock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv6SubnetCidrBlock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv6SubnetCidrBlockState, opts ...pulumi.ResourceOption) (*Ipv6SubnetCidrBlock, error) {
	var resource Ipv6SubnetCidrBlock
	err := ctx.ReadResource("tencentcloud:Vpc/ipv6SubnetCidrBlock:Ipv6SubnetCidrBlock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv6SubnetCidrBlock resources.
type ipv6SubnetCidrBlockState struct {
	// Allocate a list of `IPv6` subnets.
	Ipv6SubnetCidrBlocks *Ipv6SubnetCidrBlockIpv6SubnetCidrBlocks `pulumi:"ipv6SubnetCidrBlocks"`
	// The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
	VpcId *string `pulumi:"vpcId"`
}

type Ipv6SubnetCidrBlockState struct {
	// Allocate a list of `IPv6` subnets.
	Ipv6SubnetCidrBlocks Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksPtrInput
	// The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
	VpcId pulumi.StringPtrInput
}

func (Ipv6SubnetCidrBlockState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6SubnetCidrBlockState)(nil)).Elem()
}

type ipv6SubnetCidrBlockArgs struct {
	// Allocate a list of `IPv6` subnets.
	Ipv6SubnetCidrBlocks Ipv6SubnetCidrBlockIpv6SubnetCidrBlocks `pulumi:"ipv6SubnetCidrBlocks"`
	// The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Ipv6SubnetCidrBlock resource.
type Ipv6SubnetCidrBlockArgs struct {
	// Allocate a list of `IPv6` subnets.
	Ipv6SubnetCidrBlocks Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksInput
	// The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
	VpcId pulumi.StringInput
}

func (Ipv6SubnetCidrBlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6SubnetCidrBlockArgs)(nil)).Elem()
}

type Ipv6SubnetCidrBlockInput interface {
	pulumi.Input

	ToIpv6SubnetCidrBlockOutput() Ipv6SubnetCidrBlockOutput
	ToIpv6SubnetCidrBlockOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockOutput
}

func (*Ipv6SubnetCidrBlock) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6SubnetCidrBlock)(nil)).Elem()
}

func (i *Ipv6SubnetCidrBlock) ToIpv6SubnetCidrBlockOutput() Ipv6SubnetCidrBlockOutput {
	return i.ToIpv6SubnetCidrBlockOutputWithContext(context.Background())
}

func (i *Ipv6SubnetCidrBlock) ToIpv6SubnetCidrBlockOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6SubnetCidrBlockOutput)
}

// Ipv6SubnetCidrBlockArrayInput is an input type that accepts Ipv6SubnetCidrBlockArray and Ipv6SubnetCidrBlockArrayOutput values.
// You can construct a concrete instance of `Ipv6SubnetCidrBlockArrayInput` via:
//
//	Ipv6SubnetCidrBlockArray{ Ipv6SubnetCidrBlockArgs{...} }
type Ipv6SubnetCidrBlockArrayInput interface {
	pulumi.Input

	ToIpv6SubnetCidrBlockArrayOutput() Ipv6SubnetCidrBlockArrayOutput
	ToIpv6SubnetCidrBlockArrayOutputWithContext(context.Context) Ipv6SubnetCidrBlockArrayOutput
}

type Ipv6SubnetCidrBlockArray []Ipv6SubnetCidrBlockInput

func (Ipv6SubnetCidrBlockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6SubnetCidrBlock)(nil)).Elem()
}

func (i Ipv6SubnetCidrBlockArray) ToIpv6SubnetCidrBlockArrayOutput() Ipv6SubnetCidrBlockArrayOutput {
	return i.ToIpv6SubnetCidrBlockArrayOutputWithContext(context.Background())
}

func (i Ipv6SubnetCidrBlockArray) ToIpv6SubnetCidrBlockArrayOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6SubnetCidrBlockArrayOutput)
}

// Ipv6SubnetCidrBlockMapInput is an input type that accepts Ipv6SubnetCidrBlockMap and Ipv6SubnetCidrBlockMapOutput values.
// You can construct a concrete instance of `Ipv6SubnetCidrBlockMapInput` via:
//
//	Ipv6SubnetCidrBlockMap{ "key": Ipv6SubnetCidrBlockArgs{...} }
type Ipv6SubnetCidrBlockMapInput interface {
	pulumi.Input

	ToIpv6SubnetCidrBlockMapOutput() Ipv6SubnetCidrBlockMapOutput
	ToIpv6SubnetCidrBlockMapOutputWithContext(context.Context) Ipv6SubnetCidrBlockMapOutput
}

type Ipv6SubnetCidrBlockMap map[string]Ipv6SubnetCidrBlockInput

func (Ipv6SubnetCidrBlockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6SubnetCidrBlock)(nil)).Elem()
}

func (i Ipv6SubnetCidrBlockMap) ToIpv6SubnetCidrBlockMapOutput() Ipv6SubnetCidrBlockMapOutput {
	return i.ToIpv6SubnetCidrBlockMapOutputWithContext(context.Background())
}

func (i Ipv6SubnetCidrBlockMap) ToIpv6SubnetCidrBlockMapOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6SubnetCidrBlockMapOutput)
}

type Ipv6SubnetCidrBlockOutput struct{ *pulumi.OutputState }

func (Ipv6SubnetCidrBlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6SubnetCidrBlock)(nil)).Elem()
}

func (o Ipv6SubnetCidrBlockOutput) ToIpv6SubnetCidrBlockOutput() Ipv6SubnetCidrBlockOutput {
	return o
}

func (o Ipv6SubnetCidrBlockOutput) ToIpv6SubnetCidrBlockOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockOutput {
	return o
}

// Allocate a list of `IPv6` subnets.
func (o Ipv6SubnetCidrBlockOutput) Ipv6SubnetCidrBlocks() Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksOutput {
	return o.ApplyT(func(v *Ipv6SubnetCidrBlock) Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksOutput {
		return v.Ipv6SubnetCidrBlocks
	}).(Ipv6SubnetCidrBlockIpv6SubnetCidrBlocksOutput)
}

// The private network `ID` where the subnet is located. Such as:`vpc-f49l6u0z`.
func (o Ipv6SubnetCidrBlockOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6SubnetCidrBlock) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type Ipv6SubnetCidrBlockArrayOutput struct{ *pulumi.OutputState }

func (Ipv6SubnetCidrBlockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6SubnetCidrBlock)(nil)).Elem()
}

func (o Ipv6SubnetCidrBlockArrayOutput) ToIpv6SubnetCidrBlockArrayOutput() Ipv6SubnetCidrBlockArrayOutput {
	return o
}

func (o Ipv6SubnetCidrBlockArrayOutput) ToIpv6SubnetCidrBlockArrayOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockArrayOutput {
	return o
}

func (o Ipv6SubnetCidrBlockArrayOutput) Index(i pulumi.IntInput) Ipv6SubnetCidrBlockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv6SubnetCidrBlock {
		return vs[0].([]*Ipv6SubnetCidrBlock)[vs[1].(int)]
	}).(Ipv6SubnetCidrBlockOutput)
}

type Ipv6SubnetCidrBlockMapOutput struct{ *pulumi.OutputState }

func (Ipv6SubnetCidrBlockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6SubnetCidrBlock)(nil)).Elem()
}

func (o Ipv6SubnetCidrBlockMapOutput) ToIpv6SubnetCidrBlockMapOutput() Ipv6SubnetCidrBlockMapOutput {
	return o
}

func (o Ipv6SubnetCidrBlockMapOutput) ToIpv6SubnetCidrBlockMapOutputWithContext(ctx context.Context) Ipv6SubnetCidrBlockMapOutput {
	return o
}

func (o Ipv6SubnetCidrBlockMapOutput) MapIndex(k pulumi.StringInput) Ipv6SubnetCidrBlockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv6SubnetCidrBlock {
		return vs[0].(map[string]*Ipv6SubnetCidrBlock)[vs[1].(string)]
	}).(Ipv6SubnetCidrBlockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6SubnetCidrBlockInput)(nil)).Elem(), &Ipv6SubnetCidrBlock{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6SubnetCidrBlockArrayInput)(nil)).Elem(), Ipv6SubnetCidrBlockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6SubnetCidrBlockMapInput)(nil)).Elem(), Ipv6SubnetCidrBlockMap{})
	pulumi.RegisterOutputType(Ipv6SubnetCidrBlockOutput{})
	pulumi.RegisterOutputType(Ipv6SubnetCidrBlockArrayOutput{})
	pulumi.RegisterOutputType(Ipv6SubnetCidrBlockMapOutput{})
}
