// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc netDetect
//
// ## Example Usage
//
// ## Import
//
// vpc net_detect can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpc/netDetect:NetDetect net_detect net_detect_id
//
// ```
type NetDetect struct {
	pulumi.CustomResourceState

	// An array of probe destination IPv4 addresses. Up to two.
	DetectDestinationIps pulumi.StringArrayOutput `pulumi:"detectDestinationIps"`
	// Network probe description.
	NetDetectDescription pulumi.StringPtrOutput `pulumi:"netDetectDescription"`
	// Network probe name, the maximum length cannot exceed 60 bytes.
	NetDetectName pulumi.StringOutput `pulumi:"netDetectName"`
	// The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as: nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12; If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is NONEXTHOP, and the specified network probe is a network probe without a next hop.
	NextHopDestination pulumi.StringPtrOutput `pulumi:"nextHopDestination"`
	// The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway; `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking gateway; `NONEXTHOP`: no next hop.
	NextHopType pulumi.StringPtrOutput `pulumi:"nextHopType"`
	// Subnet instance ID. Such as:subnet-12345678.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// `VPC` instance `ID`. Such as:`vpc-12345678`.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNetDetect registers a new resource with the given unique name, arguments, and options.
func NewNetDetect(ctx *pulumi.Context,
	name string, args *NetDetectArgs, opts ...pulumi.ResourceOption) (*NetDetect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DetectDestinationIps == nil {
		return nil, errors.New("invalid value for required argument 'DetectDestinationIps'")
	}
	if args.NetDetectName == nil {
		return nil, errors.New("invalid value for required argument 'NetDetectName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NetDetect
	err := ctx.RegisterResource("tencentcloud:Vpc/netDetect:NetDetect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetDetect gets an existing NetDetect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetDetect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetDetectState, opts ...pulumi.ResourceOption) (*NetDetect, error) {
	var resource NetDetect
	err := ctx.ReadResource("tencentcloud:Vpc/netDetect:NetDetect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetDetect resources.
type netDetectState struct {
	// An array of probe destination IPv4 addresses. Up to two.
	DetectDestinationIps []string `pulumi:"detectDestinationIps"`
	// Network probe description.
	NetDetectDescription *string `pulumi:"netDetectDescription"`
	// Network probe name, the maximum length cannot exceed 60 bytes.
	NetDetectName *string `pulumi:"netDetectName"`
	// The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as: nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12; If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is NONEXTHOP, and the specified network probe is a network probe without a next hop.
	NextHopDestination *string `pulumi:"nextHopDestination"`
	// The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway; `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking gateway; `NONEXTHOP`: no next hop.
	NextHopType *string `pulumi:"nextHopType"`
	// Subnet instance ID. Such as:subnet-12345678.
	SubnetId *string `pulumi:"subnetId"`
	// `VPC` instance `ID`. Such as:`vpc-12345678`.
	VpcId *string `pulumi:"vpcId"`
}

type NetDetectState struct {
	// An array of probe destination IPv4 addresses. Up to two.
	DetectDestinationIps pulumi.StringArrayInput
	// Network probe description.
	NetDetectDescription pulumi.StringPtrInput
	// Network probe name, the maximum length cannot exceed 60 bytes.
	NetDetectName pulumi.StringPtrInput
	// The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as: nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12; If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is NONEXTHOP, and the specified network probe is a network probe without a next hop.
	NextHopDestination pulumi.StringPtrInput
	// The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway; `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking gateway; `NONEXTHOP`: no next hop.
	NextHopType pulumi.StringPtrInput
	// Subnet instance ID. Such as:subnet-12345678.
	SubnetId pulumi.StringPtrInput
	// `VPC` instance `ID`. Such as:`vpc-12345678`.
	VpcId pulumi.StringPtrInput
}

func (NetDetectState) ElementType() reflect.Type {
	return reflect.TypeOf((*netDetectState)(nil)).Elem()
}

type netDetectArgs struct {
	// An array of probe destination IPv4 addresses. Up to two.
	DetectDestinationIps []string `pulumi:"detectDestinationIps"`
	// Network probe description.
	NetDetectDescription *string `pulumi:"netDetectDescription"`
	// Network probe name, the maximum length cannot exceed 60 bytes.
	NetDetectName string `pulumi:"netDetectName"`
	// The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as: nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12; If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is NONEXTHOP, and the specified network probe is a network probe without a next hop.
	NextHopDestination *string `pulumi:"nextHopDestination"`
	// The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway; `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking gateway; `NONEXTHOP`: no next hop.
	NextHopType *string `pulumi:"nextHopType"`
	// Subnet instance ID. Such as:subnet-12345678.
	SubnetId string `pulumi:"subnetId"`
	// `VPC` instance `ID`. Such as:`vpc-12345678`.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NetDetect resource.
type NetDetectArgs struct {
	// An array of probe destination IPv4 addresses. Up to two.
	DetectDestinationIps pulumi.StringArrayInput
	// Network probe description.
	NetDetectDescription pulumi.StringPtrInput
	// Network probe name, the maximum length cannot exceed 60 bytes.
	NetDetectName pulumi.StringInput
	// The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as: nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12; If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is NONEXTHOP, and the specified network probe is a network probe without a next hop.
	NextHopDestination pulumi.StringPtrInput
	// The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway; `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking gateway; `NONEXTHOP`: no next hop.
	NextHopType pulumi.StringPtrInput
	// Subnet instance ID. Such as:subnet-12345678.
	SubnetId pulumi.StringInput
	// `VPC` instance `ID`. Such as:`vpc-12345678`.
	VpcId pulumi.StringInput
}

func (NetDetectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*netDetectArgs)(nil)).Elem()
}

type NetDetectInput interface {
	pulumi.Input

	ToNetDetectOutput() NetDetectOutput
	ToNetDetectOutputWithContext(ctx context.Context) NetDetectOutput
}

func (*NetDetect) ElementType() reflect.Type {
	return reflect.TypeOf((**NetDetect)(nil)).Elem()
}

func (i *NetDetect) ToNetDetectOutput() NetDetectOutput {
	return i.ToNetDetectOutputWithContext(context.Background())
}

func (i *NetDetect) ToNetDetectOutputWithContext(ctx context.Context) NetDetectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetDetectOutput)
}

// NetDetectArrayInput is an input type that accepts NetDetectArray and NetDetectArrayOutput values.
// You can construct a concrete instance of `NetDetectArrayInput` via:
//
//	NetDetectArray{ NetDetectArgs{...} }
type NetDetectArrayInput interface {
	pulumi.Input

	ToNetDetectArrayOutput() NetDetectArrayOutput
	ToNetDetectArrayOutputWithContext(context.Context) NetDetectArrayOutput
}

type NetDetectArray []NetDetectInput

func (NetDetectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetDetect)(nil)).Elem()
}

func (i NetDetectArray) ToNetDetectArrayOutput() NetDetectArrayOutput {
	return i.ToNetDetectArrayOutputWithContext(context.Background())
}

func (i NetDetectArray) ToNetDetectArrayOutputWithContext(ctx context.Context) NetDetectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetDetectArrayOutput)
}

// NetDetectMapInput is an input type that accepts NetDetectMap and NetDetectMapOutput values.
// You can construct a concrete instance of `NetDetectMapInput` via:
//
//	NetDetectMap{ "key": NetDetectArgs{...} }
type NetDetectMapInput interface {
	pulumi.Input

	ToNetDetectMapOutput() NetDetectMapOutput
	ToNetDetectMapOutputWithContext(context.Context) NetDetectMapOutput
}

type NetDetectMap map[string]NetDetectInput

func (NetDetectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetDetect)(nil)).Elem()
}

func (i NetDetectMap) ToNetDetectMapOutput() NetDetectMapOutput {
	return i.ToNetDetectMapOutputWithContext(context.Background())
}

func (i NetDetectMap) ToNetDetectMapOutputWithContext(ctx context.Context) NetDetectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetDetectMapOutput)
}

type NetDetectOutput struct{ *pulumi.OutputState }

func (NetDetectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetDetect)(nil)).Elem()
}

func (o NetDetectOutput) ToNetDetectOutput() NetDetectOutput {
	return o
}

func (o NetDetectOutput) ToNetDetectOutputWithContext(ctx context.Context) NetDetectOutput {
	return o
}

// An array of probe destination IPv4 addresses. Up to two.
func (o NetDetectOutput) DetectDestinationIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringArrayOutput { return v.DetectDestinationIps }).(pulumi.StringArrayOutput)
}

// Network probe description.
func (o NetDetectOutput) NetDetectDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringPtrOutput { return v.NetDetectDescription }).(pulumi.StringPtrOutput)
}

// Network probe name, the maximum length cannot exceed 60 bytes.
func (o NetDetectOutput) NetDetectName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringOutput { return v.NetDetectName }).(pulumi.StringOutput)
}

// The destination gateway of the next hop, the value is related to the next hop type. If the next hop type is VPN, and the value is the VPN gateway ID, such as: vpngw-12345678; If the next hop type is DIRECTCONNECT, and the value is the private line gateway ID, such as: dcg-12345678; If the next hop type is PEERCONNECTION, which takes the value of the peer connection ID, such as: pcx-12345678; If the next hop type is NAT, and the value is Nat gateway, such as: nat-12345678; If the next hop type is NORMAL_CVM, which takes the IPv4 address of the cloud server, such as: 10.0.0.12; If the next hop type is CCN, and the value is the cloud network ID, such as: ccn-12345678; If the next hop type is NONEXTHOP, and the specified network probe is a network probe without a next hop.
func (o NetDetectOutput) NextHopDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringPtrOutput { return v.NextHopDestination }).(pulumi.StringPtrOutput)
}

// The next hop type, currently we support the following types: `VPN`: VPN gateway; `DIRECTCONNECT`: private line gateway; `PEERCONNECTION`: peer connection; `NAT`: NAT gateway; `NORMAL_CVM`: normal cloud server; `CCN`: cloud networking gateway; `NONEXTHOP`: no next hop.
func (o NetDetectOutput) NextHopType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringPtrOutput { return v.NextHopType }).(pulumi.StringPtrOutput)
}

// Subnet instance ID. Such as:subnet-12345678.
func (o NetDetectOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// `VPC` instance `ID`. Such as:`vpc-12345678`.
func (o NetDetectOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetDetect) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NetDetectArrayOutput struct{ *pulumi.OutputState }

func (NetDetectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetDetect)(nil)).Elem()
}

func (o NetDetectArrayOutput) ToNetDetectArrayOutput() NetDetectArrayOutput {
	return o
}

func (o NetDetectArrayOutput) ToNetDetectArrayOutputWithContext(ctx context.Context) NetDetectArrayOutput {
	return o
}

func (o NetDetectArrayOutput) Index(i pulumi.IntInput) NetDetectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetDetect {
		return vs[0].([]*NetDetect)[vs[1].(int)]
	}).(NetDetectOutput)
}

type NetDetectMapOutput struct{ *pulumi.OutputState }

func (NetDetectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetDetect)(nil)).Elem()
}

func (o NetDetectMapOutput) ToNetDetectMapOutput() NetDetectMapOutput {
	return o
}

func (o NetDetectMapOutput) ToNetDetectMapOutputWithContext(ctx context.Context) NetDetectMapOutput {
	return o
}

func (o NetDetectMapOutput) MapIndex(k pulumi.StringInput) NetDetectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetDetect {
		return vs[0].(map[string]*NetDetect)[vs[1].(string)]
	}).(NetDetectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetDetectInput)(nil)).Elem(), &NetDetect{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetDetectArrayInput)(nil)).Elem(), NetDetectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetDetectMapInput)(nil)).Elem(), NetDetectMap{})
	pulumi.RegisterOutputType(NetDetectOutput{})
	pulumi.RegisterOutputType(NetDetectArrayOutput{})
	pulumi.RegisterOutputType(NetDetectMapOutput{})
}
