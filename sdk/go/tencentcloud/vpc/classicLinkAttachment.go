// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ClassicLinkAttachment struct {
	pulumi.CustomResourceState

	// CVM instance ID. It only support set one instance now.
	InstanceIds pulumi.StringOutput `pulumi:"instanceIds"`
	// VPC instance ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewClassicLinkAttachment registers a new resource with the given unique name, arguments, and options.
func NewClassicLinkAttachment(ctx *pulumi.Context,
	name string, args *ClassicLinkAttachmentArgs, opts ...pulumi.ResourceOption) (*ClassicLinkAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ClassicLinkAttachment
	err := ctx.RegisterResource("tencentcloud:Vpc/classicLinkAttachment:ClassicLinkAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClassicLinkAttachment gets an existing ClassicLinkAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClassicLinkAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClassicLinkAttachmentState, opts ...pulumi.ResourceOption) (*ClassicLinkAttachment, error) {
	var resource ClassicLinkAttachment
	err := ctx.ReadResource("tencentcloud:Vpc/classicLinkAttachment:ClassicLinkAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClassicLinkAttachment resources.
type classicLinkAttachmentState struct {
	// CVM instance ID. It only support set one instance now.
	InstanceIds *string `pulumi:"instanceIds"`
	// VPC instance ID.
	VpcId *string `pulumi:"vpcId"`
}

type ClassicLinkAttachmentState struct {
	// CVM instance ID. It only support set one instance now.
	InstanceIds pulumi.StringPtrInput
	// VPC instance ID.
	VpcId pulumi.StringPtrInput
}

func (ClassicLinkAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*classicLinkAttachmentState)(nil)).Elem()
}

type classicLinkAttachmentArgs struct {
	// CVM instance ID. It only support set one instance now.
	InstanceIds string `pulumi:"instanceIds"`
	// VPC instance ID.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ClassicLinkAttachment resource.
type ClassicLinkAttachmentArgs struct {
	// CVM instance ID. It only support set one instance now.
	InstanceIds pulumi.StringInput
	// VPC instance ID.
	VpcId pulumi.StringInput
}

func (ClassicLinkAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*classicLinkAttachmentArgs)(nil)).Elem()
}

type ClassicLinkAttachmentInput interface {
	pulumi.Input

	ToClassicLinkAttachmentOutput() ClassicLinkAttachmentOutput
	ToClassicLinkAttachmentOutputWithContext(ctx context.Context) ClassicLinkAttachmentOutput
}

func (*ClassicLinkAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassicLinkAttachment)(nil)).Elem()
}

func (i *ClassicLinkAttachment) ToClassicLinkAttachmentOutput() ClassicLinkAttachmentOutput {
	return i.ToClassicLinkAttachmentOutputWithContext(context.Background())
}

func (i *ClassicLinkAttachment) ToClassicLinkAttachmentOutputWithContext(ctx context.Context) ClassicLinkAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassicLinkAttachmentOutput)
}

// ClassicLinkAttachmentArrayInput is an input type that accepts ClassicLinkAttachmentArray and ClassicLinkAttachmentArrayOutput values.
// You can construct a concrete instance of `ClassicLinkAttachmentArrayInput` via:
//
//	ClassicLinkAttachmentArray{ ClassicLinkAttachmentArgs{...} }
type ClassicLinkAttachmentArrayInput interface {
	pulumi.Input

	ToClassicLinkAttachmentArrayOutput() ClassicLinkAttachmentArrayOutput
	ToClassicLinkAttachmentArrayOutputWithContext(context.Context) ClassicLinkAttachmentArrayOutput
}

type ClassicLinkAttachmentArray []ClassicLinkAttachmentInput

func (ClassicLinkAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClassicLinkAttachment)(nil)).Elem()
}

func (i ClassicLinkAttachmentArray) ToClassicLinkAttachmentArrayOutput() ClassicLinkAttachmentArrayOutput {
	return i.ToClassicLinkAttachmentArrayOutputWithContext(context.Background())
}

func (i ClassicLinkAttachmentArray) ToClassicLinkAttachmentArrayOutputWithContext(ctx context.Context) ClassicLinkAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassicLinkAttachmentArrayOutput)
}

// ClassicLinkAttachmentMapInput is an input type that accepts ClassicLinkAttachmentMap and ClassicLinkAttachmentMapOutput values.
// You can construct a concrete instance of `ClassicLinkAttachmentMapInput` via:
//
//	ClassicLinkAttachmentMap{ "key": ClassicLinkAttachmentArgs{...} }
type ClassicLinkAttachmentMapInput interface {
	pulumi.Input

	ToClassicLinkAttachmentMapOutput() ClassicLinkAttachmentMapOutput
	ToClassicLinkAttachmentMapOutputWithContext(context.Context) ClassicLinkAttachmentMapOutput
}

type ClassicLinkAttachmentMap map[string]ClassicLinkAttachmentInput

func (ClassicLinkAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClassicLinkAttachment)(nil)).Elem()
}

func (i ClassicLinkAttachmentMap) ToClassicLinkAttachmentMapOutput() ClassicLinkAttachmentMapOutput {
	return i.ToClassicLinkAttachmentMapOutputWithContext(context.Background())
}

func (i ClassicLinkAttachmentMap) ToClassicLinkAttachmentMapOutputWithContext(ctx context.Context) ClassicLinkAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassicLinkAttachmentMapOutput)
}

type ClassicLinkAttachmentOutput struct{ *pulumi.OutputState }

func (ClassicLinkAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassicLinkAttachment)(nil)).Elem()
}

func (o ClassicLinkAttachmentOutput) ToClassicLinkAttachmentOutput() ClassicLinkAttachmentOutput {
	return o
}

func (o ClassicLinkAttachmentOutput) ToClassicLinkAttachmentOutputWithContext(ctx context.Context) ClassicLinkAttachmentOutput {
	return o
}

// CVM instance ID. It only support set one instance now.
func (o ClassicLinkAttachmentOutput) InstanceIds() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassicLinkAttachment) pulumi.StringOutput { return v.InstanceIds }).(pulumi.StringOutput)
}

// VPC instance ID.
func (o ClassicLinkAttachmentOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassicLinkAttachment) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClassicLinkAttachmentArrayOutput struct{ *pulumi.OutputState }

func (ClassicLinkAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClassicLinkAttachment)(nil)).Elem()
}

func (o ClassicLinkAttachmentArrayOutput) ToClassicLinkAttachmentArrayOutput() ClassicLinkAttachmentArrayOutput {
	return o
}

func (o ClassicLinkAttachmentArrayOutput) ToClassicLinkAttachmentArrayOutputWithContext(ctx context.Context) ClassicLinkAttachmentArrayOutput {
	return o
}

func (o ClassicLinkAttachmentArrayOutput) Index(i pulumi.IntInput) ClassicLinkAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClassicLinkAttachment {
		return vs[0].([]*ClassicLinkAttachment)[vs[1].(int)]
	}).(ClassicLinkAttachmentOutput)
}

type ClassicLinkAttachmentMapOutput struct{ *pulumi.OutputState }

func (ClassicLinkAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClassicLinkAttachment)(nil)).Elem()
}

func (o ClassicLinkAttachmentMapOutput) ToClassicLinkAttachmentMapOutput() ClassicLinkAttachmentMapOutput {
	return o
}

func (o ClassicLinkAttachmentMapOutput) ToClassicLinkAttachmentMapOutputWithContext(ctx context.Context) ClassicLinkAttachmentMapOutput {
	return o
}

func (o ClassicLinkAttachmentMapOutput) MapIndex(k pulumi.StringInput) ClassicLinkAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClassicLinkAttachment {
		return vs[0].(map[string]*ClassicLinkAttachment)[vs[1].(string)]
	}).(ClassicLinkAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassicLinkAttachmentInput)(nil)).Elem(), &ClassicLinkAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassicLinkAttachmentArrayInput)(nil)).Elem(), ClassicLinkAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassicLinkAttachmentMapInput)(nil)).Elem(), ClassicLinkAttachmentMap{})
	pulumi.RegisterOutputType(ClassicLinkAttachmentOutput{})
	pulumi.RegisterOutputType(ClassicLinkAttachmentArrayOutput{})
	pulumi.RegisterOutputType(ClassicLinkAttachmentMapOutput{})
}
