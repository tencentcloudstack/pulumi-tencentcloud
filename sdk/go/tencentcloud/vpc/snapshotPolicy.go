// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc snapshotPolicy
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cos"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleBucket, err := Cos.NewBucket(ctx, "exampleBucket", &Cos.BucketArgs{
//				Bucket: pulumi.String("tf-example-1308919341"),
//				Acl:    pulumi.String("private"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Vpc.NewSnapshotPolicy(ctx, "exampleSnapshotPolicy", &Vpc.SnapshotPolicyArgs{
//				SnapshotPolicyName: pulumi.String("tf-example"),
//				BackupType:         pulumi.String("time"),
//				CosBucket:          exampleBucket.Bucket,
//				CosRegion:          pulumi.String("ap-guangzhou"),
//				CreateNewCos:       pulumi.Bool(false),
//				KeepTime:           pulumi.Int(2),
//				BackupPolicies: vpc.SnapshotPolicyBackupPolicyArray{
//					&vpc.SnapshotPolicyBackupPolicyArgs{
//						BackupDay:  pulumi.String("monday"),
//						BackupTime: pulumi.String("00:00:00"),
//					},
//					&vpc.SnapshotPolicyBackupPolicyArgs{
//						BackupDay:  pulumi.String("tuesday"),
//						BackupTime: pulumi.String("01:00:00"),
//					},
//					&vpc.SnapshotPolicyBackupPolicyArgs{
//						BackupDay:  pulumi.String("wednesday"),
//						BackupTime: pulumi.String("02:00:00"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// vpc snapshot_policy can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpc/snapshotPolicy:SnapshotPolicy snapshot_policy snapshot_policy_id
//
// ```
type SnapshotPolicy struct {
	pulumi.CustomResourceState

	// Time backup strategy. Note: This field may return null, indicating that no valid value can be obtained.
	BackupPolicies SnapshotPolicyBackupPolicyArrayOutput `pulumi:"backupPolicies"`
	// Backup strategy type, `operate`: operate backup, `time`: schedule backup.
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// cos bucket.
	CosBucket pulumi.StringOutput `pulumi:"cosBucket"`
	// The region where the cos bucket is located.
	CosRegion pulumi.StringOutput `pulumi:"cosRegion"`
	// Whether to create a new cos bucket, the default is False.Note: This field may return null, indicating that no valid value can be obtained.
	CreateNewCos pulumi.BoolOutput `pulumi:"createNewCos"`
	// Creation time.Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Enabled state, True-enabled, False-disabled, the default is True.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// The retention time supports 1 to 365 days.
	KeepTime pulumi.IntOutput `pulumi:"keepTime"`
	// Snapshot policy Id.
	SnapshotPolicyId pulumi.StringOutput `pulumi:"snapshotPolicyId"`
	// Snapshot policy name.
	SnapshotPolicyName pulumi.StringOutput `pulumi:"snapshotPolicyName"`
}

// NewSnapshotPolicy registers a new resource with the given unique name, arguments, and options.
func NewSnapshotPolicy(ctx *pulumi.Context,
	name string, args *SnapshotPolicyArgs, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackupType == nil {
		return nil, errors.New("invalid value for required argument 'BackupType'")
	}
	if args.CosBucket == nil {
		return nil, errors.New("invalid value for required argument 'CosBucket'")
	}
	if args.CosRegion == nil {
		return nil, errors.New("invalid value for required argument 'CosRegion'")
	}
	if args.CreateNewCos == nil {
		return nil, errors.New("invalid value for required argument 'CreateNewCos'")
	}
	if args.KeepTime == nil {
		return nil, errors.New("invalid value for required argument 'KeepTime'")
	}
	if args.SnapshotPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotPolicyName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SnapshotPolicy
	err := ctx.RegisterResource("tencentcloud:Vpc/snapshotPolicy:SnapshotPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotPolicy gets an existing SnapshotPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotPolicyState, opts ...pulumi.ResourceOption) (*SnapshotPolicy, error) {
	var resource SnapshotPolicy
	err := ctx.ReadResource("tencentcloud:Vpc/snapshotPolicy:SnapshotPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotPolicy resources.
type snapshotPolicyState struct {
	// Time backup strategy. Note: This field may return null, indicating that no valid value can be obtained.
	BackupPolicies []SnapshotPolicyBackupPolicy `pulumi:"backupPolicies"`
	// Backup strategy type, `operate`: operate backup, `time`: schedule backup.
	BackupType *string `pulumi:"backupType"`
	// cos bucket.
	CosBucket *string `pulumi:"cosBucket"`
	// The region where the cos bucket is located.
	CosRegion *string `pulumi:"cosRegion"`
	// Whether to create a new cos bucket, the default is False.Note: This field may return null, indicating that no valid value can be obtained.
	CreateNewCos *bool `pulumi:"createNewCos"`
	// Creation time.Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime *string `pulumi:"createTime"`
	// Enabled state, True-enabled, False-disabled, the default is True.
	Enable *bool `pulumi:"enable"`
	// The retention time supports 1 to 365 days.
	KeepTime *int `pulumi:"keepTime"`
	// Snapshot policy Id.
	SnapshotPolicyId *string `pulumi:"snapshotPolicyId"`
	// Snapshot policy name.
	SnapshotPolicyName *string `pulumi:"snapshotPolicyName"`
}

type SnapshotPolicyState struct {
	// Time backup strategy. Note: This field may return null, indicating that no valid value can be obtained.
	BackupPolicies SnapshotPolicyBackupPolicyArrayInput
	// Backup strategy type, `operate`: operate backup, `time`: schedule backup.
	BackupType pulumi.StringPtrInput
	// cos bucket.
	CosBucket pulumi.StringPtrInput
	// The region where the cos bucket is located.
	CosRegion pulumi.StringPtrInput
	// Whether to create a new cos bucket, the default is False.Note: This field may return null, indicating that no valid value can be obtained.
	CreateNewCos pulumi.BoolPtrInput
	// Creation time.Note: This field may return null, indicating that no valid value can be obtained.
	CreateTime pulumi.StringPtrInput
	// Enabled state, True-enabled, False-disabled, the default is True.
	Enable pulumi.BoolPtrInput
	// The retention time supports 1 to 365 days.
	KeepTime pulumi.IntPtrInput
	// Snapshot policy Id.
	SnapshotPolicyId pulumi.StringPtrInput
	// Snapshot policy name.
	SnapshotPolicyName pulumi.StringPtrInput
}

func (SnapshotPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyState)(nil)).Elem()
}

type snapshotPolicyArgs struct {
	// Time backup strategy. Note: This field may return null, indicating that no valid value can be obtained.
	BackupPolicies []SnapshotPolicyBackupPolicy `pulumi:"backupPolicies"`
	// Backup strategy type, `operate`: operate backup, `time`: schedule backup.
	BackupType string `pulumi:"backupType"`
	// cos bucket.
	CosBucket string `pulumi:"cosBucket"`
	// The region where the cos bucket is located.
	CosRegion string `pulumi:"cosRegion"`
	// Whether to create a new cos bucket, the default is False.Note: This field may return null, indicating that no valid value can be obtained.
	CreateNewCos bool `pulumi:"createNewCos"`
	// The retention time supports 1 to 365 days.
	KeepTime int `pulumi:"keepTime"`
	// Snapshot policy name.
	SnapshotPolicyName string `pulumi:"snapshotPolicyName"`
}

// The set of arguments for constructing a SnapshotPolicy resource.
type SnapshotPolicyArgs struct {
	// Time backup strategy. Note: This field may return null, indicating that no valid value can be obtained.
	BackupPolicies SnapshotPolicyBackupPolicyArrayInput
	// Backup strategy type, `operate`: operate backup, `time`: schedule backup.
	BackupType pulumi.StringInput
	// cos bucket.
	CosBucket pulumi.StringInput
	// The region where the cos bucket is located.
	CosRegion pulumi.StringInput
	// Whether to create a new cos bucket, the default is False.Note: This field may return null, indicating that no valid value can be obtained.
	CreateNewCos pulumi.BoolInput
	// The retention time supports 1 to 365 days.
	KeepTime pulumi.IntInput
	// Snapshot policy name.
	SnapshotPolicyName pulumi.StringInput
}

func (SnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotPolicyArgs)(nil)).Elem()
}

type SnapshotPolicyInput interface {
	pulumi.Input

	ToSnapshotPolicyOutput() SnapshotPolicyOutput
	ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput
}

func (*SnapshotPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicy)(nil)).Elem()
}

func (i *SnapshotPolicy) ToSnapshotPolicyOutput() SnapshotPolicyOutput {
	return i.ToSnapshotPolicyOutputWithContext(context.Background())
}

func (i *SnapshotPolicy) ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyOutput)
}

// SnapshotPolicyArrayInput is an input type that accepts SnapshotPolicyArray and SnapshotPolicyArrayOutput values.
// You can construct a concrete instance of `SnapshotPolicyArrayInput` via:
//
//	SnapshotPolicyArray{ SnapshotPolicyArgs{...} }
type SnapshotPolicyArrayInput interface {
	pulumi.Input

	ToSnapshotPolicyArrayOutput() SnapshotPolicyArrayOutput
	ToSnapshotPolicyArrayOutputWithContext(context.Context) SnapshotPolicyArrayOutput
}

type SnapshotPolicyArray []SnapshotPolicyInput

func (SnapshotPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotPolicy)(nil)).Elem()
}

func (i SnapshotPolicyArray) ToSnapshotPolicyArrayOutput() SnapshotPolicyArrayOutput {
	return i.ToSnapshotPolicyArrayOutputWithContext(context.Background())
}

func (i SnapshotPolicyArray) ToSnapshotPolicyArrayOutputWithContext(ctx context.Context) SnapshotPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyArrayOutput)
}

// SnapshotPolicyMapInput is an input type that accepts SnapshotPolicyMap and SnapshotPolicyMapOutput values.
// You can construct a concrete instance of `SnapshotPolicyMapInput` via:
//
//	SnapshotPolicyMap{ "key": SnapshotPolicyArgs{...} }
type SnapshotPolicyMapInput interface {
	pulumi.Input

	ToSnapshotPolicyMapOutput() SnapshotPolicyMapOutput
	ToSnapshotPolicyMapOutputWithContext(context.Context) SnapshotPolicyMapOutput
}

type SnapshotPolicyMap map[string]SnapshotPolicyInput

func (SnapshotPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotPolicy)(nil)).Elem()
}

func (i SnapshotPolicyMap) ToSnapshotPolicyMapOutput() SnapshotPolicyMapOutput {
	return i.ToSnapshotPolicyMapOutputWithContext(context.Background())
}

func (i SnapshotPolicyMap) ToSnapshotPolicyMapOutputWithContext(ctx context.Context) SnapshotPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotPolicyMapOutput)
}

type SnapshotPolicyOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyOutput) ToSnapshotPolicyOutput() SnapshotPolicyOutput {
	return o
}

func (o SnapshotPolicyOutput) ToSnapshotPolicyOutputWithContext(ctx context.Context) SnapshotPolicyOutput {
	return o
}

// Time backup strategy. Note: This field may return null, indicating that no valid value can be obtained.
func (o SnapshotPolicyOutput) BackupPolicies() SnapshotPolicyBackupPolicyArrayOutput {
	return o.ApplyT(func(v *SnapshotPolicy) SnapshotPolicyBackupPolicyArrayOutput { return v.BackupPolicies }).(SnapshotPolicyBackupPolicyArrayOutput)
}

// Backup strategy type, `operate`: operate backup, `time`: schedule backup.
func (o SnapshotPolicyOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.BackupType }).(pulumi.StringOutput)
}

// cos bucket.
func (o SnapshotPolicyOutput) CosBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.CosBucket }).(pulumi.StringOutput)
}

// The region where the cos bucket is located.
func (o SnapshotPolicyOutput) CosRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.CosRegion }).(pulumi.StringOutput)
}

// Whether to create a new cos bucket, the default is False.Note: This field may return null, indicating that no valid value can be obtained.
func (o SnapshotPolicyOutput) CreateNewCos() pulumi.BoolOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.BoolOutput { return v.CreateNewCos }).(pulumi.BoolOutput)
}

// Creation time.Note: This field may return null, indicating that no valid value can be obtained.
func (o SnapshotPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Enabled state, True-enabled, False-disabled, the default is True.
func (o SnapshotPolicyOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// The retention time supports 1 to 365 days.
func (o SnapshotPolicyOutput) KeepTime() pulumi.IntOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.IntOutput { return v.KeepTime }).(pulumi.IntOutput)
}

// Snapshot policy Id.
func (o SnapshotPolicyOutput) SnapshotPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.SnapshotPolicyId }).(pulumi.StringOutput)
}

// Snapshot policy name.
func (o SnapshotPolicyOutput) SnapshotPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotPolicy) pulumi.StringOutput { return v.SnapshotPolicyName }).(pulumi.StringOutput)
}

type SnapshotPolicyArrayOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyArrayOutput) ToSnapshotPolicyArrayOutput() SnapshotPolicyArrayOutput {
	return o
}

func (o SnapshotPolicyArrayOutput) ToSnapshotPolicyArrayOutputWithContext(ctx context.Context) SnapshotPolicyArrayOutput {
	return o
}

func (o SnapshotPolicyArrayOutput) Index(i pulumi.IntInput) SnapshotPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotPolicy {
		return vs[0].([]*SnapshotPolicy)[vs[1].(int)]
	}).(SnapshotPolicyOutput)
}

type SnapshotPolicyMapOutput struct{ *pulumi.OutputState }

func (SnapshotPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotPolicy)(nil)).Elem()
}

func (o SnapshotPolicyMapOutput) ToSnapshotPolicyMapOutput() SnapshotPolicyMapOutput {
	return o
}

func (o SnapshotPolicyMapOutput) ToSnapshotPolicyMapOutputWithContext(ctx context.Context) SnapshotPolicyMapOutput {
	return o
}

func (o SnapshotPolicyMapOutput) MapIndex(k pulumi.StringInput) SnapshotPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotPolicy {
		return vs[0].(map[string]*SnapshotPolicy)[vs[1].(string)]
	}).(SnapshotPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyInput)(nil)).Elem(), &SnapshotPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyArrayInput)(nil)).Elem(), SnapshotPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotPolicyMapInput)(nil)).Elem(), SnapshotPolicyMap{})
	pulumi.RegisterOutputType(SnapshotPolicyOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyArrayOutput{})
	pulumi.RegisterOutputType(SnapshotPolicyMapOutput{})
}
