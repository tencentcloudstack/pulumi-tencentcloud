// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Use this data source to query vpc subnets information.
//
// ## Example Usage
//
// ### Create subnet resource
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Subnet"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			vpc, err := Vpc.NewInstance(ctx, "vpc", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Subnet.NewInstance(ctx, "subnet", &Subnet.InstanceArgs{
//				AvailabilityZone: pulumi.String(availabilityZone),
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.20.0/28"),
//				IsMulticast:      pulumi.Bool(false),
//				Tags: pulumi.Map{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Subnet.NewInstance(ctx, "subnetCDC", &Subnet.InstanceArgs{
//				VpcId:            vpc.ID(),
//				CidrBlock:        pulumi.String("10.0.0.0/16"),
//				CdcId:            pulumi.String("cluster-lchwgxhs"),
//				AvailabilityZone: pulumi.Any(data.Tencentcloud_availability_zones.Zones.Zones[0].Name),
//				IsMulticast:      pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Query all subnets
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.GetSubnets(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetSubnets(ctx *pulumi.Context, args *GetSubnetsArgs, opts ...pulumi.InvokeOption) (*GetSubnetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSubnetsResult
	err := ctx.Invoke("tencentcloud:Vpc/getSubnets:getSubnets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSubnets.
type GetSubnetsArgs struct {
	// Zone of the subnet to be queried.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ID of CDC instance.
	CdcId *string `pulumi:"cdcId"`
	// Filter subnet with this CIDR.
	CidrBlock *string `pulumi:"cidrBlock"`
	// Filter default or no default subnets.
	IsDefault *bool `pulumi:"isDefault"`
	// Filter the VPC SNAT address pool subnet.
	IsRemoteVpcSnat *bool `pulumi:"isRemoteVpcSnat"`
	// Name of the subnet to be queried.
	Name *string `pulumi:"name"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the subnet to be queried.
	SubnetId *string `pulumi:"subnetId"`
	// Filter if subnet has this tag.
	TagKey *string `pulumi:"tagKey"`
	// Tags of the subnet to be queried.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC to be queried.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getSubnets.
type GetSubnetsResult struct {
	// The availability zone of the subnet.
	AvailabilityZone *string `pulumi:"availabilityZone"`
	// ID of CDC instance.
	CdcId *string `pulumi:"cdcId"`
	// A network address block of the subnet.
	CidrBlock *string `pulumi:"cidrBlock"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of subnets.
	InstanceLists []GetSubnetsInstanceList `pulumi:"instanceLists"`
	// Indicates whether it is the default subnet of the VPC for this region.
	IsDefault       *bool `pulumi:"isDefault"`
	IsRemoteVpcSnat *bool `pulumi:"isRemoteVpcSnat"`
	// Name of the subnet.
	Name             *string `pulumi:"name"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the subnet.
	SubnetId *string `pulumi:"subnetId"`
	TagKey   *string `pulumi:"tagKey"`
	// Tags of the subnet resource.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

func GetSubnetsOutput(ctx *pulumi.Context, args GetSubnetsOutputArgs, opts ...pulumi.InvokeOption) GetSubnetsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSubnetsResult, error) {
			args := v.(GetSubnetsArgs)
			r, err := GetSubnets(ctx, &args, opts...)
			var s GetSubnetsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSubnetsResultOutput)
}

// A collection of arguments for invoking getSubnets.
type GetSubnetsOutputArgs struct {
	// Zone of the subnet to be queried.
	AvailabilityZone pulumi.StringPtrInput `pulumi:"availabilityZone"`
	// ID of CDC instance.
	CdcId pulumi.StringPtrInput `pulumi:"cdcId"`
	// Filter subnet with this CIDR.
	CidrBlock pulumi.StringPtrInput `pulumi:"cidrBlock"`
	// Filter default or no default subnets.
	IsDefault pulumi.BoolPtrInput `pulumi:"isDefault"`
	// Filter the VPC SNAT address pool subnet.
	IsRemoteVpcSnat pulumi.BoolPtrInput `pulumi:"isRemoteVpcSnat"`
	// Name of the subnet to be queried.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// ID of the subnet to be queried.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Filter if subnet has this tag.
	TagKey pulumi.StringPtrInput `pulumi:"tagKey"`
	// Tags of the subnet to be queried.
	Tags pulumi.MapInput `pulumi:"tags"`
	// ID of the VPC to be queried.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetSubnetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetsArgs)(nil)).Elem()
}

// A collection of values returned by getSubnets.
type GetSubnetsResultOutput struct{ *pulumi.OutputState }

func (GetSubnetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetsResult)(nil)).Elem()
}

func (o GetSubnetsResultOutput) ToGetSubnetsResultOutput() GetSubnetsResultOutput {
	return o
}

func (o GetSubnetsResultOutput) ToGetSubnetsResultOutputWithContext(ctx context.Context) GetSubnetsResultOutput {
	return o
}

// The availability zone of the subnet.
func (o GetSubnetsResultOutput) AvailabilityZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.AvailabilityZone }).(pulumi.StringPtrOutput)
}

// ID of CDC instance.
func (o GetSubnetsResultOutput) CdcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.CdcId }).(pulumi.StringPtrOutput)
}

// A network address block of the subnet.
func (o GetSubnetsResultOutput) CidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.CidrBlock }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetSubnetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetsResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of subnets.
func (o GetSubnetsResultOutput) InstanceLists() GetSubnetsInstanceListArrayOutput {
	return o.ApplyT(func(v GetSubnetsResult) []GetSubnetsInstanceList { return v.InstanceLists }).(GetSubnetsInstanceListArrayOutput)
}

// Indicates whether it is the default subnet of the VPC for this region.
func (o GetSubnetsResultOutput) IsDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *bool { return v.IsDefault }).(pulumi.BoolPtrOutput)
}

func (o GetSubnetsResultOutput) IsRemoteVpcSnat() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *bool { return v.IsRemoteVpcSnat }).(pulumi.BoolPtrOutput)
}

// Name of the subnet.
func (o GetSubnetsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSubnetsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// ID of the subnet.
func (o GetSubnetsResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

func (o GetSubnetsResultOutput) TagKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.TagKey }).(pulumi.StringPtrOutput)
}

// Tags of the subnet resource.
func (o GetSubnetsResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetSubnetsResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// ID of the VPC.
func (o GetSubnetsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSubnetsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSubnetsResultOutput{})
}
