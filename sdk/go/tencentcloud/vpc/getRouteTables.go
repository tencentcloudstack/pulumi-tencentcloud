// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query vpc route tables information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Route"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			availabilityZone := "ap-guangzhou-3"
//			if param := cfg.Get("availabilityZone"); param != "" {
//				availabilityZone = param
//			}
//			foo, err := Vpc.NewInstance(ctx, "foo", &Vpc.InstanceArgs{
//				CidrBlock: pulumi.String("10.0.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			routeTable, err := Route.NewTable(ctx, "routeTable", &Route.TableArgs{
//				VpcId: foo.ID(),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = Vpc.GetRouteTablesOutput(ctx, vpc.GetRouteTablesOutputArgs{
//				RouteTableId: routeTable.ID(),
//			}, nil)
//			_ = Vpc.GetRouteTablesOutput(ctx, vpc.GetRouteTablesOutputArgs{
//				Name: routeTable.Name,
//			}, nil)
//			_ = Vpc.GetRouteTablesOutput(ctx, vpc.GetRouteTablesOutputArgs{
//				VpcId:           foo.ID(),
//				AssociationMain: pulumi.Bool(true),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetRouteTables(ctx *pulumi.Context, args *GetRouteTablesArgs, opts ...pulumi.InvokeOption) (*GetRouteTablesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRouteTablesResult
	err := ctx.Invoke("tencentcloud:Vpc/getRouteTables:getRouteTables", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteTables.
type GetRouteTablesArgs struct {
	// Filter the main routing table.
	AssociationMain *bool `pulumi:"associationMain"`
	// Name of the routing table to be queried.
	Name *string `pulumi:"name"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the routing table to be queried.
	RouteTableId *string `pulumi:"routeTableId"`
	// Filter if routing table has this tag.
	TagKey *string `pulumi:"tagKey"`
	// Tags of the routing table to be queried.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC to be queried.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getRouteTables.
type GetRouteTablesResult struct {
	AssociationMain *bool `pulumi:"associationMain"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The information list of the VPC route table.
	InstanceLists []GetRouteTablesInstanceList `pulumi:"instanceLists"`
	// Name of the routing table.
	Name             *string `pulumi:"name"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the routing table.
	RouteTableId *string `pulumi:"routeTableId"`
	TagKey       *string `pulumi:"tagKey"`
	// Tags of the routing table.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

func GetRouteTablesOutput(ctx *pulumi.Context, args GetRouteTablesOutputArgs, opts ...pulumi.InvokeOption) GetRouteTablesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRouteTablesResult, error) {
			args := v.(GetRouteTablesArgs)
			r, err := GetRouteTables(ctx, &args, opts...)
			var s GetRouteTablesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRouteTablesResultOutput)
}

// A collection of arguments for invoking getRouteTables.
type GetRouteTablesOutputArgs struct {
	// Filter the main routing table.
	AssociationMain pulumi.BoolPtrInput `pulumi:"associationMain"`
	// Name of the routing table to be queried.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// ID of the routing table to be queried.
	RouteTableId pulumi.StringPtrInput `pulumi:"routeTableId"`
	// Filter if routing table has this tag.
	TagKey pulumi.StringPtrInput `pulumi:"tagKey"`
	// Tags of the routing table to be queried.
	Tags pulumi.MapInput `pulumi:"tags"`
	// ID of the VPC to be queried.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetRouteTablesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTablesArgs)(nil)).Elem()
}

// A collection of values returned by getRouteTables.
type GetRouteTablesResultOutput struct{ *pulumi.OutputState }

func (GetRouteTablesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTablesResult)(nil)).Elem()
}

func (o GetRouteTablesResultOutput) ToGetRouteTablesResultOutput() GetRouteTablesResultOutput {
	return o
}

func (o GetRouteTablesResultOutput) ToGetRouteTablesResultOutputWithContext(ctx context.Context) GetRouteTablesResultOutput {
	return o
}

func (o GetRouteTablesResultOutput) AssociationMain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *bool { return v.AssociationMain }).(pulumi.BoolPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRouteTablesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTablesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The information list of the VPC route table.
func (o GetRouteTablesResultOutput) InstanceLists() GetRouteTablesInstanceListArrayOutput {
	return o.ApplyT(func(v GetRouteTablesResult) []GetRouteTablesInstanceList { return v.InstanceLists }).(GetRouteTablesInstanceListArrayOutput)
}

// Name of the routing table.
func (o GetRouteTablesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetRouteTablesResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// ID of the routing table.
func (o GetRouteTablesResultOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

func (o GetRouteTablesResultOutput) TagKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.TagKey }).(pulumi.StringPtrOutput)
}

// Tags of the routing table.
func (o GetRouteTablesResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v GetRouteTablesResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// ID of the VPC.
func (o GetRouteTablesResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteTablesResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRouteTablesResultOutput{})
}
