// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc flowLogConfig
//
// ## Example Usage
// ### If enable FlowLogs
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.NewFlowLogConfig(ctx, "config", &Vpc.FlowLogConfigArgs{
//				FlowLogId: pulumi.Any(tencentcloud_vpc_flow_log.Example.Id),
//				Enable:    pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// vpc flow_log_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Vpc/flowLogConfig:FlowLogConfig flow_log_config flow_log_id
//
// ```
type FlowLogConfig struct {
	pulumi.CustomResourceState

	// If enable snapshot policy.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// Flow log ID.
	FlowLogId pulumi.StringOutput `pulumi:"flowLogId"`
}

// NewFlowLogConfig registers a new resource with the given unique name, arguments, and options.
func NewFlowLogConfig(ctx *pulumi.Context,
	name string, args *FlowLogConfigArgs, opts ...pulumi.ResourceOption) (*FlowLogConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.FlowLogId == nil {
		return nil, errors.New("invalid value for required argument 'FlowLogId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FlowLogConfig
	err := ctx.RegisterResource("tencentcloud:Vpc/flowLogConfig:FlowLogConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLogConfig gets an existing FlowLogConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLogConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogConfigState, opts ...pulumi.ResourceOption) (*FlowLogConfig, error) {
	var resource FlowLogConfig
	err := ctx.ReadResource("tencentcloud:Vpc/flowLogConfig:FlowLogConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLogConfig resources.
type flowLogConfigState struct {
	// If enable snapshot policy.
	Enable *bool `pulumi:"enable"`
	// Flow log ID.
	FlowLogId *string `pulumi:"flowLogId"`
}

type FlowLogConfigState struct {
	// If enable snapshot policy.
	Enable pulumi.BoolPtrInput
	// Flow log ID.
	FlowLogId pulumi.StringPtrInput
}

func (FlowLogConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogConfigState)(nil)).Elem()
}

type flowLogConfigArgs struct {
	// If enable snapshot policy.
	Enable bool `pulumi:"enable"`
	// Flow log ID.
	FlowLogId string `pulumi:"flowLogId"`
}

// The set of arguments for constructing a FlowLogConfig resource.
type FlowLogConfigArgs struct {
	// If enable snapshot policy.
	Enable pulumi.BoolInput
	// Flow log ID.
	FlowLogId pulumi.StringInput
}

func (FlowLogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogConfigArgs)(nil)).Elem()
}

type FlowLogConfigInput interface {
	pulumi.Input

	ToFlowLogConfigOutput() FlowLogConfigOutput
	ToFlowLogConfigOutputWithContext(ctx context.Context) FlowLogConfigOutput
}

func (*FlowLogConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLogConfig)(nil)).Elem()
}

func (i *FlowLogConfig) ToFlowLogConfigOutput() FlowLogConfigOutput {
	return i.ToFlowLogConfigOutputWithContext(context.Background())
}

func (i *FlowLogConfig) ToFlowLogConfigOutputWithContext(ctx context.Context) FlowLogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogConfigOutput)
}

// FlowLogConfigArrayInput is an input type that accepts FlowLogConfigArray and FlowLogConfigArrayOutput values.
// You can construct a concrete instance of `FlowLogConfigArrayInput` via:
//
//	FlowLogConfigArray{ FlowLogConfigArgs{...} }
type FlowLogConfigArrayInput interface {
	pulumi.Input

	ToFlowLogConfigArrayOutput() FlowLogConfigArrayOutput
	ToFlowLogConfigArrayOutputWithContext(context.Context) FlowLogConfigArrayOutput
}

type FlowLogConfigArray []FlowLogConfigInput

func (FlowLogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLogConfig)(nil)).Elem()
}

func (i FlowLogConfigArray) ToFlowLogConfigArrayOutput() FlowLogConfigArrayOutput {
	return i.ToFlowLogConfigArrayOutputWithContext(context.Background())
}

func (i FlowLogConfigArray) ToFlowLogConfigArrayOutputWithContext(ctx context.Context) FlowLogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogConfigArrayOutput)
}

// FlowLogConfigMapInput is an input type that accepts FlowLogConfigMap and FlowLogConfigMapOutput values.
// You can construct a concrete instance of `FlowLogConfigMapInput` via:
//
//	FlowLogConfigMap{ "key": FlowLogConfigArgs{...} }
type FlowLogConfigMapInput interface {
	pulumi.Input

	ToFlowLogConfigMapOutput() FlowLogConfigMapOutput
	ToFlowLogConfigMapOutputWithContext(context.Context) FlowLogConfigMapOutput
}

type FlowLogConfigMap map[string]FlowLogConfigInput

func (FlowLogConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLogConfig)(nil)).Elem()
}

func (i FlowLogConfigMap) ToFlowLogConfigMapOutput() FlowLogConfigMapOutput {
	return i.ToFlowLogConfigMapOutputWithContext(context.Background())
}

func (i FlowLogConfigMap) ToFlowLogConfigMapOutputWithContext(ctx context.Context) FlowLogConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogConfigMapOutput)
}

type FlowLogConfigOutput struct{ *pulumi.OutputState }

func (FlowLogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLogConfig)(nil)).Elem()
}

func (o FlowLogConfigOutput) ToFlowLogConfigOutput() FlowLogConfigOutput {
	return o
}

func (o FlowLogConfigOutput) ToFlowLogConfigOutputWithContext(ctx context.Context) FlowLogConfigOutput {
	return o
}

// If enable snapshot policy.
func (o FlowLogConfigOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *FlowLogConfig) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// Flow log ID.
func (o FlowLogConfigOutput) FlowLogId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLogConfig) pulumi.StringOutput { return v.FlowLogId }).(pulumi.StringOutput)
}

type FlowLogConfigArrayOutput struct{ *pulumi.OutputState }

func (FlowLogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLogConfig)(nil)).Elem()
}

func (o FlowLogConfigArrayOutput) ToFlowLogConfigArrayOutput() FlowLogConfigArrayOutput {
	return o
}

func (o FlowLogConfigArrayOutput) ToFlowLogConfigArrayOutputWithContext(ctx context.Context) FlowLogConfigArrayOutput {
	return o
}

func (o FlowLogConfigArrayOutput) Index(i pulumi.IntInput) FlowLogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLogConfig {
		return vs[0].([]*FlowLogConfig)[vs[1].(int)]
	}).(FlowLogConfigOutput)
}

type FlowLogConfigMapOutput struct{ *pulumi.OutputState }

func (FlowLogConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLogConfig)(nil)).Elem()
}

func (o FlowLogConfigMapOutput) ToFlowLogConfigMapOutput() FlowLogConfigMapOutput {
	return o
}

func (o FlowLogConfigMapOutput) ToFlowLogConfigMapOutputWithContext(ctx context.Context) FlowLogConfigMapOutput {
	return o
}

func (o FlowLogConfigMapOutput) MapIndex(k pulumi.StringInput) FlowLogConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLogConfig {
		return vs[0].(map[string]*FlowLogConfig)[vs[1].(string)]
	}).(FlowLogConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogConfigInput)(nil)).Elem(), &FlowLogConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogConfigArrayInput)(nil)).Elem(), FlowLogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogConfigMapInput)(nil)).Elem(), FlowLogConfigMap{})
	pulumi.RegisterOutputType(FlowLogConfigOutput{})
	pulumi.RegisterOutputType(FlowLogConfigArrayOutput{})
	pulumi.RegisterOutputType(FlowLogConfigMapOutput{})
}
