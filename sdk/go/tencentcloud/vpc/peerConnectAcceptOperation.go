// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a vpc peerConnectAcceptOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.NewPeerConnectAcceptOperation(ctx, "peerConnectAcceptOperation", &Vpc.PeerConnectAcceptOperationArgs{
//				PeeringConnectionId: pulumi.String("pcx-abced"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type PeerConnectAcceptOperation struct {
	pulumi.CustomResourceState

	// Peer connection unique ID.
	PeeringConnectionId pulumi.StringOutput `pulumi:"peeringConnectionId"`
}

// NewPeerConnectAcceptOperation registers a new resource with the given unique name, arguments, and options.
func NewPeerConnectAcceptOperation(ctx *pulumi.Context,
	name string, args *PeerConnectAcceptOperationArgs, opts ...pulumi.ResourceOption) (*PeerConnectAcceptOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeeringConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'PeeringConnectionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PeerConnectAcceptOperation
	err := ctx.RegisterResource("tencentcloud:Vpc/peerConnectAcceptOperation:PeerConnectAcceptOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeerConnectAcceptOperation gets an existing PeerConnectAcceptOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeerConnectAcceptOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerConnectAcceptOperationState, opts ...pulumi.ResourceOption) (*PeerConnectAcceptOperation, error) {
	var resource PeerConnectAcceptOperation
	err := ctx.ReadResource("tencentcloud:Vpc/peerConnectAcceptOperation:PeerConnectAcceptOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeerConnectAcceptOperation resources.
type peerConnectAcceptOperationState struct {
	// Peer connection unique ID.
	PeeringConnectionId *string `pulumi:"peeringConnectionId"`
}

type PeerConnectAcceptOperationState struct {
	// Peer connection unique ID.
	PeeringConnectionId pulumi.StringPtrInput
}

func (PeerConnectAcceptOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerConnectAcceptOperationState)(nil)).Elem()
}

type peerConnectAcceptOperationArgs struct {
	// Peer connection unique ID.
	PeeringConnectionId string `pulumi:"peeringConnectionId"`
}

// The set of arguments for constructing a PeerConnectAcceptOperation resource.
type PeerConnectAcceptOperationArgs struct {
	// Peer connection unique ID.
	PeeringConnectionId pulumi.StringInput
}

func (PeerConnectAcceptOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerConnectAcceptOperationArgs)(nil)).Elem()
}

type PeerConnectAcceptOperationInput interface {
	pulumi.Input

	ToPeerConnectAcceptOperationOutput() PeerConnectAcceptOperationOutput
	ToPeerConnectAcceptOperationOutputWithContext(ctx context.Context) PeerConnectAcceptOperationOutput
}

func (*PeerConnectAcceptOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerConnectAcceptOperation)(nil)).Elem()
}

func (i *PeerConnectAcceptOperation) ToPeerConnectAcceptOperationOutput() PeerConnectAcceptOperationOutput {
	return i.ToPeerConnectAcceptOperationOutputWithContext(context.Background())
}

func (i *PeerConnectAcceptOperation) ToPeerConnectAcceptOperationOutputWithContext(ctx context.Context) PeerConnectAcceptOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerConnectAcceptOperationOutput)
}

// PeerConnectAcceptOperationArrayInput is an input type that accepts PeerConnectAcceptOperationArray and PeerConnectAcceptOperationArrayOutput values.
// You can construct a concrete instance of `PeerConnectAcceptOperationArrayInput` via:
//
//	PeerConnectAcceptOperationArray{ PeerConnectAcceptOperationArgs{...} }
type PeerConnectAcceptOperationArrayInput interface {
	pulumi.Input

	ToPeerConnectAcceptOperationArrayOutput() PeerConnectAcceptOperationArrayOutput
	ToPeerConnectAcceptOperationArrayOutputWithContext(context.Context) PeerConnectAcceptOperationArrayOutput
}

type PeerConnectAcceptOperationArray []PeerConnectAcceptOperationInput

func (PeerConnectAcceptOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeerConnectAcceptOperation)(nil)).Elem()
}

func (i PeerConnectAcceptOperationArray) ToPeerConnectAcceptOperationArrayOutput() PeerConnectAcceptOperationArrayOutput {
	return i.ToPeerConnectAcceptOperationArrayOutputWithContext(context.Background())
}

func (i PeerConnectAcceptOperationArray) ToPeerConnectAcceptOperationArrayOutputWithContext(ctx context.Context) PeerConnectAcceptOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerConnectAcceptOperationArrayOutput)
}

// PeerConnectAcceptOperationMapInput is an input type that accepts PeerConnectAcceptOperationMap and PeerConnectAcceptOperationMapOutput values.
// You can construct a concrete instance of `PeerConnectAcceptOperationMapInput` via:
//
//	PeerConnectAcceptOperationMap{ "key": PeerConnectAcceptOperationArgs{...} }
type PeerConnectAcceptOperationMapInput interface {
	pulumi.Input

	ToPeerConnectAcceptOperationMapOutput() PeerConnectAcceptOperationMapOutput
	ToPeerConnectAcceptOperationMapOutputWithContext(context.Context) PeerConnectAcceptOperationMapOutput
}

type PeerConnectAcceptOperationMap map[string]PeerConnectAcceptOperationInput

func (PeerConnectAcceptOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeerConnectAcceptOperation)(nil)).Elem()
}

func (i PeerConnectAcceptOperationMap) ToPeerConnectAcceptOperationMapOutput() PeerConnectAcceptOperationMapOutput {
	return i.ToPeerConnectAcceptOperationMapOutputWithContext(context.Background())
}

func (i PeerConnectAcceptOperationMap) ToPeerConnectAcceptOperationMapOutputWithContext(ctx context.Context) PeerConnectAcceptOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerConnectAcceptOperationMapOutput)
}

type PeerConnectAcceptOperationOutput struct{ *pulumi.OutputState }

func (PeerConnectAcceptOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerConnectAcceptOperation)(nil)).Elem()
}

func (o PeerConnectAcceptOperationOutput) ToPeerConnectAcceptOperationOutput() PeerConnectAcceptOperationOutput {
	return o
}

func (o PeerConnectAcceptOperationOutput) ToPeerConnectAcceptOperationOutputWithContext(ctx context.Context) PeerConnectAcceptOperationOutput {
	return o
}

// Peer connection unique ID.
func (o PeerConnectAcceptOperationOutput) PeeringConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerConnectAcceptOperation) pulumi.StringOutput { return v.PeeringConnectionId }).(pulumi.StringOutput)
}

type PeerConnectAcceptOperationArrayOutput struct{ *pulumi.OutputState }

func (PeerConnectAcceptOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeerConnectAcceptOperation)(nil)).Elem()
}

func (o PeerConnectAcceptOperationArrayOutput) ToPeerConnectAcceptOperationArrayOutput() PeerConnectAcceptOperationArrayOutput {
	return o
}

func (o PeerConnectAcceptOperationArrayOutput) ToPeerConnectAcceptOperationArrayOutputWithContext(ctx context.Context) PeerConnectAcceptOperationArrayOutput {
	return o
}

func (o PeerConnectAcceptOperationArrayOutput) Index(i pulumi.IntInput) PeerConnectAcceptOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeerConnectAcceptOperation {
		return vs[0].([]*PeerConnectAcceptOperation)[vs[1].(int)]
	}).(PeerConnectAcceptOperationOutput)
}

type PeerConnectAcceptOperationMapOutput struct{ *pulumi.OutputState }

func (PeerConnectAcceptOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeerConnectAcceptOperation)(nil)).Elem()
}

func (o PeerConnectAcceptOperationMapOutput) ToPeerConnectAcceptOperationMapOutput() PeerConnectAcceptOperationMapOutput {
	return o
}

func (o PeerConnectAcceptOperationMapOutput) ToPeerConnectAcceptOperationMapOutputWithContext(ctx context.Context) PeerConnectAcceptOperationMapOutput {
	return o
}

func (o PeerConnectAcceptOperationMapOutput) MapIndex(k pulumi.StringInput) PeerConnectAcceptOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeerConnectAcceptOperation {
		return vs[0].(map[string]*PeerConnectAcceptOperation)[vs[1].(string)]
	}).(PeerConnectAcceptOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerConnectAcceptOperationInput)(nil)).Elem(), &PeerConnectAcceptOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerConnectAcceptOperationArrayInput)(nil)).Elem(), PeerConnectAcceptOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerConnectAcceptOperationMapInput)(nil)).Elem(), PeerConnectAcceptOperationMap{})
	pulumi.RegisterOutputType(PeerConnectAcceptOperationOutput{})
	pulumi.RegisterOutputType(PeerConnectAcceptOperationArrayOutput{})
	pulumi.RegisterOutputType(PeerConnectAcceptOperationMapOutput{})
}
