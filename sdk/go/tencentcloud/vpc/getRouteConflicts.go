// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of vpc routeConflicts
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Vpc.GetRouteConflicts(ctx, &vpc.GetRouteConflictsArgs{
//				DestinationCidrBlocks: []string{
//					"172.18.111.0/24",
//				},
//				RouteTableId: "rtb-6xypllqe",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetRouteConflicts(ctx *pulumi.Context, args *GetRouteConflictsArgs, opts ...pulumi.InvokeOption) (*GetRouteConflictsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetRouteConflictsResult
	err := ctx.Invoke("tencentcloud:Vpc/getRouteConflicts:getRouteConflicts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteConflicts.
type GetRouteConflictsArgs struct {
	// List of conflicting destinations to check for.
	DestinationCidrBlocks []string `pulumi:"destinationCidrBlocks"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Routing table instance ID, for example:rtb-azd4dt1c.
	RouteTableId string `pulumi:"routeTableId"`
}

// A collection of values returned by getRouteConflicts.
type GetRouteConflictsResult struct {
	DestinationCidrBlocks []string `pulumi:"destinationCidrBlocks"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// route conflict list.
	RouteConflictSets []GetRouteConflictsRouteConflictSet `pulumi:"routeConflictSets"`
	// route table id.
	RouteTableId string `pulumi:"routeTableId"`
}

func GetRouteConflictsOutput(ctx *pulumi.Context, args GetRouteConflictsOutputArgs, opts ...pulumi.InvokeOption) GetRouteConflictsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetRouteConflictsResult, error) {
			args := v.(GetRouteConflictsArgs)
			r, err := GetRouteConflicts(ctx, &args, opts...)
			var s GetRouteConflictsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetRouteConflictsResultOutput)
}

// A collection of arguments for invoking getRouteConflicts.
type GetRouteConflictsOutputArgs struct {
	// List of conflicting destinations to check for.
	DestinationCidrBlocks pulumi.StringArrayInput `pulumi:"destinationCidrBlocks"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Routing table instance ID, for example:rtb-azd4dt1c.
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
}

func (GetRouteConflictsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteConflictsArgs)(nil)).Elem()
}

// A collection of values returned by getRouteConflicts.
type GetRouteConflictsResultOutput struct{ *pulumi.OutputState }

func (GetRouteConflictsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteConflictsResult)(nil)).Elem()
}

func (o GetRouteConflictsResultOutput) ToGetRouteConflictsResultOutput() GetRouteConflictsResultOutput {
	return o
}

func (o GetRouteConflictsResultOutput) ToGetRouteConflictsResultOutputWithContext(ctx context.Context) GetRouteConflictsResultOutput {
	return o
}

func (o GetRouteConflictsResultOutput) DestinationCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteConflictsResult) []string { return v.DestinationCidrBlocks }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetRouteConflictsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteConflictsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetRouteConflictsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRouteConflictsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// route conflict list.
func (o GetRouteConflictsResultOutput) RouteConflictSets() GetRouteConflictsRouteConflictSetArrayOutput {
	return o.ApplyT(func(v GetRouteConflictsResult) []GetRouteConflictsRouteConflictSet { return v.RouteConflictSets }).(GetRouteConflictsRouteConflictSetArrayOutput)
}

// route table id.
func (o GetRouteConflictsResultOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteConflictsResult) string { return v.RouteTableId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetRouteConflictsResultOutput{})
}
