// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf bindApiGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewBindApiGroup(ctx, "bindApiGroup", &Tsf.BindApiGroupArgs{
//				GatewayDeployGroupId: pulumi.String("group-vzd97zpy"),
//				GroupId:              pulumi.String("grp-qp0rj3zi"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tsf bind_api_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tsf/bindApiGroup:BindApiGroup bind_api_group bind_api_group_id
//
// ```
type BindApiGroup struct {
	pulumi.CustomResourceState

	// gateway group id.
	GatewayDeployGroupId pulumi.StringOutput `pulumi:"gatewayDeployGroupId"`
	// group id.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
}

// NewBindApiGroup registers a new resource with the given unique name, arguments, and options.
func NewBindApiGroup(ctx *pulumi.Context,
	name string, args *BindApiGroupArgs, opts ...pulumi.ResourceOption) (*BindApiGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayDeployGroupId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayDeployGroupId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BindApiGroup
	err := ctx.RegisterResource("tencentcloud:Tsf/bindApiGroup:BindApiGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBindApiGroup gets an existing BindApiGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBindApiGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BindApiGroupState, opts ...pulumi.ResourceOption) (*BindApiGroup, error) {
	var resource BindApiGroup
	err := ctx.ReadResource("tencentcloud:Tsf/bindApiGroup:BindApiGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BindApiGroup resources.
type bindApiGroupState struct {
	// gateway group id.
	GatewayDeployGroupId *string `pulumi:"gatewayDeployGroupId"`
	// group id.
	GroupId *string `pulumi:"groupId"`
}

type BindApiGroupState struct {
	// gateway group id.
	GatewayDeployGroupId pulumi.StringPtrInput
	// group id.
	GroupId pulumi.StringPtrInput
}

func (BindApiGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*bindApiGroupState)(nil)).Elem()
}

type bindApiGroupArgs struct {
	// gateway group id.
	GatewayDeployGroupId string `pulumi:"gatewayDeployGroupId"`
	// group id.
	GroupId string `pulumi:"groupId"`
}

// The set of arguments for constructing a BindApiGroup resource.
type BindApiGroupArgs struct {
	// gateway group id.
	GatewayDeployGroupId pulumi.StringInput
	// group id.
	GroupId pulumi.StringInput
}

func (BindApiGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bindApiGroupArgs)(nil)).Elem()
}

type BindApiGroupInput interface {
	pulumi.Input

	ToBindApiGroupOutput() BindApiGroupOutput
	ToBindApiGroupOutputWithContext(ctx context.Context) BindApiGroupOutput
}

func (*BindApiGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**BindApiGroup)(nil)).Elem()
}

func (i *BindApiGroup) ToBindApiGroupOutput() BindApiGroupOutput {
	return i.ToBindApiGroupOutputWithContext(context.Background())
}

func (i *BindApiGroup) ToBindApiGroupOutputWithContext(ctx context.Context) BindApiGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindApiGroupOutput)
}

// BindApiGroupArrayInput is an input type that accepts BindApiGroupArray and BindApiGroupArrayOutput values.
// You can construct a concrete instance of `BindApiGroupArrayInput` via:
//
//	BindApiGroupArray{ BindApiGroupArgs{...} }
type BindApiGroupArrayInput interface {
	pulumi.Input

	ToBindApiGroupArrayOutput() BindApiGroupArrayOutput
	ToBindApiGroupArrayOutputWithContext(context.Context) BindApiGroupArrayOutput
}

type BindApiGroupArray []BindApiGroupInput

func (BindApiGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindApiGroup)(nil)).Elem()
}

func (i BindApiGroupArray) ToBindApiGroupArrayOutput() BindApiGroupArrayOutput {
	return i.ToBindApiGroupArrayOutputWithContext(context.Background())
}

func (i BindApiGroupArray) ToBindApiGroupArrayOutputWithContext(ctx context.Context) BindApiGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindApiGroupArrayOutput)
}

// BindApiGroupMapInput is an input type that accepts BindApiGroupMap and BindApiGroupMapOutput values.
// You can construct a concrete instance of `BindApiGroupMapInput` via:
//
//	BindApiGroupMap{ "key": BindApiGroupArgs{...} }
type BindApiGroupMapInput interface {
	pulumi.Input

	ToBindApiGroupMapOutput() BindApiGroupMapOutput
	ToBindApiGroupMapOutputWithContext(context.Context) BindApiGroupMapOutput
}

type BindApiGroupMap map[string]BindApiGroupInput

func (BindApiGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindApiGroup)(nil)).Elem()
}

func (i BindApiGroupMap) ToBindApiGroupMapOutput() BindApiGroupMapOutput {
	return i.ToBindApiGroupMapOutputWithContext(context.Background())
}

func (i BindApiGroupMap) ToBindApiGroupMapOutputWithContext(ctx context.Context) BindApiGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BindApiGroupMapOutput)
}

type BindApiGroupOutput struct{ *pulumi.OutputState }

func (BindApiGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BindApiGroup)(nil)).Elem()
}

func (o BindApiGroupOutput) ToBindApiGroupOutput() BindApiGroupOutput {
	return o
}

func (o BindApiGroupOutput) ToBindApiGroupOutputWithContext(ctx context.Context) BindApiGroupOutput {
	return o
}

// gateway group id.
func (o BindApiGroupOutput) GatewayDeployGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *BindApiGroup) pulumi.StringOutput { return v.GatewayDeployGroupId }).(pulumi.StringOutput)
}

// group id.
func (o BindApiGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *BindApiGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

type BindApiGroupArrayOutput struct{ *pulumi.OutputState }

func (BindApiGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BindApiGroup)(nil)).Elem()
}

func (o BindApiGroupArrayOutput) ToBindApiGroupArrayOutput() BindApiGroupArrayOutput {
	return o
}

func (o BindApiGroupArrayOutput) ToBindApiGroupArrayOutputWithContext(ctx context.Context) BindApiGroupArrayOutput {
	return o
}

func (o BindApiGroupArrayOutput) Index(i pulumi.IntInput) BindApiGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BindApiGroup {
		return vs[0].([]*BindApiGroup)[vs[1].(int)]
	}).(BindApiGroupOutput)
}

type BindApiGroupMapOutput struct{ *pulumi.OutputState }

func (BindApiGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BindApiGroup)(nil)).Elem()
}

func (o BindApiGroupMapOutput) ToBindApiGroupMapOutput() BindApiGroupMapOutput {
	return o
}

func (o BindApiGroupMapOutput) ToBindApiGroupMapOutputWithContext(ctx context.Context) BindApiGroupMapOutput {
	return o
}

func (o BindApiGroupMapOutput) MapIndex(k pulumi.StringInput) BindApiGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BindApiGroup {
		return vs[0].(map[string]*BindApiGroup)[vs[1].(string)]
	}).(BindApiGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BindApiGroupInput)(nil)).Elem(), &BindApiGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindApiGroupArrayInput)(nil)).Elem(), BindApiGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BindApiGroupMapInput)(nil)).Elem(), BindApiGroupMap{})
	pulumi.RegisterOutputType(BindApiGroupOutput{})
	pulumi.RegisterOutputType(BindApiGroupArrayOutput{})
	pulumi.RegisterOutputType(BindApiGroupMapOutput{})
}
