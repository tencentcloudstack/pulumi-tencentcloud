// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf laneRule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewLaneRule(ctx, "laneRule", &Tsf.LaneRuleArgs{
//				Enable:   pulumi.Bool(false),
//				LaneId:   pulumi.String("lane-abw5oo5a"),
//				Remark:   pulumi.String("terraform-test"),
//				RuleName: pulumi.String("terraform-rule-name"),
//				RuleTagLists: tsf.LaneRuleRuleTagListArray{
//					&tsf.LaneRuleRuleTagListArgs{
//						TagName:     pulumi.String("xxx"),
//						TagOperator: pulumi.String("EQUAL"),
//						TagValue:    pulumi.String("222"),
//					},
//				},
//				RuleTagRelationship: pulumi.String("RELEATION_AND"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type LaneRule struct {
	pulumi.CustomResourceState

	// creation time.
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// open state, true/false, default: false.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// lane ID.
	LaneId pulumi.StringOutput `pulumi:"laneId"`
	// Priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Program id list.
	ProgramIdLists pulumi.StringArrayOutput `pulumi:"programIdLists"`
	// Lane rule notes.
	Remark pulumi.StringOutput `pulumi:"remark"`
	// Rule id.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// lane rule name.
	RuleName pulumi.StringOutput `pulumi:"ruleName"`
	// list of swimlane rule labels.
	RuleTagLists LaneRuleRuleTagListArrayOutput `pulumi:"ruleTagLists"`
	// lane rule label relationship.
	RuleTagRelationship pulumi.StringOutput `pulumi:"ruleTagRelationship"`
	// update time.
	UpdateTime pulumi.IntOutput `pulumi:"updateTime"`
}

// NewLaneRule registers a new resource with the given unique name, arguments, and options.
func NewLaneRule(ctx *pulumi.Context,
	name string, args *LaneRuleArgs, opts ...pulumi.ResourceOption) (*LaneRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.LaneId == nil {
		return nil, errors.New("invalid value for required argument 'LaneId'")
	}
	if args.Remark == nil {
		return nil, errors.New("invalid value for required argument 'Remark'")
	}
	if args.RuleName == nil {
		return nil, errors.New("invalid value for required argument 'RuleName'")
	}
	if args.RuleTagLists == nil {
		return nil, errors.New("invalid value for required argument 'RuleTagLists'")
	}
	if args.RuleTagRelationship == nil {
		return nil, errors.New("invalid value for required argument 'RuleTagRelationship'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource LaneRule
	err := ctx.RegisterResource("tencentcloud:Tsf/laneRule:LaneRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLaneRule gets an existing LaneRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLaneRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaneRuleState, opts ...pulumi.ResourceOption) (*LaneRule, error) {
	var resource LaneRule
	err := ctx.ReadResource("tencentcloud:Tsf/laneRule:LaneRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LaneRule resources.
type laneRuleState struct {
	// creation time.
	CreateTime *int `pulumi:"createTime"`
	// open state, true/false, default: false.
	Enable *bool `pulumi:"enable"`
	// lane ID.
	LaneId *string `pulumi:"laneId"`
	// Priority.
	Priority *int `pulumi:"priority"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// Lane rule notes.
	Remark *string `pulumi:"remark"`
	// Rule id.
	RuleId *string `pulumi:"ruleId"`
	// lane rule name.
	RuleName *string `pulumi:"ruleName"`
	// list of swimlane rule labels.
	RuleTagLists []LaneRuleRuleTagList `pulumi:"ruleTagLists"`
	// lane rule label relationship.
	RuleTagRelationship *string `pulumi:"ruleTagRelationship"`
	// update time.
	UpdateTime *int `pulumi:"updateTime"`
}

type LaneRuleState struct {
	// creation time.
	CreateTime pulumi.IntPtrInput
	// open state, true/false, default: false.
	Enable pulumi.BoolPtrInput
	// lane ID.
	LaneId pulumi.StringPtrInput
	// Priority.
	Priority pulumi.IntPtrInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// Lane rule notes.
	Remark pulumi.StringPtrInput
	// Rule id.
	RuleId pulumi.StringPtrInput
	// lane rule name.
	RuleName pulumi.StringPtrInput
	// list of swimlane rule labels.
	RuleTagLists LaneRuleRuleTagListArrayInput
	// lane rule label relationship.
	RuleTagRelationship pulumi.StringPtrInput
	// update time.
	UpdateTime pulumi.IntPtrInput
}

func (LaneRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*laneRuleState)(nil)).Elem()
}

type laneRuleArgs struct {
	// open state, true/false, default: false.
	Enable bool `pulumi:"enable"`
	// lane ID.
	LaneId string `pulumi:"laneId"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// Lane rule notes.
	Remark string `pulumi:"remark"`
	// lane rule name.
	RuleName string `pulumi:"ruleName"`
	// list of swimlane rule labels.
	RuleTagLists []LaneRuleRuleTagList `pulumi:"ruleTagLists"`
	// lane rule label relationship.
	RuleTagRelationship string `pulumi:"ruleTagRelationship"`
}

// The set of arguments for constructing a LaneRule resource.
type LaneRuleArgs struct {
	// open state, true/false, default: false.
	Enable pulumi.BoolInput
	// lane ID.
	LaneId pulumi.StringInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// Lane rule notes.
	Remark pulumi.StringInput
	// lane rule name.
	RuleName pulumi.StringInput
	// list of swimlane rule labels.
	RuleTagLists LaneRuleRuleTagListArrayInput
	// lane rule label relationship.
	RuleTagRelationship pulumi.StringInput
}

func (LaneRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*laneRuleArgs)(nil)).Elem()
}

type LaneRuleInput interface {
	pulumi.Input

	ToLaneRuleOutput() LaneRuleOutput
	ToLaneRuleOutputWithContext(ctx context.Context) LaneRuleOutput
}

func (*LaneRule) ElementType() reflect.Type {
	return reflect.TypeOf((**LaneRule)(nil)).Elem()
}

func (i *LaneRule) ToLaneRuleOutput() LaneRuleOutput {
	return i.ToLaneRuleOutputWithContext(context.Background())
}

func (i *LaneRule) ToLaneRuleOutputWithContext(ctx context.Context) LaneRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaneRuleOutput)
}

// LaneRuleArrayInput is an input type that accepts LaneRuleArray and LaneRuleArrayOutput values.
// You can construct a concrete instance of `LaneRuleArrayInput` via:
//
//	LaneRuleArray{ LaneRuleArgs{...} }
type LaneRuleArrayInput interface {
	pulumi.Input

	ToLaneRuleArrayOutput() LaneRuleArrayOutput
	ToLaneRuleArrayOutputWithContext(context.Context) LaneRuleArrayOutput
}

type LaneRuleArray []LaneRuleInput

func (LaneRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LaneRule)(nil)).Elem()
}

func (i LaneRuleArray) ToLaneRuleArrayOutput() LaneRuleArrayOutput {
	return i.ToLaneRuleArrayOutputWithContext(context.Background())
}

func (i LaneRuleArray) ToLaneRuleArrayOutputWithContext(ctx context.Context) LaneRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaneRuleArrayOutput)
}

// LaneRuleMapInput is an input type that accepts LaneRuleMap and LaneRuleMapOutput values.
// You can construct a concrete instance of `LaneRuleMapInput` via:
//
//	LaneRuleMap{ "key": LaneRuleArgs{...} }
type LaneRuleMapInput interface {
	pulumi.Input

	ToLaneRuleMapOutput() LaneRuleMapOutput
	ToLaneRuleMapOutputWithContext(context.Context) LaneRuleMapOutput
}

type LaneRuleMap map[string]LaneRuleInput

func (LaneRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LaneRule)(nil)).Elem()
}

func (i LaneRuleMap) ToLaneRuleMapOutput() LaneRuleMapOutput {
	return i.ToLaneRuleMapOutputWithContext(context.Background())
}

func (i LaneRuleMap) ToLaneRuleMapOutputWithContext(ctx context.Context) LaneRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaneRuleMapOutput)
}

type LaneRuleOutput struct{ *pulumi.OutputState }

func (LaneRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LaneRule)(nil)).Elem()
}

func (o LaneRuleOutput) ToLaneRuleOutput() LaneRuleOutput {
	return o
}

func (o LaneRuleOutput) ToLaneRuleOutputWithContext(ctx context.Context) LaneRuleOutput {
	return o
}

// creation time.
func (o LaneRuleOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// open state, true/false, default: false.
func (o LaneRuleOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// lane ID.
func (o LaneRuleOutput) LaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.StringOutput { return v.LaneId }).(pulumi.StringOutput)
}

// Priority.
func (o LaneRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Program id list.
func (o LaneRuleOutput) ProgramIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.StringArrayOutput { return v.ProgramIdLists }).(pulumi.StringArrayOutput)
}

// Lane rule notes.
func (o LaneRuleOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.StringOutput { return v.Remark }).(pulumi.StringOutput)
}

// Rule id.
func (o LaneRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// lane rule name.
func (o LaneRuleOutput) RuleName() pulumi.StringOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.StringOutput { return v.RuleName }).(pulumi.StringOutput)
}

// list of swimlane rule labels.
func (o LaneRuleOutput) RuleTagLists() LaneRuleRuleTagListArrayOutput {
	return o.ApplyT(func(v *LaneRule) LaneRuleRuleTagListArrayOutput { return v.RuleTagLists }).(LaneRuleRuleTagListArrayOutput)
}

// lane rule label relationship.
func (o LaneRuleOutput) RuleTagRelationship() pulumi.StringOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.StringOutput { return v.RuleTagRelationship }).(pulumi.StringOutput)
}

// update time.
func (o LaneRuleOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *LaneRule) pulumi.IntOutput { return v.UpdateTime }).(pulumi.IntOutput)
}

type LaneRuleArrayOutput struct{ *pulumi.OutputState }

func (LaneRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LaneRule)(nil)).Elem()
}

func (o LaneRuleArrayOutput) ToLaneRuleArrayOutput() LaneRuleArrayOutput {
	return o
}

func (o LaneRuleArrayOutput) ToLaneRuleArrayOutputWithContext(ctx context.Context) LaneRuleArrayOutput {
	return o
}

func (o LaneRuleArrayOutput) Index(i pulumi.IntInput) LaneRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LaneRule {
		return vs[0].([]*LaneRule)[vs[1].(int)]
	}).(LaneRuleOutput)
}

type LaneRuleMapOutput struct{ *pulumi.OutputState }

func (LaneRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LaneRule)(nil)).Elem()
}

func (o LaneRuleMapOutput) ToLaneRuleMapOutput() LaneRuleMapOutput {
	return o
}

func (o LaneRuleMapOutput) ToLaneRuleMapOutputWithContext(ctx context.Context) LaneRuleMapOutput {
	return o
}

func (o LaneRuleMapOutput) MapIndex(k pulumi.StringInput) LaneRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LaneRule {
		return vs[0].(map[string]*LaneRule)[vs[1].(string)]
	}).(LaneRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LaneRuleInput)(nil)).Elem(), &LaneRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaneRuleArrayInput)(nil)).Elem(), LaneRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaneRuleMapInput)(nil)).Elem(), LaneRuleMap{})
	pulumi.RegisterOutputType(LaneRuleOutput{})
	pulumi.RegisterOutputType(LaneRuleArrayOutput{})
	pulumi.RegisterOutputType(LaneRuleMapOutput{})
}
