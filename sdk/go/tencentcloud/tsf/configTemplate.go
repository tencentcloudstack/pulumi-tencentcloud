// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf configTemplate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewConfigTemplate(ctx, "configTemplate", &Tsf.ConfigTemplateArgs{
//				ConfigTemplateDesc:  pulumi.String("terraform-test"),
//				ConfigTemplateName:  pulumi.String("terraform-template-name"),
//				ConfigTemplateType:  pulumi.String("Ribbon"),
//				ConfigTemplateValue: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v", "  ribbon.ReadTimeout: 5000\n", "  ribbon.ConnectTimeout: 2000\n", "  ribbon.MaxAutoRetries: 0\n", "  ribbon.MaxAutoRetriesNextServer: 1\n", "  ribbon.OkToRetryOnAllOperations: true\n", "\n")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ConfigTemplate struct {
	pulumi.CustomResourceState

	// Configuration template description.
	ConfigTemplateDesc pulumi.StringPtrOutput `pulumi:"configTemplateDesc"`
	// Template Id.
	ConfigTemplateId pulumi.StringOutput `pulumi:"configTemplateId"`
	// Configuration template name.
	ConfigTemplateName pulumi.StringOutput `pulumi:"configTemplateName"`
	// Configure the microservice framework corresponding to the template.
	ConfigTemplateType pulumi.StringOutput `pulumi:"configTemplateType"`
	// Configure template data.
	ConfigTemplateValue pulumi.StringOutput `pulumi:"configTemplateValue"`
	// creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Program id list.
	ProgramIdLists pulumi.StringArrayOutput `pulumi:"programIdLists"`
	// update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewConfigTemplate registers a new resource with the given unique name, arguments, and options.
func NewConfigTemplate(ctx *pulumi.Context,
	name string, args *ConfigTemplateArgs, opts ...pulumi.ResourceOption) (*ConfigTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigTemplateName == nil {
		return nil, errors.New("invalid value for required argument 'ConfigTemplateName'")
	}
	if args.ConfigTemplateType == nil {
		return nil, errors.New("invalid value for required argument 'ConfigTemplateType'")
	}
	if args.ConfigTemplateValue == nil {
		return nil, errors.New("invalid value for required argument 'ConfigTemplateValue'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ConfigTemplate
	err := ctx.RegisterResource("tencentcloud:Tsf/configTemplate:ConfigTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigTemplate gets an existing ConfigTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigTemplateState, opts ...pulumi.ResourceOption) (*ConfigTemplate, error) {
	var resource ConfigTemplate
	err := ctx.ReadResource("tencentcloud:Tsf/configTemplate:ConfigTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigTemplate resources.
type configTemplateState struct {
	// Configuration template description.
	ConfigTemplateDesc *string `pulumi:"configTemplateDesc"`
	// Template Id.
	ConfigTemplateId *string `pulumi:"configTemplateId"`
	// Configuration template name.
	ConfigTemplateName *string `pulumi:"configTemplateName"`
	// Configure the microservice framework corresponding to the template.
	ConfigTemplateType *string `pulumi:"configTemplateType"`
	// Configure template data.
	ConfigTemplateValue *string `pulumi:"configTemplateValue"`
	// creation time.
	CreateTime *string `pulumi:"createTime"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type ConfigTemplateState struct {
	// Configuration template description.
	ConfigTemplateDesc pulumi.StringPtrInput
	// Template Id.
	ConfigTemplateId pulumi.StringPtrInput
	// Configuration template name.
	ConfigTemplateName pulumi.StringPtrInput
	// Configure the microservice framework corresponding to the template.
	ConfigTemplateType pulumi.StringPtrInput
	// Configure template data.
	ConfigTemplateValue pulumi.StringPtrInput
	// creation time.
	CreateTime pulumi.StringPtrInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// update time.
	UpdateTime pulumi.StringPtrInput
}

func (ConfigTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplateState)(nil)).Elem()
}

type configTemplateArgs struct {
	// Configuration template description.
	ConfigTemplateDesc *string `pulumi:"configTemplateDesc"`
	// Configuration template name.
	ConfigTemplateName string `pulumi:"configTemplateName"`
	// Configure the microservice framework corresponding to the template.
	ConfigTemplateType string `pulumi:"configTemplateType"`
	// Configure template data.
	ConfigTemplateValue string `pulumi:"configTemplateValue"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
}

// The set of arguments for constructing a ConfigTemplate resource.
type ConfigTemplateArgs struct {
	// Configuration template description.
	ConfigTemplateDesc pulumi.StringPtrInput
	// Configuration template name.
	ConfigTemplateName pulumi.StringInput
	// Configure the microservice framework corresponding to the template.
	ConfigTemplateType pulumi.StringInput
	// Configure template data.
	ConfigTemplateValue pulumi.StringInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
}

func (ConfigTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configTemplateArgs)(nil)).Elem()
}

type ConfigTemplateInput interface {
	pulumi.Input

	ToConfigTemplateOutput() ConfigTemplateOutput
	ToConfigTemplateOutputWithContext(ctx context.Context) ConfigTemplateOutput
}

func (*ConfigTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplate)(nil)).Elem()
}

func (i *ConfigTemplate) ToConfigTemplateOutput() ConfigTemplateOutput {
	return i.ToConfigTemplateOutputWithContext(context.Background())
}

func (i *ConfigTemplate) ToConfigTemplateOutputWithContext(ctx context.Context) ConfigTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplateOutput)
}

// ConfigTemplateArrayInput is an input type that accepts ConfigTemplateArray and ConfigTemplateArrayOutput values.
// You can construct a concrete instance of `ConfigTemplateArrayInput` via:
//
//	ConfigTemplateArray{ ConfigTemplateArgs{...} }
type ConfigTemplateArrayInput interface {
	pulumi.Input

	ToConfigTemplateArrayOutput() ConfigTemplateArrayOutput
	ToConfigTemplateArrayOutputWithContext(context.Context) ConfigTemplateArrayOutput
}

type ConfigTemplateArray []ConfigTemplateInput

func (ConfigTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplate)(nil)).Elem()
}

func (i ConfigTemplateArray) ToConfigTemplateArrayOutput() ConfigTemplateArrayOutput {
	return i.ToConfigTemplateArrayOutputWithContext(context.Background())
}

func (i ConfigTemplateArray) ToConfigTemplateArrayOutputWithContext(ctx context.Context) ConfigTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplateArrayOutput)
}

// ConfigTemplateMapInput is an input type that accepts ConfigTemplateMap and ConfigTemplateMapOutput values.
// You can construct a concrete instance of `ConfigTemplateMapInput` via:
//
//	ConfigTemplateMap{ "key": ConfigTemplateArgs{...} }
type ConfigTemplateMapInput interface {
	pulumi.Input

	ToConfigTemplateMapOutput() ConfigTemplateMapOutput
	ToConfigTemplateMapOutputWithContext(context.Context) ConfigTemplateMapOutput
}

type ConfigTemplateMap map[string]ConfigTemplateInput

func (ConfigTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplate)(nil)).Elem()
}

func (i ConfigTemplateMap) ToConfigTemplateMapOutput() ConfigTemplateMapOutput {
	return i.ToConfigTemplateMapOutputWithContext(context.Background())
}

func (i ConfigTemplateMap) ToConfigTemplateMapOutputWithContext(ctx context.Context) ConfigTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigTemplateMapOutput)
}

type ConfigTemplateOutput struct{ *pulumi.OutputState }

func (ConfigTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigTemplate)(nil)).Elem()
}

func (o ConfigTemplateOutput) ToConfigTemplateOutput() ConfigTemplateOutput {
	return o
}

func (o ConfigTemplateOutput) ToConfigTemplateOutputWithContext(ctx context.Context) ConfigTemplateOutput {
	return o
}

// Configuration template description.
func (o ConfigTemplateOutput) ConfigTemplateDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringPtrOutput { return v.ConfigTemplateDesc }).(pulumi.StringPtrOutput)
}

// Template Id.
func (o ConfigTemplateOutput) ConfigTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.ConfigTemplateId }).(pulumi.StringOutput)
}

// Configuration template name.
func (o ConfigTemplateOutput) ConfigTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.ConfigTemplateName }).(pulumi.StringOutput)
}

// Configure the microservice framework corresponding to the template.
func (o ConfigTemplateOutput) ConfigTemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.ConfigTemplateType }).(pulumi.StringOutput)
}

// Configure template data.
func (o ConfigTemplateOutput) ConfigTemplateValue() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.ConfigTemplateValue }).(pulumi.StringOutput)
}

// creation time.
func (o ConfigTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Program id list.
func (o ConfigTemplateOutput) ProgramIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringArrayOutput { return v.ProgramIdLists }).(pulumi.StringArrayOutput)
}

// update time.
func (o ConfigTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ConfigTemplateArrayOutput struct{ *pulumi.OutputState }

func (ConfigTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigTemplate)(nil)).Elem()
}

func (o ConfigTemplateArrayOutput) ToConfigTemplateArrayOutput() ConfigTemplateArrayOutput {
	return o
}

func (o ConfigTemplateArrayOutput) ToConfigTemplateArrayOutputWithContext(ctx context.Context) ConfigTemplateArrayOutput {
	return o
}

func (o ConfigTemplateArrayOutput) Index(i pulumi.IntInput) ConfigTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigTemplate {
		return vs[0].([]*ConfigTemplate)[vs[1].(int)]
	}).(ConfigTemplateOutput)
}

type ConfigTemplateMapOutput struct{ *pulumi.OutputState }

func (ConfigTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigTemplate)(nil)).Elem()
}

func (o ConfigTemplateMapOutput) ToConfigTemplateMapOutput() ConfigTemplateMapOutput {
	return o
}

func (o ConfigTemplateMapOutput) ToConfigTemplateMapOutputWithContext(ctx context.Context) ConfigTemplateMapOutput {
	return o
}

func (o ConfigTemplateMapOutput) MapIndex(k pulumi.StringInput) ConfigTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigTemplate {
		return vs[0].(map[string]*ConfigTemplate)[vs[1].(string)]
	}).(ConfigTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplateInput)(nil)).Elem(), &ConfigTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplateArrayInput)(nil)).Elem(), ConfigTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigTemplateMapInput)(nil)).Elem(), ConfigTemplateMap{})
	pulumi.RegisterOutputType(ConfigTemplateOutput{})
	pulumi.RegisterOutputType(ConfigTemplateArrayOutput{})
	pulumi.RegisterOutputType(ConfigTemplateMapOutput{})
}
