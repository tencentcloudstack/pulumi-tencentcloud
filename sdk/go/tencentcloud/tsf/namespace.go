// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf namespace
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewNamespace(ctx, "namespace", &Tsf.NamespaceArgs{
//				IsHaEnable:    pulumi.String("0"),
//				NamespaceDesc: pulumi.String("namespace desc"),
//				NamespaceName: pulumi.String("namespace-name"),
//				NamespaceType: pulumi.String("DEF"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Namespace struct {
	pulumi.CustomResourceState

	// cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Delete ID.
	DeleteFlag pulumi.BoolOutput `pulumi:"deleteFlag"`
	// default namespace.
	IsDefault pulumi.StringOutput `pulumi:"isDefault"`
	// whether to enable high availability.
	IsHaEnable pulumi.StringOutput `pulumi:"isHaEnable"`
	// KubeInjectEnable value.
	KubeInjectEnable pulumi.BoolOutput `pulumi:"kubeInjectEnable"`
	// Namespace encoding.
	NamespaceCode pulumi.StringOutput `pulumi:"namespaceCode"`
	// namespace description.
	NamespaceDesc pulumi.StringOutput `pulumi:"namespaceDesc"`
	// Namespace ID.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// namespace resource type (default is DEF).
	NamespaceResourceType pulumi.StringOutput `pulumi:"namespaceResourceType"`
	// namespace status.
	NamespaceStatus pulumi.StringOutput `pulumi:"namespaceStatus"`
	// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
	NamespaceType pulumi.StringOutput `pulumi:"namespaceType"`
	// ID of the dataset to be bound.
	ProgramId pulumi.StringPtrOutput `pulumi:"programId"`
	// Program id list.
	ProgramIdLists pulumi.StringArrayOutput `pulumi:"programIdLists"`
	// update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewNamespace registers a new resource with the given unique name, arguments, and options.
func NewNamespace(ctx *pulumi.Context,
	name string, args *NamespaceArgs, opts ...pulumi.ResourceOption) (*Namespace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NamespaceName == nil {
		return nil, errors.New("invalid value for required argument 'NamespaceName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Namespace
	err := ctx.RegisterResource("tencentcloud:Tsf/namespace:Namespace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNamespace gets an existing Namespace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNamespace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NamespaceState, opts ...pulumi.ResourceOption) (*Namespace, error) {
	var resource Namespace
	err := ctx.ReadResource("tencentcloud:Tsf/namespace:Namespace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Namespace resources.
type namespaceState struct {
	// cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// creation time.
	CreateTime *string `pulumi:"createTime"`
	// Delete ID.
	DeleteFlag *bool `pulumi:"deleteFlag"`
	// default namespace.
	IsDefault *string `pulumi:"isDefault"`
	// whether to enable high availability.
	IsHaEnable *string `pulumi:"isHaEnable"`
	// KubeInjectEnable value.
	KubeInjectEnable *bool `pulumi:"kubeInjectEnable"`
	// Namespace encoding.
	NamespaceCode *string `pulumi:"namespaceCode"`
	// namespace description.
	NamespaceDesc *string `pulumi:"namespaceDesc"`
	// Namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// namespace resource type (default is DEF).
	NamespaceResourceType *string `pulumi:"namespaceResourceType"`
	// namespace status.
	NamespaceStatus *string `pulumi:"namespaceStatus"`
	// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
	NamespaceType *string `pulumi:"namespaceType"`
	// ID of the dataset to be bound.
	ProgramId *string `pulumi:"programId"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type NamespaceState struct {
	// cluster ID.
	ClusterId pulumi.StringPtrInput
	// creation time.
	CreateTime pulumi.StringPtrInput
	// Delete ID.
	DeleteFlag pulumi.BoolPtrInput
	// default namespace.
	IsDefault pulumi.StringPtrInput
	// whether to enable high availability.
	IsHaEnable pulumi.StringPtrInput
	// KubeInjectEnable value.
	KubeInjectEnable pulumi.BoolPtrInput
	// Namespace encoding.
	NamespaceCode pulumi.StringPtrInput
	// namespace description.
	NamespaceDesc pulumi.StringPtrInput
	// Namespace ID.
	NamespaceId pulumi.StringPtrInput
	// namespace name.
	NamespaceName pulumi.StringPtrInput
	// namespace resource type (default is DEF).
	NamespaceResourceType pulumi.StringPtrInput
	// namespace status.
	NamespaceStatus pulumi.StringPtrInput
	// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
	NamespaceType pulumi.StringPtrInput
	// ID of the dataset to be bound.
	ProgramId pulumi.StringPtrInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// update time.
	UpdateTime pulumi.StringPtrInput
}

func (NamespaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceState)(nil)).Elem()
}

type namespaceArgs struct {
	// cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// whether to enable high availability.
	IsHaEnable *string `pulumi:"isHaEnable"`
	// namespace description.
	NamespaceDesc *string `pulumi:"namespaceDesc"`
	// Namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName string `pulumi:"namespaceName"`
	// namespace resource type (default is DEF).
	NamespaceResourceType *string `pulumi:"namespaceResourceType"`
	// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
	NamespaceType *string `pulumi:"namespaceType"`
	// ID of the dataset to be bound.
	ProgramId *string `pulumi:"programId"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
}

// The set of arguments for constructing a Namespace resource.
type NamespaceArgs struct {
	// cluster ID.
	ClusterId pulumi.StringPtrInput
	// whether to enable high availability.
	IsHaEnable pulumi.StringPtrInput
	// namespace description.
	NamespaceDesc pulumi.StringPtrInput
	// Namespace ID.
	NamespaceId pulumi.StringPtrInput
	// namespace name.
	NamespaceName pulumi.StringInput
	// namespace resource type (default is DEF).
	NamespaceResourceType pulumi.StringPtrInput
	// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
	NamespaceType pulumi.StringPtrInput
	// ID of the dataset to be bound.
	ProgramId pulumi.StringPtrInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
}

func (NamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*namespaceArgs)(nil)).Elem()
}

type NamespaceInput interface {
	pulumi.Input

	ToNamespaceOutput() NamespaceOutput
	ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput
}

func (*Namespace) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (i *Namespace) ToNamespaceOutput() NamespaceOutput {
	return i.ToNamespaceOutputWithContext(context.Background())
}

func (i *Namespace) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceOutput)
}

// NamespaceArrayInput is an input type that accepts NamespaceArray and NamespaceArrayOutput values.
// You can construct a concrete instance of `NamespaceArrayInput` via:
//
//	NamespaceArray{ NamespaceArgs{...} }
type NamespaceArrayInput interface {
	pulumi.Input

	ToNamespaceArrayOutput() NamespaceArrayOutput
	ToNamespaceArrayOutputWithContext(context.Context) NamespaceArrayOutput
}

type NamespaceArray []NamespaceInput

func (NamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (i NamespaceArray) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return i.ToNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespaceArray) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceArrayOutput)
}

// NamespaceMapInput is an input type that accepts NamespaceMap and NamespaceMapOutput values.
// You can construct a concrete instance of `NamespaceMapInput` via:
//
//	NamespaceMap{ "key": NamespaceArgs{...} }
type NamespaceMapInput interface {
	pulumi.Input

	ToNamespaceMapOutput() NamespaceMapOutput
	ToNamespaceMapOutputWithContext(context.Context) NamespaceMapOutput
}

type NamespaceMap map[string]NamespaceInput

func (NamespaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (i NamespaceMap) ToNamespaceMapOutput() NamespaceMapOutput {
	return i.ToNamespaceMapOutputWithContext(context.Background())
}

func (i NamespaceMap) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespaceMapOutput)
}

type NamespaceOutput struct{ *pulumi.OutputState }

func (NamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Namespace)(nil)).Elem()
}

func (o NamespaceOutput) ToNamespaceOutput() NamespaceOutput {
	return o
}

func (o NamespaceOutput) ToNamespaceOutputWithContext(ctx context.Context) NamespaceOutput {
	return o
}

// cluster ID.
func (o NamespaceOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// creation time.
func (o NamespaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Delete ID.
func (o NamespaceOutput) DeleteFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolOutput { return v.DeleteFlag }).(pulumi.BoolOutput)
}

// default namespace.
func (o NamespaceOutput) IsDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.IsDefault }).(pulumi.StringOutput)
}

// whether to enable high availability.
func (o NamespaceOutput) IsHaEnable() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.IsHaEnable }).(pulumi.StringOutput)
}

// KubeInjectEnable value.
func (o NamespaceOutput) KubeInjectEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Namespace) pulumi.BoolOutput { return v.KubeInjectEnable }).(pulumi.BoolOutput)
}

// Namespace encoding.
func (o NamespaceOutput) NamespaceCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceCode }).(pulumi.StringOutput)
}

// namespace description.
func (o NamespaceOutput) NamespaceDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceDesc }).(pulumi.StringOutput)
}

// Namespace ID.
func (o NamespaceOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// namespace name.
func (o NamespaceOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// namespace resource type (default is DEF).
func (o NamespaceOutput) NamespaceResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceResourceType }).(pulumi.StringOutput)
}

// namespace status.
func (o NamespaceOutput) NamespaceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceStatus }).(pulumi.StringOutput)
}

// Whether it is a global namespace (the default is DEF, which means a common namespace; GLOBAL means a global namespace).
func (o NamespaceOutput) NamespaceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.NamespaceType }).(pulumi.StringOutput)
}

// ID of the dataset to be bound.
func (o NamespaceOutput) ProgramId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringPtrOutput { return v.ProgramId }).(pulumi.StringPtrOutput)
}

// Program id list.
func (o NamespaceOutput) ProgramIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringArrayOutput { return v.ProgramIdLists }).(pulumi.StringArrayOutput)
}

// update time.
func (o NamespaceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Namespace) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type NamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Namespace)(nil)).Elem()
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutput() NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) ToNamespaceArrayOutputWithContext(ctx context.Context) NamespaceArrayOutput {
	return o
}

func (o NamespaceArrayOutput) Index(i pulumi.IntInput) NamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].([]*Namespace)[vs[1].(int)]
	}).(NamespaceOutput)
}

type NamespaceMapOutput struct{ *pulumi.OutputState }

func (NamespaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Namespace)(nil)).Elem()
}

func (o NamespaceMapOutput) ToNamespaceMapOutput() NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) ToNamespaceMapOutputWithContext(ctx context.Context) NamespaceMapOutput {
	return o
}

func (o NamespaceMapOutput) MapIndex(k pulumi.StringInput) NamespaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Namespace {
		return vs[0].(map[string]*Namespace)[vs[1].(string)]
	}).(NamespaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceInput)(nil)).Elem(), &Namespace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceArrayInput)(nil)).Elem(), NamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespaceMapInput)(nil)).Elem(), NamespaceMap{})
	pulumi.RegisterOutputType(NamespaceOutput{})
	pulumi.RegisterOutputType(NamespaceArrayOutput{})
	pulumi.RegisterOutputType(NamespaceMapOutput{})
}
