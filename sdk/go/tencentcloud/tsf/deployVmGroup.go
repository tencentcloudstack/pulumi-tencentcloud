// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf deployVmGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewDeployVmGroup(ctx, "deployVmGroup", &Tsf.DeployVmGroupArgs{
//				DeployDesc:        pulumi.String("deploy test"),
//				EnableHealthCheck: pulumi.Bool(true),
//				ForceStart:        pulumi.Bool(false),
//				GroupId:           pulumi.String("group-vzd97zpy"),
//				HealthCheckSettings: &tsf.DeployVmGroupHealthCheckSettingsArgs{
//					ReadinessProbe: &tsf.DeployVmGroupHealthCheckSettingsReadinessProbeArgs{
//						ActionType:          pulumi.String("HTTP"),
//						FailureThreshold:    pulumi.Int(3),
//						InitialDelaySeconds: pulumi.Int(10),
//						Path:                pulumi.String("/"),
//						PeriodSeconds:       pulumi.Int(10),
//						Port:                pulumi.Int(80),
//						Scheme:              pulumi.String("HTTP"),
//						SuccessThreshold:    pulumi.Int(1),
//						TimeoutSeconds:      pulumi.Int(2),
//					},
//				},
//				JdkName:           pulumi.String("konaJDK"),
//				JdkVersion:        pulumi.String("8"),
//				PkgId:             pulumi.String("pkg-131bc1d3"),
//				StartupParameters: pulumi.String("-Xms128m -Xmx512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m"),
//				UpdateType:        pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DeployVmGroup struct {
	pulumi.CustomResourceState

	// javaagent info: SERVICE_AGENT/OT_AGENT.
	AgentProfileLists DeployVmGroupAgentProfileListArrayOutput `pulumi:"agentProfileLists"`
	// The ratio of instances participating in each batch during rolling release.
	DeployBatches pulumi.Float64ArrayOutput `pulumi:"deployBatches"`
	// Whether to enable beta batch.
	DeployBetaEnable pulumi.BoolOutput `pulumi:"deployBetaEnable"`
	// group description.
	DeployDesc pulumi.StringOutput `pulumi:"deployDesc"`
	// The execution method of rolling release.
	DeployExeMode pulumi.StringOutput `pulumi:"deployExeMode"`
	// The time interval for each batch during rolling release.
	DeployWaitTime pulumi.IntOutput `pulumi:"deployWaitTime"`
	// Whether to enable health check.
	EnableHealthCheck pulumi.BoolOutput `pulumi:"enableHealthCheck"`
	// Whether to allow forced start.
	ForceStart pulumi.BoolOutput `pulumi:"forceStart"`
	// group id.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// When enabling health check, configure the health check settings.
	HealthCheckSettings DeployVmGroupHealthCheckSettingsOutput `pulumi:"healthCheckSettings"`
	// Whether to perform incremental deployment. The default value is false, which means full update.
	IncrementalDeployment pulumi.BoolOutput `pulumi:"incrementalDeployment"`
	// JDK name: konaJDK or openJDK.
	JdkName pulumi.StringOutput `pulumi:"jdkName"`
	// JDK version: 8 or 11(openJDK only support 8).
	JdkVersion pulumi.StringOutput `pulumi:"jdkVersion"`
	// program package ID.
	PkgId pulumi.StringOutput `pulumi:"pkgId"`
	// The base64-encoded startup script.
	StartScript pulumi.StringOutput `pulumi:"startScript"`
	// start args of group.
	StartupParameters pulumi.StringOutput `pulumi:"startupParameters"`
	// The base64-encoded stop script.
	StopScript pulumi.StringOutput `pulumi:"stopScript"`
	// Update method: 0 for fast update, 1 for rolling update.
	UpdateType pulumi.IntOutput `pulumi:"updateType"`
	// warmup setting.
	WarmupSetting DeployVmGroupWarmupSettingOutput `pulumi:"warmupSetting"`
}

// NewDeployVmGroup registers a new resource with the given unique name, arguments, and options.
func NewDeployVmGroup(ctx *pulumi.Context,
	name string, args *DeployVmGroupArgs, opts ...pulumi.ResourceOption) (*DeployVmGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.PkgId == nil {
		return nil, errors.New("invalid value for required argument 'PkgId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeployVmGroup
	err := ctx.RegisterResource("tencentcloud:Tsf/deployVmGroup:DeployVmGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeployVmGroup gets an existing DeployVmGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeployVmGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeployVmGroupState, opts ...pulumi.ResourceOption) (*DeployVmGroup, error) {
	var resource DeployVmGroup
	err := ctx.ReadResource("tencentcloud:Tsf/deployVmGroup:DeployVmGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeployVmGroup resources.
type deployVmGroupState struct {
	// javaagent info: SERVICE_AGENT/OT_AGENT.
	AgentProfileLists []DeployVmGroupAgentProfileList `pulumi:"agentProfileLists"`
	// The ratio of instances participating in each batch during rolling release.
	DeployBatches []float64 `pulumi:"deployBatches"`
	// Whether to enable beta batch.
	DeployBetaEnable *bool `pulumi:"deployBetaEnable"`
	// group description.
	DeployDesc *string `pulumi:"deployDesc"`
	// The execution method of rolling release.
	DeployExeMode *string `pulumi:"deployExeMode"`
	// The time interval for each batch during rolling release.
	DeployWaitTime *int `pulumi:"deployWaitTime"`
	// Whether to enable health check.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// Whether to allow forced start.
	ForceStart *bool `pulumi:"forceStart"`
	// group id.
	GroupId *string `pulumi:"groupId"`
	// When enabling health check, configure the health check settings.
	HealthCheckSettings *DeployVmGroupHealthCheckSettings `pulumi:"healthCheckSettings"`
	// Whether to perform incremental deployment. The default value is false, which means full update.
	IncrementalDeployment *bool `pulumi:"incrementalDeployment"`
	// JDK name: konaJDK or openJDK.
	JdkName *string `pulumi:"jdkName"`
	// JDK version: 8 or 11(openJDK only support 8).
	JdkVersion *string `pulumi:"jdkVersion"`
	// program package ID.
	PkgId *string `pulumi:"pkgId"`
	// The base64-encoded startup script.
	StartScript *string `pulumi:"startScript"`
	// start args of group.
	StartupParameters *string `pulumi:"startupParameters"`
	// The base64-encoded stop script.
	StopScript *string `pulumi:"stopScript"`
	// Update method: 0 for fast update, 1 for rolling update.
	UpdateType *int `pulumi:"updateType"`
	// warmup setting.
	WarmupSetting *DeployVmGroupWarmupSetting `pulumi:"warmupSetting"`
}

type DeployVmGroupState struct {
	// javaagent info: SERVICE_AGENT/OT_AGENT.
	AgentProfileLists DeployVmGroupAgentProfileListArrayInput
	// The ratio of instances participating in each batch during rolling release.
	DeployBatches pulumi.Float64ArrayInput
	// Whether to enable beta batch.
	DeployBetaEnable pulumi.BoolPtrInput
	// group description.
	DeployDesc pulumi.StringPtrInput
	// The execution method of rolling release.
	DeployExeMode pulumi.StringPtrInput
	// The time interval for each batch during rolling release.
	DeployWaitTime pulumi.IntPtrInput
	// Whether to enable health check.
	EnableHealthCheck pulumi.BoolPtrInput
	// Whether to allow forced start.
	ForceStart pulumi.BoolPtrInput
	// group id.
	GroupId pulumi.StringPtrInput
	// When enabling health check, configure the health check settings.
	HealthCheckSettings DeployVmGroupHealthCheckSettingsPtrInput
	// Whether to perform incremental deployment. The default value is false, which means full update.
	IncrementalDeployment pulumi.BoolPtrInput
	// JDK name: konaJDK or openJDK.
	JdkName pulumi.StringPtrInput
	// JDK version: 8 or 11(openJDK only support 8).
	JdkVersion pulumi.StringPtrInput
	// program package ID.
	PkgId pulumi.StringPtrInput
	// The base64-encoded startup script.
	StartScript pulumi.StringPtrInput
	// start args of group.
	StartupParameters pulumi.StringPtrInput
	// The base64-encoded stop script.
	StopScript pulumi.StringPtrInput
	// Update method: 0 for fast update, 1 for rolling update.
	UpdateType pulumi.IntPtrInput
	// warmup setting.
	WarmupSetting DeployVmGroupWarmupSettingPtrInput
}

func (DeployVmGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*deployVmGroupState)(nil)).Elem()
}

type deployVmGroupArgs struct {
	// javaagent info: SERVICE_AGENT/OT_AGENT.
	AgentProfileLists []DeployVmGroupAgentProfileList `pulumi:"agentProfileLists"`
	// The ratio of instances participating in each batch during rolling release.
	DeployBatches []float64 `pulumi:"deployBatches"`
	// Whether to enable beta batch.
	DeployBetaEnable *bool `pulumi:"deployBetaEnable"`
	// group description.
	DeployDesc *string `pulumi:"deployDesc"`
	// The execution method of rolling release.
	DeployExeMode *string `pulumi:"deployExeMode"`
	// The time interval for each batch during rolling release.
	DeployWaitTime *int `pulumi:"deployWaitTime"`
	// Whether to enable health check.
	EnableHealthCheck *bool `pulumi:"enableHealthCheck"`
	// Whether to allow forced start.
	ForceStart *bool `pulumi:"forceStart"`
	// group id.
	GroupId string `pulumi:"groupId"`
	// When enabling health check, configure the health check settings.
	HealthCheckSettings *DeployVmGroupHealthCheckSettings `pulumi:"healthCheckSettings"`
	// Whether to perform incremental deployment. The default value is false, which means full update.
	IncrementalDeployment *bool `pulumi:"incrementalDeployment"`
	// JDK name: konaJDK or openJDK.
	JdkName *string `pulumi:"jdkName"`
	// JDK version: 8 or 11(openJDK only support 8).
	JdkVersion *string `pulumi:"jdkVersion"`
	// program package ID.
	PkgId string `pulumi:"pkgId"`
	// The base64-encoded startup script.
	StartScript *string `pulumi:"startScript"`
	// start args of group.
	StartupParameters *string `pulumi:"startupParameters"`
	// The base64-encoded stop script.
	StopScript *string `pulumi:"stopScript"`
	// Update method: 0 for fast update, 1 for rolling update.
	UpdateType *int `pulumi:"updateType"`
	// warmup setting.
	WarmupSetting *DeployVmGroupWarmupSetting `pulumi:"warmupSetting"`
}

// The set of arguments for constructing a DeployVmGroup resource.
type DeployVmGroupArgs struct {
	// javaagent info: SERVICE_AGENT/OT_AGENT.
	AgentProfileLists DeployVmGroupAgentProfileListArrayInput
	// The ratio of instances participating in each batch during rolling release.
	DeployBatches pulumi.Float64ArrayInput
	// Whether to enable beta batch.
	DeployBetaEnable pulumi.BoolPtrInput
	// group description.
	DeployDesc pulumi.StringPtrInput
	// The execution method of rolling release.
	DeployExeMode pulumi.StringPtrInput
	// The time interval for each batch during rolling release.
	DeployWaitTime pulumi.IntPtrInput
	// Whether to enable health check.
	EnableHealthCheck pulumi.BoolPtrInput
	// Whether to allow forced start.
	ForceStart pulumi.BoolPtrInput
	// group id.
	GroupId pulumi.StringInput
	// When enabling health check, configure the health check settings.
	HealthCheckSettings DeployVmGroupHealthCheckSettingsPtrInput
	// Whether to perform incremental deployment. The default value is false, which means full update.
	IncrementalDeployment pulumi.BoolPtrInput
	// JDK name: konaJDK or openJDK.
	JdkName pulumi.StringPtrInput
	// JDK version: 8 or 11(openJDK only support 8).
	JdkVersion pulumi.StringPtrInput
	// program package ID.
	PkgId pulumi.StringInput
	// The base64-encoded startup script.
	StartScript pulumi.StringPtrInput
	// start args of group.
	StartupParameters pulumi.StringPtrInput
	// The base64-encoded stop script.
	StopScript pulumi.StringPtrInput
	// Update method: 0 for fast update, 1 for rolling update.
	UpdateType pulumi.IntPtrInput
	// warmup setting.
	WarmupSetting DeployVmGroupWarmupSettingPtrInput
}

func (DeployVmGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deployVmGroupArgs)(nil)).Elem()
}

type DeployVmGroupInput interface {
	pulumi.Input

	ToDeployVmGroupOutput() DeployVmGroupOutput
	ToDeployVmGroupOutputWithContext(ctx context.Context) DeployVmGroupOutput
}

func (*DeployVmGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployVmGroup)(nil)).Elem()
}

func (i *DeployVmGroup) ToDeployVmGroupOutput() DeployVmGroupOutput {
	return i.ToDeployVmGroupOutputWithContext(context.Background())
}

func (i *DeployVmGroup) ToDeployVmGroupOutputWithContext(ctx context.Context) DeployVmGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployVmGroupOutput)
}

// DeployVmGroupArrayInput is an input type that accepts DeployVmGroupArray and DeployVmGroupArrayOutput values.
// You can construct a concrete instance of `DeployVmGroupArrayInput` via:
//
//	DeployVmGroupArray{ DeployVmGroupArgs{...} }
type DeployVmGroupArrayInput interface {
	pulumi.Input

	ToDeployVmGroupArrayOutput() DeployVmGroupArrayOutput
	ToDeployVmGroupArrayOutputWithContext(context.Context) DeployVmGroupArrayOutput
}

type DeployVmGroupArray []DeployVmGroupInput

func (DeployVmGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployVmGroup)(nil)).Elem()
}

func (i DeployVmGroupArray) ToDeployVmGroupArrayOutput() DeployVmGroupArrayOutput {
	return i.ToDeployVmGroupArrayOutputWithContext(context.Background())
}

func (i DeployVmGroupArray) ToDeployVmGroupArrayOutputWithContext(ctx context.Context) DeployVmGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployVmGroupArrayOutput)
}

// DeployVmGroupMapInput is an input type that accepts DeployVmGroupMap and DeployVmGroupMapOutput values.
// You can construct a concrete instance of `DeployVmGroupMapInput` via:
//
//	DeployVmGroupMap{ "key": DeployVmGroupArgs{...} }
type DeployVmGroupMapInput interface {
	pulumi.Input

	ToDeployVmGroupMapOutput() DeployVmGroupMapOutput
	ToDeployVmGroupMapOutputWithContext(context.Context) DeployVmGroupMapOutput
}

type DeployVmGroupMap map[string]DeployVmGroupInput

func (DeployVmGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployVmGroup)(nil)).Elem()
}

func (i DeployVmGroupMap) ToDeployVmGroupMapOutput() DeployVmGroupMapOutput {
	return i.ToDeployVmGroupMapOutputWithContext(context.Background())
}

func (i DeployVmGroupMap) ToDeployVmGroupMapOutputWithContext(ctx context.Context) DeployVmGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeployVmGroupMapOutput)
}

type DeployVmGroupOutput struct{ *pulumi.OutputState }

func (DeployVmGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeployVmGroup)(nil)).Elem()
}

func (o DeployVmGroupOutput) ToDeployVmGroupOutput() DeployVmGroupOutput {
	return o
}

func (o DeployVmGroupOutput) ToDeployVmGroupOutputWithContext(ctx context.Context) DeployVmGroupOutput {
	return o
}

// javaagent info: SERVICE_AGENT/OT_AGENT.
func (o DeployVmGroupOutput) AgentProfileLists() DeployVmGroupAgentProfileListArrayOutput {
	return o.ApplyT(func(v *DeployVmGroup) DeployVmGroupAgentProfileListArrayOutput { return v.AgentProfileLists }).(DeployVmGroupAgentProfileListArrayOutput)
}

// The ratio of instances participating in each batch during rolling release.
func (o DeployVmGroupOutput) DeployBatches() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.Float64ArrayOutput { return v.DeployBatches }).(pulumi.Float64ArrayOutput)
}

// Whether to enable beta batch.
func (o DeployVmGroupOutput) DeployBetaEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.BoolOutput { return v.DeployBetaEnable }).(pulumi.BoolOutput)
}

// group description.
func (o DeployVmGroupOutput) DeployDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.DeployDesc }).(pulumi.StringOutput)
}

// The execution method of rolling release.
func (o DeployVmGroupOutput) DeployExeMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.DeployExeMode }).(pulumi.StringOutput)
}

// The time interval for each batch during rolling release.
func (o DeployVmGroupOutput) DeployWaitTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.IntOutput { return v.DeployWaitTime }).(pulumi.IntOutput)
}

// Whether to enable health check.
func (o DeployVmGroupOutput) EnableHealthCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.BoolOutput { return v.EnableHealthCheck }).(pulumi.BoolOutput)
}

// Whether to allow forced start.
func (o DeployVmGroupOutput) ForceStart() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.BoolOutput { return v.ForceStart }).(pulumi.BoolOutput)
}

// group id.
func (o DeployVmGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// When enabling health check, configure the health check settings.
func (o DeployVmGroupOutput) HealthCheckSettings() DeployVmGroupHealthCheckSettingsOutput {
	return o.ApplyT(func(v *DeployVmGroup) DeployVmGroupHealthCheckSettingsOutput { return v.HealthCheckSettings }).(DeployVmGroupHealthCheckSettingsOutput)
}

// Whether to perform incremental deployment. The default value is false, which means full update.
func (o DeployVmGroupOutput) IncrementalDeployment() pulumi.BoolOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.BoolOutput { return v.IncrementalDeployment }).(pulumi.BoolOutput)
}

// JDK name: konaJDK or openJDK.
func (o DeployVmGroupOutput) JdkName() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.JdkName }).(pulumi.StringOutput)
}

// JDK version: 8 or 11(openJDK only support 8).
func (o DeployVmGroupOutput) JdkVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.JdkVersion }).(pulumi.StringOutput)
}

// program package ID.
func (o DeployVmGroupOutput) PkgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.PkgId }).(pulumi.StringOutput)
}

// The base64-encoded startup script.
func (o DeployVmGroupOutput) StartScript() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.StartScript }).(pulumi.StringOutput)
}

// start args of group.
func (o DeployVmGroupOutput) StartupParameters() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.StartupParameters }).(pulumi.StringOutput)
}

// The base64-encoded stop script.
func (o DeployVmGroupOutput) StopScript() pulumi.StringOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.StringOutput { return v.StopScript }).(pulumi.StringOutput)
}

// Update method: 0 for fast update, 1 for rolling update.
func (o DeployVmGroupOutput) UpdateType() pulumi.IntOutput {
	return o.ApplyT(func(v *DeployVmGroup) pulumi.IntOutput { return v.UpdateType }).(pulumi.IntOutput)
}

// warmup setting.
func (o DeployVmGroupOutput) WarmupSetting() DeployVmGroupWarmupSettingOutput {
	return o.ApplyT(func(v *DeployVmGroup) DeployVmGroupWarmupSettingOutput { return v.WarmupSetting }).(DeployVmGroupWarmupSettingOutput)
}

type DeployVmGroupArrayOutput struct{ *pulumi.OutputState }

func (DeployVmGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeployVmGroup)(nil)).Elem()
}

func (o DeployVmGroupArrayOutput) ToDeployVmGroupArrayOutput() DeployVmGroupArrayOutput {
	return o
}

func (o DeployVmGroupArrayOutput) ToDeployVmGroupArrayOutputWithContext(ctx context.Context) DeployVmGroupArrayOutput {
	return o
}

func (o DeployVmGroupArrayOutput) Index(i pulumi.IntInput) DeployVmGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeployVmGroup {
		return vs[0].([]*DeployVmGroup)[vs[1].(int)]
	}).(DeployVmGroupOutput)
}

type DeployVmGroupMapOutput struct{ *pulumi.OutputState }

func (DeployVmGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeployVmGroup)(nil)).Elem()
}

func (o DeployVmGroupMapOutput) ToDeployVmGroupMapOutput() DeployVmGroupMapOutput {
	return o
}

func (o DeployVmGroupMapOutput) ToDeployVmGroupMapOutputWithContext(ctx context.Context) DeployVmGroupMapOutput {
	return o
}

func (o DeployVmGroupMapOutput) MapIndex(k pulumi.StringInput) DeployVmGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeployVmGroup {
		return vs[0].(map[string]*DeployVmGroup)[vs[1].(string)]
	}).(DeployVmGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeployVmGroupInput)(nil)).Elem(), &DeployVmGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployVmGroupArrayInput)(nil)).Elem(), DeployVmGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeployVmGroupMapInput)(nil)).Elem(), DeployVmGroupMap{})
	pulumi.RegisterOutputType(DeployVmGroupOutput{})
	pulumi.RegisterOutputType(DeployVmGroupArrayOutput{})
	pulumi.RegisterOutputType(DeployVmGroupMapOutput{})
}
