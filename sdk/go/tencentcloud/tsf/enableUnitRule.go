// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf enableUnitRule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewEnableUnitRule(ctx, "enableUnitRule", &Tsf.EnableUnitRuleArgs{
//				RuleId: pulumi.String("unit-rl-is9m4nxz"),
//				Switch: pulumi.String("enabled"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tsf enable_unit_rule can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tsf/enableUnitRule:EnableUnitRule enable_unit_rule enable_unit_rule_id
//
// ```
type EnableUnitRule struct {
	pulumi.CustomResourceState

	// api ID.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// switch, on: `enabled`, off: `disabled`.
	Switch pulumi.StringOutput `pulumi:"switch"`
}

// NewEnableUnitRule registers a new resource with the given unique name, arguments, and options.
func NewEnableUnitRule(ctx *pulumi.Context,
	name string, args *EnableUnitRuleArgs, opts ...pulumi.ResourceOption) (*EnableUnitRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RuleId == nil {
		return nil, errors.New("invalid value for required argument 'RuleId'")
	}
	if args.Switch == nil {
		return nil, errors.New("invalid value for required argument 'Switch'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource EnableUnitRule
	err := ctx.RegisterResource("tencentcloud:Tsf/enableUnitRule:EnableUnitRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEnableUnitRule gets an existing EnableUnitRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEnableUnitRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EnableUnitRuleState, opts ...pulumi.ResourceOption) (*EnableUnitRule, error) {
	var resource EnableUnitRule
	err := ctx.ReadResource("tencentcloud:Tsf/enableUnitRule:EnableUnitRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EnableUnitRule resources.
type enableUnitRuleState struct {
	// api ID.
	RuleId *string `pulumi:"ruleId"`
	// switch, on: `enabled`, off: `disabled`.
	Switch *string `pulumi:"switch"`
}

type EnableUnitRuleState struct {
	// api ID.
	RuleId pulumi.StringPtrInput
	// switch, on: `enabled`, off: `disabled`.
	Switch pulumi.StringPtrInput
}

func (EnableUnitRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*enableUnitRuleState)(nil)).Elem()
}

type enableUnitRuleArgs struct {
	// api ID.
	RuleId string `pulumi:"ruleId"`
	// switch, on: `enabled`, off: `disabled`.
	Switch string `pulumi:"switch"`
}

// The set of arguments for constructing a EnableUnitRule resource.
type EnableUnitRuleArgs struct {
	// api ID.
	RuleId pulumi.StringInput
	// switch, on: `enabled`, off: `disabled`.
	Switch pulumi.StringInput
}

func (EnableUnitRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*enableUnitRuleArgs)(nil)).Elem()
}

type EnableUnitRuleInput interface {
	pulumi.Input

	ToEnableUnitRuleOutput() EnableUnitRuleOutput
	ToEnableUnitRuleOutputWithContext(ctx context.Context) EnableUnitRuleOutput
}

func (*EnableUnitRule) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableUnitRule)(nil)).Elem()
}

func (i *EnableUnitRule) ToEnableUnitRuleOutput() EnableUnitRuleOutput {
	return i.ToEnableUnitRuleOutputWithContext(context.Background())
}

func (i *EnableUnitRule) ToEnableUnitRuleOutputWithContext(ctx context.Context) EnableUnitRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableUnitRuleOutput)
}

// EnableUnitRuleArrayInput is an input type that accepts EnableUnitRuleArray and EnableUnitRuleArrayOutput values.
// You can construct a concrete instance of `EnableUnitRuleArrayInput` via:
//
//	EnableUnitRuleArray{ EnableUnitRuleArgs{...} }
type EnableUnitRuleArrayInput interface {
	pulumi.Input

	ToEnableUnitRuleArrayOutput() EnableUnitRuleArrayOutput
	ToEnableUnitRuleArrayOutputWithContext(context.Context) EnableUnitRuleArrayOutput
}

type EnableUnitRuleArray []EnableUnitRuleInput

func (EnableUnitRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnableUnitRule)(nil)).Elem()
}

func (i EnableUnitRuleArray) ToEnableUnitRuleArrayOutput() EnableUnitRuleArrayOutput {
	return i.ToEnableUnitRuleArrayOutputWithContext(context.Background())
}

func (i EnableUnitRuleArray) ToEnableUnitRuleArrayOutputWithContext(ctx context.Context) EnableUnitRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableUnitRuleArrayOutput)
}

// EnableUnitRuleMapInput is an input type that accepts EnableUnitRuleMap and EnableUnitRuleMapOutput values.
// You can construct a concrete instance of `EnableUnitRuleMapInput` via:
//
//	EnableUnitRuleMap{ "key": EnableUnitRuleArgs{...} }
type EnableUnitRuleMapInput interface {
	pulumi.Input

	ToEnableUnitRuleMapOutput() EnableUnitRuleMapOutput
	ToEnableUnitRuleMapOutputWithContext(context.Context) EnableUnitRuleMapOutput
}

type EnableUnitRuleMap map[string]EnableUnitRuleInput

func (EnableUnitRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnableUnitRule)(nil)).Elem()
}

func (i EnableUnitRuleMap) ToEnableUnitRuleMapOutput() EnableUnitRuleMapOutput {
	return i.ToEnableUnitRuleMapOutputWithContext(context.Background())
}

func (i EnableUnitRuleMap) ToEnableUnitRuleMapOutputWithContext(ctx context.Context) EnableUnitRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EnableUnitRuleMapOutput)
}

type EnableUnitRuleOutput struct{ *pulumi.OutputState }

func (EnableUnitRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnableUnitRule)(nil)).Elem()
}

func (o EnableUnitRuleOutput) ToEnableUnitRuleOutput() EnableUnitRuleOutput {
	return o
}

func (o EnableUnitRuleOutput) ToEnableUnitRuleOutputWithContext(ctx context.Context) EnableUnitRuleOutput {
	return o
}

// api ID.
func (o EnableUnitRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *EnableUnitRule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// switch, on: `enabled`, off: `disabled`.
func (o EnableUnitRuleOutput) Switch() pulumi.StringOutput {
	return o.ApplyT(func(v *EnableUnitRule) pulumi.StringOutput { return v.Switch }).(pulumi.StringOutput)
}

type EnableUnitRuleArrayOutput struct{ *pulumi.OutputState }

func (EnableUnitRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EnableUnitRule)(nil)).Elem()
}

func (o EnableUnitRuleArrayOutput) ToEnableUnitRuleArrayOutput() EnableUnitRuleArrayOutput {
	return o
}

func (o EnableUnitRuleArrayOutput) ToEnableUnitRuleArrayOutputWithContext(ctx context.Context) EnableUnitRuleArrayOutput {
	return o
}

func (o EnableUnitRuleArrayOutput) Index(i pulumi.IntInput) EnableUnitRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EnableUnitRule {
		return vs[0].([]*EnableUnitRule)[vs[1].(int)]
	}).(EnableUnitRuleOutput)
}

type EnableUnitRuleMapOutput struct{ *pulumi.OutputState }

func (EnableUnitRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EnableUnitRule)(nil)).Elem()
}

func (o EnableUnitRuleMapOutput) ToEnableUnitRuleMapOutput() EnableUnitRuleMapOutput {
	return o
}

func (o EnableUnitRuleMapOutput) ToEnableUnitRuleMapOutputWithContext(ctx context.Context) EnableUnitRuleMapOutput {
	return o
}

func (o EnableUnitRuleMapOutput) MapIndex(k pulumi.StringInput) EnableUnitRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EnableUnitRule {
		return vs[0].(map[string]*EnableUnitRule)[vs[1].(string)]
	}).(EnableUnitRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EnableUnitRuleInput)(nil)).Elem(), &EnableUnitRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnableUnitRuleArrayInput)(nil)).Elem(), EnableUnitRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EnableUnitRuleMapInput)(nil)).Elem(), EnableUnitRuleMap{})
	pulumi.RegisterOutputType(EnableUnitRuleOutput{})
	pulumi.RegisterOutputType(EnableUnitRuleArrayOutput{})
	pulumi.RegisterOutputType(EnableUnitRuleMapOutput{})
}
