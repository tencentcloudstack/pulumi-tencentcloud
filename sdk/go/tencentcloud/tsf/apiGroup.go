// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf apiGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewApiGroup(ctx, "apiGroup", &Tsf.ApiGroupArgs{
//				AuthType:                 pulumi.String("none"),
//				Description:              pulumi.String("terraform-test"),
//				GatewayInstanceId:        pulumi.String("gw-ins-i6mjpgm8"),
//				GroupContext:             pulumi.String("/terraform-test"),
//				GroupName:                pulumi.String("terraform_test_group"),
//				GroupType:                pulumi.String("ms"),
//				NamespaceNameKeyPosition: pulumi.String("path"),
//				ServiceNameKeyPosition:   pulumi.String("path"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tsf api_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tsf/apiGroup:ApiGroup api_group api_group_id
//
// ```
type ApiGroup struct {
	pulumi.CustomResourceState

	// Access group ACL type.
	AclMode pulumi.StringOutput `pulumi:"aclMode"`
	// number of APIs.
	ApiCount pulumi.IntOutput `pulumi:"apiCount"`
	// authentication type. secret: key authentication; none: no authentication.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// api group bound gateway deployment group.
	BindedGatewayDeployGroups ApiGroupBindedGatewayDeployGroupArrayOutput `pulumi:"bindedGatewayDeployGroups"`
	// Group creation time such as: 2019-06-20 15:51:28.
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// remarks.
	Description pulumi.StringOutput `pulumi:"description"`
	// gateway entity ID.
	GatewayInstanceId pulumi.StringOutput `pulumi:"gatewayInstanceId"`
	// Type of gateway instance.
	GatewayInstanceType pulumi.StringOutput `pulumi:"gatewayInstanceType"`
	// grouping context.
	GroupContext pulumi.StringOutput `pulumi:"groupContext"`
	// Api Group Id.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// group name, cannot contain Chinese.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
	GroupType pulumi.StringOutput `pulumi:"groupType"`
	// namespace parameter key value.
	NamespaceNameKey pulumi.StringOutput `pulumi:"namespaceNameKey"`
	// namespace parameter position, path, header or query, the default is path.
	NamespaceNameKeyPosition pulumi.StringOutput `pulumi:"namespaceNameKeyPosition"`
	// microservice name parameter key value.
	ServiceNameKey pulumi.StringOutput `pulumi:"serviceNameKey"`
	// microservice name parameter position, path, header or query, the default is path.
	ServiceNameKeyPosition pulumi.StringOutput `pulumi:"serviceNameKeyPosition"`
	// Release status, drafted: Not published. released: released.
	Status pulumi.StringOutput `pulumi:"status"`
	// Group update time such as: 2019-06-20 15:51:28.
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
}

// NewApiGroup registers a new resource with the given unique name, arguments, and options.
func NewApiGroup(ctx *pulumi.Context,
	name string, args *ApiGroupArgs, opts ...pulumi.ResourceOption) (*ApiGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupContext == nil {
		return nil, errors.New("invalid value for required argument 'GroupContext'")
	}
	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApiGroup
	err := ctx.RegisterResource("tencentcloud:Tsf/apiGroup:ApiGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiGroup gets an existing ApiGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiGroupState, opts ...pulumi.ResourceOption) (*ApiGroup, error) {
	var resource ApiGroup
	err := ctx.ReadResource("tencentcloud:Tsf/apiGroup:ApiGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiGroup resources.
type apiGroupState struct {
	// Access group ACL type.
	AclMode *string `pulumi:"aclMode"`
	// number of APIs.
	ApiCount *int `pulumi:"apiCount"`
	// authentication type. secret: key authentication; none: no authentication.
	AuthType *string `pulumi:"authType"`
	// api group bound gateway deployment group.
	BindedGatewayDeployGroups []ApiGroupBindedGatewayDeployGroup `pulumi:"bindedGatewayDeployGroups"`
	// Group creation time such as: 2019-06-20 15:51:28.
	CreatedTime *string `pulumi:"createdTime"`
	// remarks.
	Description *string `pulumi:"description"`
	// gateway entity ID.
	GatewayInstanceId *string `pulumi:"gatewayInstanceId"`
	// Type of gateway instance.
	GatewayInstanceType *string `pulumi:"gatewayInstanceType"`
	// grouping context.
	GroupContext *string `pulumi:"groupContext"`
	// Api Group Id.
	GroupId *string `pulumi:"groupId"`
	// group name, cannot contain Chinese.
	GroupName *string `pulumi:"groupName"`
	// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
	GroupType *string `pulumi:"groupType"`
	// namespace parameter key value.
	NamespaceNameKey *string `pulumi:"namespaceNameKey"`
	// namespace parameter position, path, header or query, the default is path.
	NamespaceNameKeyPosition *string `pulumi:"namespaceNameKeyPosition"`
	// microservice name parameter key value.
	ServiceNameKey *string `pulumi:"serviceNameKey"`
	// microservice name parameter position, path, header or query, the default is path.
	ServiceNameKeyPosition *string `pulumi:"serviceNameKeyPosition"`
	// Release status, drafted: Not published. released: released.
	Status *string `pulumi:"status"`
	// Group update time such as: 2019-06-20 15:51:28.
	UpdatedTime *string `pulumi:"updatedTime"`
}

type ApiGroupState struct {
	// Access group ACL type.
	AclMode pulumi.StringPtrInput
	// number of APIs.
	ApiCount pulumi.IntPtrInput
	// authentication type. secret: key authentication; none: no authentication.
	AuthType pulumi.StringPtrInput
	// api group bound gateway deployment group.
	BindedGatewayDeployGroups ApiGroupBindedGatewayDeployGroupArrayInput
	// Group creation time such as: 2019-06-20 15:51:28.
	CreatedTime pulumi.StringPtrInput
	// remarks.
	Description pulumi.StringPtrInput
	// gateway entity ID.
	GatewayInstanceId pulumi.StringPtrInput
	// Type of gateway instance.
	GatewayInstanceType pulumi.StringPtrInput
	// grouping context.
	GroupContext pulumi.StringPtrInput
	// Api Group Id.
	GroupId pulumi.StringPtrInput
	// group name, cannot contain Chinese.
	GroupName pulumi.StringPtrInput
	// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
	GroupType pulumi.StringPtrInput
	// namespace parameter key value.
	NamespaceNameKey pulumi.StringPtrInput
	// namespace parameter position, path, header or query, the default is path.
	NamespaceNameKeyPosition pulumi.StringPtrInput
	// microservice name parameter key value.
	ServiceNameKey pulumi.StringPtrInput
	// microservice name parameter position, path, header or query, the default is path.
	ServiceNameKeyPosition pulumi.StringPtrInput
	// Release status, drafted: Not published. released: released.
	Status pulumi.StringPtrInput
	// Group update time such as: 2019-06-20 15:51:28.
	UpdatedTime pulumi.StringPtrInput
}

func (ApiGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiGroupState)(nil)).Elem()
}

type apiGroupArgs struct {
	// authentication type. secret: key authentication; none: no authentication.
	AuthType *string `pulumi:"authType"`
	// remarks.
	Description *string `pulumi:"description"`
	// gateway entity ID.
	GatewayInstanceId *string `pulumi:"gatewayInstanceId"`
	// grouping context.
	GroupContext string `pulumi:"groupContext"`
	// group name, cannot contain Chinese.
	GroupName string `pulumi:"groupName"`
	// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
	GroupType *string `pulumi:"groupType"`
	// namespace parameter key value.
	NamespaceNameKey *string `pulumi:"namespaceNameKey"`
	// namespace parameter position, path, header or query, the default is path.
	NamespaceNameKeyPosition *string `pulumi:"namespaceNameKeyPosition"`
	// microservice name parameter key value.
	ServiceNameKey *string `pulumi:"serviceNameKey"`
	// microservice name parameter position, path, header or query, the default is path.
	ServiceNameKeyPosition *string `pulumi:"serviceNameKeyPosition"`
}

// The set of arguments for constructing a ApiGroup resource.
type ApiGroupArgs struct {
	// authentication type. secret: key authentication; none: no authentication.
	AuthType pulumi.StringPtrInput
	// remarks.
	Description pulumi.StringPtrInput
	// gateway entity ID.
	GatewayInstanceId pulumi.StringPtrInput
	// grouping context.
	GroupContext pulumi.StringInput
	// group name, cannot contain Chinese.
	GroupName pulumi.StringInput
	// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
	GroupType pulumi.StringPtrInput
	// namespace parameter key value.
	NamespaceNameKey pulumi.StringPtrInput
	// namespace parameter position, path, header or query, the default is path.
	NamespaceNameKeyPosition pulumi.StringPtrInput
	// microservice name parameter key value.
	ServiceNameKey pulumi.StringPtrInput
	// microservice name parameter position, path, header or query, the default is path.
	ServiceNameKeyPosition pulumi.StringPtrInput
}

func (ApiGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiGroupArgs)(nil)).Elem()
}

type ApiGroupInput interface {
	pulumi.Input

	ToApiGroupOutput() ApiGroupOutput
	ToApiGroupOutputWithContext(ctx context.Context) ApiGroupOutput
}

func (*ApiGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiGroup)(nil)).Elem()
}

func (i *ApiGroup) ToApiGroupOutput() ApiGroupOutput {
	return i.ToApiGroupOutputWithContext(context.Background())
}

func (i *ApiGroup) ToApiGroupOutputWithContext(ctx context.Context) ApiGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiGroupOutput)
}

// ApiGroupArrayInput is an input type that accepts ApiGroupArray and ApiGroupArrayOutput values.
// You can construct a concrete instance of `ApiGroupArrayInput` via:
//
//	ApiGroupArray{ ApiGroupArgs{...} }
type ApiGroupArrayInput interface {
	pulumi.Input

	ToApiGroupArrayOutput() ApiGroupArrayOutput
	ToApiGroupArrayOutputWithContext(context.Context) ApiGroupArrayOutput
}

type ApiGroupArray []ApiGroupInput

func (ApiGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiGroup)(nil)).Elem()
}

func (i ApiGroupArray) ToApiGroupArrayOutput() ApiGroupArrayOutput {
	return i.ToApiGroupArrayOutputWithContext(context.Background())
}

func (i ApiGroupArray) ToApiGroupArrayOutputWithContext(ctx context.Context) ApiGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiGroupArrayOutput)
}

// ApiGroupMapInput is an input type that accepts ApiGroupMap and ApiGroupMapOutput values.
// You can construct a concrete instance of `ApiGroupMapInput` via:
//
//	ApiGroupMap{ "key": ApiGroupArgs{...} }
type ApiGroupMapInput interface {
	pulumi.Input

	ToApiGroupMapOutput() ApiGroupMapOutput
	ToApiGroupMapOutputWithContext(context.Context) ApiGroupMapOutput
}

type ApiGroupMap map[string]ApiGroupInput

func (ApiGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiGroup)(nil)).Elem()
}

func (i ApiGroupMap) ToApiGroupMapOutput() ApiGroupMapOutput {
	return i.ToApiGroupMapOutputWithContext(context.Background())
}

func (i ApiGroupMap) ToApiGroupMapOutputWithContext(ctx context.Context) ApiGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiGroupMapOutput)
}

type ApiGroupOutput struct{ *pulumi.OutputState }

func (ApiGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiGroup)(nil)).Elem()
}

func (o ApiGroupOutput) ToApiGroupOutput() ApiGroupOutput {
	return o
}

func (o ApiGroupOutput) ToApiGroupOutputWithContext(ctx context.Context) ApiGroupOutput {
	return o
}

// Access group ACL type.
func (o ApiGroupOutput) AclMode() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.AclMode }).(pulumi.StringOutput)
}

// number of APIs.
func (o ApiGroupOutput) ApiCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.IntOutput { return v.ApiCount }).(pulumi.IntOutput)
}

// authentication type. secret: key authentication; none: no authentication.
func (o ApiGroupOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// api group bound gateway deployment group.
func (o ApiGroupOutput) BindedGatewayDeployGroups() ApiGroupBindedGatewayDeployGroupArrayOutput {
	return o.ApplyT(func(v *ApiGroup) ApiGroupBindedGatewayDeployGroupArrayOutput { return v.BindedGatewayDeployGroups }).(ApiGroupBindedGatewayDeployGroupArrayOutput)
}

// Group creation time such as: 2019-06-20 15:51:28.
func (o ApiGroupOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// remarks.
func (o ApiGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// gateway entity ID.
func (o ApiGroupOutput) GatewayInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.GatewayInstanceId }).(pulumi.StringOutput)
}

// Type of gateway instance.
func (o ApiGroupOutput) GatewayInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.GatewayInstanceType }).(pulumi.StringOutput)
}

// grouping context.
func (o ApiGroupOutput) GroupContext() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.GroupContext }).(pulumi.StringOutput)
}

// Api Group Id.
func (o ApiGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// group name, cannot contain Chinese.
func (o ApiGroupOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// grouping type, default ms. ms: microservice grouping; external: external Api grouping.
func (o ApiGroupOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.GroupType }).(pulumi.StringOutput)
}

// namespace parameter key value.
func (o ApiGroupOutput) NamespaceNameKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.NamespaceNameKey }).(pulumi.StringOutput)
}

// namespace parameter position, path, header or query, the default is path.
func (o ApiGroupOutput) NamespaceNameKeyPosition() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.NamespaceNameKeyPosition }).(pulumi.StringOutput)
}

// microservice name parameter key value.
func (o ApiGroupOutput) ServiceNameKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.ServiceNameKey }).(pulumi.StringOutput)
}

// microservice name parameter position, path, header or query, the default is path.
func (o ApiGroupOutput) ServiceNameKeyPosition() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.ServiceNameKeyPosition }).(pulumi.StringOutput)
}

// Release status, drafted: Not published. released: released.
func (o ApiGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Group update time such as: 2019-06-20 15:51:28.
func (o ApiGroupOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiGroup) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

type ApiGroupArrayOutput struct{ *pulumi.OutputState }

func (ApiGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiGroup)(nil)).Elem()
}

func (o ApiGroupArrayOutput) ToApiGroupArrayOutput() ApiGroupArrayOutput {
	return o
}

func (o ApiGroupArrayOutput) ToApiGroupArrayOutputWithContext(ctx context.Context) ApiGroupArrayOutput {
	return o
}

func (o ApiGroupArrayOutput) Index(i pulumi.IntInput) ApiGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiGroup {
		return vs[0].([]*ApiGroup)[vs[1].(int)]
	}).(ApiGroupOutput)
}

type ApiGroupMapOutput struct{ *pulumi.OutputState }

func (ApiGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiGroup)(nil)).Elem()
}

func (o ApiGroupMapOutput) ToApiGroupMapOutput() ApiGroupMapOutput {
	return o
}

func (o ApiGroupMapOutput) ToApiGroupMapOutputWithContext(ctx context.Context) ApiGroupMapOutput {
	return o
}

func (o ApiGroupMapOutput) MapIndex(k pulumi.StringInput) ApiGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiGroup {
		return vs[0].(map[string]*ApiGroup)[vs[1].(string)]
	}).(ApiGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiGroupInput)(nil)).Elem(), &ApiGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiGroupArrayInput)(nil)).Elem(), ApiGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiGroupMapInput)(nil)).Elem(), ApiGroupMap{})
	pulumi.RegisterOutputType(ApiGroupOutput{})
	pulumi.RegisterOutputType(ApiGroupArrayOutput{})
	pulumi.RegisterOutputType(ApiGroupMapOutput{})
}
