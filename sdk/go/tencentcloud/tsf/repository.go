// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf repository
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewRepository(ctx, "repository", &Tsf.RepositoryArgs{
//				BucketName:     pulumi.String(""),
//				BucketRegion:   pulumi.String(""),
//				Directory:      pulumi.String(""),
//				RepositoryDesc: pulumi.String(""),
//				RepositoryName: pulumi.String(""),
//				RepositoryType: pulumi.String(""),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tsf repository can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tsf/repository:Repository repository repository_id
//
// ```
type Repository struct {
	pulumi.CustomResourceState

	// the name of the bucket where the warehouse is located.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// Bucket region where the warehouse is located.
	BucketRegion pulumi.StringOutput `pulumi:"bucketRegion"`
	// warehouse creation time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// directory.
	Directory pulumi.StringOutput `pulumi:"directory"`
	// whether the repository is in use.
	IsUsed pulumi.BoolOutput `pulumi:"isUsed"`
	// warehouse description.
	RepositoryDesc pulumi.StringOutput `pulumi:"repositoryDesc"`
	// Warehouse ID.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// warehouse name.
	RepositoryName pulumi.StringOutput `pulumi:"repositoryName"`
	// warehouse type (default warehouse: default, private warehouse: private).
	RepositoryType pulumi.StringOutput `pulumi:"repositoryType"`
}

// NewRepository registers a new resource with the given unique name, arguments, and options.
func NewRepository(ctx *pulumi.Context,
	name string, args *RepositoryArgs, opts ...pulumi.ResourceOption) (*Repository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.BucketRegion == nil {
		return nil, errors.New("invalid value for required argument 'BucketRegion'")
	}
	if args.RepositoryName == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryName'")
	}
	if args.RepositoryType == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Repository
	err := ctx.RegisterResource("tencentcloud:Tsf/repository:Repository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRepository gets an existing Repository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RepositoryState, opts ...pulumi.ResourceOption) (*Repository, error) {
	var resource Repository
	err := ctx.ReadResource("tencentcloud:Tsf/repository:Repository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Repository resources.
type repositoryState struct {
	// the name of the bucket where the warehouse is located.
	BucketName *string `pulumi:"bucketName"`
	// Bucket region where the warehouse is located.
	BucketRegion *string `pulumi:"bucketRegion"`
	// warehouse creation time.
	CreateTime *string `pulumi:"createTime"`
	// directory.
	Directory *string `pulumi:"directory"`
	// whether the repository is in use.
	IsUsed *bool `pulumi:"isUsed"`
	// warehouse description.
	RepositoryDesc *string `pulumi:"repositoryDesc"`
	// Warehouse ID.
	RepositoryId *string `pulumi:"repositoryId"`
	// warehouse name.
	RepositoryName *string `pulumi:"repositoryName"`
	// warehouse type (default warehouse: default, private warehouse: private).
	RepositoryType *string `pulumi:"repositoryType"`
}

type RepositoryState struct {
	// the name of the bucket where the warehouse is located.
	BucketName pulumi.StringPtrInput
	// Bucket region where the warehouse is located.
	BucketRegion pulumi.StringPtrInput
	// warehouse creation time.
	CreateTime pulumi.StringPtrInput
	// directory.
	Directory pulumi.StringPtrInput
	// whether the repository is in use.
	IsUsed pulumi.BoolPtrInput
	// warehouse description.
	RepositoryDesc pulumi.StringPtrInput
	// Warehouse ID.
	RepositoryId pulumi.StringPtrInput
	// warehouse name.
	RepositoryName pulumi.StringPtrInput
	// warehouse type (default warehouse: default, private warehouse: private).
	RepositoryType pulumi.StringPtrInput
}

func (RepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryState)(nil)).Elem()
}

type repositoryArgs struct {
	// the name of the bucket where the warehouse is located.
	BucketName string `pulumi:"bucketName"`
	// Bucket region where the warehouse is located.
	BucketRegion string `pulumi:"bucketRegion"`
	// directory.
	Directory *string `pulumi:"directory"`
	// warehouse description.
	RepositoryDesc *string `pulumi:"repositoryDesc"`
	// warehouse name.
	RepositoryName string `pulumi:"repositoryName"`
	// warehouse type (default warehouse: default, private warehouse: private).
	RepositoryType string `pulumi:"repositoryType"`
}

// The set of arguments for constructing a Repository resource.
type RepositoryArgs struct {
	// the name of the bucket where the warehouse is located.
	BucketName pulumi.StringInput
	// Bucket region where the warehouse is located.
	BucketRegion pulumi.StringInput
	// directory.
	Directory pulumi.StringPtrInput
	// warehouse description.
	RepositoryDesc pulumi.StringPtrInput
	// warehouse name.
	RepositoryName pulumi.StringInput
	// warehouse type (default warehouse: default, private warehouse: private).
	RepositoryType pulumi.StringInput
}

func (RepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*repositoryArgs)(nil)).Elem()
}

type RepositoryInput interface {
	pulumi.Input

	ToRepositoryOutput() RepositoryOutput
	ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput
}

func (*Repository) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (i *Repository) ToRepositoryOutput() RepositoryOutput {
	return i.ToRepositoryOutputWithContext(context.Background())
}

func (i *Repository) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryOutput)
}

// RepositoryArrayInput is an input type that accepts RepositoryArray and RepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoryArrayInput` via:
//
//	RepositoryArray{ RepositoryArgs{...} }
type RepositoryArrayInput interface {
	pulumi.Input

	ToRepositoryArrayOutput() RepositoryArrayOutput
	ToRepositoryArrayOutputWithContext(context.Context) RepositoryArrayOutput
}

type RepositoryArray []RepositoryInput

func (RepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (i RepositoryArray) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return i.ToRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoryArray) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryArrayOutput)
}

// RepositoryMapInput is an input type that accepts RepositoryMap and RepositoryMapOutput values.
// You can construct a concrete instance of `RepositoryMapInput` via:
//
//	RepositoryMap{ "key": RepositoryArgs{...} }
type RepositoryMapInput interface {
	pulumi.Input

	ToRepositoryMapOutput() RepositoryMapOutput
	ToRepositoryMapOutputWithContext(context.Context) RepositoryMapOutput
}

type RepositoryMap map[string]RepositoryInput

func (RepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (i RepositoryMap) ToRepositoryMapOutput() RepositoryMapOutput {
	return i.ToRepositoryMapOutputWithContext(context.Background())
}

func (i RepositoryMap) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryMapOutput)
}

type RepositoryOutput struct{ *pulumi.OutputState }

func (RepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Repository)(nil)).Elem()
}

func (o RepositoryOutput) ToRepositoryOutput() RepositoryOutput {
	return o
}

func (o RepositoryOutput) ToRepositoryOutputWithContext(ctx context.Context) RepositoryOutput {
	return o
}

// the name of the bucket where the warehouse is located.
func (o RepositoryOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// Bucket region where the warehouse is located.
func (o RepositoryOutput) BucketRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.BucketRegion }).(pulumi.StringOutput)
}

// warehouse creation time.
func (o RepositoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// directory.
func (o RepositoryOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.Directory }).(pulumi.StringOutput)
}

// whether the repository is in use.
func (o RepositoryOutput) IsUsed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Repository) pulumi.BoolOutput { return v.IsUsed }).(pulumi.BoolOutput)
}

// warehouse description.
func (o RepositoryOutput) RepositoryDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryDesc }).(pulumi.StringOutput)
}

// Warehouse ID.
func (o RepositoryOutput) RepositoryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryId }).(pulumi.StringOutput)
}

// warehouse name.
func (o RepositoryOutput) RepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryName }).(pulumi.StringOutput)
}

// warehouse type (default warehouse: default, private warehouse: private).
func (o RepositoryOutput) RepositoryType() pulumi.StringOutput {
	return o.ApplyT(func(v *Repository) pulumi.StringOutput { return v.RepositoryType }).(pulumi.StringOutput)
}

type RepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Repository)(nil)).Elem()
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutput() RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) ToRepositoryArrayOutputWithContext(ctx context.Context) RepositoryArrayOutput {
	return o
}

func (o RepositoryArrayOutput) Index(i pulumi.IntInput) RepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].([]*Repository)[vs[1].(int)]
	}).(RepositoryOutput)
}

type RepositoryMapOutput struct{ *pulumi.OutputState }

func (RepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Repository)(nil)).Elem()
}

func (o RepositoryMapOutput) ToRepositoryMapOutput() RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) ToRepositoryMapOutputWithContext(ctx context.Context) RepositoryMapOutput {
	return o
}

func (o RepositoryMapOutput) MapIndex(k pulumi.StringInput) RepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Repository {
		return vs[0].(map[string]*Repository)[vs[1].(string)]
	}).(RepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryInput)(nil)).Elem(), &Repository{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryArrayInput)(nil)).Elem(), RepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryMapInput)(nil)).Elem(), RepositoryMap{})
	pulumi.RegisterOutputType(RepositoryOutput{})
	pulumi.RegisterOutputType(RepositoryArrayOutput{})
	pulumi.RegisterOutputType(RepositoryMapOutput{})
}
