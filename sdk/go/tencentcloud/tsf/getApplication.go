// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tsf application
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.GetApplication(ctx, &tsf.GetApplicationArgs{
//				ApplicationIdLists: []string{
//					"application-a24x29xv",
//				},
//				ApplicationType:  pulumi.StringRef("V"),
//				MicroserviceType: pulumi.StringRef("N"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupApplication(ctx *pulumi.Context, args *LookupApplicationArgs, opts ...pulumi.InvokeOption) (*LookupApplicationResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupApplicationResult
	err := ctx.Invoke("tencentcloud:Tsf/getApplication:getApplication", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApplication.
type LookupApplicationArgs struct {
	// Id list.
	ApplicationIdLists []string `pulumi:"applicationIdLists"`
	// An array of application resource types.
	ApplicationResourceTypeLists []string `pulumi:"applicationResourceTypeLists"`
	// The application type. V OR C, V means VM, C means container.
	ApplicationType *string `pulumi:"applicationType"`
	// The microservice type of the application.
	MicroserviceType *string `pulumi:"microserviceType"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
}

// A collection of values returned by getApplication.
type LookupApplicationResult struct {
	ApplicationIdLists           []string `pulumi:"applicationIdLists"`
	ApplicationResourceTypeLists []string `pulumi:"applicationResourceTypeLists"`
	// The type of the application.
	ApplicationType *string `pulumi:"applicationType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The microservice type of the application.
	MicroserviceType *string `pulumi:"microserviceType"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// The application paging list information.
	Results []GetApplicationResult `pulumi:"results"`
}

func LookupApplicationOutput(ctx *pulumi.Context, args LookupApplicationOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApplicationResult, error) {
			args := v.(LookupApplicationArgs)
			r, err := LookupApplication(ctx, &args, opts...)
			var s LookupApplicationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApplicationResultOutput)
}

// A collection of arguments for invoking getApplication.
type LookupApplicationOutputArgs struct {
	// Id list.
	ApplicationIdLists pulumi.StringArrayInput `pulumi:"applicationIdLists"`
	// An array of application resource types.
	ApplicationResourceTypeLists pulumi.StringArrayInput `pulumi:"applicationResourceTypeLists"`
	// The application type. V OR C, V means VM, C means container.
	ApplicationType pulumi.StringPtrInput `pulumi:"applicationType"`
	// The microservice type of the application.
	MicroserviceType pulumi.StringPtrInput `pulumi:"microserviceType"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
}

func (LookupApplicationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationArgs)(nil)).Elem()
}

// A collection of values returned by getApplication.
type LookupApplicationResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationResult)(nil)).Elem()
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutput() LookupApplicationResultOutput {
	return o
}

func (o LookupApplicationResultOutput) ToLookupApplicationResultOutputWithContext(ctx context.Context) LookupApplicationResultOutput {
	return o
}

func (o LookupApplicationResultOutput) ApplicationIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []string { return v.ApplicationIdLists }).(pulumi.StringArrayOutput)
}

func (o LookupApplicationResultOutput) ApplicationResourceTypeLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []string { return v.ApplicationResourceTypeLists }).(pulumi.StringArrayOutput)
}

// The type of the application.
func (o LookupApplicationResultOutput) ApplicationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.ApplicationType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupApplicationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The microservice type of the application.
func (o LookupApplicationResultOutput) MicroserviceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.MicroserviceType }).(pulumi.StringPtrOutput)
}

func (o LookupApplicationResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApplicationResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// The application paging list information.
func (o LookupApplicationResultOutput) Results() GetApplicationResultArrayOutput {
	return o.ApplyT(func(v LookupApplicationResult) []GetApplicationResult { return v.Results }).(GetApplicationResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationResultOutput{})
}
