// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf lane
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewLane(ctx, "lane", &Tsf.LaneArgs{
//				LaneGroupLists: tsf.LaneLaneGroupListArray{
//					&tsf.LaneLaneGroupListArgs{
//						Entrance: pulumi.Bool(true),
//						GroupId:  pulumi.String("group-yn7j5l8a"),
//					},
//				},
//				LaneName: pulumi.String("lane-name-1"),
//				Remark:   pulumi.String("lane desc1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Lane struct {
	pulumi.CustomResourceState

	// creation time.
	CreateTime pulumi.IntOutput `pulumi:"createTime"`
	// Whether to enter the application.
	Entrance pulumi.BoolOutput `pulumi:"entrance"`
	// Swimlane Deployment Group Information.
	LaneGroupLists LaneLaneGroupListArrayOutput `pulumi:"laneGroupLists"`
	// Lane ID.
	LaneId pulumi.StringOutput `pulumi:"laneId"`
	// Lane name.
	LaneName pulumi.StringOutput `pulumi:"laneName"`
	// A list of namespaces to which the swimlane has associated deployment groups.
	NamespaceIdLists pulumi.StringArrayOutput `pulumi:"namespaceIdLists"`
	// Program id list.
	ProgramIdLists pulumi.StringArrayOutput `pulumi:"programIdLists"`
	// Lane Remarks.
	Remark pulumi.StringOutput `pulumi:"remark"`
	// update time.
	UpdateTime pulumi.IntOutput `pulumi:"updateTime"`
}

// NewLane registers a new resource with the given unique name, arguments, and options.
func NewLane(ctx *pulumi.Context,
	name string, args *LaneArgs, opts ...pulumi.ResourceOption) (*Lane, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LaneGroupLists == nil {
		return nil, errors.New("invalid value for required argument 'LaneGroupLists'")
	}
	if args.LaneName == nil {
		return nil, errors.New("invalid value for required argument 'LaneName'")
	}
	if args.Remark == nil {
		return nil, errors.New("invalid value for required argument 'Remark'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Lane
	err := ctx.RegisterResource("tencentcloud:Tsf/lane:Lane", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLane gets an existing Lane resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLane(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LaneState, opts ...pulumi.ResourceOption) (*Lane, error) {
	var resource Lane
	err := ctx.ReadResource("tencentcloud:Tsf/lane:Lane", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Lane resources.
type laneState struct {
	// creation time.
	CreateTime *int `pulumi:"createTime"`
	// Whether to enter the application.
	Entrance *bool `pulumi:"entrance"`
	// Swimlane Deployment Group Information.
	LaneGroupLists []LaneLaneGroupList `pulumi:"laneGroupLists"`
	// Lane ID.
	LaneId *string `pulumi:"laneId"`
	// Lane name.
	LaneName *string `pulumi:"laneName"`
	// A list of namespaces to which the swimlane has associated deployment groups.
	NamespaceIdLists []string `pulumi:"namespaceIdLists"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// Lane Remarks.
	Remark *string `pulumi:"remark"`
	// update time.
	UpdateTime *int `pulumi:"updateTime"`
}

type LaneState struct {
	// creation time.
	CreateTime pulumi.IntPtrInput
	// Whether to enter the application.
	Entrance pulumi.BoolPtrInput
	// Swimlane Deployment Group Information.
	LaneGroupLists LaneLaneGroupListArrayInput
	// Lane ID.
	LaneId pulumi.StringPtrInput
	// Lane name.
	LaneName pulumi.StringPtrInput
	// A list of namespaces to which the swimlane has associated deployment groups.
	NamespaceIdLists pulumi.StringArrayInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// Lane Remarks.
	Remark pulumi.StringPtrInput
	// update time.
	UpdateTime pulumi.IntPtrInput
}

func (LaneState) ElementType() reflect.Type {
	return reflect.TypeOf((*laneState)(nil)).Elem()
}

type laneArgs struct {
	// Swimlane Deployment Group Information.
	LaneGroupLists []LaneLaneGroupList `pulumi:"laneGroupLists"`
	// Lane name.
	LaneName string `pulumi:"laneName"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// Lane Remarks.
	Remark string `pulumi:"remark"`
}

// The set of arguments for constructing a Lane resource.
type LaneArgs struct {
	// Swimlane Deployment Group Information.
	LaneGroupLists LaneLaneGroupListArrayInput
	// Lane name.
	LaneName pulumi.StringInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// Lane Remarks.
	Remark pulumi.StringInput
}

func (LaneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*laneArgs)(nil)).Elem()
}

type LaneInput interface {
	pulumi.Input

	ToLaneOutput() LaneOutput
	ToLaneOutputWithContext(ctx context.Context) LaneOutput
}

func (*Lane) ElementType() reflect.Type {
	return reflect.TypeOf((**Lane)(nil)).Elem()
}

func (i *Lane) ToLaneOutput() LaneOutput {
	return i.ToLaneOutputWithContext(context.Background())
}

func (i *Lane) ToLaneOutputWithContext(ctx context.Context) LaneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaneOutput)
}

// LaneArrayInput is an input type that accepts LaneArray and LaneArrayOutput values.
// You can construct a concrete instance of `LaneArrayInput` via:
//
//	LaneArray{ LaneArgs{...} }
type LaneArrayInput interface {
	pulumi.Input

	ToLaneArrayOutput() LaneArrayOutput
	ToLaneArrayOutputWithContext(context.Context) LaneArrayOutput
}

type LaneArray []LaneInput

func (LaneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lane)(nil)).Elem()
}

func (i LaneArray) ToLaneArrayOutput() LaneArrayOutput {
	return i.ToLaneArrayOutputWithContext(context.Background())
}

func (i LaneArray) ToLaneArrayOutputWithContext(ctx context.Context) LaneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaneArrayOutput)
}

// LaneMapInput is an input type that accepts LaneMap and LaneMapOutput values.
// You can construct a concrete instance of `LaneMapInput` via:
//
//	LaneMap{ "key": LaneArgs{...} }
type LaneMapInput interface {
	pulumi.Input

	ToLaneMapOutput() LaneMapOutput
	ToLaneMapOutputWithContext(context.Context) LaneMapOutput
}

type LaneMap map[string]LaneInput

func (LaneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lane)(nil)).Elem()
}

func (i LaneMap) ToLaneMapOutput() LaneMapOutput {
	return i.ToLaneMapOutputWithContext(context.Background())
}

func (i LaneMap) ToLaneMapOutputWithContext(ctx context.Context) LaneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaneMapOutput)
}

type LaneOutput struct{ *pulumi.OutputState }

func (LaneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Lane)(nil)).Elem()
}

func (o LaneOutput) ToLaneOutput() LaneOutput {
	return o
}

func (o LaneOutput) ToLaneOutputWithContext(ctx context.Context) LaneOutput {
	return o
}

// creation time.
func (o LaneOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Lane) pulumi.IntOutput { return v.CreateTime }).(pulumi.IntOutput)
}

// Whether to enter the application.
func (o LaneOutput) Entrance() pulumi.BoolOutput {
	return o.ApplyT(func(v *Lane) pulumi.BoolOutput { return v.Entrance }).(pulumi.BoolOutput)
}

// Swimlane Deployment Group Information.
func (o LaneOutput) LaneGroupLists() LaneLaneGroupListArrayOutput {
	return o.ApplyT(func(v *Lane) LaneLaneGroupListArrayOutput { return v.LaneGroupLists }).(LaneLaneGroupListArrayOutput)
}

// Lane ID.
func (o LaneOutput) LaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Lane) pulumi.StringOutput { return v.LaneId }).(pulumi.StringOutput)
}

// Lane name.
func (o LaneOutput) LaneName() pulumi.StringOutput {
	return o.ApplyT(func(v *Lane) pulumi.StringOutput { return v.LaneName }).(pulumi.StringOutput)
}

// A list of namespaces to which the swimlane has associated deployment groups.
func (o LaneOutput) NamespaceIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Lane) pulumi.StringArrayOutput { return v.NamespaceIdLists }).(pulumi.StringArrayOutput)
}

// Program id list.
func (o LaneOutput) ProgramIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Lane) pulumi.StringArrayOutput { return v.ProgramIdLists }).(pulumi.StringArrayOutput)
}

// Lane Remarks.
func (o LaneOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v *Lane) pulumi.StringOutput { return v.Remark }).(pulumi.StringOutput)
}

// update time.
func (o LaneOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Lane) pulumi.IntOutput { return v.UpdateTime }).(pulumi.IntOutput)
}

type LaneArrayOutput struct{ *pulumi.OutputState }

func (LaneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Lane)(nil)).Elem()
}

func (o LaneArrayOutput) ToLaneArrayOutput() LaneArrayOutput {
	return o
}

func (o LaneArrayOutput) ToLaneArrayOutputWithContext(ctx context.Context) LaneArrayOutput {
	return o
}

func (o LaneArrayOutput) Index(i pulumi.IntInput) LaneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Lane {
		return vs[0].([]*Lane)[vs[1].(int)]
	}).(LaneOutput)
}

type LaneMapOutput struct{ *pulumi.OutputState }

func (LaneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Lane)(nil)).Elem()
}

func (o LaneMapOutput) ToLaneMapOutput() LaneMapOutput {
	return o
}

func (o LaneMapOutput) ToLaneMapOutputWithContext(ctx context.Context) LaneMapOutput {
	return o
}

func (o LaneMapOutput) MapIndex(k pulumi.StringInput) LaneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Lane {
		return vs[0].(map[string]*Lane)[vs[1].(string)]
	}).(LaneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LaneInput)(nil)).Elem(), &Lane{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaneArrayInput)(nil)).Elem(), LaneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaneMapInput)(nil)).Elem(), LaneMap{})
	pulumi.RegisterOutputType(LaneOutput{})
	pulumi.RegisterOutputType(LaneArrayOutput{})
	pulumi.RegisterOutputType(LaneMapOutput{})
}
