// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf application
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewApplication(ctx, "application", &Tsf.ApplicationArgs{
//				ApplicationDesc:             pulumi.String("This is my application"),
//				ApplicationName:             pulumi.String("my-app"),
//				ApplicationRuntimeType:      pulumi.String("Java"),
//				ApplicationType:             pulumi.String("C"),
//				IgnoreCreateImageRepository: pulumi.Bool(true),
//				MicroserviceType:            pulumi.String("M"),
//				ServiceConfigLists: tsf.ApplicationServiceConfigListArray{
//					&tsf.ApplicationServiceConfigListArgs{
//						HealthCheck: &tsf.ApplicationServiceConfigListHealthCheckArgs{
//							Path: pulumi.String("/health"),
//						},
//						Name: pulumi.String("my-service"),
//						Ports: tsf.ApplicationServiceConfigListPortArray{
//							&tsf.ApplicationServiceConfigListPortArgs{
//								Protocol:   pulumi.String("HTTP"),
//								TargetPort: pulumi.Int(8080),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// Application description.
	ApplicationDesc pulumi.StringPtrOutput `pulumi:"applicationDesc"`
	// Application log configuration, deprecated parameter.
	ApplicationLogConfig pulumi.StringPtrOutput `pulumi:"applicationLogConfig"`
	// Application name.
	ApplicationName pulumi.StringOutput `pulumi:"applicationName"`
	// Application resource type, deprecated parameter.
	ApplicationResourceType pulumi.StringPtrOutput `pulumi:"applicationResourceType"`
	// Application runtime type.
	ApplicationRuntimeType pulumi.StringPtrOutput `pulumi:"applicationRuntimeType"`
	// Application type: V for virtual machine, C for container, S for serverless.
	ApplicationType pulumi.StringOutput `pulumi:"applicationType"`
	// Ignore creating image repository.
	IgnoreCreateImageRepository pulumi.BoolPtrOutput `pulumi:"ignoreCreateImageRepository"`
	// Application microservice type: M for service mesh, N for normal application, G for gateway application.
	MicroserviceType pulumi.StringOutput `pulumi:"microserviceType"`
	// ID of the dataset to be bound.
	ProgramId pulumi.StringPtrOutput `pulumi:"programId"`
	// N/A.
	ProgramIdLists pulumi.StringArrayOutput `pulumi:"programIdLists"`
	// List of service configuration information.
	ServiceConfigLists ApplicationServiceConfigListArrayOutput `pulumi:"serviceConfigLists"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationName == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationName'")
	}
	if args.ApplicationType == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationType'")
	}
	if args.MicroserviceType == nil {
		return nil, errors.New("invalid value for required argument 'MicroserviceType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("tencentcloud:Tsf/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("tencentcloud:Tsf/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// Application description.
	ApplicationDesc *string `pulumi:"applicationDesc"`
	// Application log configuration, deprecated parameter.
	ApplicationLogConfig *string `pulumi:"applicationLogConfig"`
	// Application name.
	ApplicationName *string `pulumi:"applicationName"`
	// Application resource type, deprecated parameter.
	ApplicationResourceType *string `pulumi:"applicationResourceType"`
	// Application runtime type.
	ApplicationRuntimeType *string `pulumi:"applicationRuntimeType"`
	// Application type: V for virtual machine, C for container, S for serverless.
	ApplicationType *string `pulumi:"applicationType"`
	// Ignore creating image repository.
	IgnoreCreateImageRepository *bool `pulumi:"ignoreCreateImageRepository"`
	// Application microservice type: M for service mesh, N for normal application, G for gateway application.
	MicroserviceType *string `pulumi:"microserviceType"`
	// ID of the dataset to be bound.
	ProgramId *string `pulumi:"programId"`
	// N/A.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// List of service configuration information.
	ServiceConfigLists []ApplicationServiceConfigList `pulumi:"serviceConfigLists"`
}

type ApplicationState struct {
	// Application description.
	ApplicationDesc pulumi.StringPtrInput
	// Application log configuration, deprecated parameter.
	ApplicationLogConfig pulumi.StringPtrInput
	// Application name.
	ApplicationName pulumi.StringPtrInput
	// Application resource type, deprecated parameter.
	ApplicationResourceType pulumi.StringPtrInput
	// Application runtime type.
	ApplicationRuntimeType pulumi.StringPtrInput
	// Application type: V for virtual machine, C for container, S for serverless.
	ApplicationType pulumi.StringPtrInput
	// Ignore creating image repository.
	IgnoreCreateImageRepository pulumi.BoolPtrInput
	// Application microservice type: M for service mesh, N for normal application, G for gateway application.
	MicroserviceType pulumi.StringPtrInput
	// ID of the dataset to be bound.
	ProgramId pulumi.StringPtrInput
	// N/A.
	ProgramIdLists pulumi.StringArrayInput
	// List of service configuration information.
	ServiceConfigLists ApplicationServiceConfigListArrayInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Application description.
	ApplicationDesc *string `pulumi:"applicationDesc"`
	// Application log configuration, deprecated parameter.
	ApplicationLogConfig *string `pulumi:"applicationLogConfig"`
	// Application name.
	ApplicationName string `pulumi:"applicationName"`
	// Application resource type, deprecated parameter.
	ApplicationResourceType *string `pulumi:"applicationResourceType"`
	// Application runtime type.
	ApplicationRuntimeType *string `pulumi:"applicationRuntimeType"`
	// Application type: V for virtual machine, C for container, S for serverless.
	ApplicationType string `pulumi:"applicationType"`
	// Ignore creating image repository.
	IgnoreCreateImageRepository *bool `pulumi:"ignoreCreateImageRepository"`
	// Application microservice type: M for service mesh, N for normal application, G for gateway application.
	MicroserviceType string `pulumi:"microserviceType"`
	// ID of the dataset to be bound.
	ProgramId *string `pulumi:"programId"`
	// N/A.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// List of service configuration information.
	ServiceConfigLists []ApplicationServiceConfigList `pulumi:"serviceConfigLists"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Application description.
	ApplicationDesc pulumi.StringPtrInput
	// Application log configuration, deprecated parameter.
	ApplicationLogConfig pulumi.StringPtrInput
	// Application name.
	ApplicationName pulumi.StringInput
	// Application resource type, deprecated parameter.
	ApplicationResourceType pulumi.StringPtrInput
	// Application runtime type.
	ApplicationRuntimeType pulumi.StringPtrInput
	// Application type: V for virtual machine, C for container, S for serverless.
	ApplicationType pulumi.StringInput
	// Ignore creating image repository.
	IgnoreCreateImageRepository pulumi.BoolPtrInput
	// Application microservice type: M for service mesh, N for normal application, G for gateway application.
	MicroserviceType pulumi.StringInput
	// ID of the dataset to be bound.
	ProgramId pulumi.StringPtrInput
	// N/A.
	ProgramIdLists pulumi.StringArrayInput
	// List of service configuration information.
	ServiceConfigLists ApplicationServiceConfigListArrayInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Application description.
func (o ApplicationOutput) ApplicationDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationDesc }).(pulumi.StringPtrOutput)
}

// Application log configuration, deprecated parameter.
func (o ApplicationOutput) ApplicationLogConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationLogConfig }).(pulumi.StringPtrOutput)
}

// Application name.
func (o ApplicationOutput) ApplicationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationName }).(pulumi.StringOutput)
}

// Application resource type, deprecated parameter.
func (o ApplicationOutput) ApplicationResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationResourceType }).(pulumi.StringPtrOutput)
}

// Application runtime type.
func (o ApplicationOutput) ApplicationRuntimeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ApplicationRuntimeType }).(pulumi.StringPtrOutput)
}

// Application type: V for virtual machine, C for container, S for serverless.
func (o ApplicationOutput) ApplicationType() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationType }).(pulumi.StringOutput)
}

// Ignore creating image repository.
func (o ApplicationOutput) IgnoreCreateImageRepository() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.IgnoreCreateImageRepository }).(pulumi.BoolPtrOutput)
}

// Application microservice type: M for service mesh, N for normal application, G for gateway application.
func (o ApplicationOutput) MicroserviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.MicroserviceType }).(pulumi.StringOutput)
}

// ID of the dataset to be bound.
func (o ApplicationOutput) ProgramId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.ProgramId }).(pulumi.StringPtrOutput)
}

// N/A.
func (o ApplicationOutput) ProgramIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Application) pulumi.StringArrayOutput { return v.ProgramIdLists }).(pulumi.StringArrayOutput)
}

// List of service configuration information.
func (o ApplicationOutput) ServiceConfigLists() ApplicationServiceConfigListArrayOutput {
	return o.ApplyT(func(v *Application) ApplicationServiceConfigListArrayOutput { return v.ServiceConfigLists }).(ApplicationServiceConfigListArrayOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
