// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf applicationReleaseConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewApplicationReleaseConfig(ctx, "applicationReleaseConfig", &Tsf.ApplicationReleaseConfigArgs{
//				ConfigId:    pulumi.String("dcfg-nalqbqwv"),
//				GroupId:     pulumi.String("group-yxmz72gv"),
//				ReleaseDesc: pulumi.String("terraform-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tsf application_release_config can be imported using the configId#groupId#configReleaseId, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tsf/applicationReleaseConfig:ApplicationReleaseConfig application_release_config dcfg-nalqbqwv#group-yxmz72gv#dcfgr-maeeq2ea
//
// ```
type ApplicationReleaseConfig struct {
	pulumi.CustomResourceState

	// Application ID.
	ApplicationId pulumi.StringOutput `pulumi:"applicationId"`
	// cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// cluster name.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Configuration ID.
	ConfigId pulumi.StringOutput `pulumi:"configId"`
	// configuration item name.
	ConfigName pulumi.StringOutput `pulumi:"configName"`
	// configuration item release ID.
	ConfigReleaseId pulumi.StringOutput `pulumi:"configReleaseId"`
	// configuration item version.
	ConfigVersion pulumi.StringOutput `pulumi:"configVersion"`
	// deployment group ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// deployment group name.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// Namespace ID.
	NamespaceId pulumi.StringOutput `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName pulumi.StringOutput `pulumi:"namespaceName"`
	// release description.
	ReleaseDesc pulumi.StringOutput `pulumi:"releaseDesc"`
	// release time.
	ReleaseTime pulumi.StringOutput `pulumi:"releaseTime"`
}

// NewApplicationReleaseConfig registers a new resource with the given unique name, arguments, and options.
func NewApplicationReleaseConfig(ctx *pulumi.Context,
	name string, args *ApplicationReleaseConfigArgs, opts ...pulumi.ResourceOption) (*ApplicationReleaseConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConfigId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigId'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApplicationReleaseConfig
	err := ctx.RegisterResource("tencentcloud:Tsf/applicationReleaseConfig:ApplicationReleaseConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationReleaseConfig gets an existing ApplicationReleaseConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationReleaseConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationReleaseConfigState, opts ...pulumi.ResourceOption) (*ApplicationReleaseConfig, error) {
	var resource ApplicationReleaseConfig
	err := ctx.ReadResource("tencentcloud:Tsf/applicationReleaseConfig:ApplicationReleaseConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationReleaseConfig resources.
type applicationReleaseConfigState struct {
	// Application ID.
	ApplicationId *string `pulumi:"applicationId"`
	// cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// Configuration ID.
	ConfigId *string `pulumi:"configId"`
	// configuration item name.
	ConfigName *string `pulumi:"configName"`
	// configuration item release ID.
	ConfigReleaseId *string `pulumi:"configReleaseId"`
	// configuration item version.
	ConfigVersion *string `pulumi:"configVersion"`
	// deployment group ID.
	GroupId *string `pulumi:"groupId"`
	// deployment group name.
	GroupName *string `pulumi:"groupName"`
	// Namespace ID.
	NamespaceId *string `pulumi:"namespaceId"`
	// namespace name.
	NamespaceName *string `pulumi:"namespaceName"`
	// release description.
	ReleaseDesc *string `pulumi:"releaseDesc"`
	// release time.
	ReleaseTime *string `pulumi:"releaseTime"`
}

type ApplicationReleaseConfigState struct {
	// Application ID.
	ApplicationId pulumi.StringPtrInput
	// cluster ID.
	ClusterId pulumi.StringPtrInput
	// cluster name.
	ClusterName pulumi.StringPtrInput
	// Configuration ID.
	ConfigId pulumi.StringPtrInput
	// configuration item name.
	ConfigName pulumi.StringPtrInput
	// configuration item release ID.
	ConfigReleaseId pulumi.StringPtrInput
	// configuration item version.
	ConfigVersion pulumi.StringPtrInput
	// deployment group ID.
	GroupId pulumi.StringPtrInput
	// deployment group name.
	GroupName pulumi.StringPtrInput
	// Namespace ID.
	NamespaceId pulumi.StringPtrInput
	// namespace name.
	NamespaceName pulumi.StringPtrInput
	// release description.
	ReleaseDesc pulumi.StringPtrInput
	// release time.
	ReleaseTime pulumi.StringPtrInput
}

func (ApplicationReleaseConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationReleaseConfigState)(nil)).Elem()
}

type applicationReleaseConfigArgs struct {
	// Configuration ID.
	ConfigId string `pulumi:"configId"`
	// deployment group ID.
	GroupId string `pulumi:"groupId"`
	// release description.
	ReleaseDesc *string `pulumi:"releaseDesc"`
}

// The set of arguments for constructing a ApplicationReleaseConfig resource.
type ApplicationReleaseConfigArgs struct {
	// Configuration ID.
	ConfigId pulumi.StringInput
	// deployment group ID.
	GroupId pulumi.StringInput
	// release description.
	ReleaseDesc pulumi.StringPtrInput
}

func (ApplicationReleaseConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationReleaseConfigArgs)(nil)).Elem()
}

type ApplicationReleaseConfigInput interface {
	pulumi.Input

	ToApplicationReleaseConfigOutput() ApplicationReleaseConfigOutput
	ToApplicationReleaseConfigOutputWithContext(ctx context.Context) ApplicationReleaseConfigOutput
}

func (*ApplicationReleaseConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReleaseConfig)(nil)).Elem()
}

func (i *ApplicationReleaseConfig) ToApplicationReleaseConfigOutput() ApplicationReleaseConfigOutput {
	return i.ToApplicationReleaseConfigOutputWithContext(context.Background())
}

func (i *ApplicationReleaseConfig) ToApplicationReleaseConfigOutputWithContext(ctx context.Context) ApplicationReleaseConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReleaseConfigOutput)
}

// ApplicationReleaseConfigArrayInput is an input type that accepts ApplicationReleaseConfigArray and ApplicationReleaseConfigArrayOutput values.
// You can construct a concrete instance of `ApplicationReleaseConfigArrayInput` via:
//
//	ApplicationReleaseConfigArray{ ApplicationReleaseConfigArgs{...} }
type ApplicationReleaseConfigArrayInput interface {
	pulumi.Input

	ToApplicationReleaseConfigArrayOutput() ApplicationReleaseConfigArrayOutput
	ToApplicationReleaseConfigArrayOutputWithContext(context.Context) ApplicationReleaseConfigArrayOutput
}

type ApplicationReleaseConfigArray []ApplicationReleaseConfigInput

func (ApplicationReleaseConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationReleaseConfig)(nil)).Elem()
}

func (i ApplicationReleaseConfigArray) ToApplicationReleaseConfigArrayOutput() ApplicationReleaseConfigArrayOutput {
	return i.ToApplicationReleaseConfigArrayOutputWithContext(context.Background())
}

func (i ApplicationReleaseConfigArray) ToApplicationReleaseConfigArrayOutputWithContext(ctx context.Context) ApplicationReleaseConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReleaseConfigArrayOutput)
}

// ApplicationReleaseConfigMapInput is an input type that accepts ApplicationReleaseConfigMap and ApplicationReleaseConfigMapOutput values.
// You can construct a concrete instance of `ApplicationReleaseConfigMapInput` via:
//
//	ApplicationReleaseConfigMap{ "key": ApplicationReleaseConfigArgs{...} }
type ApplicationReleaseConfigMapInput interface {
	pulumi.Input

	ToApplicationReleaseConfigMapOutput() ApplicationReleaseConfigMapOutput
	ToApplicationReleaseConfigMapOutputWithContext(context.Context) ApplicationReleaseConfigMapOutput
}

type ApplicationReleaseConfigMap map[string]ApplicationReleaseConfigInput

func (ApplicationReleaseConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationReleaseConfig)(nil)).Elem()
}

func (i ApplicationReleaseConfigMap) ToApplicationReleaseConfigMapOutput() ApplicationReleaseConfigMapOutput {
	return i.ToApplicationReleaseConfigMapOutputWithContext(context.Background())
}

func (i ApplicationReleaseConfigMap) ToApplicationReleaseConfigMapOutputWithContext(ctx context.Context) ApplicationReleaseConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationReleaseConfigMapOutput)
}

type ApplicationReleaseConfigOutput struct{ *pulumi.OutputState }

func (ApplicationReleaseConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationReleaseConfig)(nil)).Elem()
}

func (o ApplicationReleaseConfigOutput) ToApplicationReleaseConfigOutput() ApplicationReleaseConfigOutput {
	return o
}

func (o ApplicationReleaseConfigOutput) ToApplicationReleaseConfigOutputWithContext(ctx context.Context) ApplicationReleaseConfigOutput {
	return o
}

// Application ID.
func (o ApplicationReleaseConfigOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ApplicationId }).(pulumi.StringOutput)
}

// cluster ID.
func (o ApplicationReleaseConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// cluster name.
func (o ApplicationReleaseConfigOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Configuration ID.
func (o ApplicationReleaseConfigOutput) ConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ConfigId }).(pulumi.StringOutput)
}

// configuration item name.
func (o ApplicationReleaseConfigOutput) ConfigName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ConfigName }).(pulumi.StringOutput)
}

// configuration item release ID.
func (o ApplicationReleaseConfigOutput) ConfigReleaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ConfigReleaseId }).(pulumi.StringOutput)
}

// configuration item version.
func (o ApplicationReleaseConfigOutput) ConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ConfigVersion }).(pulumi.StringOutput)
}

// deployment group ID.
func (o ApplicationReleaseConfigOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// deployment group name.
func (o ApplicationReleaseConfigOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// Namespace ID.
func (o ApplicationReleaseConfigOutput) NamespaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.NamespaceId }).(pulumi.StringOutput)
}

// namespace name.
func (o ApplicationReleaseConfigOutput) NamespaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.NamespaceName }).(pulumi.StringOutput)
}

// release description.
func (o ApplicationReleaseConfigOutput) ReleaseDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ReleaseDesc }).(pulumi.StringOutput)
}

// release time.
func (o ApplicationReleaseConfigOutput) ReleaseTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationReleaseConfig) pulumi.StringOutput { return v.ReleaseTime }).(pulumi.StringOutput)
}

type ApplicationReleaseConfigArrayOutput struct{ *pulumi.OutputState }

func (ApplicationReleaseConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationReleaseConfig)(nil)).Elem()
}

func (o ApplicationReleaseConfigArrayOutput) ToApplicationReleaseConfigArrayOutput() ApplicationReleaseConfigArrayOutput {
	return o
}

func (o ApplicationReleaseConfigArrayOutput) ToApplicationReleaseConfigArrayOutputWithContext(ctx context.Context) ApplicationReleaseConfigArrayOutput {
	return o
}

func (o ApplicationReleaseConfigArrayOutput) Index(i pulumi.IntInput) ApplicationReleaseConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationReleaseConfig {
		return vs[0].([]*ApplicationReleaseConfig)[vs[1].(int)]
	}).(ApplicationReleaseConfigOutput)
}

type ApplicationReleaseConfigMapOutput struct{ *pulumi.OutputState }

func (ApplicationReleaseConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationReleaseConfig)(nil)).Elem()
}

func (o ApplicationReleaseConfigMapOutput) ToApplicationReleaseConfigMapOutput() ApplicationReleaseConfigMapOutput {
	return o
}

func (o ApplicationReleaseConfigMapOutput) ToApplicationReleaseConfigMapOutputWithContext(ctx context.Context) ApplicationReleaseConfigMapOutput {
	return o
}

func (o ApplicationReleaseConfigMapOutput) MapIndex(k pulumi.StringInput) ApplicationReleaseConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationReleaseConfig {
		return vs[0].(map[string]*ApplicationReleaseConfig)[vs[1].(string)]
	}).(ApplicationReleaseConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReleaseConfigInput)(nil)).Elem(), &ApplicationReleaseConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReleaseConfigArrayInput)(nil)).Elem(), ApplicationReleaseConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationReleaseConfigMapInput)(nil)).Elem(), ApplicationReleaseConfigMap{})
	pulumi.RegisterOutputType(ApplicationReleaseConfigOutput{})
	pulumi.RegisterOutputType(ApplicationReleaseConfigArrayOutput{})
	pulumi.RegisterOutputType(ApplicationReleaseConfigMapOutput{})
}
