// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf unitRule
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewUnitRule(ctx, "unitRule", &Tsf.UnitRuleArgs{
//				Description:       pulumi.String("terraform-desc"),
//				GatewayInstanceId: pulumi.String("gw-ins-rug79a70"),
//				UnitRuleItemLists: tsf.UnitRuleUnitRuleItemListArray{
//					&tsf.UnitRuleUnitRuleItemListArgs{
//						Description:       pulumi.String("rule1-desc"),
//						DestNamespaceId:   pulumi.String("namespace-y8p88eka"),
//						DestNamespaceName: pulumi.String("garden-test_default"),
//						Name:              pulumi.String("Rule1"),
//						Relationship:      pulumi.String("AND"),
//						UnitRuleTagLists: tsf.UnitRuleUnitRuleItemListUnitRuleTagListArray{
//							&tsf.UnitRuleUnitRuleItemListUnitRuleTagListArgs{
//								TagField:    pulumi.String("aaa"),
//								TagOperator: pulumi.String("IN"),
//								TagType:     pulumi.String("U"),
//								TagValue:    pulumi.String("1"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tsf unit_rule can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tsf/unitRule:UnitRule unit_rule unit-rl-zbywqeca
//
// ```
type UnitRule struct {
	pulumi.CustomResourceState

	// rule description.
	Description pulumi.StringOutput `pulumi:"description"`
	// gateway entity ID.
	GatewayInstanceId pulumi.StringOutput `pulumi:"gatewayInstanceId"`
	// rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// rule item ID.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// usage status: enabled/disabled.
	Status pulumi.StringOutput `pulumi:"status"`
	// list of rule items.
	UnitRuleItemLists UnitRuleUnitRuleItemListArrayOutput `pulumi:"unitRuleItemLists"`
}

// NewUnitRule registers a new resource with the given unique name, arguments, and options.
func NewUnitRule(ctx *pulumi.Context,
	name string, args *UnitRuleArgs, opts ...pulumi.ResourceOption) (*UnitRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayInstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UnitRule
	err := ctx.RegisterResource("tencentcloud:Tsf/unitRule:UnitRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUnitRule gets an existing UnitRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUnitRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UnitRuleState, opts ...pulumi.ResourceOption) (*UnitRule, error) {
	var resource UnitRule
	err := ctx.ReadResource("tencentcloud:Tsf/unitRule:UnitRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UnitRule resources.
type unitRuleState struct {
	// rule description.
	Description *string `pulumi:"description"`
	// gateway entity ID.
	GatewayInstanceId *string `pulumi:"gatewayInstanceId"`
	// rule name.
	Name *string `pulumi:"name"`
	// rule item ID.
	RuleId *string `pulumi:"ruleId"`
	// usage status: enabled/disabled.
	Status *string `pulumi:"status"`
	// list of rule items.
	UnitRuleItemLists []UnitRuleUnitRuleItemList `pulumi:"unitRuleItemLists"`
}

type UnitRuleState struct {
	// rule description.
	Description pulumi.StringPtrInput
	// gateway entity ID.
	GatewayInstanceId pulumi.StringPtrInput
	// rule name.
	Name pulumi.StringPtrInput
	// rule item ID.
	RuleId pulumi.StringPtrInput
	// usage status: enabled/disabled.
	Status pulumi.StringPtrInput
	// list of rule items.
	UnitRuleItemLists UnitRuleUnitRuleItemListArrayInput
}

func (UnitRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*unitRuleState)(nil)).Elem()
}

type unitRuleArgs struct {
	// rule description.
	Description *string `pulumi:"description"`
	// gateway entity ID.
	GatewayInstanceId string `pulumi:"gatewayInstanceId"`
	// rule name.
	Name *string `pulumi:"name"`
	// list of rule items.
	UnitRuleItemLists []UnitRuleUnitRuleItemList `pulumi:"unitRuleItemLists"`
}

// The set of arguments for constructing a UnitRule resource.
type UnitRuleArgs struct {
	// rule description.
	Description pulumi.StringPtrInput
	// gateway entity ID.
	GatewayInstanceId pulumi.StringInput
	// rule name.
	Name pulumi.StringPtrInput
	// list of rule items.
	UnitRuleItemLists UnitRuleUnitRuleItemListArrayInput
}

func (UnitRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*unitRuleArgs)(nil)).Elem()
}

type UnitRuleInput interface {
	pulumi.Input

	ToUnitRuleOutput() UnitRuleOutput
	ToUnitRuleOutputWithContext(ctx context.Context) UnitRuleOutput
}

func (*UnitRule) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitRule)(nil)).Elem()
}

func (i *UnitRule) ToUnitRuleOutput() UnitRuleOutput {
	return i.ToUnitRuleOutputWithContext(context.Background())
}

func (i *UnitRule) ToUnitRuleOutputWithContext(ctx context.Context) UnitRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitRuleOutput)
}

// UnitRuleArrayInput is an input type that accepts UnitRuleArray and UnitRuleArrayOutput values.
// You can construct a concrete instance of `UnitRuleArrayInput` via:
//
//	UnitRuleArray{ UnitRuleArgs{...} }
type UnitRuleArrayInput interface {
	pulumi.Input

	ToUnitRuleArrayOutput() UnitRuleArrayOutput
	ToUnitRuleArrayOutputWithContext(context.Context) UnitRuleArrayOutput
}

type UnitRuleArray []UnitRuleInput

func (UnitRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnitRule)(nil)).Elem()
}

func (i UnitRuleArray) ToUnitRuleArrayOutput() UnitRuleArrayOutput {
	return i.ToUnitRuleArrayOutputWithContext(context.Background())
}

func (i UnitRuleArray) ToUnitRuleArrayOutputWithContext(ctx context.Context) UnitRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitRuleArrayOutput)
}

// UnitRuleMapInput is an input type that accepts UnitRuleMap and UnitRuleMapOutput values.
// You can construct a concrete instance of `UnitRuleMapInput` via:
//
//	UnitRuleMap{ "key": UnitRuleArgs{...} }
type UnitRuleMapInput interface {
	pulumi.Input

	ToUnitRuleMapOutput() UnitRuleMapOutput
	ToUnitRuleMapOutputWithContext(context.Context) UnitRuleMapOutput
}

type UnitRuleMap map[string]UnitRuleInput

func (UnitRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnitRule)(nil)).Elem()
}

func (i UnitRuleMap) ToUnitRuleMapOutput() UnitRuleMapOutput {
	return i.ToUnitRuleMapOutputWithContext(context.Background())
}

func (i UnitRuleMap) ToUnitRuleMapOutputWithContext(ctx context.Context) UnitRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitRuleMapOutput)
}

type UnitRuleOutput struct{ *pulumi.OutputState }

func (UnitRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UnitRule)(nil)).Elem()
}

func (o UnitRuleOutput) ToUnitRuleOutput() UnitRuleOutput {
	return o
}

func (o UnitRuleOutput) ToUnitRuleOutputWithContext(ctx context.Context) UnitRuleOutput {
	return o
}

// rule description.
func (o UnitRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// gateway entity ID.
func (o UnitRuleOutput) GatewayInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitRule) pulumi.StringOutput { return v.GatewayInstanceId }).(pulumi.StringOutput)
}

// rule name.
func (o UnitRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// rule item ID.
func (o UnitRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitRule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// usage status: enabled/disabled.
func (o UnitRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UnitRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// list of rule items.
func (o UnitRuleOutput) UnitRuleItemLists() UnitRuleUnitRuleItemListArrayOutput {
	return o.ApplyT(func(v *UnitRule) UnitRuleUnitRuleItemListArrayOutput { return v.UnitRuleItemLists }).(UnitRuleUnitRuleItemListArrayOutput)
}

type UnitRuleArrayOutput struct{ *pulumi.OutputState }

func (UnitRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UnitRule)(nil)).Elem()
}

func (o UnitRuleArrayOutput) ToUnitRuleArrayOutput() UnitRuleArrayOutput {
	return o
}

func (o UnitRuleArrayOutput) ToUnitRuleArrayOutputWithContext(ctx context.Context) UnitRuleArrayOutput {
	return o
}

func (o UnitRuleArrayOutput) Index(i pulumi.IntInput) UnitRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UnitRule {
		return vs[0].([]*UnitRule)[vs[1].(int)]
	}).(UnitRuleOutput)
}

type UnitRuleMapOutput struct{ *pulumi.OutputState }

func (UnitRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UnitRule)(nil)).Elem()
}

func (o UnitRuleMapOutput) ToUnitRuleMapOutput() UnitRuleMapOutput {
	return o
}

func (o UnitRuleMapOutput) ToUnitRuleMapOutputWithContext(ctx context.Context) UnitRuleMapOutput {
	return o
}

func (o UnitRuleMapOutput) MapIndex(k pulumi.StringInput) UnitRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UnitRule {
		return vs[0].(map[string]*UnitRule)[vs[1].(string)]
	}).(UnitRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UnitRuleInput)(nil)).Elem(), &UnitRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitRuleArrayInput)(nil)).Elem(), UnitRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitRuleMapInput)(nil)).Elem(), UnitRuleMap{})
	pulumi.RegisterOutputType(UnitRuleOutput{})
	pulumi.RegisterOutputType(UnitRuleArrayOutput{})
	pulumi.RegisterOutputType(UnitRuleMapOutput{})
}
