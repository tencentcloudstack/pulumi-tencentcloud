// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf operateContainerGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewOperateContainerGroup(ctx, "operateContainerGroup", &Tsf.OperateContainerGroupArgs{
//				GroupId: pulumi.String("group-ynd95rea"),
//				Operate: pulumi.String("stop"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type OperateContainerGroup struct {
	pulumi.CustomResourceState

	// group Id.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// Operation, `start`- start the container, `stop`- stop the container.
	Operate pulumi.StringOutput `pulumi:"operate"`
}

// NewOperateContainerGroup registers a new resource with the given unique name, arguments, and options.
func NewOperateContainerGroup(ctx *pulumi.Context,
	name string, args *OperateContainerGroupArgs, opts ...pulumi.ResourceOption) (*OperateContainerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.Operate == nil {
		return nil, errors.New("invalid value for required argument 'Operate'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OperateContainerGroup
	err := ctx.RegisterResource("tencentcloud:Tsf/operateContainerGroup:OperateContainerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOperateContainerGroup gets an existing OperateContainerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOperateContainerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OperateContainerGroupState, opts ...pulumi.ResourceOption) (*OperateContainerGroup, error) {
	var resource OperateContainerGroup
	err := ctx.ReadResource("tencentcloud:Tsf/operateContainerGroup:OperateContainerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OperateContainerGroup resources.
type operateContainerGroupState struct {
	// group Id.
	GroupId *string `pulumi:"groupId"`
	// Operation, `start`- start the container, `stop`- stop the container.
	Operate *string `pulumi:"operate"`
}

type OperateContainerGroupState struct {
	// group Id.
	GroupId pulumi.StringPtrInput
	// Operation, `start`- start the container, `stop`- stop the container.
	Operate pulumi.StringPtrInput
}

func (OperateContainerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*operateContainerGroupState)(nil)).Elem()
}

type operateContainerGroupArgs struct {
	// group Id.
	GroupId string `pulumi:"groupId"`
	// Operation, `start`- start the container, `stop`- stop the container.
	Operate string `pulumi:"operate"`
}

// The set of arguments for constructing a OperateContainerGroup resource.
type OperateContainerGroupArgs struct {
	// group Id.
	GroupId pulumi.StringInput
	// Operation, `start`- start the container, `stop`- stop the container.
	Operate pulumi.StringInput
}

func (OperateContainerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*operateContainerGroupArgs)(nil)).Elem()
}

type OperateContainerGroupInput interface {
	pulumi.Input

	ToOperateContainerGroupOutput() OperateContainerGroupOutput
	ToOperateContainerGroupOutputWithContext(ctx context.Context) OperateContainerGroupOutput
}

func (*OperateContainerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**OperateContainerGroup)(nil)).Elem()
}

func (i *OperateContainerGroup) ToOperateContainerGroupOutput() OperateContainerGroupOutput {
	return i.ToOperateContainerGroupOutputWithContext(context.Background())
}

func (i *OperateContainerGroup) ToOperateContainerGroupOutputWithContext(ctx context.Context) OperateContainerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperateContainerGroupOutput)
}

// OperateContainerGroupArrayInput is an input type that accepts OperateContainerGroupArray and OperateContainerGroupArrayOutput values.
// You can construct a concrete instance of `OperateContainerGroupArrayInput` via:
//
//	OperateContainerGroupArray{ OperateContainerGroupArgs{...} }
type OperateContainerGroupArrayInput interface {
	pulumi.Input

	ToOperateContainerGroupArrayOutput() OperateContainerGroupArrayOutput
	ToOperateContainerGroupArrayOutputWithContext(context.Context) OperateContainerGroupArrayOutput
}

type OperateContainerGroupArray []OperateContainerGroupInput

func (OperateContainerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperateContainerGroup)(nil)).Elem()
}

func (i OperateContainerGroupArray) ToOperateContainerGroupArrayOutput() OperateContainerGroupArrayOutput {
	return i.ToOperateContainerGroupArrayOutputWithContext(context.Background())
}

func (i OperateContainerGroupArray) ToOperateContainerGroupArrayOutputWithContext(ctx context.Context) OperateContainerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperateContainerGroupArrayOutput)
}

// OperateContainerGroupMapInput is an input type that accepts OperateContainerGroupMap and OperateContainerGroupMapOutput values.
// You can construct a concrete instance of `OperateContainerGroupMapInput` via:
//
//	OperateContainerGroupMap{ "key": OperateContainerGroupArgs{...} }
type OperateContainerGroupMapInput interface {
	pulumi.Input

	ToOperateContainerGroupMapOutput() OperateContainerGroupMapOutput
	ToOperateContainerGroupMapOutputWithContext(context.Context) OperateContainerGroupMapOutput
}

type OperateContainerGroupMap map[string]OperateContainerGroupInput

func (OperateContainerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperateContainerGroup)(nil)).Elem()
}

func (i OperateContainerGroupMap) ToOperateContainerGroupMapOutput() OperateContainerGroupMapOutput {
	return i.ToOperateContainerGroupMapOutputWithContext(context.Background())
}

func (i OperateContainerGroupMap) ToOperateContainerGroupMapOutputWithContext(ctx context.Context) OperateContainerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperateContainerGroupMapOutput)
}

type OperateContainerGroupOutput struct{ *pulumi.OutputState }

func (OperateContainerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperateContainerGroup)(nil)).Elem()
}

func (o OperateContainerGroupOutput) ToOperateContainerGroupOutput() OperateContainerGroupOutput {
	return o
}

func (o OperateContainerGroupOutput) ToOperateContainerGroupOutputWithContext(ctx context.Context) OperateContainerGroupOutput {
	return o
}

// group Id.
func (o OperateContainerGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *OperateContainerGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// Operation, `start`- start the container, `stop`- stop the container.
func (o OperateContainerGroupOutput) Operate() pulumi.StringOutput {
	return o.ApplyT(func(v *OperateContainerGroup) pulumi.StringOutput { return v.Operate }).(pulumi.StringOutput)
}

type OperateContainerGroupArrayOutput struct{ *pulumi.OutputState }

func (OperateContainerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OperateContainerGroup)(nil)).Elem()
}

func (o OperateContainerGroupArrayOutput) ToOperateContainerGroupArrayOutput() OperateContainerGroupArrayOutput {
	return o
}

func (o OperateContainerGroupArrayOutput) ToOperateContainerGroupArrayOutputWithContext(ctx context.Context) OperateContainerGroupArrayOutput {
	return o
}

func (o OperateContainerGroupArrayOutput) Index(i pulumi.IntInput) OperateContainerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OperateContainerGroup {
		return vs[0].([]*OperateContainerGroup)[vs[1].(int)]
	}).(OperateContainerGroupOutput)
}

type OperateContainerGroupMapOutput struct{ *pulumi.OutputState }

func (OperateContainerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OperateContainerGroup)(nil)).Elem()
}

func (o OperateContainerGroupMapOutput) ToOperateContainerGroupMapOutput() OperateContainerGroupMapOutput {
	return o
}

func (o OperateContainerGroupMapOutput) ToOperateContainerGroupMapOutputWithContext(ctx context.Context) OperateContainerGroupMapOutput {
	return o
}

func (o OperateContainerGroupMapOutput) MapIndex(k pulumi.StringInput) OperateContainerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OperateContainerGroup {
		return vs[0].(map[string]*OperateContainerGroup)[vs[1].(string)]
	}).(OperateContainerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OperateContainerGroupInput)(nil)).Elem(), &OperateContainerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperateContainerGroupArrayInput)(nil)).Elem(), OperateContainerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperateContainerGroupMapInput)(nil)).Elem(), OperateContainerGroupMap{})
	pulumi.RegisterOutputType(OperateContainerGroupOutput{})
	pulumi.RegisterOutputType(OperateContainerGroupArrayOutput{})
	pulumi.RegisterOutputType(OperateContainerGroupMapOutput{})
}
