// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tsf

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tsf cluster
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tsf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tsf.NewCluster(ctx, "cluster", &Tsf.ClusterArgs{
//				ClusterCidr:          pulumi.String("9.165.120.0/24"),
//				ClusterDesc:          pulumi.String("test"),
//				ClusterName:          pulumi.String("terraform-test"),
//				ClusterType:          pulumi.String("C"),
//				ClusterVersion:       pulumi.String("1.18.4"),
//				MaxClusterServiceNum: pulumi.Int(128),
//				MaxNodePodNum:        pulumi.Int(32),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//				TsfRegionId: pulumi.String("ap-guangzhou"),
//				VpcId:       pulumi.String("vpc-xxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Cluster struct {
	pulumi.CustomResourceState

	// Abnormal number of deployment groups.
	AbnormalGroupCount pulumi.IntOutput `pulumi:"abnormalGroupCount"`
	// CIDR assigned to cluster containers and service IP.
	ClusterCidr pulumi.StringPtrOutput `pulumi:"clusterCidr"`
	// cluster notes.
	ClusterDesc pulumi.StringPtrOutput `pulumi:"clusterDesc"`
	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Cluster remaining cpu limit.
	ClusterLimitCpu pulumi.StringOutput `pulumi:"clusterLimitCpu"`
	// Cluster remaining memory limit.
	ClusterLimitMem pulumi.StringOutput `pulumi:"clusterLimitMem"`
	// Cluster name.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// cluster remark name.
	ClusterRemarkName pulumi.StringOutput `pulumi:"clusterRemarkName"`
	// cluster status.
	ClusterStatus pulumi.StringOutput `pulumi:"clusterStatus"`
	// The total CPU of the cluster, unit: core.
	ClusterTotalCpu pulumi.Float64Output `pulumi:"clusterTotalCpu"`
	// The total memory of the cluster, unit: G.
	ClusterTotalMem pulumi.Float64Output `pulumi:"clusterTotalMem"`
	// Cluster type.
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// CPU used by the cluster, unit: core.
	ClusterUsedCpu pulumi.Float64Output `pulumi:"clusterUsedCpu"`
	// The memory used by the cluster, unit: G.
	ClusterUsedMem pulumi.Float64Output `pulumi:"clusterUsedMem"`
	// cluster version.
	ClusterVersion pulumi.StringPtrOutput `pulumi:"clusterVersion"`
	// Create time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Delete flag: `true`: can be deleted; `false`: can not be deleted.
	DeleteFlag pulumi.BoolOutput `pulumi:"deleteFlag"`
	// Reasons why clusters cannot be deleted.
	DeleteFlagReason pulumi.StringOutput `pulumi:"deleteFlagReason"`
	// Total number of deployment groups.
	GroupCount pulumi.IntOutput `pulumi:"groupCount"`
	// Number of cluster machine instances.
	InstanceCount pulumi.IntOutput `pulumi:"instanceCount"`
	// api address.
	KuberneteApiServer pulumi.StringPtrOutput `pulumi:"kuberneteApiServer"`
	// native secret.
	KuberneteNativeSecret pulumi.StringPtrOutput `pulumi:"kuberneteNativeSecret"`
	// `K`:kubeconfig, `S`:service account.
	KuberneteNativeType pulumi.StringPtrOutput `pulumi:"kuberneteNativeType"`
	// The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
	MaxClusterServiceNum pulumi.IntPtrOutput `pulumi:"maxClusterServiceNum"`
	// The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
	MaxNodePodNum pulumi.IntPtrOutput `pulumi:"maxNodePodNum"`
	// The number of machine instances in the normal state of the cluster.
	NormalInstanceCount pulumi.IntOutput `pulumi:"normalInstanceCount"`
	// Control information for buttons on the front end.
	OperationInfos ClusterOperationInfoArrayOutput `pulumi:"operationInfos"`
	// The dataset ID to be bound.
	ProgramId pulumi.StringPtrOutput `pulumi:"programId"`
	// Program id list.
	ProgramIdLists pulumi.StringArrayOutput `pulumi:"programIdLists"`
	// Number of Deployment Groups in progress.
	RunGroupCount pulumi.IntOutput `pulumi:"runGroupCount"`
	// Number of machine instances running in the cluster.
	RunInstanceCount pulumi.IntOutput `pulumi:"runInstanceCount"`
	// Number of running service instances.
	RunServiceInstanceCount pulumi.IntOutput `pulumi:"runServiceInstanceCount"`
	// Number of deployment groups in stop.
	StopGroupCount pulumi.IntOutput `pulumi:"stopGroupCount"`
	// Subnet id.
	SubnetId pulumi.StringPtrOutput `pulumi:"subnetId"`
	// Tag description list.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// The TSF region to which the cluster belongs.
	TsfRegionId pulumi.StringPtrOutput `pulumi:"tsfRegionId"`
	// Name of the TSF region to which the cluster belongs.
	TsfRegionName pulumi.StringOutput `pulumi:"tsfRegionName"`
	// The TSF availability zone to which the cluster belongs.
	TsfZoneId pulumi.StringPtrOutput `pulumi:"tsfZoneId"`
	// The name of the TSF availability zone to which the cluster belongs.
	TsfZoneName pulumi.StringOutput `pulumi:"tsfZoneName"`
	// Update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// Vpc id.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Cluster
	err := ctx.RegisterResource("tencentcloud:Tsf/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("tencentcloud:Tsf/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	// Abnormal number of deployment groups.
	AbnormalGroupCount *int `pulumi:"abnormalGroupCount"`
	// CIDR assigned to cluster containers and service IP.
	ClusterCidr *string `pulumi:"clusterCidr"`
	// cluster notes.
	ClusterDesc *string `pulumi:"clusterDesc"`
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Cluster remaining cpu limit.
	ClusterLimitCpu *string `pulumi:"clusterLimitCpu"`
	// Cluster remaining memory limit.
	ClusterLimitMem *string `pulumi:"clusterLimitMem"`
	// Cluster name.
	ClusterName *string `pulumi:"clusterName"`
	// cluster remark name.
	ClusterRemarkName *string `pulumi:"clusterRemarkName"`
	// cluster status.
	ClusterStatus *string `pulumi:"clusterStatus"`
	// The total CPU of the cluster, unit: core.
	ClusterTotalCpu *float64 `pulumi:"clusterTotalCpu"`
	// The total memory of the cluster, unit: G.
	ClusterTotalMem *float64 `pulumi:"clusterTotalMem"`
	// Cluster type.
	ClusterType *string `pulumi:"clusterType"`
	// CPU used by the cluster, unit: core.
	ClusterUsedCpu *float64 `pulumi:"clusterUsedCpu"`
	// The memory used by the cluster, unit: G.
	ClusterUsedMem *float64 `pulumi:"clusterUsedMem"`
	// cluster version.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// Create time.
	CreateTime *string `pulumi:"createTime"`
	// Delete flag: `true`: can be deleted; `false`: can not be deleted.
	DeleteFlag *bool `pulumi:"deleteFlag"`
	// Reasons why clusters cannot be deleted.
	DeleteFlagReason *string `pulumi:"deleteFlagReason"`
	// Total number of deployment groups.
	GroupCount *int `pulumi:"groupCount"`
	// Number of cluster machine instances.
	InstanceCount *int `pulumi:"instanceCount"`
	// api address.
	KuberneteApiServer *string `pulumi:"kuberneteApiServer"`
	// native secret.
	KuberneteNativeSecret *string `pulumi:"kuberneteNativeSecret"`
	// `K`:kubeconfig, `S`:service account.
	KuberneteNativeType *string `pulumi:"kuberneteNativeType"`
	// The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
	MaxClusterServiceNum *int `pulumi:"maxClusterServiceNum"`
	// The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
	MaxNodePodNum *int `pulumi:"maxNodePodNum"`
	// The number of machine instances in the normal state of the cluster.
	NormalInstanceCount *int `pulumi:"normalInstanceCount"`
	// Control information for buttons on the front end.
	OperationInfos []ClusterOperationInfo `pulumi:"operationInfos"`
	// The dataset ID to be bound.
	ProgramId *string `pulumi:"programId"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// Number of Deployment Groups in progress.
	RunGroupCount *int `pulumi:"runGroupCount"`
	// Number of machine instances running in the cluster.
	RunInstanceCount *int `pulumi:"runInstanceCount"`
	// Number of running service instances.
	RunServiceInstanceCount *int `pulumi:"runServiceInstanceCount"`
	// Number of deployment groups in stop.
	StopGroupCount *int `pulumi:"stopGroupCount"`
	// Subnet id.
	SubnetId *string `pulumi:"subnetId"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// The TSF region to which the cluster belongs.
	TsfRegionId *string `pulumi:"tsfRegionId"`
	// Name of the TSF region to which the cluster belongs.
	TsfRegionName *string `pulumi:"tsfRegionName"`
	// The TSF availability zone to which the cluster belongs.
	TsfZoneId *string `pulumi:"tsfZoneId"`
	// The name of the TSF availability zone to which the cluster belongs.
	TsfZoneName *string `pulumi:"tsfZoneName"`
	// Update time.
	UpdateTime *string `pulumi:"updateTime"`
	// Vpc id.
	VpcId *string `pulumi:"vpcId"`
}

type ClusterState struct {
	// Abnormal number of deployment groups.
	AbnormalGroupCount pulumi.IntPtrInput
	// CIDR assigned to cluster containers and service IP.
	ClusterCidr pulumi.StringPtrInput
	// cluster notes.
	ClusterDesc pulumi.StringPtrInput
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Cluster remaining cpu limit.
	ClusterLimitCpu pulumi.StringPtrInput
	// Cluster remaining memory limit.
	ClusterLimitMem pulumi.StringPtrInput
	// Cluster name.
	ClusterName pulumi.StringPtrInput
	// cluster remark name.
	ClusterRemarkName pulumi.StringPtrInput
	// cluster status.
	ClusterStatus pulumi.StringPtrInput
	// The total CPU of the cluster, unit: core.
	ClusterTotalCpu pulumi.Float64PtrInput
	// The total memory of the cluster, unit: G.
	ClusterTotalMem pulumi.Float64PtrInput
	// Cluster type.
	ClusterType pulumi.StringPtrInput
	// CPU used by the cluster, unit: core.
	ClusterUsedCpu pulumi.Float64PtrInput
	// The memory used by the cluster, unit: G.
	ClusterUsedMem pulumi.Float64PtrInput
	// cluster version.
	ClusterVersion pulumi.StringPtrInput
	// Create time.
	CreateTime pulumi.StringPtrInput
	// Delete flag: `true`: can be deleted; `false`: can not be deleted.
	DeleteFlag pulumi.BoolPtrInput
	// Reasons why clusters cannot be deleted.
	DeleteFlagReason pulumi.StringPtrInput
	// Total number of deployment groups.
	GroupCount pulumi.IntPtrInput
	// Number of cluster machine instances.
	InstanceCount pulumi.IntPtrInput
	// api address.
	KuberneteApiServer pulumi.StringPtrInput
	// native secret.
	KuberneteNativeSecret pulumi.StringPtrInput
	// `K`:kubeconfig, `S`:service account.
	KuberneteNativeType pulumi.StringPtrInput
	// The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
	MaxClusterServiceNum pulumi.IntPtrInput
	// The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
	MaxNodePodNum pulumi.IntPtrInput
	// The number of machine instances in the normal state of the cluster.
	NormalInstanceCount pulumi.IntPtrInput
	// Control information for buttons on the front end.
	OperationInfos ClusterOperationInfoArrayInput
	// The dataset ID to be bound.
	ProgramId pulumi.StringPtrInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// Number of Deployment Groups in progress.
	RunGroupCount pulumi.IntPtrInput
	// Number of machine instances running in the cluster.
	RunInstanceCount pulumi.IntPtrInput
	// Number of running service instances.
	RunServiceInstanceCount pulumi.IntPtrInput
	// Number of deployment groups in stop.
	StopGroupCount pulumi.IntPtrInput
	// Subnet id.
	SubnetId pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// The TSF region to which the cluster belongs.
	TsfRegionId pulumi.StringPtrInput
	// Name of the TSF region to which the cluster belongs.
	TsfRegionName pulumi.StringPtrInput
	// The TSF availability zone to which the cluster belongs.
	TsfZoneId pulumi.StringPtrInput
	// The name of the TSF availability zone to which the cluster belongs.
	TsfZoneName pulumi.StringPtrInput
	// Update time.
	UpdateTime pulumi.StringPtrInput
	// Vpc id.
	VpcId pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	// CIDR assigned to cluster containers and service IP.
	ClusterCidr *string `pulumi:"clusterCidr"`
	// cluster notes.
	ClusterDesc *string `pulumi:"clusterDesc"`
	// Cluster name.
	ClusterName string `pulumi:"clusterName"`
	// cluster remark name.
	ClusterRemarkName *string `pulumi:"clusterRemarkName"`
	// Cluster type.
	ClusterType string `pulumi:"clusterType"`
	// cluster version.
	ClusterVersion *string `pulumi:"clusterVersion"`
	// api address.
	KuberneteApiServer *string `pulumi:"kuberneteApiServer"`
	// native secret.
	KuberneteNativeSecret *string `pulumi:"kuberneteNativeSecret"`
	// `K`:kubeconfig, `S`:service account.
	KuberneteNativeType *string `pulumi:"kuberneteNativeType"`
	// The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
	MaxClusterServiceNum *int `pulumi:"maxClusterServiceNum"`
	// The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
	MaxNodePodNum *int `pulumi:"maxNodePodNum"`
	// The dataset ID to be bound.
	ProgramId *string `pulumi:"programId"`
	// Program id list.
	ProgramIdLists []string `pulumi:"programIdLists"`
	// Subnet id.
	SubnetId *string `pulumi:"subnetId"`
	// Tag description list.
	Tags map[string]interface{} `pulumi:"tags"`
	// The TSF region to which the cluster belongs.
	TsfRegionId *string `pulumi:"tsfRegionId"`
	// The TSF availability zone to which the cluster belongs.
	TsfZoneId *string `pulumi:"tsfZoneId"`
	// Vpc id.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	// CIDR assigned to cluster containers and service IP.
	ClusterCidr pulumi.StringPtrInput
	// cluster notes.
	ClusterDesc pulumi.StringPtrInput
	// Cluster name.
	ClusterName pulumi.StringInput
	// cluster remark name.
	ClusterRemarkName pulumi.StringPtrInput
	// Cluster type.
	ClusterType pulumi.StringInput
	// cluster version.
	ClusterVersion pulumi.StringPtrInput
	// api address.
	KuberneteApiServer pulumi.StringPtrInput
	// native secret.
	KuberneteNativeSecret pulumi.StringPtrInput
	// `K`:kubeconfig, `S`:service account.
	KuberneteNativeType pulumi.StringPtrInput
	// The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
	MaxClusterServiceNum pulumi.IntPtrInput
	// The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
	MaxNodePodNum pulumi.IntPtrInput
	// The dataset ID to be bound.
	ProgramId pulumi.StringPtrInput
	// Program id list.
	ProgramIdLists pulumi.StringArrayInput
	// Subnet id.
	SubnetId pulumi.StringPtrInput
	// Tag description list.
	Tags pulumi.MapInput
	// The TSF region to which the cluster belongs.
	TsfRegionId pulumi.StringPtrInput
	// The TSF availability zone to which the cluster belongs.
	TsfZoneId pulumi.StringPtrInput
	// Vpc id.
	VpcId pulumi.StringInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}

type ClusterInput interface {
	pulumi.Input

	ToClusterOutput() ClusterOutput
	ToClusterOutputWithContext(ctx context.Context) ClusterOutput
}

func (*Cluster) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (i *Cluster) ToClusterOutput() ClusterOutput {
	return i.ToClusterOutputWithContext(context.Background())
}

func (i *Cluster) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterOutput)
}

// ClusterArrayInput is an input type that accepts ClusterArray and ClusterArrayOutput values.
// You can construct a concrete instance of `ClusterArrayInput` via:
//
//	ClusterArray{ ClusterArgs{...} }
type ClusterArrayInput interface {
	pulumi.Input

	ToClusterArrayOutput() ClusterArrayOutput
	ToClusterArrayOutputWithContext(context.Context) ClusterArrayOutput
}

type ClusterArray []ClusterInput

func (ClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (i ClusterArray) ToClusterArrayOutput() ClusterArrayOutput {
	return i.ToClusterArrayOutputWithContext(context.Background())
}

func (i ClusterArray) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterArrayOutput)
}

// ClusterMapInput is an input type that accepts ClusterMap and ClusterMapOutput values.
// You can construct a concrete instance of `ClusterMapInput` via:
//
//	ClusterMap{ "key": ClusterArgs{...} }
type ClusterMapInput interface {
	pulumi.Input

	ToClusterMapOutput() ClusterMapOutput
	ToClusterMapOutputWithContext(context.Context) ClusterMapOutput
}

type ClusterMap map[string]ClusterInput

func (ClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (i ClusterMap) ToClusterMapOutput() ClusterMapOutput {
	return i.ToClusterMapOutputWithContext(context.Background())
}

func (i ClusterMap) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMapOutput)
}

type ClusterOutput struct{ *pulumi.OutputState }

func (ClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cluster)(nil)).Elem()
}

func (o ClusterOutput) ToClusterOutput() ClusterOutput {
	return o
}

func (o ClusterOutput) ToClusterOutputWithContext(ctx context.Context) ClusterOutput {
	return o
}

// Abnormal number of deployment groups.
func (o ClusterOutput) AbnormalGroupCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.AbnormalGroupCount }).(pulumi.IntOutput)
}

// CIDR assigned to cluster containers and service IP.
func (o ClusterOutput) ClusterCidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterCidr }).(pulumi.StringPtrOutput)
}

// cluster notes.
func (o ClusterOutput) ClusterDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterDesc }).(pulumi.StringPtrOutput)
}

// Cluster ID.
func (o ClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Cluster remaining cpu limit.
func (o ClusterOutput) ClusterLimitCpu() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterLimitCpu }).(pulumi.StringOutput)
}

// Cluster remaining memory limit.
func (o ClusterOutput) ClusterLimitMem() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterLimitMem }).(pulumi.StringOutput)
}

// Cluster name.
func (o ClusterOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// cluster remark name.
func (o ClusterOutput) ClusterRemarkName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterRemarkName }).(pulumi.StringOutput)
}

// cluster status.
func (o ClusterOutput) ClusterStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterStatus }).(pulumi.StringOutput)
}

// The total CPU of the cluster, unit: core.
func (o ClusterOutput) ClusterTotalCpu() pulumi.Float64Output {
	return o.ApplyT(func(v *Cluster) pulumi.Float64Output { return v.ClusterTotalCpu }).(pulumi.Float64Output)
}

// The total memory of the cluster, unit: G.
func (o ClusterOutput) ClusterTotalMem() pulumi.Float64Output {
	return o.ApplyT(func(v *Cluster) pulumi.Float64Output { return v.ClusterTotalMem }).(pulumi.Float64Output)
}

// Cluster type.
func (o ClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// CPU used by the cluster, unit: core.
func (o ClusterOutput) ClusterUsedCpu() pulumi.Float64Output {
	return o.ApplyT(func(v *Cluster) pulumi.Float64Output { return v.ClusterUsedCpu }).(pulumi.Float64Output)
}

// The memory used by the cluster, unit: G.
func (o ClusterOutput) ClusterUsedMem() pulumi.Float64Output {
	return o.ApplyT(func(v *Cluster) pulumi.Float64Output { return v.ClusterUsedMem }).(pulumi.Float64Output)
}

// cluster version.
func (o ClusterOutput) ClusterVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ClusterVersion }).(pulumi.StringPtrOutput)
}

// Create time.
func (o ClusterOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Delete flag: `true`: can be deleted; `false`: can not be deleted.
func (o ClusterOutput) DeleteFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v *Cluster) pulumi.BoolOutput { return v.DeleteFlag }).(pulumi.BoolOutput)
}

// Reasons why clusters cannot be deleted.
func (o ClusterOutput) DeleteFlagReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.DeleteFlagReason }).(pulumi.StringOutput)
}

// Total number of deployment groups.
func (o ClusterOutput) GroupCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.GroupCount }).(pulumi.IntOutput)
}

// Number of cluster machine instances.
func (o ClusterOutput) InstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.InstanceCount }).(pulumi.IntOutput)
}

// api address.
func (o ClusterOutput) KuberneteApiServer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KuberneteApiServer }).(pulumi.StringPtrOutput)
}

// native secret.
func (o ClusterOutput) KuberneteNativeSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KuberneteNativeSecret }).(pulumi.StringPtrOutput)
}

// `K`:kubeconfig, `S`:service account.
func (o ClusterOutput) KuberneteNativeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.KuberneteNativeType }).(pulumi.StringPtrOutput)
}

// The maximum number of services in the cluster. The value ranges from 32 to 32768. If it is not a power of 2, the nearest power of 2 will be taken up.
func (o ClusterOutput) MaxClusterServiceNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.MaxClusterServiceNum }).(pulumi.IntPtrOutput)
}

// The maximum number of Pods on each Node in the cluster. The value ranges from 4 to 256. When the value is not a power of 2, the nearest power of 2 will be taken up.
func (o ClusterOutput) MaxNodePodNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntPtrOutput { return v.MaxNodePodNum }).(pulumi.IntPtrOutput)
}

// The number of machine instances in the normal state of the cluster.
func (o ClusterOutput) NormalInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.NormalInstanceCount }).(pulumi.IntOutput)
}

// Control information for buttons on the front end.
func (o ClusterOutput) OperationInfos() ClusterOperationInfoArrayOutput {
	return o.ApplyT(func(v *Cluster) ClusterOperationInfoArrayOutput { return v.OperationInfos }).(ClusterOperationInfoArrayOutput)
}

// The dataset ID to be bound.
func (o ClusterOutput) ProgramId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.ProgramId }).(pulumi.StringPtrOutput)
}

// Program id list.
func (o ClusterOutput) ProgramIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringArrayOutput { return v.ProgramIdLists }).(pulumi.StringArrayOutput)
}

// Number of Deployment Groups in progress.
func (o ClusterOutput) RunGroupCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.RunGroupCount }).(pulumi.IntOutput)
}

// Number of machine instances running in the cluster.
func (o ClusterOutput) RunInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.RunInstanceCount }).(pulumi.IntOutput)
}

// Number of running service instances.
func (o ClusterOutput) RunServiceInstanceCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.RunServiceInstanceCount }).(pulumi.IntOutput)
}

// Number of deployment groups in stop.
func (o ClusterOutput) StopGroupCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Cluster) pulumi.IntOutput { return v.StopGroupCount }).(pulumi.IntOutput)
}

// Subnet id.
func (o ClusterOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Tag description list.
func (o ClusterOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *Cluster) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// The TSF region to which the cluster belongs.
func (o ClusterOutput) TsfRegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TsfRegionId }).(pulumi.StringPtrOutput)
}

// Name of the TSF region to which the cluster belongs.
func (o ClusterOutput) TsfRegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TsfRegionName }).(pulumi.StringOutput)
}

// The TSF availability zone to which the cluster belongs.
func (o ClusterOutput) TsfZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringPtrOutput { return v.TsfZoneId }).(pulumi.StringPtrOutput)
}

// The name of the TSF availability zone to which the cluster belongs.
func (o ClusterOutput) TsfZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.TsfZoneName }).(pulumi.StringOutput)
}

// Update time.
func (o ClusterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// Vpc id.
func (o ClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Cluster) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ClusterArrayOutput struct{ *pulumi.OutputState }

func (ClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cluster)(nil)).Elem()
}

func (o ClusterArrayOutput) ToClusterArrayOutput() ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) ToClusterArrayOutputWithContext(ctx context.Context) ClusterArrayOutput {
	return o
}

func (o ClusterArrayOutput) Index(i pulumi.IntInput) ClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].([]*Cluster)[vs[1].(int)]
	}).(ClusterOutput)
}

type ClusterMapOutput struct{ *pulumi.OutputState }

func (ClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cluster)(nil)).Elem()
}

func (o ClusterMapOutput) ToClusterMapOutput() ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) ToClusterMapOutputWithContext(ctx context.Context) ClusterMapOutput {
	return o
}

func (o ClusterMapOutput) MapIndex(k pulumi.StringInput) ClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cluster {
		return vs[0].(map[string]*Cluster)[vs[1].(string)]
	}).(ClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterInput)(nil)).Elem(), &Cluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterArrayInput)(nil)).Elem(), ClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMapInput)(nil)).Elem(), ClusterMap{})
	pulumi.RegisterOutputType(ClusterOutput{})
	pulumi.RegisterOutputType(ClusterArrayOutput{})
	pulumi.RegisterOutputType(ClusterMapOutput{})
}
