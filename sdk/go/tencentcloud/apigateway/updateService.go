// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a apigateway updateService
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.NewUpdateService(ctx, "example", &ApiGateway.UpdateServiceArgs{
//				EnvironmentName: pulumi.String("test"),
//				ServiceId:       pulumi.String("service-oczq2nyk"),
//				VersionName:     pulumi.String("20240204142759-b5a4f741-adc0-4964-b01b-2a4a04ff6964"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UpdateService struct {
	pulumi.CustomResourceState

	// The name of the environment to be switched, currently supporting three environments: test (test environment), prepub (pre release environment), and release (release environment).
	EnvironmentName pulumi.StringOutput `pulumi:"environmentName"`
	// Service ID.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The version number of the switch.
	VersionName pulumi.StringOutput `pulumi:"versionName"`
}

// NewUpdateService registers a new resource with the given unique name, arguments, and options.
func NewUpdateService(ctx *pulumi.Context,
	name string, args *UpdateServiceArgs, opts ...pulumi.ResourceOption) (*UpdateService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.VersionName == nil {
		return nil, errors.New("invalid value for required argument 'VersionName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UpdateService
	err := ctx.RegisterResource("tencentcloud:ApiGateway/updateService:UpdateService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpdateService gets an existing UpdateService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpdateService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpdateServiceState, opts ...pulumi.ResourceOption) (*UpdateService, error) {
	var resource UpdateService
	err := ctx.ReadResource("tencentcloud:ApiGateway/updateService:UpdateService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpdateService resources.
type updateServiceState struct {
	// The name of the environment to be switched, currently supporting three environments: test (test environment), prepub (pre release environment), and release (release environment).
	EnvironmentName *string `pulumi:"environmentName"`
	// Service ID.
	ServiceId *string `pulumi:"serviceId"`
	// The version number of the switch.
	VersionName *string `pulumi:"versionName"`
}

type UpdateServiceState struct {
	// The name of the environment to be switched, currently supporting three environments: test (test environment), prepub (pre release environment), and release (release environment).
	EnvironmentName pulumi.StringPtrInput
	// Service ID.
	ServiceId pulumi.StringPtrInput
	// The version number of the switch.
	VersionName pulumi.StringPtrInput
}

func (UpdateServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*updateServiceState)(nil)).Elem()
}

type updateServiceArgs struct {
	// The name of the environment to be switched, currently supporting three environments: test (test environment), prepub (pre release environment), and release (release environment).
	EnvironmentName string `pulumi:"environmentName"`
	// Service ID.
	ServiceId string `pulumi:"serviceId"`
	// The version number of the switch.
	VersionName string `pulumi:"versionName"`
}

// The set of arguments for constructing a UpdateService resource.
type UpdateServiceArgs struct {
	// The name of the environment to be switched, currently supporting three environments: test (test environment), prepub (pre release environment), and release (release environment).
	EnvironmentName pulumi.StringInput
	// Service ID.
	ServiceId pulumi.StringInput
	// The version number of the switch.
	VersionName pulumi.StringInput
}

func (UpdateServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*updateServiceArgs)(nil)).Elem()
}

type UpdateServiceInput interface {
	pulumi.Input

	ToUpdateServiceOutput() UpdateServiceOutput
	ToUpdateServiceOutputWithContext(ctx context.Context) UpdateServiceOutput
}

func (*UpdateService) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateService)(nil)).Elem()
}

func (i *UpdateService) ToUpdateServiceOutput() UpdateServiceOutput {
	return i.ToUpdateServiceOutputWithContext(context.Background())
}

func (i *UpdateService) ToUpdateServiceOutputWithContext(ctx context.Context) UpdateServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateServiceOutput)
}

// UpdateServiceArrayInput is an input type that accepts UpdateServiceArray and UpdateServiceArrayOutput values.
// You can construct a concrete instance of `UpdateServiceArrayInput` via:
//
//	UpdateServiceArray{ UpdateServiceArgs{...} }
type UpdateServiceArrayInput interface {
	pulumi.Input

	ToUpdateServiceArrayOutput() UpdateServiceArrayOutput
	ToUpdateServiceArrayOutputWithContext(context.Context) UpdateServiceArrayOutput
}

type UpdateServiceArray []UpdateServiceInput

func (UpdateServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateService)(nil)).Elem()
}

func (i UpdateServiceArray) ToUpdateServiceArrayOutput() UpdateServiceArrayOutput {
	return i.ToUpdateServiceArrayOutputWithContext(context.Background())
}

func (i UpdateServiceArray) ToUpdateServiceArrayOutputWithContext(ctx context.Context) UpdateServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateServiceArrayOutput)
}

// UpdateServiceMapInput is an input type that accepts UpdateServiceMap and UpdateServiceMapOutput values.
// You can construct a concrete instance of `UpdateServiceMapInput` via:
//
//	UpdateServiceMap{ "key": UpdateServiceArgs{...} }
type UpdateServiceMapInput interface {
	pulumi.Input

	ToUpdateServiceMapOutput() UpdateServiceMapOutput
	ToUpdateServiceMapOutputWithContext(context.Context) UpdateServiceMapOutput
}

type UpdateServiceMap map[string]UpdateServiceInput

func (UpdateServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateService)(nil)).Elem()
}

func (i UpdateServiceMap) ToUpdateServiceMapOutput() UpdateServiceMapOutput {
	return i.ToUpdateServiceMapOutputWithContext(context.Background())
}

func (i UpdateServiceMap) ToUpdateServiceMapOutputWithContext(ctx context.Context) UpdateServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateServiceMapOutput)
}

type UpdateServiceOutput struct{ *pulumi.OutputState }

func (UpdateServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateService)(nil)).Elem()
}

func (o UpdateServiceOutput) ToUpdateServiceOutput() UpdateServiceOutput {
	return o
}

func (o UpdateServiceOutput) ToUpdateServiceOutputWithContext(ctx context.Context) UpdateServiceOutput {
	return o
}

// The name of the environment to be switched, currently supporting three environments: test (test environment), prepub (pre release environment), and release (release environment).
func (o UpdateServiceOutput) EnvironmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateService) pulumi.StringOutput { return v.EnvironmentName }).(pulumi.StringOutput)
}

// Service ID.
func (o UpdateServiceOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateService) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The version number of the switch.
func (o UpdateServiceOutput) VersionName() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateService) pulumi.StringOutput { return v.VersionName }).(pulumi.StringOutput)
}

type UpdateServiceArrayOutput struct{ *pulumi.OutputState }

func (UpdateServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateService)(nil)).Elem()
}

func (o UpdateServiceArrayOutput) ToUpdateServiceArrayOutput() UpdateServiceArrayOutput {
	return o
}

func (o UpdateServiceArrayOutput) ToUpdateServiceArrayOutputWithContext(ctx context.Context) UpdateServiceArrayOutput {
	return o
}

func (o UpdateServiceArrayOutput) Index(i pulumi.IntInput) UpdateServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpdateService {
		return vs[0].([]*UpdateService)[vs[1].(int)]
	}).(UpdateServiceOutput)
}

type UpdateServiceMapOutput struct{ *pulumi.OutputState }

func (UpdateServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateService)(nil)).Elem()
}

func (o UpdateServiceMapOutput) ToUpdateServiceMapOutput() UpdateServiceMapOutput {
	return o
}

func (o UpdateServiceMapOutput) ToUpdateServiceMapOutputWithContext(ctx context.Context) UpdateServiceMapOutput {
	return o
}

func (o UpdateServiceMapOutput) MapIndex(k pulumi.StringInput) UpdateServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpdateService {
		return vs[0].(map[string]*UpdateService)[vs[1].(string)]
	}).(UpdateServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateServiceInput)(nil)).Elem(), &UpdateService{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateServiceArrayInput)(nil)).Elem(), UpdateServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateServiceMapInput)(nil)).Elem(), UpdateServiceMap{})
	pulumi.RegisterOutputType(UpdateServiceOutput{})
	pulumi.RegisterOutputType(UpdateServiceArrayOutput{})
	pulumi.RegisterOutputType(UpdateServiceMapOutput{})
}
