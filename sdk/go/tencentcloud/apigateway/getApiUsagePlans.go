// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of apigateway apiUsagePlan
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleUsagePlan, err := ApiGateway.NewUsagePlan(ctx, "exampleUsagePlan", &ApiGateway.UsagePlanArgs{
//				UsagePlanName:       pulumi.String("tf_example"),
//				UsagePlanDesc:       pulumi.String("desc."),
//				MaxRequestNum:       pulumi.Int(100),
//				MaxRequestNumPreSec: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := ApiGateway.NewService(ctx, "exampleService", &ApiGateway.ServiceArgs{
//				ServiceName: pulumi.String("tf_example"),
//				Protocol:    pulumi.String("http&https"),
//				ServiceDesc: pulumi.String("desc."),
//				NetTypes: pulumi.StringArray{
//					pulumi.String("INNER"),
//					pulumi.String("OUTER"),
//				},
//				IpVersion: pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleApi, err := ApiGateway.NewApi(ctx, "exampleApi", &ApiGateway.ApiArgs{
//				ServiceId:           exampleService.ID(),
//				ApiName:             pulumi.String("tf_example"),
//				ApiDesc:             pulumi.String("my hello api update"),
//				AuthType:            pulumi.String("SECRET"),
//				Protocol:            pulumi.String("HTTP"),
//				EnableCors:          pulumi.Bool(true),
//				RequestConfigPath:   pulumi.String("/user/info"),
//				RequestConfigMethod: pulumi.String("POST"),
//				RequestParameters: apigateway.ApiRequestParameterArray{
//					&apigateway.ApiRequestParameterArgs{
//						Name:         pulumi.String("email"),
//						Position:     pulumi.String("QUERY"),
//						Type:         pulumi.String("string"),
//						Desc:         pulumi.String("desc."),
//						DefaultValue: pulumi.String("test@qq.com"),
//						Required:     pulumi.Bool(true),
//					},
//				},
//				ServiceConfigType:      pulumi.String("HTTP"),
//				ServiceConfigTimeout:   pulumi.Int(10),
//				ServiceConfigUrl:       pulumi.String("http://www.tencent.com"),
//				ServiceConfigPath:      pulumi.String("/user"),
//				ServiceConfigMethod:    pulumi.String("POST"),
//				ResponseType:           pulumi.String("XML"),
//				ResponseSuccessExample: pulumi.String("<note>success</note>"),
//				ResponseFailExample:    pulumi.String("<note>fail</note>"),
//				ResponseErrorCodes: apigateway.ApiResponseErrorCodeArray{
//					&apigateway.ApiResponseErrorCodeArgs{
//						Code:          pulumi.Int(500),
//						Msg:           pulumi.String("system error"),
//						Desc:          pulumi.String("system error code"),
//						ConvertedCode: pulumi.Int(5000),
//						NeedConvert:   pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleUsagePlanAttachment, err := ApiGateway.NewUsagePlanAttachment(ctx, "exampleUsagePlanAttachment", &ApiGateway.UsagePlanAttachmentArgs{
//				UsagePlanId: exampleUsagePlan.ID(),
//				ServiceId:   exampleService.ID(),
//				Environment: pulumi.String("release"),
//				BindType:    pulumi.String("API"),
//				ApiId:       exampleApi.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_ = ApiGateway.GetApiUsagePlansOutput(ctx, apigateway.GetApiUsagePlansOutputArgs{
//				ServiceId: exampleUsagePlanAttachment.ServiceId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupApiUsagePlans(ctx *pulumi.Context, args *LookupApiUsagePlansArgs, opts ...pulumi.InvokeOption) (*LookupApiUsagePlansResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupApiUsagePlansResult
	err := ctx.Invoke("tencentcloud:ApiGateway/getApiUsagePlans:getApiUsagePlans", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApiUsagePlans.
type LookupApiUsagePlansArgs struct {
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// The unique ID of the service to be queried.
	ServiceId string `pulumi:"serviceId"`
}

// A collection of values returned by getApiUsagePlans.
type LookupApiUsagePlansResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// API binding usage plan list.Note: This field may return null, indicating that a valid value cannot be obtained.
	Results []GetApiUsagePlansResult `pulumi:"results"`
	// Service unique ID.Note: This field may return null, indicating that a valid value cannot be obtained.
	ServiceId string `pulumi:"serviceId"`
}

func LookupApiUsagePlansOutput(ctx *pulumi.Context, args LookupApiUsagePlansOutputArgs, opts ...pulumi.InvokeOption) LookupApiUsagePlansResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupApiUsagePlansResult, error) {
			args := v.(LookupApiUsagePlansArgs)
			r, err := LookupApiUsagePlans(ctx, &args, opts...)
			var s LookupApiUsagePlansResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupApiUsagePlansResultOutput)
}

// A collection of arguments for invoking getApiUsagePlans.
type LookupApiUsagePlansOutputArgs struct {
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// The unique ID of the service to be queried.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (LookupApiUsagePlansOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiUsagePlansArgs)(nil)).Elem()
}

// A collection of values returned by getApiUsagePlans.
type LookupApiUsagePlansResultOutput struct{ *pulumi.OutputState }

func (LookupApiUsagePlansResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiUsagePlansResult)(nil)).Elem()
}

func (o LookupApiUsagePlansResultOutput) ToLookupApiUsagePlansResultOutput() LookupApiUsagePlansResultOutput {
	return o
}

func (o LookupApiUsagePlansResultOutput) ToLookupApiUsagePlansResultOutputWithContext(ctx context.Context) LookupApiUsagePlansResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupApiUsagePlansResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiUsagePlansResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupApiUsagePlansResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupApiUsagePlansResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// API binding usage plan list.Note: This field may return null, indicating that a valid value cannot be obtained.
func (o LookupApiUsagePlansResultOutput) Results() GetApiUsagePlansResultArrayOutput {
	return o.ApplyT(func(v LookupApiUsagePlansResult) []GetApiUsagePlansResult { return v.Results }).(GetApiUsagePlansResultArrayOutput)
}

// Service unique ID.Note: This field may return null, indicating that a valid value cannot be obtained.
func (o LookupApiUsagePlansResultOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiUsagePlansResult) string { return v.ServiceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiUsagePlansResultOutput{})
}
