// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of apigateway upstream
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.GetUpstreams(ctx, &apigateway.GetUpstreamsArgs{
//				UpstreamId: "upstream-4n5bfklc",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupUpstreams(ctx *pulumi.Context, args *LookupUpstreamsArgs, opts ...pulumi.InvokeOption) (*LookupUpstreamsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupUpstreamsResult
	err := ctx.Invoke("tencentcloud:ApiGateway/getUpstreams:getUpstreams", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUpstreams.
type LookupUpstreamsArgs struct {
	// ServiceId and ApiId filtering queries.
	Filters []GetUpstreamsFilter `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Backend channel ID.
	UpstreamId string `pulumi:"upstreamId"`
}

// A collection of values returned by getUpstreams.
type LookupUpstreamsResult struct {
	Filters []GetUpstreamsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Query Results.
	Results    []GetUpstreamsResult `pulumi:"results"`
	UpstreamId string               `pulumi:"upstreamId"`
}

func LookupUpstreamsOutput(ctx *pulumi.Context, args LookupUpstreamsOutputArgs, opts ...pulumi.InvokeOption) LookupUpstreamsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupUpstreamsResult, error) {
			args := v.(LookupUpstreamsArgs)
			r, err := LookupUpstreams(ctx, &args, opts...)
			var s LookupUpstreamsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupUpstreamsResultOutput)
}

// A collection of arguments for invoking getUpstreams.
type LookupUpstreamsOutputArgs struct {
	// ServiceId and ApiId filtering queries.
	Filters GetUpstreamsFilterArrayInput `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Backend channel ID.
	UpstreamId pulumi.StringInput `pulumi:"upstreamId"`
}

func (LookupUpstreamsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUpstreamsArgs)(nil)).Elem()
}

// A collection of values returned by getUpstreams.
type LookupUpstreamsResultOutput struct{ *pulumi.OutputState }

func (LookupUpstreamsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUpstreamsResult)(nil)).Elem()
}

func (o LookupUpstreamsResultOutput) ToLookupUpstreamsResultOutput() LookupUpstreamsResultOutput {
	return o
}

func (o LookupUpstreamsResultOutput) ToLookupUpstreamsResultOutputWithContext(ctx context.Context) LookupUpstreamsResultOutput {
	return o
}

func (o LookupUpstreamsResultOutput) Filters() GetUpstreamsFilterArrayOutput {
	return o.ApplyT(func(v LookupUpstreamsResult) []GetUpstreamsFilter { return v.Filters }).(GetUpstreamsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupUpstreamsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupUpstreamsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupUpstreamsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

// Query Results.
func (o LookupUpstreamsResultOutput) Results() GetUpstreamsResultArrayOutput {
	return o.ApplyT(func(v LookupUpstreamsResult) []GetUpstreamsResult { return v.Results }).(GetUpstreamsResultArrayOutput)
}

func (o LookupUpstreamsResultOutput) UpstreamId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamsResult) string { return v.UpstreamId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUpstreamsResultOutput{})
}
