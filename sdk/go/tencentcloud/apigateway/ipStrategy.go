// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create IP strategy of API gateway.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			service, err := ApiGateway.NewService(ctx, "service", &ApiGateway.ServiceArgs{
//				ServiceName: pulumi.String("niceservice"),
//				Protocol:    pulumi.String("http&https"),
//				ServiceDesc: pulumi.String("your nice service"),
//				NetTypes: pulumi.StringArray{
//					pulumi.String("INNER"),
//					pulumi.String("OUTER"),
//				},
//				IpVersion: pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ApiGateway.NewIpStrategy(ctx, "test", &ApiGateway.IpStrategyArgs{
//				ServiceId:    service.ID(),
//				StrategyName: pulumi.String("tf_test"),
//				StrategyType: pulumi.String("BLACK"),
//				StrategyData: pulumi.String("9.9.9.9"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IP strategy of API gateway can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:ApiGateway/ipStrategy:IpStrategy test service-ohxqslqe#IPStrategy-q1lk8ud2
//
// ```
type IpStrategy struct {
	pulumi.CustomResourceState

	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ID of the API gateway service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// IP address data.
	StrategyData pulumi.StringOutput `pulumi:"strategyData"`
	// IP policy ID.
	StrategyId pulumi.StringOutput `pulumi:"strategyId"`
	// User defined strategy name.
	StrategyName pulumi.StringOutput `pulumi:"strategyName"`
	// Blacklist or whitelist.
	StrategyType pulumi.StringOutput `pulumi:"strategyType"`
}

// NewIpStrategy registers a new resource with the given unique name, arguments, and options.
func NewIpStrategy(ctx *pulumi.Context,
	name string, args *IpStrategyArgs, opts ...pulumi.ResourceOption) (*IpStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.StrategyData == nil {
		return nil, errors.New("invalid value for required argument 'StrategyData'")
	}
	if args.StrategyName == nil {
		return nil, errors.New("invalid value for required argument 'StrategyName'")
	}
	if args.StrategyType == nil {
		return nil, errors.New("invalid value for required argument 'StrategyType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpStrategy
	err := ctx.RegisterResource("tencentcloud:ApiGateway/ipStrategy:IpStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpStrategy gets an existing IpStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpStrategyState, opts ...pulumi.ResourceOption) (*IpStrategy, error) {
	var resource IpStrategy
	err := ctx.ReadResource("tencentcloud:ApiGateway/ipStrategy:IpStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpStrategy resources.
type ipStrategyState struct {
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime *string `pulumi:"createTime"`
	// The ID of the API gateway service.
	ServiceId *string `pulumi:"serviceId"`
	// IP address data.
	StrategyData *string `pulumi:"strategyData"`
	// IP policy ID.
	StrategyId *string `pulumi:"strategyId"`
	// User defined strategy name.
	StrategyName *string `pulumi:"strategyName"`
	// Blacklist or whitelist.
	StrategyType *string `pulumi:"strategyType"`
}

type IpStrategyState struct {
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringPtrInput
	// The ID of the API gateway service.
	ServiceId pulumi.StringPtrInput
	// IP address data.
	StrategyData pulumi.StringPtrInput
	// IP policy ID.
	StrategyId pulumi.StringPtrInput
	// User defined strategy name.
	StrategyName pulumi.StringPtrInput
	// Blacklist or whitelist.
	StrategyType pulumi.StringPtrInput
}

func (IpStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipStrategyState)(nil)).Elem()
}

type ipStrategyArgs struct {
	// The ID of the API gateway service.
	ServiceId string `pulumi:"serviceId"`
	// IP address data.
	StrategyData string `pulumi:"strategyData"`
	// User defined strategy name.
	StrategyName string `pulumi:"strategyName"`
	// Blacklist or whitelist.
	StrategyType string `pulumi:"strategyType"`
}

// The set of arguments for constructing a IpStrategy resource.
type IpStrategyArgs struct {
	// The ID of the API gateway service.
	ServiceId pulumi.StringInput
	// IP address data.
	StrategyData pulumi.StringInput
	// User defined strategy name.
	StrategyName pulumi.StringInput
	// Blacklist or whitelist.
	StrategyType pulumi.StringInput
}

func (IpStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipStrategyArgs)(nil)).Elem()
}

type IpStrategyInput interface {
	pulumi.Input

	ToIpStrategyOutput() IpStrategyOutput
	ToIpStrategyOutputWithContext(ctx context.Context) IpStrategyOutput
}

func (*IpStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**IpStrategy)(nil)).Elem()
}

func (i *IpStrategy) ToIpStrategyOutput() IpStrategyOutput {
	return i.ToIpStrategyOutputWithContext(context.Background())
}

func (i *IpStrategy) ToIpStrategyOutputWithContext(ctx context.Context) IpStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpStrategyOutput)
}

// IpStrategyArrayInput is an input type that accepts IpStrategyArray and IpStrategyArrayOutput values.
// You can construct a concrete instance of `IpStrategyArrayInput` via:
//
//	IpStrategyArray{ IpStrategyArgs{...} }
type IpStrategyArrayInput interface {
	pulumi.Input

	ToIpStrategyArrayOutput() IpStrategyArrayOutput
	ToIpStrategyArrayOutputWithContext(context.Context) IpStrategyArrayOutput
}

type IpStrategyArray []IpStrategyInput

func (IpStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpStrategy)(nil)).Elem()
}

func (i IpStrategyArray) ToIpStrategyArrayOutput() IpStrategyArrayOutput {
	return i.ToIpStrategyArrayOutputWithContext(context.Background())
}

func (i IpStrategyArray) ToIpStrategyArrayOutputWithContext(ctx context.Context) IpStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpStrategyArrayOutput)
}

// IpStrategyMapInput is an input type that accepts IpStrategyMap and IpStrategyMapOutput values.
// You can construct a concrete instance of `IpStrategyMapInput` via:
//
//	IpStrategyMap{ "key": IpStrategyArgs{...} }
type IpStrategyMapInput interface {
	pulumi.Input

	ToIpStrategyMapOutput() IpStrategyMapOutput
	ToIpStrategyMapOutputWithContext(context.Context) IpStrategyMapOutput
}

type IpStrategyMap map[string]IpStrategyInput

func (IpStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpStrategy)(nil)).Elem()
}

func (i IpStrategyMap) ToIpStrategyMapOutput() IpStrategyMapOutput {
	return i.ToIpStrategyMapOutputWithContext(context.Background())
}

func (i IpStrategyMap) ToIpStrategyMapOutputWithContext(ctx context.Context) IpStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpStrategyMapOutput)
}

type IpStrategyOutput struct{ *pulumi.OutputState }

func (IpStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpStrategy)(nil)).Elem()
}

func (o IpStrategyOutput) ToIpStrategyOutput() IpStrategyOutput {
	return o
}

func (o IpStrategyOutput) ToIpStrategyOutputWithContext(ctx context.Context) IpStrategyOutput {
	return o
}

// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
func (o IpStrategyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IpStrategy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ID of the API gateway service.
func (o IpStrategyOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpStrategy) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// IP address data.
func (o IpStrategyOutput) StrategyData() pulumi.StringOutput {
	return o.ApplyT(func(v *IpStrategy) pulumi.StringOutput { return v.StrategyData }).(pulumi.StringOutput)
}

// IP policy ID.
func (o IpStrategyOutput) StrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpStrategy) pulumi.StringOutput { return v.StrategyId }).(pulumi.StringOutput)
}

// User defined strategy name.
func (o IpStrategyOutput) StrategyName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpStrategy) pulumi.StringOutput { return v.StrategyName }).(pulumi.StringOutput)
}

// Blacklist or whitelist.
func (o IpStrategyOutput) StrategyType() pulumi.StringOutput {
	return o.ApplyT(func(v *IpStrategy) pulumi.StringOutput { return v.StrategyType }).(pulumi.StringOutput)
}

type IpStrategyArrayOutput struct{ *pulumi.OutputState }

func (IpStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpStrategy)(nil)).Elem()
}

func (o IpStrategyArrayOutput) ToIpStrategyArrayOutput() IpStrategyArrayOutput {
	return o
}

func (o IpStrategyArrayOutput) ToIpStrategyArrayOutputWithContext(ctx context.Context) IpStrategyArrayOutput {
	return o
}

func (o IpStrategyArrayOutput) Index(i pulumi.IntInput) IpStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpStrategy {
		return vs[0].([]*IpStrategy)[vs[1].(int)]
	}).(IpStrategyOutput)
}

type IpStrategyMapOutput struct{ *pulumi.OutputState }

func (IpStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpStrategy)(nil)).Elem()
}

func (o IpStrategyMapOutput) ToIpStrategyMapOutput() IpStrategyMapOutput {
	return o
}

func (o IpStrategyMapOutput) ToIpStrategyMapOutputWithContext(ctx context.Context) IpStrategyMapOutput {
	return o
}

func (o IpStrategyMapOutput) MapIndex(k pulumi.StringInput) IpStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpStrategy {
		return vs[0].(map[string]*IpStrategy)[vs[1].(string)]
	}).(IpStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpStrategyInput)(nil)).Elem(), &IpStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpStrategyArrayInput)(nil)).Elem(), IpStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpStrategyMapInput)(nil)).Elem(), IpStrategyMap{})
	pulumi.RegisterOutputType(IpStrategyOutput{})
	pulumi.RegisterOutputType(IpStrategyArrayOutput{})
	pulumi.RegisterOutputType(IpStrategyMapOutput{})
}
