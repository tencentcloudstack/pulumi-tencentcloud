// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create API gateway usage plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.NewUsagePlan(ctx, "example", &ApiGateway.UsagePlanArgs{
//				MaxRequestNum:       pulumi.Int(100),
//				MaxRequestNumPreSec: pulumi.Int(10),
//				UsagePlanDesc:       pulumi.String("desc."),
//				UsagePlanName:       pulumi.String("tf_example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API gateway usage plan can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:ApiGateway/usagePlan:UsagePlan plan usagePlan-gyeafpab
//
// ```
type UsagePlan struct {
	pulumi.CustomResourceState

	// Attach API keys list.
	AttachApiKeys pulumi.StringArrayOutput `pulumi:"attachApiKeys"`
	// Attach service and API list.
	AttachLists UsagePlanAttachListArrayOutput `pulumi:"attachLists"`
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
	MaxRequestNum pulumi.IntPtrOutput `pulumi:"maxRequestNum"`
	// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
	MaxRequestNumPreSec pulumi.IntPtrOutput `pulumi:"maxRequestNumPreSec"`
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	ModifyTime pulumi.StringOutput `pulumi:"modifyTime"`
	// Custom usage plan description.
	UsagePlanDesc pulumi.StringPtrOutput `pulumi:"usagePlanDesc"`
	// Custom usage plan name.
	UsagePlanName pulumi.StringOutput `pulumi:"usagePlanName"`
}

// NewUsagePlan registers a new resource with the given unique name, arguments, and options.
func NewUsagePlan(ctx *pulumi.Context,
	name string, args *UsagePlanArgs, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UsagePlanName == nil {
		return nil, errors.New("invalid value for required argument 'UsagePlanName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UsagePlan
	err := ctx.RegisterResource("tencentcloud:ApiGateway/usagePlan:UsagePlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsagePlan gets an existing UsagePlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsagePlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsagePlanState, opts ...pulumi.ResourceOption) (*UsagePlan, error) {
	var resource UsagePlan
	err := ctx.ReadResource("tencentcloud:ApiGateway/usagePlan:UsagePlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UsagePlan resources.
type usagePlanState struct {
	// Attach API keys list.
	AttachApiKeys []string `pulumi:"attachApiKeys"`
	// Attach service and API list.
	AttachLists []UsagePlanAttachList `pulumi:"attachLists"`
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime *string `pulumi:"createTime"`
	// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
	MaxRequestNum *int `pulumi:"maxRequestNum"`
	// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
	MaxRequestNumPreSec *int `pulumi:"maxRequestNumPreSec"`
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	ModifyTime *string `pulumi:"modifyTime"`
	// Custom usage plan description.
	UsagePlanDesc *string `pulumi:"usagePlanDesc"`
	// Custom usage plan name.
	UsagePlanName *string `pulumi:"usagePlanName"`
}

type UsagePlanState struct {
	// Attach API keys list.
	AttachApiKeys pulumi.StringArrayInput
	// Attach service and API list.
	AttachLists UsagePlanAttachListArrayInput
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringPtrInput
	// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
	MaxRequestNum pulumi.IntPtrInput
	// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
	MaxRequestNumPreSec pulumi.IntPtrInput
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	ModifyTime pulumi.StringPtrInput
	// Custom usage plan description.
	UsagePlanDesc pulumi.StringPtrInput
	// Custom usage plan name.
	UsagePlanName pulumi.StringPtrInput
}

func (UsagePlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanState)(nil)).Elem()
}

type usagePlanArgs struct {
	// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
	MaxRequestNum *int `pulumi:"maxRequestNum"`
	// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
	MaxRequestNumPreSec *int `pulumi:"maxRequestNumPreSec"`
	// Custom usage plan description.
	UsagePlanDesc *string `pulumi:"usagePlanDesc"`
	// Custom usage plan name.
	UsagePlanName string `pulumi:"usagePlanName"`
}

// The set of arguments for constructing a UsagePlan resource.
type UsagePlanArgs struct {
	// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
	MaxRequestNum pulumi.IntPtrInput
	// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
	MaxRequestNumPreSec pulumi.IntPtrInput
	// Custom usage plan description.
	UsagePlanDesc pulumi.StringPtrInput
	// Custom usage plan name.
	UsagePlanName pulumi.StringInput
}

func (UsagePlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usagePlanArgs)(nil)).Elem()
}

type UsagePlanInput interface {
	pulumi.Input

	ToUsagePlanOutput() UsagePlanOutput
	ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput
}

func (*UsagePlan) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlan)(nil)).Elem()
}

func (i *UsagePlan) ToUsagePlanOutput() UsagePlanOutput {
	return i.ToUsagePlanOutputWithContext(context.Background())
}

func (i *UsagePlan) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanOutput)
}

// UsagePlanArrayInput is an input type that accepts UsagePlanArray and UsagePlanArrayOutput values.
// You can construct a concrete instance of `UsagePlanArrayInput` via:
//
//	UsagePlanArray{ UsagePlanArgs{...} }
type UsagePlanArrayInput interface {
	pulumi.Input

	ToUsagePlanArrayOutput() UsagePlanArrayOutput
	ToUsagePlanArrayOutputWithContext(context.Context) UsagePlanArrayOutput
}

type UsagePlanArray []UsagePlanInput

func (UsagePlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsagePlan)(nil)).Elem()
}

func (i UsagePlanArray) ToUsagePlanArrayOutput() UsagePlanArrayOutput {
	return i.ToUsagePlanArrayOutputWithContext(context.Background())
}

func (i UsagePlanArray) ToUsagePlanArrayOutputWithContext(ctx context.Context) UsagePlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanArrayOutput)
}

// UsagePlanMapInput is an input type that accepts UsagePlanMap and UsagePlanMapOutput values.
// You can construct a concrete instance of `UsagePlanMapInput` via:
//
//	UsagePlanMap{ "key": UsagePlanArgs{...} }
type UsagePlanMapInput interface {
	pulumi.Input

	ToUsagePlanMapOutput() UsagePlanMapOutput
	ToUsagePlanMapOutputWithContext(context.Context) UsagePlanMapOutput
}

type UsagePlanMap map[string]UsagePlanInput

func (UsagePlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsagePlan)(nil)).Elem()
}

func (i UsagePlanMap) ToUsagePlanMapOutput() UsagePlanMapOutput {
	return i.ToUsagePlanMapOutputWithContext(context.Background())
}

func (i UsagePlanMap) ToUsagePlanMapOutputWithContext(ctx context.Context) UsagePlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsagePlanMapOutput)
}

type UsagePlanOutput struct{ *pulumi.OutputState }

func (UsagePlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UsagePlan)(nil)).Elem()
}

func (o UsagePlanOutput) ToUsagePlanOutput() UsagePlanOutput {
	return o
}

func (o UsagePlanOutput) ToUsagePlanOutputWithContext(ctx context.Context) UsagePlanOutput {
	return o
}

// Attach API keys list.
func (o UsagePlanOutput) AttachApiKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringArrayOutput { return v.AttachApiKeys }).(pulumi.StringArrayOutput)
}

// Attach service and API list.
func (o UsagePlanOutput) AttachLists() UsagePlanAttachListArrayOutput {
	return o.ApplyT(func(v *UsagePlan) UsagePlanAttachListArrayOutput { return v.AttachLists }).(UsagePlanAttachListArrayOutput)
}

// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
func (o UsagePlanOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Total number of requests allowed. Valid values: -1, [1,99999999]. The default value is -1, which indicates no limit.
func (o UsagePlanOutput) MaxRequestNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.IntPtrOutput { return v.MaxRequestNum }).(pulumi.IntPtrOutput)
}

// Limit of requests per second. Valid values: -1, [1,2000]. The default value is -1, which indicates no limit.
func (o UsagePlanOutput) MaxRequestNumPreSec() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.IntPtrOutput { return v.MaxRequestNumPreSec }).(pulumi.IntPtrOutput)
}

// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
func (o UsagePlanOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringOutput { return v.ModifyTime }).(pulumi.StringOutput)
}

// Custom usage plan description.
func (o UsagePlanOutput) UsagePlanDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringPtrOutput { return v.UsagePlanDesc }).(pulumi.StringPtrOutput)
}

// Custom usage plan name.
func (o UsagePlanOutput) UsagePlanName() pulumi.StringOutput {
	return o.ApplyT(func(v *UsagePlan) pulumi.StringOutput { return v.UsagePlanName }).(pulumi.StringOutput)
}

type UsagePlanArrayOutput struct{ *pulumi.OutputState }

func (UsagePlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UsagePlan)(nil)).Elem()
}

func (o UsagePlanArrayOutput) ToUsagePlanArrayOutput() UsagePlanArrayOutput {
	return o
}

func (o UsagePlanArrayOutput) ToUsagePlanArrayOutputWithContext(ctx context.Context) UsagePlanArrayOutput {
	return o
}

func (o UsagePlanArrayOutput) Index(i pulumi.IntInput) UsagePlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UsagePlan {
		return vs[0].([]*UsagePlan)[vs[1].(int)]
	}).(UsagePlanOutput)
}

type UsagePlanMapOutput struct{ *pulumi.OutputState }

func (UsagePlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UsagePlan)(nil)).Elem()
}

func (o UsagePlanMapOutput) ToUsagePlanMapOutput() UsagePlanMapOutput {
	return o
}

func (o UsagePlanMapOutput) ToUsagePlanMapOutputWithContext(ctx context.Context) UsagePlanMapOutput {
	return o
}

func (o UsagePlanMapOutput) MapIndex(k pulumi.StringInput) UsagePlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UsagePlan {
		return vs[0].(map[string]*UsagePlan)[vs[1].(string)]
	}).(UsagePlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanInput)(nil)).Elem(), &UsagePlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanArrayInput)(nil)).Elem(), UsagePlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsagePlanMapInput)(nil)).Elem(), UsagePlanMap{})
	pulumi.RegisterOutputType(UsagePlanOutput{})
	pulumi.RegisterOutputType(UsagePlanArrayOutput{})
	pulumi.RegisterOutputType(UsagePlanMapOutput{})
}
