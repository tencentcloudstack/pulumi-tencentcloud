// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this resource to create IP strategy attachment of API gateway.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			serviceService, err := ApiGateway.NewService(ctx, "serviceService", &ApiGateway.ServiceArgs{
//				ServiceName: pulumi.String("niceservice"),
//				Protocol:    pulumi.String("http&https"),
//				ServiceDesc: pulumi.String("your nice service"),
//				NetTypes: pulumi.StringArray{
//					pulumi.String("INNER"),
//					pulumi.String("OUTER"),
//				},
//				IpVersion: pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			testIpStrategy, err := ApiGateway.NewIpStrategy(ctx, "testIpStrategy", &ApiGateway.IpStrategyArgs{
//				ServiceId:    serviceService.ID(),
//				StrategyName: pulumi.String("tf_test"),
//				StrategyType: pulumi.String("BLACK"),
//				StrategyData: pulumi.String("9.9.9.9"),
//			})
//			if err != nil {
//				return err
//			}
//			api, err := ApiGateway.NewApi(ctx, "api", &ApiGateway.ApiArgs{
//				ServiceId:           serviceService.ID(),
//				ApiName:             pulumi.String("tf_example"),
//				ApiDesc:             pulumi.String("my hello api update"),
//				AuthType:            pulumi.String("SECRET"),
//				Protocol:            pulumi.String("HTTP"),
//				EnableCors:          pulumi.Bool(true),
//				RequestConfigPath:   pulumi.String("/user/info"),
//				RequestConfigMethod: pulumi.String("POST"),
//				RequestParameters: apigateway.ApiRequestParameterArray{
//					&apigateway.ApiRequestParameterArgs{
//						Name:         pulumi.String("email"),
//						Position:     pulumi.String("QUERY"),
//						Type:         pulumi.String("string"),
//						Desc:         pulumi.String("your email please?"),
//						DefaultValue: pulumi.String("tom@qq.com"),
//						Required:     pulumi.Bool(true),
//					},
//				},
//				ServiceConfigType:      pulumi.String("HTTP"),
//				ServiceConfigTimeout:   pulumi.Int(10),
//				ServiceConfigUrl:       pulumi.String("http://www.tencent.com"),
//				ServiceConfigPath:      pulumi.String("/user"),
//				ServiceConfigMethod:    pulumi.String("POST"),
//				ResponseType:           pulumi.String("XML"),
//				ResponseSuccessExample: pulumi.String("<note>success</note>"),
//				ResponseFailExample:    pulumi.String("<note>fail</note>"),
//				ResponseErrorCodes: apigateway.ApiResponseErrorCodeArray{
//					&apigateway.ApiResponseErrorCodeArgs{
//						Code:          pulumi.Int(10),
//						Msg:           pulumi.String("system error"),
//						Desc:          pulumi.String("system error code"),
//						ConvertedCode: -10,
//						NeedConvert:   pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			serviceServiceRelease, err := ApiGateway.NewServiceRelease(ctx, "serviceServiceRelease", &ApiGateway.ServiceReleaseArgs{
//				ServiceId:       serviceService.ID(),
//				EnvironmentName: pulumi.String("release"),
//				ReleaseDesc:     pulumi.String("test service release"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ApiGateway.NewStrategyAttachment(ctx, "testStrategyAttachment", &ApiGateway.StrategyAttachmentArgs{
//				ServiceId:       serviceServiceRelease.ServiceId,
//				StrategyId:      testIpStrategy.StrategyId,
//				EnvironmentName: pulumi.String("release"),
//				BindApiId:       api.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IP strategy attachment of API gateway can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:ApiGateway/strategyAttachment:StrategyAttachment test service-pk2r6bcc#IPStrategy-4kz2ljfi#api-h3wc5r0s#release
//
// ```
type StrategyAttachment struct {
	pulumi.CustomResourceState

	// The API that needs to be bound.
	BindApiId pulumi.StringOutput `pulumi:"bindApiId"`
	// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
	EnvironmentName pulumi.StringOutput `pulumi:"environmentName"`
	// The ID of the API gateway service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The ID of the API gateway strategy.
	StrategyId pulumi.StringOutput `pulumi:"strategyId"`
}

// NewStrategyAttachment registers a new resource with the given unique name, arguments, and options.
func NewStrategyAttachment(ctx *pulumi.Context,
	name string, args *StrategyAttachmentArgs, opts ...pulumi.ResourceOption) (*StrategyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BindApiId == nil {
		return nil, errors.New("invalid value for required argument 'BindApiId'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.StrategyId == nil {
		return nil, errors.New("invalid value for required argument 'StrategyId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StrategyAttachment
	err := ctx.RegisterResource("tencentcloud:ApiGateway/strategyAttachment:StrategyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStrategyAttachment gets an existing StrategyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStrategyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StrategyAttachmentState, opts ...pulumi.ResourceOption) (*StrategyAttachment, error) {
	var resource StrategyAttachment
	err := ctx.ReadResource("tencentcloud:ApiGateway/strategyAttachment:StrategyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StrategyAttachment resources.
type strategyAttachmentState struct {
	// The API that needs to be bound.
	BindApiId *string `pulumi:"bindApiId"`
	// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
	EnvironmentName *string `pulumi:"environmentName"`
	// The ID of the API gateway service.
	ServiceId *string `pulumi:"serviceId"`
	// The ID of the API gateway strategy.
	StrategyId *string `pulumi:"strategyId"`
}

type StrategyAttachmentState struct {
	// The API that needs to be bound.
	BindApiId pulumi.StringPtrInput
	// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
	EnvironmentName pulumi.StringPtrInput
	// The ID of the API gateway service.
	ServiceId pulumi.StringPtrInput
	// The ID of the API gateway strategy.
	StrategyId pulumi.StringPtrInput
}

func (StrategyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*strategyAttachmentState)(nil)).Elem()
}

type strategyAttachmentArgs struct {
	// The API that needs to be bound.
	BindApiId string `pulumi:"bindApiId"`
	// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
	EnvironmentName string `pulumi:"environmentName"`
	// The ID of the API gateway service.
	ServiceId string `pulumi:"serviceId"`
	// The ID of the API gateway strategy.
	StrategyId string `pulumi:"strategyId"`
}

// The set of arguments for constructing a StrategyAttachment resource.
type StrategyAttachmentArgs struct {
	// The API that needs to be bound.
	BindApiId pulumi.StringInput
	// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
	EnvironmentName pulumi.StringInput
	// The ID of the API gateway service.
	ServiceId pulumi.StringInput
	// The ID of the API gateway strategy.
	StrategyId pulumi.StringInput
}

func (StrategyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*strategyAttachmentArgs)(nil)).Elem()
}

type StrategyAttachmentInput interface {
	pulumi.Input

	ToStrategyAttachmentOutput() StrategyAttachmentOutput
	ToStrategyAttachmentOutputWithContext(ctx context.Context) StrategyAttachmentOutput
}

func (*StrategyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**StrategyAttachment)(nil)).Elem()
}

func (i *StrategyAttachment) ToStrategyAttachmentOutput() StrategyAttachmentOutput {
	return i.ToStrategyAttachmentOutputWithContext(context.Background())
}

func (i *StrategyAttachment) ToStrategyAttachmentOutputWithContext(ctx context.Context) StrategyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyAttachmentOutput)
}

// StrategyAttachmentArrayInput is an input type that accepts StrategyAttachmentArray and StrategyAttachmentArrayOutput values.
// You can construct a concrete instance of `StrategyAttachmentArrayInput` via:
//
//	StrategyAttachmentArray{ StrategyAttachmentArgs{...} }
type StrategyAttachmentArrayInput interface {
	pulumi.Input

	ToStrategyAttachmentArrayOutput() StrategyAttachmentArrayOutput
	ToStrategyAttachmentArrayOutputWithContext(context.Context) StrategyAttachmentArrayOutput
}

type StrategyAttachmentArray []StrategyAttachmentInput

func (StrategyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StrategyAttachment)(nil)).Elem()
}

func (i StrategyAttachmentArray) ToStrategyAttachmentArrayOutput() StrategyAttachmentArrayOutput {
	return i.ToStrategyAttachmentArrayOutputWithContext(context.Background())
}

func (i StrategyAttachmentArray) ToStrategyAttachmentArrayOutputWithContext(ctx context.Context) StrategyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyAttachmentArrayOutput)
}

// StrategyAttachmentMapInput is an input type that accepts StrategyAttachmentMap and StrategyAttachmentMapOutput values.
// You can construct a concrete instance of `StrategyAttachmentMapInput` via:
//
//	StrategyAttachmentMap{ "key": StrategyAttachmentArgs{...} }
type StrategyAttachmentMapInput interface {
	pulumi.Input

	ToStrategyAttachmentMapOutput() StrategyAttachmentMapOutput
	ToStrategyAttachmentMapOutputWithContext(context.Context) StrategyAttachmentMapOutput
}

type StrategyAttachmentMap map[string]StrategyAttachmentInput

func (StrategyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StrategyAttachment)(nil)).Elem()
}

func (i StrategyAttachmentMap) ToStrategyAttachmentMapOutput() StrategyAttachmentMapOutput {
	return i.ToStrategyAttachmentMapOutputWithContext(context.Background())
}

func (i StrategyAttachmentMap) ToStrategyAttachmentMapOutputWithContext(ctx context.Context) StrategyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StrategyAttachmentMapOutput)
}

type StrategyAttachmentOutput struct{ *pulumi.OutputState }

func (StrategyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StrategyAttachment)(nil)).Elem()
}

func (o StrategyAttachmentOutput) ToStrategyAttachmentOutput() StrategyAttachmentOutput {
	return o
}

func (o StrategyAttachmentOutput) ToStrategyAttachmentOutputWithContext(ctx context.Context) StrategyAttachmentOutput {
	return o
}

// The API that needs to be bound.
func (o StrategyAttachmentOutput) BindApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *StrategyAttachment) pulumi.StringOutput { return v.BindApiId }).(pulumi.StringOutput)
}

// The environment of the strategy association. Valid values: `test`, `release`, `prepub`.
func (o StrategyAttachmentOutput) EnvironmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *StrategyAttachment) pulumi.StringOutput { return v.EnvironmentName }).(pulumi.StringOutput)
}

// The ID of the API gateway service.
func (o StrategyAttachmentOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *StrategyAttachment) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The ID of the API gateway strategy.
func (o StrategyAttachmentOutput) StrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *StrategyAttachment) pulumi.StringOutput { return v.StrategyId }).(pulumi.StringOutput)
}

type StrategyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (StrategyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StrategyAttachment)(nil)).Elem()
}

func (o StrategyAttachmentArrayOutput) ToStrategyAttachmentArrayOutput() StrategyAttachmentArrayOutput {
	return o
}

func (o StrategyAttachmentArrayOutput) ToStrategyAttachmentArrayOutputWithContext(ctx context.Context) StrategyAttachmentArrayOutput {
	return o
}

func (o StrategyAttachmentArrayOutput) Index(i pulumi.IntInput) StrategyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StrategyAttachment {
		return vs[0].([]*StrategyAttachment)[vs[1].(int)]
	}).(StrategyAttachmentOutput)
}

type StrategyAttachmentMapOutput struct{ *pulumi.OutputState }

func (StrategyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StrategyAttachment)(nil)).Elem()
}

func (o StrategyAttachmentMapOutput) ToStrategyAttachmentMapOutput() StrategyAttachmentMapOutput {
	return o
}

func (o StrategyAttachmentMapOutput) ToStrategyAttachmentMapOutputWithContext(ctx context.Context) StrategyAttachmentMapOutput {
	return o
}

func (o StrategyAttachmentMapOutput) MapIndex(k pulumi.StringInput) StrategyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StrategyAttachment {
		return vs[0].(map[string]*StrategyAttachment)[vs[1].(string)]
	}).(StrategyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyAttachmentInput)(nil)).Elem(), &StrategyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyAttachmentArrayInput)(nil)).Elem(), StrategyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StrategyAttachmentMapInput)(nil)).Elem(), StrategyAttachmentMap{})
	pulumi.RegisterOutputType(StrategyAttachmentOutput{})
	pulumi.RegisterOutputType(StrategyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(StrategyAttachmentMapOutput{})
}
