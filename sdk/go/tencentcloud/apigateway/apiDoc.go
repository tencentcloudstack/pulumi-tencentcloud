// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a APIGateway ApiDoc
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.NewApiDoc(ctx, "myApiDoc", &ApiGateway.ApiDocArgs{
//				ApiDocName: pulumi.String("doc_test1"),
//				ApiIds: pulumi.StringArray{
//					pulumi.String("api-test1"),
//					pulumi.String("api-test2"),
//				},
//				Environment: pulumi.String("release"),
//				ServiceId:   pulumi.String("service_test1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApiDoc struct {
	pulumi.CustomResourceState

	// Api Document count.
	ApiCount pulumi.IntOutput `pulumi:"apiCount"`
	// Api Document ID.
	ApiDocId pulumi.StringOutput `pulumi:"apiDocId"`
	// Api Document name.
	ApiDocName pulumi.StringOutput `pulumi:"apiDocName"`
	// API Document Build Status.
	ApiDocStatus pulumi.StringOutput `pulumi:"apiDocStatus"`
	// API Document Access URI.
	ApiDocUri pulumi.StringOutput `pulumi:"apiDocUri"`
	// List of APIs for generating documents.
	ApiIds pulumi.StringArrayOutput `pulumi:"apiIds"`
	// List of names for generating documents.
	ApiNames pulumi.StringArrayOutput `pulumi:"apiNames"`
	// Env name.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// Number of API document releases.
	ReleaseCount pulumi.IntOutput `pulumi:"releaseCount"`
	// Service name.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// API Document service name.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// API Document Sharing Password.
	SharePassword pulumi.StringOutput `pulumi:"sharePassword"`
	// API Document update time.
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// API Document Viewing Times.
	ViewCount pulumi.IntOutput `pulumi:"viewCount"`
}

// NewApiDoc registers a new resource with the given unique name, arguments, and options.
func NewApiDoc(ctx *pulumi.Context,
	name string, args *ApiDocArgs, opts ...pulumi.ResourceOption) (*ApiDoc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiDocName == nil {
		return nil, errors.New("invalid value for required argument 'ApiDocName'")
	}
	if args.ApiIds == nil {
		return nil, errors.New("invalid value for required argument 'ApiIds'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ApiDoc
	err := ctx.RegisterResource("tencentcloud:ApiGateway/apiDoc:ApiDoc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiDoc gets an existing ApiDoc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiDoc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiDocState, opts ...pulumi.ResourceOption) (*ApiDoc, error) {
	var resource ApiDoc
	err := ctx.ReadResource("tencentcloud:ApiGateway/apiDoc:ApiDoc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiDoc resources.
type apiDocState struct {
	// Api Document count.
	ApiCount *int `pulumi:"apiCount"`
	// Api Document ID.
	ApiDocId *string `pulumi:"apiDocId"`
	// Api Document name.
	ApiDocName *string `pulumi:"apiDocName"`
	// API Document Build Status.
	ApiDocStatus *string `pulumi:"apiDocStatus"`
	// API Document Access URI.
	ApiDocUri *string `pulumi:"apiDocUri"`
	// List of APIs for generating documents.
	ApiIds []string `pulumi:"apiIds"`
	// List of names for generating documents.
	ApiNames []string `pulumi:"apiNames"`
	// Env name.
	Environment *string `pulumi:"environment"`
	// Number of API document releases.
	ReleaseCount *int `pulumi:"releaseCount"`
	// Service name.
	ServiceId *string `pulumi:"serviceId"`
	// API Document service name.
	ServiceName *string `pulumi:"serviceName"`
	// API Document Sharing Password.
	SharePassword *string `pulumi:"sharePassword"`
	// API Document update time.
	UpdatedTime *string `pulumi:"updatedTime"`
	// API Document Viewing Times.
	ViewCount *int `pulumi:"viewCount"`
}

type ApiDocState struct {
	// Api Document count.
	ApiCount pulumi.IntPtrInput
	// Api Document ID.
	ApiDocId pulumi.StringPtrInput
	// Api Document name.
	ApiDocName pulumi.StringPtrInput
	// API Document Build Status.
	ApiDocStatus pulumi.StringPtrInput
	// API Document Access URI.
	ApiDocUri pulumi.StringPtrInput
	// List of APIs for generating documents.
	ApiIds pulumi.StringArrayInput
	// List of names for generating documents.
	ApiNames pulumi.StringArrayInput
	// Env name.
	Environment pulumi.StringPtrInput
	// Number of API document releases.
	ReleaseCount pulumi.IntPtrInput
	// Service name.
	ServiceId pulumi.StringPtrInput
	// API Document service name.
	ServiceName pulumi.StringPtrInput
	// API Document Sharing Password.
	SharePassword pulumi.StringPtrInput
	// API Document update time.
	UpdatedTime pulumi.StringPtrInput
	// API Document Viewing Times.
	ViewCount pulumi.IntPtrInput
}

func (ApiDocState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiDocState)(nil)).Elem()
}

type apiDocArgs struct {
	// Api Document name.
	ApiDocName string `pulumi:"apiDocName"`
	// List of APIs for generating documents.
	ApiIds []string `pulumi:"apiIds"`
	// Env name.
	Environment string `pulumi:"environment"`
	// Service name.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ApiDoc resource.
type ApiDocArgs struct {
	// Api Document name.
	ApiDocName pulumi.StringInput
	// List of APIs for generating documents.
	ApiIds pulumi.StringArrayInput
	// Env name.
	Environment pulumi.StringInput
	// Service name.
	ServiceId pulumi.StringInput
}

func (ApiDocArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiDocArgs)(nil)).Elem()
}

type ApiDocInput interface {
	pulumi.Input

	ToApiDocOutput() ApiDocOutput
	ToApiDocOutputWithContext(ctx context.Context) ApiDocOutput
}

func (*ApiDoc) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiDoc)(nil)).Elem()
}

func (i *ApiDoc) ToApiDocOutput() ApiDocOutput {
	return i.ToApiDocOutputWithContext(context.Background())
}

func (i *ApiDoc) ToApiDocOutputWithContext(ctx context.Context) ApiDocOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDocOutput)
}

// ApiDocArrayInput is an input type that accepts ApiDocArray and ApiDocArrayOutput values.
// You can construct a concrete instance of `ApiDocArrayInput` via:
//
//	ApiDocArray{ ApiDocArgs{...} }
type ApiDocArrayInput interface {
	pulumi.Input

	ToApiDocArrayOutput() ApiDocArrayOutput
	ToApiDocArrayOutputWithContext(context.Context) ApiDocArrayOutput
}

type ApiDocArray []ApiDocInput

func (ApiDocArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiDoc)(nil)).Elem()
}

func (i ApiDocArray) ToApiDocArrayOutput() ApiDocArrayOutput {
	return i.ToApiDocArrayOutputWithContext(context.Background())
}

func (i ApiDocArray) ToApiDocArrayOutputWithContext(ctx context.Context) ApiDocArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDocArrayOutput)
}

// ApiDocMapInput is an input type that accepts ApiDocMap and ApiDocMapOutput values.
// You can construct a concrete instance of `ApiDocMapInput` via:
//
//	ApiDocMap{ "key": ApiDocArgs{...} }
type ApiDocMapInput interface {
	pulumi.Input

	ToApiDocMapOutput() ApiDocMapOutput
	ToApiDocMapOutputWithContext(context.Context) ApiDocMapOutput
}

type ApiDocMap map[string]ApiDocInput

func (ApiDocMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiDoc)(nil)).Elem()
}

func (i ApiDocMap) ToApiDocMapOutput() ApiDocMapOutput {
	return i.ToApiDocMapOutputWithContext(context.Background())
}

func (i ApiDocMap) ToApiDocMapOutputWithContext(ctx context.Context) ApiDocMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiDocMapOutput)
}

type ApiDocOutput struct{ *pulumi.OutputState }

func (ApiDocOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiDoc)(nil)).Elem()
}

func (o ApiDocOutput) ToApiDocOutput() ApiDocOutput {
	return o
}

func (o ApiDocOutput) ToApiDocOutputWithContext(ctx context.Context) ApiDocOutput {
	return o
}

// Api Document count.
func (o ApiDocOutput) ApiCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.IntOutput { return v.ApiCount }).(pulumi.IntOutput)
}

// Api Document ID.
func (o ApiDocOutput) ApiDocId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.ApiDocId }).(pulumi.StringOutput)
}

// Api Document name.
func (o ApiDocOutput) ApiDocName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.ApiDocName }).(pulumi.StringOutput)
}

// API Document Build Status.
func (o ApiDocOutput) ApiDocStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.ApiDocStatus }).(pulumi.StringOutput)
}

// API Document Access URI.
func (o ApiDocOutput) ApiDocUri() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.ApiDocUri }).(pulumi.StringOutput)
}

// List of APIs for generating documents.
func (o ApiDocOutput) ApiIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringArrayOutput { return v.ApiIds }).(pulumi.StringArrayOutput)
}

// List of names for generating documents.
func (o ApiDocOutput) ApiNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringArrayOutput { return v.ApiNames }).(pulumi.StringArrayOutput)
}

// Env name.
func (o ApiDocOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

// Number of API document releases.
func (o ApiDocOutput) ReleaseCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.IntOutput { return v.ReleaseCount }).(pulumi.IntOutput)
}

// Service name.
func (o ApiDocOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// API Document service name.
func (o ApiDocOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// API Document Sharing Password.
func (o ApiDocOutput) SharePassword() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.SharePassword }).(pulumi.StringOutput)
}

// API Document update time.
func (o ApiDocOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// API Document Viewing Times.
func (o ApiDocOutput) ViewCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ApiDoc) pulumi.IntOutput { return v.ViewCount }).(pulumi.IntOutput)
}

type ApiDocArrayOutput struct{ *pulumi.OutputState }

func (ApiDocArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiDoc)(nil)).Elem()
}

func (o ApiDocArrayOutput) ToApiDocArrayOutput() ApiDocArrayOutput {
	return o
}

func (o ApiDocArrayOutput) ToApiDocArrayOutputWithContext(ctx context.Context) ApiDocArrayOutput {
	return o
}

func (o ApiDocArrayOutput) Index(i pulumi.IntInput) ApiDocOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiDoc {
		return vs[0].([]*ApiDoc)[vs[1].(int)]
	}).(ApiDocOutput)
}

type ApiDocMapOutput struct{ *pulumi.OutputState }

func (ApiDocMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiDoc)(nil)).Elem()
}

func (o ApiDocMapOutput) ToApiDocMapOutput() ApiDocMapOutput {
	return o
}

func (o ApiDocMapOutput) ToApiDocMapOutputWithContext(ctx context.Context) ApiDocMapOutput {
	return o
}

func (o ApiDocMapOutput) MapIndex(k pulumi.StringInput) ApiDocOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiDoc {
		return vs[0].(map[string]*ApiDoc)[vs[1].(string)]
	}).(ApiDocOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiDocInput)(nil)).Elem(), &ApiDoc{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiDocArrayInput)(nil)).Elem(), ApiDocArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiDocMapInput)(nil)).Elem(), ApiDocMap{})
	pulumi.RegisterOutputType(ApiDocOutput{})
	pulumi.RegisterOutputType(ApiDocArrayOutput{})
	pulumi.RegisterOutputType(ApiDocMapOutput{})
}
