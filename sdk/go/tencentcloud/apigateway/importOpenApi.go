// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a apiGateway importOpenApi
//
// ## Example Usage
// ### Import open Api by YAML
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.NewImportOpenApi(ctx, "example", &ApiGateway.ImportOpenApiArgs{
//				Content:        pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "info:\n", "  title: keep-service\n", "  version: 1.0.1\n", "openapi: 3.0.0\n", "paths:\n", "  /api/test:\n", "    get:\n", "      description: desc\n", "      operationId: test\n", "      responses:\n", "        '200':\n", "          content:\n", "            text/html:\n", "              example: '200'\n", "          description: '200'\n", "        default:\n", "          content:\n", "            text/html:\n", "              example: '400'\n", "          description: '400'\n", "      x-apigw-api-business-type: NORMAL\n", "      x-apigw-api-type: NORMAL\n", "      x-apigw-backend:\n", "        ServiceConfig:\n", "          Method: GET\n", "          Path: /test\n", "          Url: http://domain.com\n", "        ServiceType: HTTP\n", "      x-apigw-cors: false\n", "      x-apigw-protocol: HTTP\n", "      x-apigw-service-timeout: 15\n", "\n")),
//				ContentVersion: pulumi.String("openAPI"),
//				EncodeType:     pulumi.String("YAML"),
//				ServiceId:      pulumi.String("service-nxz6yync"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Import open Api by JSON
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.NewImportOpenApi(ctx, "example", &ApiGateway.ImportOpenApiArgs{
//				Content:        pulumi.String("{\"openapi\": \"3.0.0\", \"info\": {\"title\": \"keep-service\", \"version\": \"1.0.1\"}, \"paths\": {\"/api/test\": {\"get\": {\"operationId\": \"test\", \"description\": \"desc\", \"responses\": {\"200\": {\"description\": \"200\", \"content\": {\"text/html\": {\"example\": \"200\"}}}, \"default\": {\"content\": {\"text/html\": {\"example\": \"400\"}}, \"description\": \"400\"}}, \"x-apigw-api-type\": \"NORMAL\", \"x-apigw-api-business-type\": \"NORMAL\", \"x-apigw-protocol\": \"HTTP\", \"x-apigw-cors\": false, \"x-apigw-service-timeout\": 15, \"x-apigw-backend\": {\"ServiceType\": \"HTTP\", \"ServiceConfig\": {\"Url\": \"http://domain.com\", \"Path\": \"/test\", \"Method\": \"GET\"}}}}}}"),
//				ContentVersion: pulumi.String("openAPI"),
//				EncodeType:     pulumi.String("JSON"),
//				ServiceId:      pulumi.String("service-nxz6yync"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ImportOpenApi struct {
	pulumi.CustomResourceState

	// When `authType` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
	ApiBusinessType pulumi.StringOutput `pulumi:"apiBusinessType"`
	// Custom API description.
	ApiDesc pulumi.StringOutput `pulumi:"apiDesc"`
	// Custom Api Id.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// Custom API name.
	ApiName pulumi.StringOutput `pulumi:"apiName"`
	// API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
	ApiType pulumi.StringOutput `pulumi:"apiType"`
	// The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
	AuthRelationApiId pulumi.StringOutput `pulumi:"authRelationApiId"`
	// API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
	AuthType pulumi.StringOutput `pulumi:"authType"`
	// Constant parameter.
	ConstantParameters ImportOpenApiConstantParameterArrayOutput `pulumi:"constantParameters"`
	// OpenAPI body content.
	Content pulumi.StringOutput `pulumi:"content"`
	// The Content version defaults to OpenAPI and currently only supports OpenAPI.
	ContentVersion pulumi.StringPtrOutput `pulumi:"contentVersion"`
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Whether to enable CORS. Default value: `true`.
	EnableCors pulumi.BoolOutput `pulumi:"enableCors"`
	// The Content format can only be YAML or JSON, and the default is YAML.
	EncodeType pulumi.StringPtrOutput `pulumi:"encodeType"`
	// Whether to enable Base64 encoding will only take effect when the backend is scf.
	IsBase64Encoded pulumi.BoolOutput `pulumi:"isBase64Encoded"`
	// Charge after starting debugging. (Cloud Market Reserved Fields).
	IsDebugAfterCharge pulumi.BoolOutput `pulumi:"isDebugAfterCharge"`
	// Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
	IsDeleteResponseErrorCodes pulumi.BoolOutput `pulumi:"isDeleteResponseErrorCodes"`
	// API bound microservice list.
	MicroServices ImportOpenApiMicroServiceArrayOutput `pulumi:"microServices"`
	// OAuth configuration. Effective when AuthType is OAUTH.
	OauthConfigs ImportOpenApiOauthConfigArrayOutput `pulumi:"oauthConfigs"`
	// API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
	RequestConfigMethod pulumi.StringOutput `pulumi:"requestConfigMethod"`
	// Request frontend path configuration. Like `/user/getinfo`.
	RequestConfigPath pulumi.StringOutput `pulumi:"requestConfigPath"`
	// Frontend request parameters.
	RequestParameters ImportOpenApiRequestParameterArrayOutput `pulumi:"requestParameters"`
	// Custom error code configuration. Must keep at least one after set.
	ResponseErrorCodes ImportOpenApiResponseErrorCodeArrayOutput `pulumi:"responseErrorCodes"`
	// Response failure sample of custom response configuration.
	ResponseFailExample pulumi.StringOutput `pulumi:"responseFailExample"`
	// Successful response sample of custom response configuration.
	ResponseSuccessExample pulumi.StringOutput `pulumi:"responseSuccessExample"`
	// Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
	ResponseType pulumi.StringOutput `pulumi:"responseType"`
	// API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
	ServiceConfigCosConfigs ImportOpenApiServiceConfigCosConfigArrayOutput `pulumi:"serviceConfigCosConfigs"`
	// API backend service request method, such as `GET`. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigMethod` and backend method `serviceConfigMethod` can be different.
	ServiceConfigMethod pulumi.StringOutput `pulumi:"serviceConfigMethod"`
	// Returned information of API backend mocking. This parameter is required when `serviceConfigType` is `MOCK`.
	ServiceConfigMockReturnMessage pulumi.StringOutput `pulumi:"serviceConfigMockReturnMessage"`
	// API backend service path, such as /path. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigPath` and backend path `serviceConfigPath` can be different.
	ServiceConfigPath pulumi.StringOutput `pulumi:"serviceConfigPath"`
	// Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
	ServiceConfigProduct pulumi.StringOutput `pulumi:"serviceConfigProduct"`
	// SCF function name. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionName pulumi.StringOutput `pulumi:"serviceConfigScfFunctionName"`
	// SCF function namespace. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionNamespace pulumi.StringOutput `pulumi:"serviceConfigScfFunctionNamespace"`
	// SCF function version. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionQualifier pulumi.StringOutput `pulumi:"serviceConfigScfFunctionQualifier"`
	// Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
	ServiceConfigScfFunctionType pulumi.StringOutput `pulumi:"serviceConfigScfFunctionType"`
	// Whether to enable response integration. Effective when the backend type is SCF.
	ServiceConfigScfIsIntegratedResponse pulumi.BoolOutput `pulumi:"serviceConfigScfIsIntegratedResponse"`
	// API backend service timeout period in seconds. Default value: `5`.
	ServiceConfigTimeout pulumi.IntOutput `pulumi:"serviceConfigTimeout"`
	// The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
	ServiceConfigType pulumi.StringOutput `pulumi:"serviceConfigType"`
	// Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
	ServiceConfigUpstreamId pulumi.StringOutput `pulumi:"serviceConfigUpstreamId"`
	// The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
	ServiceConfigUrl pulumi.StringOutput `pulumi:"serviceConfigUrl"`
	// Unique VPC ID.
	ServiceConfigVpcId pulumi.StringOutput `pulumi:"serviceConfigVpcId"`
	// Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionName pulumi.StringOutput `pulumi:"serviceConfigWebsocketCleanupFunctionName"`
	// Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionNamespace pulumi.StringOutput `pulumi:"serviceConfigWebsocketCleanupFunctionNamespace"`
	// Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionQualifier pulumi.StringOutput `pulumi:"serviceConfigWebsocketCleanupFunctionQualifier"`
	// Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionName pulumi.StringOutput `pulumi:"serviceConfigWebsocketRegisterFunctionName"`
	// Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionNamespace pulumi.StringOutput `pulumi:"serviceConfigWebsocketRegisterFunctionNamespace"`
	// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionQualifier pulumi.StringOutput `pulumi:"serviceConfigWebsocketRegisterFunctionQualifier"`
	// Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionName pulumi.StringOutput `pulumi:"serviceConfigWebsocketTransportFunctionName"`
	// Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionNamespace pulumi.StringOutput `pulumi:"serviceConfigWebsocketTransportFunctionNamespace"`
	// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionQualifier pulumi.StringOutput `pulumi:"serviceConfigWebsocketTransportFunctionQualifier"`
	// The unique ID of the service where the API is located.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The backend service parameters of the API.
	ServiceParameters ImportOpenApiServiceParameterArrayOutput `pulumi:"serviceParameters"`
	// Health check configuration for microservices.
	ServiceTsfHealthCheckConfs ImportOpenApiServiceTsfHealthCheckConfArrayOutput `pulumi:"serviceTsfHealthCheckConfs"`
	// Load balancing configuration for microservices.
	ServiceTsfLoadBalanceConfs ImportOpenApiServiceTsfLoadBalanceConfArrayOutput `pulumi:"serviceTsfLoadBalanceConfs"`
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewImportOpenApi registers a new resource with the given unique name, arguments, and options.
func NewImportOpenApi(ctx *pulumi.Context,
	name string, args *ImportOpenApiArgs, opts ...pulumi.ResourceOption) (*ImportOpenApi, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ImportOpenApi
	err := ctx.RegisterResource("tencentcloud:ApiGateway/importOpenApi:ImportOpenApi", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImportOpenApi gets an existing ImportOpenApi resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImportOpenApi(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImportOpenApiState, opts ...pulumi.ResourceOption) (*ImportOpenApi, error) {
	var resource ImportOpenApi
	err := ctx.ReadResource("tencentcloud:ApiGateway/importOpenApi:ImportOpenApi", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImportOpenApi resources.
type importOpenApiState struct {
	// When `authType` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
	ApiBusinessType *string `pulumi:"apiBusinessType"`
	// Custom API description.
	ApiDesc *string `pulumi:"apiDesc"`
	// Custom Api Id.
	ApiId *string `pulumi:"apiId"`
	// Custom API name.
	ApiName *string `pulumi:"apiName"`
	// API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
	ApiType *string `pulumi:"apiType"`
	// The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
	AuthRelationApiId *string `pulumi:"authRelationApiId"`
	// API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
	AuthType *string `pulumi:"authType"`
	// Constant parameter.
	ConstantParameters []ImportOpenApiConstantParameter `pulumi:"constantParameters"`
	// OpenAPI body content.
	Content *string `pulumi:"content"`
	// The Content version defaults to OpenAPI and currently only supports OpenAPI.
	ContentVersion *string `pulumi:"contentVersion"`
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime *string `pulumi:"createTime"`
	// Whether to enable CORS. Default value: `true`.
	EnableCors *bool `pulumi:"enableCors"`
	// The Content format can only be YAML or JSON, and the default is YAML.
	EncodeType *string `pulumi:"encodeType"`
	// Whether to enable Base64 encoding will only take effect when the backend is scf.
	IsBase64Encoded *bool `pulumi:"isBase64Encoded"`
	// Charge after starting debugging. (Cloud Market Reserved Fields).
	IsDebugAfterCharge *bool `pulumi:"isDebugAfterCharge"`
	// Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
	IsDeleteResponseErrorCodes *bool `pulumi:"isDeleteResponseErrorCodes"`
	// API bound microservice list.
	MicroServices []ImportOpenApiMicroService `pulumi:"microServices"`
	// OAuth configuration. Effective when AuthType is OAUTH.
	OauthConfigs []ImportOpenApiOauthConfig `pulumi:"oauthConfigs"`
	// API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
	Protocol *string `pulumi:"protocol"`
	// Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
	RequestConfigMethod *string `pulumi:"requestConfigMethod"`
	// Request frontend path configuration. Like `/user/getinfo`.
	RequestConfigPath *string `pulumi:"requestConfigPath"`
	// Frontend request parameters.
	RequestParameters []ImportOpenApiRequestParameter `pulumi:"requestParameters"`
	// Custom error code configuration. Must keep at least one after set.
	ResponseErrorCodes []ImportOpenApiResponseErrorCode `pulumi:"responseErrorCodes"`
	// Response failure sample of custom response configuration.
	ResponseFailExample *string `pulumi:"responseFailExample"`
	// Successful response sample of custom response configuration.
	ResponseSuccessExample *string `pulumi:"responseSuccessExample"`
	// Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
	ResponseType *string `pulumi:"responseType"`
	// API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
	ServiceConfigCosConfigs []ImportOpenApiServiceConfigCosConfig `pulumi:"serviceConfigCosConfigs"`
	// API backend service request method, such as `GET`. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigMethod` and backend method `serviceConfigMethod` can be different.
	ServiceConfigMethod *string `pulumi:"serviceConfigMethod"`
	// Returned information of API backend mocking. This parameter is required when `serviceConfigType` is `MOCK`.
	ServiceConfigMockReturnMessage *string `pulumi:"serviceConfigMockReturnMessage"`
	// API backend service path, such as /path. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigPath` and backend path `serviceConfigPath` can be different.
	ServiceConfigPath *string `pulumi:"serviceConfigPath"`
	// Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
	ServiceConfigProduct *string `pulumi:"serviceConfigProduct"`
	// SCF function name. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionName *string `pulumi:"serviceConfigScfFunctionName"`
	// SCF function namespace. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionNamespace *string `pulumi:"serviceConfigScfFunctionNamespace"`
	// SCF function version. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionQualifier *string `pulumi:"serviceConfigScfFunctionQualifier"`
	// Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
	ServiceConfigScfFunctionType *string `pulumi:"serviceConfigScfFunctionType"`
	// Whether to enable response integration. Effective when the backend type is SCF.
	ServiceConfigScfIsIntegratedResponse *bool `pulumi:"serviceConfigScfIsIntegratedResponse"`
	// API backend service timeout period in seconds. Default value: `5`.
	ServiceConfigTimeout *int `pulumi:"serviceConfigTimeout"`
	// The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
	ServiceConfigType *string `pulumi:"serviceConfigType"`
	// Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
	ServiceConfigUpstreamId *string `pulumi:"serviceConfigUpstreamId"`
	// The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
	ServiceConfigUrl *string `pulumi:"serviceConfigUrl"`
	// Unique VPC ID.
	ServiceConfigVpcId *string `pulumi:"serviceConfigVpcId"`
	// Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionName *string `pulumi:"serviceConfigWebsocketCleanupFunctionName"`
	// Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionNamespace *string `pulumi:"serviceConfigWebsocketCleanupFunctionNamespace"`
	// Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionQualifier *string `pulumi:"serviceConfigWebsocketCleanupFunctionQualifier"`
	// Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionName *string `pulumi:"serviceConfigWebsocketRegisterFunctionName"`
	// Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionNamespace *string `pulumi:"serviceConfigWebsocketRegisterFunctionNamespace"`
	// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionQualifier *string `pulumi:"serviceConfigWebsocketRegisterFunctionQualifier"`
	// Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionName *string `pulumi:"serviceConfigWebsocketTransportFunctionName"`
	// Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionNamespace *string `pulumi:"serviceConfigWebsocketTransportFunctionNamespace"`
	// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionQualifier *string `pulumi:"serviceConfigWebsocketTransportFunctionQualifier"`
	// The unique ID of the service where the API is located.
	ServiceId *string `pulumi:"serviceId"`
	// The backend service parameters of the API.
	ServiceParameters []ImportOpenApiServiceParameter `pulumi:"serviceParameters"`
	// Health check configuration for microservices.
	ServiceTsfHealthCheckConfs []ImportOpenApiServiceTsfHealthCheckConf `pulumi:"serviceTsfHealthCheckConfs"`
	// Load balancing configuration for microservices.
	ServiceTsfLoadBalanceConfs []ImportOpenApiServiceTsfLoadBalanceConf `pulumi:"serviceTsfLoadBalanceConfs"`
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	UpdateTime *string `pulumi:"updateTime"`
}

type ImportOpenApiState struct {
	// When `authType` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
	ApiBusinessType pulumi.StringPtrInput
	// Custom API description.
	ApiDesc pulumi.StringPtrInput
	// Custom Api Id.
	ApiId pulumi.StringPtrInput
	// Custom API name.
	ApiName pulumi.StringPtrInput
	// API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
	ApiType pulumi.StringPtrInput
	// The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
	AuthRelationApiId pulumi.StringPtrInput
	// API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
	AuthType pulumi.StringPtrInput
	// Constant parameter.
	ConstantParameters ImportOpenApiConstantParameterArrayInput
	// OpenAPI body content.
	Content pulumi.StringPtrInput
	// The Content version defaults to OpenAPI and currently only supports OpenAPI.
	ContentVersion pulumi.StringPtrInput
	// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	CreateTime pulumi.StringPtrInput
	// Whether to enable CORS. Default value: `true`.
	EnableCors pulumi.BoolPtrInput
	// The Content format can only be YAML or JSON, and the default is YAML.
	EncodeType pulumi.StringPtrInput
	// Whether to enable Base64 encoding will only take effect when the backend is scf.
	IsBase64Encoded pulumi.BoolPtrInput
	// Charge after starting debugging. (Cloud Market Reserved Fields).
	IsDebugAfterCharge pulumi.BoolPtrInput
	// Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
	IsDeleteResponseErrorCodes pulumi.BoolPtrInput
	// API bound microservice list.
	MicroServices ImportOpenApiMicroServiceArrayInput
	// OAuth configuration. Effective when AuthType is OAUTH.
	OauthConfigs ImportOpenApiOauthConfigArrayInput
	// API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
	Protocol pulumi.StringPtrInput
	// Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
	RequestConfigMethod pulumi.StringPtrInput
	// Request frontend path configuration. Like `/user/getinfo`.
	RequestConfigPath pulumi.StringPtrInput
	// Frontend request parameters.
	RequestParameters ImportOpenApiRequestParameterArrayInput
	// Custom error code configuration. Must keep at least one after set.
	ResponseErrorCodes ImportOpenApiResponseErrorCodeArrayInput
	// Response failure sample of custom response configuration.
	ResponseFailExample pulumi.StringPtrInput
	// Successful response sample of custom response configuration.
	ResponseSuccessExample pulumi.StringPtrInput
	// Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
	ResponseType pulumi.StringPtrInput
	// API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
	ServiceConfigCosConfigs ImportOpenApiServiceConfigCosConfigArrayInput
	// API backend service request method, such as `GET`. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigMethod` and backend method `serviceConfigMethod` can be different.
	ServiceConfigMethod pulumi.StringPtrInput
	// Returned information of API backend mocking. This parameter is required when `serviceConfigType` is `MOCK`.
	ServiceConfigMockReturnMessage pulumi.StringPtrInput
	// API backend service path, such as /path. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigPath` and backend path `serviceConfigPath` can be different.
	ServiceConfigPath pulumi.StringPtrInput
	// Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
	ServiceConfigProduct pulumi.StringPtrInput
	// SCF function name. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionName pulumi.StringPtrInput
	// SCF function namespace. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionNamespace pulumi.StringPtrInput
	// SCF function version. This parameter takes effect when `serviceConfigType` is `SCF`.
	ServiceConfigScfFunctionQualifier pulumi.StringPtrInput
	// Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
	ServiceConfigScfFunctionType pulumi.StringPtrInput
	// Whether to enable response integration. Effective when the backend type is SCF.
	ServiceConfigScfIsIntegratedResponse pulumi.BoolPtrInput
	// API backend service timeout period in seconds. Default value: `5`.
	ServiceConfigTimeout pulumi.IntPtrInput
	// The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
	ServiceConfigType pulumi.StringPtrInput
	// Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
	ServiceConfigUpstreamId pulumi.StringPtrInput
	// The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
	ServiceConfigUrl pulumi.StringPtrInput
	// Unique VPC ID.
	ServiceConfigVpcId pulumi.StringPtrInput
	// Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionName pulumi.StringPtrInput
	// Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionNamespace pulumi.StringPtrInput
	// Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketCleanupFunctionQualifier pulumi.StringPtrInput
	// Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionName pulumi.StringPtrInput
	// Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionNamespace pulumi.StringPtrInput
	// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketRegisterFunctionQualifier pulumi.StringPtrInput
	// Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionName pulumi.StringPtrInput
	// Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionNamespace pulumi.StringPtrInput
	// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
	ServiceConfigWebsocketTransportFunctionQualifier pulumi.StringPtrInput
	// The unique ID of the service where the API is located.
	ServiceId pulumi.StringPtrInput
	// The backend service parameters of the API.
	ServiceParameters ImportOpenApiServiceParameterArrayInput
	// Health check configuration for microservices.
	ServiceTsfHealthCheckConfs ImportOpenApiServiceTsfHealthCheckConfArrayInput
	// Load balancing configuration for microservices.
	ServiceTsfLoadBalanceConfs ImportOpenApiServiceTsfLoadBalanceConfArrayInput
	// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
	UpdateTime pulumi.StringPtrInput
}

func (ImportOpenApiState) ElementType() reflect.Type {
	return reflect.TypeOf((*importOpenApiState)(nil)).Elem()
}

type importOpenApiArgs struct {
	// OpenAPI body content.
	Content string `pulumi:"content"`
	// The Content version defaults to OpenAPI and currently only supports OpenAPI.
	ContentVersion *string `pulumi:"contentVersion"`
	// The Content format can only be YAML or JSON, and the default is YAML.
	EncodeType *string `pulumi:"encodeType"`
	// The unique ID of the service where the API is located.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ImportOpenApi resource.
type ImportOpenApiArgs struct {
	// OpenAPI body content.
	Content pulumi.StringInput
	// The Content version defaults to OpenAPI and currently only supports OpenAPI.
	ContentVersion pulumi.StringPtrInput
	// The Content format can only be YAML or JSON, and the default is YAML.
	EncodeType pulumi.StringPtrInput
	// The unique ID of the service where the API is located.
	ServiceId pulumi.StringInput
}

func (ImportOpenApiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*importOpenApiArgs)(nil)).Elem()
}

type ImportOpenApiInput interface {
	pulumi.Input

	ToImportOpenApiOutput() ImportOpenApiOutput
	ToImportOpenApiOutputWithContext(ctx context.Context) ImportOpenApiOutput
}

func (*ImportOpenApi) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportOpenApi)(nil)).Elem()
}

func (i *ImportOpenApi) ToImportOpenApiOutput() ImportOpenApiOutput {
	return i.ToImportOpenApiOutputWithContext(context.Background())
}

func (i *ImportOpenApi) ToImportOpenApiOutputWithContext(ctx context.Context) ImportOpenApiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportOpenApiOutput)
}

// ImportOpenApiArrayInput is an input type that accepts ImportOpenApiArray and ImportOpenApiArrayOutput values.
// You can construct a concrete instance of `ImportOpenApiArrayInput` via:
//
//	ImportOpenApiArray{ ImportOpenApiArgs{...} }
type ImportOpenApiArrayInput interface {
	pulumi.Input

	ToImportOpenApiArrayOutput() ImportOpenApiArrayOutput
	ToImportOpenApiArrayOutputWithContext(context.Context) ImportOpenApiArrayOutput
}

type ImportOpenApiArray []ImportOpenApiInput

func (ImportOpenApiArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImportOpenApi)(nil)).Elem()
}

func (i ImportOpenApiArray) ToImportOpenApiArrayOutput() ImportOpenApiArrayOutput {
	return i.ToImportOpenApiArrayOutputWithContext(context.Background())
}

func (i ImportOpenApiArray) ToImportOpenApiArrayOutputWithContext(ctx context.Context) ImportOpenApiArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportOpenApiArrayOutput)
}

// ImportOpenApiMapInput is an input type that accepts ImportOpenApiMap and ImportOpenApiMapOutput values.
// You can construct a concrete instance of `ImportOpenApiMapInput` via:
//
//	ImportOpenApiMap{ "key": ImportOpenApiArgs{...} }
type ImportOpenApiMapInput interface {
	pulumi.Input

	ToImportOpenApiMapOutput() ImportOpenApiMapOutput
	ToImportOpenApiMapOutputWithContext(context.Context) ImportOpenApiMapOutput
}

type ImportOpenApiMap map[string]ImportOpenApiInput

func (ImportOpenApiMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImportOpenApi)(nil)).Elem()
}

func (i ImportOpenApiMap) ToImportOpenApiMapOutput() ImportOpenApiMapOutput {
	return i.ToImportOpenApiMapOutputWithContext(context.Background())
}

func (i ImportOpenApiMap) ToImportOpenApiMapOutputWithContext(ctx context.Context) ImportOpenApiMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportOpenApiMapOutput)
}

type ImportOpenApiOutput struct{ *pulumi.OutputState }

func (ImportOpenApiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportOpenApi)(nil)).Elem()
}

func (o ImportOpenApiOutput) ToImportOpenApiOutput() ImportOpenApiOutput {
	return o
}

func (o ImportOpenApiOutput) ToImportOpenApiOutputWithContext(ctx context.Context) ImportOpenApiOutput {
	return o
}

// When `authType` is OAUTH, this field is valid, NORMAL: Business API, OAUTH: Authorization API.
func (o ImportOpenApiOutput) ApiBusinessType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ApiBusinessType }).(pulumi.StringOutput)
}

// Custom API description.
func (o ImportOpenApiOutput) ApiDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ApiDesc }).(pulumi.StringOutput)
}

// Custom Api Id.
func (o ImportOpenApiOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Custom API name.
func (o ImportOpenApiOutput) ApiName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ApiName }).(pulumi.StringOutput)
}

// API type, supports NORMAL (regular API) and TSF (microservice API), defaults to NORMAL.
func (o ImportOpenApiOutput) ApiType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ApiType }).(pulumi.StringOutput)
}

// The unique ID of the associated authorization API takes effect when AuthType is OAUTH and ApiBusinessType is NORMAL. The unique ID of the oauth2.0 authorized API that identifies the business API binding.
func (o ImportOpenApiOutput) AuthRelationApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.AuthRelationApiId }).(pulumi.StringOutput)
}

// API authentication type. Support SECRET (Key Pair Authentication), NONE (Authentication Exemption), OAUTH, APP (Application Authentication). The default is NONE.
func (o ImportOpenApiOutput) AuthType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.AuthType }).(pulumi.StringOutput)
}

// Constant parameter.
func (o ImportOpenApiOutput) ConstantParameters() ImportOpenApiConstantParameterArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiConstantParameterArrayOutput { return v.ConstantParameters }).(ImportOpenApiConstantParameterArrayOutput)
}

// OpenAPI body content.
func (o ImportOpenApiOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The Content version defaults to OpenAPI and currently only supports OpenAPI.
func (o ImportOpenApiOutput) ContentVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringPtrOutput { return v.ContentVersion }).(pulumi.StringPtrOutput)
}

// Creation time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
func (o ImportOpenApiOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Whether to enable CORS. Default value: `true`.
func (o ImportOpenApiOutput) EnableCors() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.BoolOutput { return v.EnableCors }).(pulumi.BoolOutput)
}

// The Content format can only be YAML or JSON, and the default is YAML.
func (o ImportOpenApiOutput) EncodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringPtrOutput { return v.EncodeType }).(pulumi.StringPtrOutput)
}

// Whether to enable Base64 encoding will only take effect when the backend is scf.
func (o ImportOpenApiOutput) IsBase64Encoded() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.BoolOutput { return v.IsBase64Encoded }).(pulumi.BoolOutput)
}

// Charge after starting debugging. (Cloud Market Reserved Fields).
func (o ImportOpenApiOutput) IsDebugAfterCharge() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.BoolOutput { return v.IsDebugAfterCharge }).(pulumi.BoolOutput)
}

// Do you want to delete the custom response configuration error code? If it is not passed or False is passed, it will not be deleted. If True is passed, all custom response configuration error codes for this API will be deleted.
func (o ImportOpenApiOutput) IsDeleteResponseErrorCodes() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.BoolOutput { return v.IsDeleteResponseErrorCodes }).(pulumi.BoolOutput)
}

// API bound microservice list.
func (o ImportOpenApiOutput) MicroServices() ImportOpenApiMicroServiceArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiMicroServiceArrayOutput { return v.MicroServices }).(ImportOpenApiMicroServiceArrayOutput)
}

// OAuth configuration. Effective when AuthType is OAUTH.
func (o ImportOpenApiOutput) OauthConfigs() ImportOpenApiOauthConfigArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiOauthConfigArrayOutput { return v.OauthConfigs }).(ImportOpenApiOauthConfigArrayOutput)
}

// API frontend request type. Valid values: `HTTP`, `WEBSOCKET`. Default value: `HTTP`.
func (o ImportOpenApiOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Request frontend method configuration. Valid values: `GET`,`POST`,`PUT`,`DELETE`,`HEAD`,`ANY`. Default value: `GET`.
func (o ImportOpenApiOutput) RequestConfigMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.RequestConfigMethod }).(pulumi.StringOutput)
}

// Request frontend path configuration. Like `/user/getinfo`.
func (o ImportOpenApiOutput) RequestConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.RequestConfigPath }).(pulumi.StringOutput)
}

// Frontend request parameters.
func (o ImportOpenApiOutput) RequestParameters() ImportOpenApiRequestParameterArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiRequestParameterArrayOutput { return v.RequestParameters }).(ImportOpenApiRequestParameterArrayOutput)
}

// Custom error code configuration. Must keep at least one after set.
func (o ImportOpenApiOutput) ResponseErrorCodes() ImportOpenApiResponseErrorCodeArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiResponseErrorCodeArrayOutput { return v.ResponseErrorCodes }).(ImportOpenApiResponseErrorCodeArrayOutput)
}

// Response failure sample of custom response configuration.
func (o ImportOpenApiOutput) ResponseFailExample() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ResponseFailExample }).(pulumi.StringOutput)
}

// Successful response sample of custom response configuration.
func (o ImportOpenApiOutput) ResponseSuccessExample() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ResponseSuccessExample }).(pulumi.StringOutput)
}

// Return type. Valid values: `HTML`, `JSON`, `TEXT`, `BINARY`, `XML`. Default value: `HTML`.
func (o ImportOpenApiOutput) ResponseType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ResponseType }).(pulumi.StringOutput)
}

// API backend COS configuration. If ServiceType is COS, then this parameter must be passed.Note: This field may return null, indicating that a valid value cannot be obtained.
func (o ImportOpenApiOutput) ServiceConfigCosConfigs() ImportOpenApiServiceConfigCosConfigArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiServiceConfigCosConfigArrayOutput {
		return v.ServiceConfigCosConfigs
	}).(ImportOpenApiServiceConfigCosConfigArrayOutput)
}

// API backend service request method, such as `GET`. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigMethod` and backend method `serviceConfigMethod` can be different.
func (o ImportOpenApiOutput) ServiceConfigMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigMethod }).(pulumi.StringOutput)
}

// Returned information of API backend mocking. This parameter is required when `serviceConfigType` is `MOCK`.
func (o ImportOpenApiOutput) ServiceConfigMockReturnMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigMockReturnMessage }).(pulumi.StringOutput)
}

// API backend service path, such as /path. If `serviceConfigType` is `HTTP`, this parameter will be required. The frontend `requestConfigPath` and backend path `serviceConfigPath` can be different.
func (o ImportOpenApiOutput) ServiceConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigPath }).(pulumi.StringOutput)
}

// Backend type. Effective when enabling vpc, currently supported types are clb, cvm, and upstream.
func (o ImportOpenApiOutput) ServiceConfigProduct() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigProduct }).(pulumi.StringOutput)
}

// SCF function name. This parameter takes effect when `serviceConfigType` is `SCF`.
func (o ImportOpenApiOutput) ServiceConfigScfFunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigScfFunctionName }).(pulumi.StringOutput)
}

// SCF function namespace. This parameter takes effect when `serviceConfigType` is `SCF`.
func (o ImportOpenApiOutput) ServiceConfigScfFunctionNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigScfFunctionNamespace }).(pulumi.StringOutput)
}

// SCF function version. This parameter takes effect when `serviceConfigType` is `SCF`.
func (o ImportOpenApiOutput) ServiceConfigScfFunctionQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigScfFunctionQualifier }).(pulumi.StringOutput)
}

// Scf function type. Effective when the backend type is SCF. Support Event Triggering (EVENT) and HTTP Direct Cloud Function (HTTP).
func (o ImportOpenApiOutput) ServiceConfigScfFunctionType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigScfFunctionType }).(pulumi.StringOutput)
}

// Whether to enable response integration. Effective when the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigScfIsIntegratedResponse() pulumi.BoolOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.BoolOutput { return v.ServiceConfigScfIsIntegratedResponse }).(pulumi.BoolOutput)
}

// API backend service timeout period in seconds. Default value: `5`.
func (o ImportOpenApiOutput) ServiceConfigTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.IntOutput { return v.ServiceConfigTimeout }).(pulumi.IntOutput)
}

// The backend service type of the API. Supports HTTP, MOCK, TSF, SCF, WEBSOCKET, COS, TARGET (internal testing).
func (o ImportOpenApiOutput) ServiceConfigType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigType }).(pulumi.StringOutput)
}

// Only required when binding to VPC channelsNote: This field may return null, indicating that a valid value cannot be obtained.
func (o ImportOpenApiOutput) ServiceConfigUpstreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigUpstreamId }).(pulumi.StringOutput)
}

// The backend service URL of the API. If the ServiceType is HTTP, this parameter must be passed.
func (o ImportOpenApiOutput) ServiceConfigUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigUrl }).(pulumi.StringOutput)
}

// Unique VPC ID.
func (o ImportOpenApiOutput) ServiceConfigVpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigVpcId }).(pulumi.StringOutput)
}

// Scf websocket cleaning function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketCleanupFunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketCleanupFunctionName }).(pulumi.StringOutput)
}

// Scf websocket cleans up the function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketCleanupFunctionNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketCleanupFunctionNamespace }).(pulumi.StringOutput)
}

// Scf websocket cleaning function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketCleanupFunctionQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketCleanupFunctionQualifier }).(pulumi.StringOutput)
}

// Scf websocket registration function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketRegisterFunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketRegisterFunctionName }).(pulumi.StringOutput)
}

// Scf websocket registers function namespaces. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketRegisterFunctionNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketRegisterFunctionNamespace }).(pulumi.StringOutput)
}

// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketRegisterFunctionQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketRegisterFunctionQualifier }).(pulumi.StringOutput)
}

// Scf websocket transfer function. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketTransportFunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketTransportFunctionName }).(pulumi.StringOutput)
}

// Scf websocket transfer function namespace. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketTransportFunctionNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketTransportFunctionNamespace }).(pulumi.StringOutput)
}

// Scf websocket transfer function version. It takes effect when the current end type is WEBSOCKET and the backend type is SCF.
func (o ImportOpenApiOutput) ServiceConfigWebsocketTransportFunctionQualifier() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceConfigWebsocketTransportFunctionQualifier }).(pulumi.StringOutput)
}

// The unique ID of the service where the API is located.
func (o ImportOpenApiOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The backend service parameters of the API.
func (o ImportOpenApiOutput) ServiceParameters() ImportOpenApiServiceParameterArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiServiceParameterArrayOutput { return v.ServiceParameters }).(ImportOpenApiServiceParameterArrayOutput)
}

// Health check configuration for microservices.
func (o ImportOpenApiOutput) ServiceTsfHealthCheckConfs() ImportOpenApiServiceTsfHealthCheckConfArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiServiceTsfHealthCheckConfArrayOutput {
		return v.ServiceTsfHealthCheckConfs
	}).(ImportOpenApiServiceTsfHealthCheckConfArrayOutput)
}

// Load balancing configuration for microservices.
func (o ImportOpenApiOutput) ServiceTsfLoadBalanceConfs() ImportOpenApiServiceTsfLoadBalanceConfArrayOutput {
	return o.ApplyT(func(v *ImportOpenApi) ImportOpenApiServiceTsfLoadBalanceConfArrayOutput {
		return v.ServiceTsfLoadBalanceConfs
	}).(ImportOpenApiServiceTsfLoadBalanceConfArrayOutput)
}

// Last modified time in the format of YYYY-MM-DDThh:mm:ssZ according to ISO 8601 standard. UTC time is used.
func (o ImportOpenApiOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportOpenApi) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type ImportOpenApiArrayOutput struct{ *pulumi.OutputState }

func (ImportOpenApiArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImportOpenApi)(nil)).Elem()
}

func (o ImportOpenApiArrayOutput) ToImportOpenApiArrayOutput() ImportOpenApiArrayOutput {
	return o
}

func (o ImportOpenApiArrayOutput) ToImportOpenApiArrayOutputWithContext(ctx context.Context) ImportOpenApiArrayOutput {
	return o
}

func (o ImportOpenApiArrayOutput) Index(i pulumi.IntInput) ImportOpenApiOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImportOpenApi {
		return vs[0].([]*ImportOpenApi)[vs[1].(int)]
	}).(ImportOpenApiOutput)
}

type ImportOpenApiMapOutput struct{ *pulumi.OutputState }

func (ImportOpenApiMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImportOpenApi)(nil)).Elem()
}

func (o ImportOpenApiMapOutput) ToImportOpenApiMapOutput() ImportOpenApiMapOutput {
	return o
}

func (o ImportOpenApiMapOutput) ToImportOpenApiMapOutputWithContext(ctx context.Context) ImportOpenApiMapOutput {
	return o
}

func (o ImportOpenApiMapOutput) MapIndex(k pulumi.StringInput) ImportOpenApiOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImportOpenApi {
		return vs[0].(map[string]*ImportOpenApi)[vs[1].(string)]
	}).(ImportOpenApiOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImportOpenApiInput)(nil)).Elem(), &ImportOpenApi{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImportOpenApiArrayInput)(nil)).Elem(), ImportOpenApiArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImportOpenApiMapInput)(nil)).Elem(), ImportOpenApiMap{})
	pulumi.RegisterOutputType(ImportOpenApiOutput{})
	pulumi.RegisterOutputType(ImportOpenApiArrayOutput{})
	pulumi.RegisterOutputType(ImportOpenApiMapOutput{})
}
