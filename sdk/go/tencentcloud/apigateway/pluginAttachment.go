// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a apiGateway pluginAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"type":   "white_list",
//				"blocks": "1.1.1.1",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			examplePlugin, err := ApiGateway.NewPlugin(ctx, "examplePlugin", &ApiGateway.PluginArgs{
//				PluginName:  pulumi.String("tf-example"),
//				PluginType:  pulumi.String("IPControl"),
//				PluginData:  pulumi.String(json0),
//				Description: pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			exampleService, err := ApiGateway.NewService(ctx, "exampleService", &ApiGateway.ServiceArgs{
//				ServiceName: pulumi.String("tf_example_service"),
//				Protocol:    pulumi.String("http&https"),
//				ServiceDesc: pulumi.String("your nice service"),
//				NetTypes: pulumi.StringArray{
//					pulumi.String("INNER"),
//					pulumi.String("OUTER"),
//				},
//				IpVersion: pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleApi, err := ApiGateway.NewApi(ctx, "exampleApi", &ApiGateway.ApiArgs{
//				ServiceId:           exampleService.ID(),
//				ApiName:             pulumi.String("tf_example_api"),
//				ApiDesc:             pulumi.String("desc."),
//				AuthType:            pulumi.String("APP"),
//				Protocol:            pulumi.String("HTTP"),
//				EnableCors:          pulumi.Bool(true),
//				RequestConfigPath:   pulumi.String("/user/info"),
//				RequestConfigMethod: pulumi.String("GET"),
//				RequestParameters: apigateway.ApiRequestParameterArray{
//					&apigateway.ApiRequestParameterArgs{
//						Name:         pulumi.String("name"),
//						Position:     pulumi.String("QUERY"),
//						Type:         pulumi.String("string"),
//						Desc:         pulumi.String("desc."),
//						DefaultValue: pulumi.String("terraform"),
//						Required:     pulumi.Bool(true),
//					},
//				},
//				ServiceConfigType:      pulumi.String("HTTP"),
//				ServiceConfigTimeout:   pulumi.Int(15),
//				ServiceConfigUrl:       pulumi.String("https://www.qq.com"),
//				ServiceConfigPath:      pulumi.String("/user"),
//				ServiceConfigMethod:    pulumi.String("GET"),
//				ResponseType:           pulumi.String("HTML"),
//				ResponseSuccessExample: pulumi.String("success"),
//				ResponseFailExample:    pulumi.String("fail"),
//				ResponseErrorCodes: apigateway.ApiResponseErrorCodeArray{
//					&apigateway.ApiResponseErrorCodeArgs{
//						Code:          pulumi.Int(400),
//						Msg:           pulumi.String("system error msg."),
//						Desc:          pulumi.String("system error desc."),
//						ConvertedCode: pulumi.Int(407),
//						NeedConvert:   pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleServiceRelease, err := ApiGateway.NewServiceRelease(ctx, "exampleServiceRelease", &ApiGateway.ServiceReleaseArgs{
//				ServiceId:       exampleApi.ServiceId,
//				EnvironmentName: pulumi.String("release"),
//				ReleaseDesc:     pulumi.String("desc."),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ApiGateway.NewPluginAttachment(ctx, "examplePluginAttachment", &ApiGateway.PluginAttachmentArgs{
//				PluginId:        examplePlugin.ID(),
//				ServiceId:       exampleServiceRelease.ServiceId,
//				ApiId:           exampleApi.ID(),
//				EnvironmentName: pulumi.String("release"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// apiGateway plugin_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:ApiGateway/pluginAttachment:PluginAttachment example plugin-hnqntalp#service-q3f533ja#release#api-62ud9woa
//
// ```
type PluginAttachment struct {
	pulumi.CustomResourceState

	// Id of API.
	ApiId pulumi.StringOutput `pulumi:"apiId"`
	// Name of Environment.
	EnvironmentName pulumi.StringOutput `pulumi:"environmentName"`
	// Id of Plugin.
	PluginId pulumi.StringOutput `pulumi:"pluginId"`
	// Id of Service.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewPluginAttachment registers a new resource with the given unique name, arguments, and options.
func NewPluginAttachment(ctx *pulumi.Context,
	name string, args *PluginAttachmentArgs, opts ...pulumi.ResourceOption) (*PluginAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiId == nil {
		return nil, errors.New("invalid value for required argument 'ApiId'")
	}
	if args.EnvironmentName == nil {
		return nil, errors.New("invalid value for required argument 'EnvironmentName'")
	}
	if args.PluginId == nil {
		return nil, errors.New("invalid value for required argument 'PluginId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PluginAttachment
	err := ctx.RegisterResource("tencentcloud:ApiGateway/pluginAttachment:PluginAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPluginAttachment gets an existing PluginAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPluginAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PluginAttachmentState, opts ...pulumi.ResourceOption) (*PluginAttachment, error) {
	var resource PluginAttachment
	err := ctx.ReadResource("tencentcloud:ApiGateway/pluginAttachment:PluginAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PluginAttachment resources.
type pluginAttachmentState struct {
	// Id of API.
	ApiId *string `pulumi:"apiId"`
	// Name of Environment.
	EnvironmentName *string `pulumi:"environmentName"`
	// Id of Plugin.
	PluginId *string `pulumi:"pluginId"`
	// Id of Service.
	ServiceId *string `pulumi:"serviceId"`
}

type PluginAttachmentState struct {
	// Id of API.
	ApiId pulumi.StringPtrInput
	// Name of Environment.
	EnvironmentName pulumi.StringPtrInput
	// Id of Plugin.
	PluginId pulumi.StringPtrInput
	// Id of Service.
	ServiceId pulumi.StringPtrInput
}

func (PluginAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginAttachmentState)(nil)).Elem()
}

type pluginAttachmentArgs struct {
	// Id of API.
	ApiId string `pulumi:"apiId"`
	// Name of Environment.
	EnvironmentName string `pulumi:"environmentName"`
	// Id of Plugin.
	PluginId string `pulumi:"pluginId"`
	// Id of Service.
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a PluginAttachment resource.
type PluginAttachmentArgs struct {
	// Id of API.
	ApiId pulumi.StringInput
	// Name of Environment.
	EnvironmentName pulumi.StringInput
	// Id of Plugin.
	PluginId pulumi.StringInput
	// Id of Service.
	ServiceId pulumi.StringInput
}

func (PluginAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pluginAttachmentArgs)(nil)).Elem()
}

type PluginAttachmentInput interface {
	pulumi.Input

	ToPluginAttachmentOutput() PluginAttachmentOutput
	ToPluginAttachmentOutputWithContext(ctx context.Context) PluginAttachmentOutput
}

func (*PluginAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**PluginAttachment)(nil)).Elem()
}

func (i *PluginAttachment) ToPluginAttachmentOutput() PluginAttachmentOutput {
	return i.ToPluginAttachmentOutputWithContext(context.Background())
}

func (i *PluginAttachment) ToPluginAttachmentOutputWithContext(ctx context.Context) PluginAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginAttachmentOutput)
}

// PluginAttachmentArrayInput is an input type that accepts PluginAttachmentArray and PluginAttachmentArrayOutput values.
// You can construct a concrete instance of `PluginAttachmentArrayInput` via:
//
//	PluginAttachmentArray{ PluginAttachmentArgs{...} }
type PluginAttachmentArrayInput interface {
	pulumi.Input

	ToPluginAttachmentArrayOutput() PluginAttachmentArrayOutput
	ToPluginAttachmentArrayOutputWithContext(context.Context) PluginAttachmentArrayOutput
}

type PluginAttachmentArray []PluginAttachmentInput

func (PluginAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluginAttachment)(nil)).Elem()
}

func (i PluginAttachmentArray) ToPluginAttachmentArrayOutput() PluginAttachmentArrayOutput {
	return i.ToPluginAttachmentArrayOutputWithContext(context.Background())
}

func (i PluginAttachmentArray) ToPluginAttachmentArrayOutputWithContext(ctx context.Context) PluginAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginAttachmentArrayOutput)
}

// PluginAttachmentMapInput is an input type that accepts PluginAttachmentMap and PluginAttachmentMapOutput values.
// You can construct a concrete instance of `PluginAttachmentMapInput` via:
//
//	PluginAttachmentMap{ "key": PluginAttachmentArgs{...} }
type PluginAttachmentMapInput interface {
	pulumi.Input

	ToPluginAttachmentMapOutput() PluginAttachmentMapOutput
	ToPluginAttachmentMapOutputWithContext(context.Context) PluginAttachmentMapOutput
}

type PluginAttachmentMap map[string]PluginAttachmentInput

func (PluginAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluginAttachment)(nil)).Elem()
}

func (i PluginAttachmentMap) ToPluginAttachmentMapOutput() PluginAttachmentMapOutput {
	return i.ToPluginAttachmentMapOutputWithContext(context.Background())
}

func (i PluginAttachmentMap) ToPluginAttachmentMapOutputWithContext(ctx context.Context) PluginAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PluginAttachmentMapOutput)
}

type PluginAttachmentOutput struct{ *pulumi.OutputState }

func (PluginAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PluginAttachment)(nil)).Elem()
}

func (o PluginAttachmentOutput) ToPluginAttachmentOutput() PluginAttachmentOutput {
	return o
}

func (o PluginAttachmentOutput) ToPluginAttachmentOutputWithContext(ctx context.Context) PluginAttachmentOutput {
	return o
}

// Id of API.
func (o PluginAttachmentOutput) ApiId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.ApiId }).(pulumi.StringOutput)
}

// Name of Environment.
func (o PluginAttachmentOutput) EnvironmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.EnvironmentName }).(pulumi.StringOutput)
}

// Id of Plugin.
func (o PluginAttachmentOutput) PluginId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.PluginId }).(pulumi.StringOutput)
}

// Id of Service.
func (o PluginAttachmentOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *PluginAttachment) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type PluginAttachmentArrayOutput struct{ *pulumi.OutputState }

func (PluginAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PluginAttachment)(nil)).Elem()
}

func (o PluginAttachmentArrayOutput) ToPluginAttachmentArrayOutput() PluginAttachmentArrayOutput {
	return o
}

func (o PluginAttachmentArrayOutput) ToPluginAttachmentArrayOutputWithContext(ctx context.Context) PluginAttachmentArrayOutput {
	return o
}

func (o PluginAttachmentArrayOutput) Index(i pulumi.IntInput) PluginAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PluginAttachment {
		return vs[0].([]*PluginAttachment)[vs[1].(int)]
	}).(PluginAttachmentOutput)
}

type PluginAttachmentMapOutput struct{ *pulumi.OutputState }

func (PluginAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PluginAttachment)(nil)).Elem()
}

func (o PluginAttachmentMapOutput) ToPluginAttachmentMapOutput() PluginAttachmentMapOutput {
	return o
}

func (o PluginAttachmentMapOutput) ToPluginAttachmentMapOutputWithContext(ctx context.Context) PluginAttachmentMapOutput {
	return o
}

func (o PluginAttachmentMapOutput) MapIndex(k pulumi.StringInput) PluginAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PluginAttachment {
		return vs[0].(map[string]*PluginAttachment)[vs[1].(string)]
	}).(PluginAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PluginAttachmentInput)(nil)).Elem(), &PluginAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginAttachmentArrayInput)(nil)).Elem(), PluginAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PluginAttachmentMapInput)(nil)).Elem(), PluginAttachmentMap{})
	pulumi.RegisterOutputType(PluginAttachmentOutput{})
	pulumi.RegisterOutputType(PluginAttachmentArrayOutput{})
	pulumi.RegisterOutputType(PluginAttachmentMapOutput{})
}
