// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a apiGateway updateApiAppKey
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ApiGateway.NewUpdateApiAppKey(ctx, "example", &ApiGateway.UpdateApiAppKeyArgs{
//				ApiAppId:  pulumi.String("app-krljp4wn"),
//				ApiAppKey: pulumi.String("APID6JmG21yRCc03h4z16hlsTqj1wpO3dB3ZQcUP"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UpdateApiAppKey struct {
	pulumi.CustomResourceState

	// Application unique ID.
	ApiAppId pulumi.StringOutput `pulumi:"apiAppId"`
	// Key of the application.
	ApiAppKey pulumi.StringOutput `pulumi:"apiAppKey"`
}

// NewUpdateApiAppKey registers a new resource with the given unique name, arguments, and options.
func NewUpdateApiAppKey(ctx *pulumi.Context,
	name string, args *UpdateApiAppKeyArgs, opts ...pulumi.ResourceOption) (*UpdateApiAppKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiAppId == nil {
		return nil, errors.New("invalid value for required argument 'ApiAppId'")
	}
	if args.ApiAppKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiAppKey'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UpdateApiAppKey
	err := ctx.RegisterResource("tencentcloud:ApiGateway/updateApiAppKey:UpdateApiAppKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpdateApiAppKey gets an existing UpdateApiAppKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpdateApiAppKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpdateApiAppKeyState, opts ...pulumi.ResourceOption) (*UpdateApiAppKey, error) {
	var resource UpdateApiAppKey
	err := ctx.ReadResource("tencentcloud:ApiGateway/updateApiAppKey:UpdateApiAppKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpdateApiAppKey resources.
type updateApiAppKeyState struct {
	// Application unique ID.
	ApiAppId *string `pulumi:"apiAppId"`
	// Key of the application.
	ApiAppKey *string `pulumi:"apiAppKey"`
}

type UpdateApiAppKeyState struct {
	// Application unique ID.
	ApiAppId pulumi.StringPtrInput
	// Key of the application.
	ApiAppKey pulumi.StringPtrInput
}

func (UpdateApiAppKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*updateApiAppKeyState)(nil)).Elem()
}

type updateApiAppKeyArgs struct {
	// Application unique ID.
	ApiAppId string `pulumi:"apiAppId"`
	// Key of the application.
	ApiAppKey string `pulumi:"apiAppKey"`
}

// The set of arguments for constructing a UpdateApiAppKey resource.
type UpdateApiAppKeyArgs struct {
	// Application unique ID.
	ApiAppId pulumi.StringInput
	// Key of the application.
	ApiAppKey pulumi.StringInput
}

func (UpdateApiAppKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*updateApiAppKeyArgs)(nil)).Elem()
}

type UpdateApiAppKeyInput interface {
	pulumi.Input

	ToUpdateApiAppKeyOutput() UpdateApiAppKeyOutput
	ToUpdateApiAppKeyOutputWithContext(ctx context.Context) UpdateApiAppKeyOutput
}

func (*UpdateApiAppKey) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateApiAppKey)(nil)).Elem()
}

func (i *UpdateApiAppKey) ToUpdateApiAppKeyOutput() UpdateApiAppKeyOutput {
	return i.ToUpdateApiAppKeyOutputWithContext(context.Background())
}

func (i *UpdateApiAppKey) ToUpdateApiAppKeyOutputWithContext(ctx context.Context) UpdateApiAppKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateApiAppKeyOutput)
}

// UpdateApiAppKeyArrayInput is an input type that accepts UpdateApiAppKeyArray and UpdateApiAppKeyArrayOutput values.
// You can construct a concrete instance of `UpdateApiAppKeyArrayInput` via:
//
//	UpdateApiAppKeyArray{ UpdateApiAppKeyArgs{...} }
type UpdateApiAppKeyArrayInput interface {
	pulumi.Input

	ToUpdateApiAppKeyArrayOutput() UpdateApiAppKeyArrayOutput
	ToUpdateApiAppKeyArrayOutputWithContext(context.Context) UpdateApiAppKeyArrayOutput
}

type UpdateApiAppKeyArray []UpdateApiAppKeyInput

func (UpdateApiAppKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateApiAppKey)(nil)).Elem()
}

func (i UpdateApiAppKeyArray) ToUpdateApiAppKeyArrayOutput() UpdateApiAppKeyArrayOutput {
	return i.ToUpdateApiAppKeyArrayOutputWithContext(context.Background())
}

func (i UpdateApiAppKeyArray) ToUpdateApiAppKeyArrayOutputWithContext(ctx context.Context) UpdateApiAppKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateApiAppKeyArrayOutput)
}

// UpdateApiAppKeyMapInput is an input type that accepts UpdateApiAppKeyMap and UpdateApiAppKeyMapOutput values.
// You can construct a concrete instance of `UpdateApiAppKeyMapInput` via:
//
//	UpdateApiAppKeyMap{ "key": UpdateApiAppKeyArgs{...} }
type UpdateApiAppKeyMapInput interface {
	pulumi.Input

	ToUpdateApiAppKeyMapOutput() UpdateApiAppKeyMapOutput
	ToUpdateApiAppKeyMapOutputWithContext(context.Context) UpdateApiAppKeyMapOutput
}

type UpdateApiAppKeyMap map[string]UpdateApiAppKeyInput

func (UpdateApiAppKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateApiAppKey)(nil)).Elem()
}

func (i UpdateApiAppKeyMap) ToUpdateApiAppKeyMapOutput() UpdateApiAppKeyMapOutput {
	return i.ToUpdateApiAppKeyMapOutputWithContext(context.Background())
}

func (i UpdateApiAppKeyMap) ToUpdateApiAppKeyMapOutputWithContext(ctx context.Context) UpdateApiAppKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateApiAppKeyMapOutput)
}

type UpdateApiAppKeyOutput struct{ *pulumi.OutputState }

func (UpdateApiAppKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateApiAppKey)(nil)).Elem()
}

func (o UpdateApiAppKeyOutput) ToUpdateApiAppKeyOutput() UpdateApiAppKeyOutput {
	return o
}

func (o UpdateApiAppKeyOutput) ToUpdateApiAppKeyOutputWithContext(ctx context.Context) UpdateApiAppKeyOutput {
	return o
}

// Application unique ID.
func (o UpdateApiAppKeyOutput) ApiAppId() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateApiAppKey) pulumi.StringOutput { return v.ApiAppId }).(pulumi.StringOutput)
}

// Key of the application.
func (o UpdateApiAppKeyOutput) ApiAppKey() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateApiAppKey) pulumi.StringOutput { return v.ApiAppKey }).(pulumi.StringOutput)
}

type UpdateApiAppKeyArrayOutput struct{ *pulumi.OutputState }

func (UpdateApiAppKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateApiAppKey)(nil)).Elem()
}

func (o UpdateApiAppKeyArrayOutput) ToUpdateApiAppKeyArrayOutput() UpdateApiAppKeyArrayOutput {
	return o
}

func (o UpdateApiAppKeyArrayOutput) ToUpdateApiAppKeyArrayOutputWithContext(ctx context.Context) UpdateApiAppKeyArrayOutput {
	return o
}

func (o UpdateApiAppKeyArrayOutput) Index(i pulumi.IntInput) UpdateApiAppKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpdateApiAppKey {
		return vs[0].([]*UpdateApiAppKey)[vs[1].(int)]
	}).(UpdateApiAppKeyOutput)
}

type UpdateApiAppKeyMapOutput struct{ *pulumi.OutputState }

func (UpdateApiAppKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateApiAppKey)(nil)).Elem()
}

func (o UpdateApiAppKeyMapOutput) ToUpdateApiAppKeyMapOutput() UpdateApiAppKeyMapOutput {
	return o
}

func (o UpdateApiAppKeyMapOutput) ToUpdateApiAppKeyMapOutputWithContext(ctx context.Context) UpdateApiAppKeyMapOutput {
	return o
}

func (o UpdateApiAppKeyMapOutput) MapIndex(k pulumi.StringInput) UpdateApiAppKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpdateApiAppKey {
		return vs[0].(map[string]*UpdateApiAppKey)[vs[1].(string)]
	}).(UpdateApiAppKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateApiAppKeyInput)(nil)).Elem(), &UpdateApiAppKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateApiAppKeyArrayInput)(nil)).Elem(), UpdateApiAppKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateApiAppKeyMapInput)(nil)).Elem(), UpdateApiAppKeyMap{})
	pulumi.RegisterOutputType(UpdateApiAppKeyOutput{})
	pulumi.RegisterOutputType(UpdateApiAppKeyArrayOutput{})
	pulumi.RegisterOutputType(UpdateApiAppKeyMapOutput{})
}
