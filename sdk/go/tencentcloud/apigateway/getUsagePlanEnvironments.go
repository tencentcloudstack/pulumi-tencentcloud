// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Used to query the environment list bound by the plan.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/ApiGateway"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			plan, err := ApiGateway.NewUsagePlan(ctx, "plan", &ApiGateway.UsagePlanArgs{
//				UsagePlanName:       pulumi.String("my_plan"),
//				UsagePlanDesc:       pulumi.String("nice plan"),
//				MaxRequestNum:       pulumi.Int(100),
//				MaxRequestNumPreSec: pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			service, err := ApiGateway.NewService(ctx, "service", &ApiGateway.ServiceArgs{
//				ServiceName: pulumi.String("niceservice"),
//				Protocol:    pulumi.String("http&https"),
//				ServiceDesc: pulumi.String("your nice service"),
//				NetTypes: pulumi.StringArray{
//					pulumi.String("INNER"),
//					pulumi.String("OUTER"),
//				},
//				IpVersion: pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			attachService, err := ApiGateway.NewUsagePlanAttachment(ctx, "attachService", &ApiGateway.UsagePlanAttachmentArgs{
//				UsagePlanId: plan.ID(),
//				ServiceId:   service.ID(),
//				Environment: pulumi.String("test"),
//				BindType:    pulumi.String("SERVICE"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = ApiGateway.GetUsagePlanEnvironmentsOutput(ctx, apigateway.GetUsagePlanEnvironmentsOutputArgs{
//				UsagePlanId: attachService.UsagePlanId,
//				BindType:    pulumi.String("SERVICE"),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetUsagePlanEnvironments(ctx *pulumi.Context, args *GetUsagePlanEnvironmentsArgs, opts ...pulumi.InvokeOption) (*GetUsagePlanEnvironmentsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetUsagePlanEnvironmentsResult
	err := ctx.Invoke("tencentcloud:ApiGateway/getUsagePlanEnvironments:getUsagePlanEnvironments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUsagePlanEnvironments.
type GetUsagePlanEnvironmentsArgs struct {
	// Binding type. Valid values: `API`, `SERVICE`. Default value: `SERVICE`.
	BindType *string `pulumi:"bindType"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// ID of the usage plan to be queried.
	UsagePlanId string `pulumi:"usagePlanId"`
}

// A collection of values returned by getUsagePlanEnvironments.
type GetUsagePlanEnvironmentsResult struct {
	BindType *string `pulumi:"bindType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list of usage plan binding details.
	Lists            []GetUsagePlanEnvironmentsList `pulumi:"lists"`
	ResultOutputFile *string                        `pulumi:"resultOutputFile"`
	UsagePlanId      string                         `pulumi:"usagePlanId"`
}

func GetUsagePlanEnvironmentsOutput(ctx *pulumi.Context, args GetUsagePlanEnvironmentsOutputArgs, opts ...pulumi.InvokeOption) GetUsagePlanEnvironmentsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUsagePlanEnvironmentsResult, error) {
			args := v.(GetUsagePlanEnvironmentsArgs)
			r, err := GetUsagePlanEnvironments(ctx, &args, opts...)
			var s GetUsagePlanEnvironmentsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUsagePlanEnvironmentsResultOutput)
}

// A collection of arguments for invoking getUsagePlanEnvironments.
type GetUsagePlanEnvironmentsOutputArgs struct {
	// Binding type. Valid values: `API`, `SERVICE`. Default value: `SERVICE`.
	BindType pulumi.StringPtrInput `pulumi:"bindType"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// ID of the usage plan to be queried.
	UsagePlanId pulumi.StringInput `pulumi:"usagePlanId"`
}

func (GetUsagePlanEnvironmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagePlanEnvironmentsArgs)(nil)).Elem()
}

// A collection of values returned by getUsagePlanEnvironments.
type GetUsagePlanEnvironmentsResultOutput struct{ *pulumi.OutputState }

func (GetUsagePlanEnvironmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsagePlanEnvironmentsResult)(nil)).Elem()
}

func (o GetUsagePlanEnvironmentsResultOutput) ToGetUsagePlanEnvironmentsResultOutput() GetUsagePlanEnvironmentsResultOutput {
	return o
}

func (o GetUsagePlanEnvironmentsResultOutput) ToGetUsagePlanEnvironmentsResultOutputWithContext(ctx context.Context) GetUsagePlanEnvironmentsResultOutput {
	return o
}

func (o GetUsagePlanEnvironmentsResultOutput) BindType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsagePlanEnvironmentsResult) *string { return v.BindType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetUsagePlanEnvironmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagePlanEnvironmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list of usage plan binding details.
func (o GetUsagePlanEnvironmentsResultOutput) Lists() GetUsagePlanEnvironmentsListArrayOutput {
	return o.ApplyT(func(v GetUsagePlanEnvironmentsResult) []GetUsagePlanEnvironmentsList { return v.Lists }).(GetUsagePlanEnvironmentsListArrayOutput)
}

func (o GetUsagePlanEnvironmentsResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUsagePlanEnvironmentsResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetUsagePlanEnvironmentsResultOutput) UsagePlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsagePlanEnvironmentsResult) string { return v.UsagePlanId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUsagePlanEnvironmentsResultOutput{})
}
