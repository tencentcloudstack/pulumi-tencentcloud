// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dlc workGroup
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.NewWorkGroup(ctx, "workGroup", &Dlc.WorkGroupArgs{
//				WorkGroupDescription: pulumi.String("dlc workgroup test"),
//				WorkGroupName:        pulumi.String("tf-demo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dlc work_group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dlc/workGroup:WorkGroup work_group work_group_id
//
// ```
type WorkGroup struct {
	pulumi.CustomResourceState

	// A collection of user IDs that has been bound to the workgroup.
	UserIds pulumi.StringArrayOutput `pulumi:"userIds"`
	// Description of Work Group.
	WorkGroupDescription pulumi.StringPtrOutput `pulumi:"workGroupDescription"`
	// Name of Work Group.
	WorkGroupName pulumi.StringOutput `pulumi:"workGroupName"`
}

// NewWorkGroup registers a new resource with the given unique name, arguments, and options.
func NewWorkGroup(ctx *pulumi.Context,
	name string, args *WorkGroupArgs, opts ...pulumi.ResourceOption) (*WorkGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkGroupName == nil {
		return nil, errors.New("invalid value for required argument 'WorkGroupName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WorkGroup
	err := ctx.RegisterResource("tencentcloud:Dlc/workGroup:WorkGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkGroup gets an existing WorkGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkGroupState, opts ...pulumi.ResourceOption) (*WorkGroup, error) {
	var resource WorkGroup
	err := ctx.ReadResource("tencentcloud:Dlc/workGroup:WorkGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkGroup resources.
type workGroupState struct {
	// A collection of user IDs that has been bound to the workgroup.
	UserIds []string `pulumi:"userIds"`
	// Description of Work Group.
	WorkGroupDescription *string `pulumi:"workGroupDescription"`
	// Name of Work Group.
	WorkGroupName *string `pulumi:"workGroupName"`
}

type WorkGroupState struct {
	// A collection of user IDs that has been bound to the workgroup.
	UserIds pulumi.StringArrayInput
	// Description of Work Group.
	WorkGroupDescription pulumi.StringPtrInput
	// Name of Work Group.
	WorkGroupName pulumi.StringPtrInput
}

func (WorkGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workGroupState)(nil)).Elem()
}

type workGroupArgs struct {
	// Description of Work Group.
	WorkGroupDescription *string `pulumi:"workGroupDescription"`
	// Name of Work Group.
	WorkGroupName string `pulumi:"workGroupName"`
}

// The set of arguments for constructing a WorkGroup resource.
type WorkGroupArgs struct {
	// Description of Work Group.
	WorkGroupDescription pulumi.StringPtrInput
	// Name of Work Group.
	WorkGroupName pulumi.StringInput
}

func (WorkGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workGroupArgs)(nil)).Elem()
}

type WorkGroupInput interface {
	pulumi.Input

	ToWorkGroupOutput() WorkGroupOutput
	ToWorkGroupOutputWithContext(ctx context.Context) WorkGroupOutput
}

func (*WorkGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkGroup)(nil)).Elem()
}

func (i *WorkGroup) ToWorkGroupOutput() WorkGroupOutput {
	return i.ToWorkGroupOutputWithContext(context.Background())
}

func (i *WorkGroup) ToWorkGroupOutputWithContext(ctx context.Context) WorkGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkGroupOutput)
}

// WorkGroupArrayInput is an input type that accepts WorkGroupArray and WorkGroupArrayOutput values.
// You can construct a concrete instance of `WorkGroupArrayInput` via:
//
//	WorkGroupArray{ WorkGroupArgs{...} }
type WorkGroupArrayInput interface {
	pulumi.Input

	ToWorkGroupArrayOutput() WorkGroupArrayOutput
	ToWorkGroupArrayOutputWithContext(context.Context) WorkGroupArrayOutput
}

type WorkGroupArray []WorkGroupInput

func (WorkGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkGroup)(nil)).Elem()
}

func (i WorkGroupArray) ToWorkGroupArrayOutput() WorkGroupArrayOutput {
	return i.ToWorkGroupArrayOutputWithContext(context.Background())
}

func (i WorkGroupArray) ToWorkGroupArrayOutputWithContext(ctx context.Context) WorkGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkGroupArrayOutput)
}

// WorkGroupMapInput is an input type that accepts WorkGroupMap and WorkGroupMapOutput values.
// You can construct a concrete instance of `WorkGroupMapInput` via:
//
//	WorkGroupMap{ "key": WorkGroupArgs{...} }
type WorkGroupMapInput interface {
	pulumi.Input

	ToWorkGroupMapOutput() WorkGroupMapOutput
	ToWorkGroupMapOutputWithContext(context.Context) WorkGroupMapOutput
}

type WorkGroupMap map[string]WorkGroupInput

func (WorkGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkGroup)(nil)).Elem()
}

func (i WorkGroupMap) ToWorkGroupMapOutput() WorkGroupMapOutput {
	return i.ToWorkGroupMapOutputWithContext(context.Background())
}

func (i WorkGroupMap) ToWorkGroupMapOutputWithContext(ctx context.Context) WorkGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkGroupMapOutput)
}

type WorkGroupOutput struct{ *pulumi.OutputState }

func (WorkGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkGroup)(nil)).Elem()
}

func (o WorkGroupOutput) ToWorkGroupOutput() WorkGroupOutput {
	return o
}

func (o WorkGroupOutput) ToWorkGroupOutputWithContext(ctx context.Context) WorkGroupOutput {
	return o
}

// A collection of user IDs that has been bound to the workgroup.
func (o WorkGroupOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkGroup) pulumi.StringArrayOutput { return v.UserIds }).(pulumi.StringArrayOutput)
}

// Description of Work Group.
func (o WorkGroupOutput) WorkGroupDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkGroup) pulumi.StringPtrOutput { return v.WorkGroupDescription }).(pulumi.StringPtrOutput)
}

// Name of Work Group.
func (o WorkGroupOutput) WorkGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkGroup) pulumi.StringOutput { return v.WorkGroupName }).(pulumi.StringOutput)
}

type WorkGroupArrayOutput struct{ *pulumi.OutputState }

func (WorkGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkGroup)(nil)).Elem()
}

func (o WorkGroupArrayOutput) ToWorkGroupArrayOutput() WorkGroupArrayOutput {
	return o
}

func (o WorkGroupArrayOutput) ToWorkGroupArrayOutputWithContext(ctx context.Context) WorkGroupArrayOutput {
	return o
}

func (o WorkGroupArrayOutput) Index(i pulumi.IntInput) WorkGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkGroup {
		return vs[0].([]*WorkGroup)[vs[1].(int)]
	}).(WorkGroupOutput)
}

type WorkGroupMapOutput struct{ *pulumi.OutputState }

func (WorkGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkGroup)(nil)).Elem()
}

func (o WorkGroupMapOutput) ToWorkGroupMapOutput() WorkGroupMapOutput {
	return o
}

func (o WorkGroupMapOutput) ToWorkGroupMapOutputWithContext(ctx context.Context) WorkGroupMapOutput {
	return o
}

func (o WorkGroupMapOutput) MapIndex(k pulumi.StringInput) WorkGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkGroup {
		return vs[0].(map[string]*WorkGroup)[vs[1].(string)]
	}).(WorkGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkGroupInput)(nil)).Elem(), &WorkGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkGroupArrayInput)(nil)).Elem(), WorkGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkGroupMapInput)(nil)).Elem(), WorkGroupMap{})
	pulumi.RegisterOutputType(WorkGroupOutput{})
	pulumi.RegisterOutputType(WorkGroupArrayOutput{})
	pulumi.RegisterOutputType(WorkGroupMapOutput{})
}
