// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dlc storeLocationConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.NewStoreLocationConfig(ctx, "storeLocationConfig", &Dlc.StoreLocationConfigArgs{
//				Enable:        pulumi.Int(1),
//				StoreLocation: pulumi.String("cosn://bucketname/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dlc store_location_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dlc/storeLocationConfig:StoreLocationConfig store_location_config store_location_config_id
//
// ```
type StoreLocationConfig struct {
	pulumi.CustomResourceState

	// Whether to enable advanced settings: 0-no, 1-yes.
	Enable pulumi.IntOutput `pulumi:"enable"`
	// The calculation results are stored in the cos path, such as: cosn://bucketname/.
	StoreLocation pulumi.StringOutput `pulumi:"storeLocation"`
}

// NewStoreLocationConfig registers a new resource with the given unique name, arguments, and options.
func NewStoreLocationConfig(ctx *pulumi.Context,
	name string, args *StoreLocationConfigArgs, opts ...pulumi.ResourceOption) (*StoreLocationConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.StoreLocation == nil {
		return nil, errors.New("invalid value for required argument 'StoreLocation'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource StoreLocationConfig
	err := ctx.RegisterResource("tencentcloud:Dlc/storeLocationConfig:StoreLocationConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStoreLocationConfig gets an existing StoreLocationConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStoreLocationConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreLocationConfigState, opts ...pulumi.ResourceOption) (*StoreLocationConfig, error) {
	var resource StoreLocationConfig
	err := ctx.ReadResource("tencentcloud:Dlc/storeLocationConfig:StoreLocationConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StoreLocationConfig resources.
type storeLocationConfigState struct {
	// Whether to enable advanced settings: 0-no, 1-yes.
	Enable *int `pulumi:"enable"`
	// The calculation results are stored in the cos path, such as: cosn://bucketname/.
	StoreLocation *string `pulumi:"storeLocation"`
}

type StoreLocationConfigState struct {
	// Whether to enable advanced settings: 0-no, 1-yes.
	Enable pulumi.IntPtrInput
	// The calculation results are stored in the cos path, such as: cosn://bucketname/.
	StoreLocation pulumi.StringPtrInput
}

func (StoreLocationConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*storeLocationConfigState)(nil)).Elem()
}

type storeLocationConfigArgs struct {
	// Whether to enable advanced settings: 0-no, 1-yes.
	Enable int `pulumi:"enable"`
	// The calculation results are stored in the cos path, such as: cosn://bucketname/.
	StoreLocation string `pulumi:"storeLocation"`
}

// The set of arguments for constructing a StoreLocationConfig resource.
type StoreLocationConfigArgs struct {
	// Whether to enable advanced settings: 0-no, 1-yes.
	Enable pulumi.IntInput
	// The calculation results are stored in the cos path, such as: cosn://bucketname/.
	StoreLocation pulumi.StringInput
}

func (StoreLocationConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storeLocationConfigArgs)(nil)).Elem()
}

type StoreLocationConfigInput interface {
	pulumi.Input

	ToStoreLocationConfigOutput() StoreLocationConfigOutput
	ToStoreLocationConfigOutputWithContext(ctx context.Context) StoreLocationConfigOutput
}

func (*StoreLocationConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreLocationConfig)(nil)).Elem()
}

func (i *StoreLocationConfig) ToStoreLocationConfigOutput() StoreLocationConfigOutput {
	return i.ToStoreLocationConfigOutputWithContext(context.Background())
}

func (i *StoreLocationConfig) ToStoreLocationConfigOutputWithContext(ctx context.Context) StoreLocationConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreLocationConfigOutput)
}

// StoreLocationConfigArrayInput is an input type that accepts StoreLocationConfigArray and StoreLocationConfigArrayOutput values.
// You can construct a concrete instance of `StoreLocationConfigArrayInput` via:
//
//	StoreLocationConfigArray{ StoreLocationConfigArgs{...} }
type StoreLocationConfigArrayInput interface {
	pulumi.Input

	ToStoreLocationConfigArrayOutput() StoreLocationConfigArrayOutput
	ToStoreLocationConfigArrayOutputWithContext(context.Context) StoreLocationConfigArrayOutput
}

type StoreLocationConfigArray []StoreLocationConfigInput

func (StoreLocationConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoreLocationConfig)(nil)).Elem()
}

func (i StoreLocationConfigArray) ToStoreLocationConfigArrayOutput() StoreLocationConfigArrayOutput {
	return i.ToStoreLocationConfigArrayOutputWithContext(context.Background())
}

func (i StoreLocationConfigArray) ToStoreLocationConfigArrayOutputWithContext(ctx context.Context) StoreLocationConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreLocationConfigArrayOutput)
}

// StoreLocationConfigMapInput is an input type that accepts StoreLocationConfigMap and StoreLocationConfigMapOutput values.
// You can construct a concrete instance of `StoreLocationConfigMapInput` via:
//
//	StoreLocationConfigMap{ "key": StoreLocationConfigArgs{...} }
type StoreLocationConfigMapInput interface {
	pulumi.Input

	ToStoreLocationConfigMapOutput() StoreLocationConfigMapOutput
	ToStoreLocationConfigMapOutputWithContext(context.Context) StoreLocationConfigMapOutput
}

type StoreLocationConfigMap map[string]StoreLocationConfigInput

func (StoreLocationConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoreLocationConfig)(nil)).Elem()
}

func (i StoreLocationConfigMap) ToStoreLocationConfigMapOutput() StoreLocationConfigMapOutput {
	return i.ToStoreLocationConfigMapOutputWithContext(context.Background())
}

func (i StoreLocationConfigMap) ToStoreLocationConfigMapOutputWithContext(ctx context.Context) StoreLocationConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreLocationConfigMapOutput)
}

type StoreLocationConfigOutput struct{ *pulumi.OutputState }

func (StoreLocationConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreLocationConfig)(nil)).Elem()
}

func (o StoreLocationConfigOutput) ToStoreLocationConfigOutput() StoreLocationConfigOutput {
	return o
}

func (o StoreLocationConfigOutput) ToStoreLocationConfigOutputWithContext(ctx context.Context) StoreLocationConfigOutput {
	return o
}

// Whether to enable advanced settings: 0-no, 1-yes.
func (o StoreLocationConfigOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *StoreLocationConfig) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// The calculation results are stored in the cos path, such as: cosn://bucketname/.
func (o StoreLocationConfigOutput) StoreLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *StoreLocationConfig) pulumi.StringOutput { return v.StoreLocation }).(pulumi.StringOutput)
}

type StoreLocationConfigArrayOutput struct{ *pulumi.OutputState }

func (StoreLocationConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StoreLocationConfig)(nil)).Elem()
}

func (o StoreLocationConfigArrayOutput) ToStoreLocationConfigArrayOutput() StoreLocationConfigArrayOutput {
	return o
}

func (o StoreLocationConfigArrayOutput) ToStoreLocationConfigArrayOutputWithContext(ctx context.Context) StoreLocationConfigArrayOutput {
	return o
}

func (o StoreLocationConfigArrayOutput) Index(i pulumi.IntInput) StoreLocationConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StoreLocationConfig {
		return vs[0].([]*StoreLocationConfig)[vs[1].(int)]
	}).(StoreLocationConfigOutput)
}

type StoreLocationConfigMapOutput struct{ *pulumi.OutputState }

func (StoreLocationConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StoreLocationConfig)(nil)).Elem()
}

func (o StoreLocationConfigMapOutput) ToStoreLocationConfigMapOutput() StoreLocationConfigMapOutput {
	return o
}

func (o StoreLocationConfigMapOutput) ToStoreLocationConfigMapOutputWithContext(ctx context.Context) StoreLocationConfigMapOutput {
	return o
}

func (o StoreLocationConfigMapOutput) MapIndex(k pulumi.StringInput) StoreLocationConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StoreLocationConfig {
		return vs[0].(map[string]*StoreLocationConfig)[vs[1].(string)]
	}).(StoreLocationConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StoreLocationConfigInput)(nil)).Elem(), &StoreLocationConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreLocationConfigArrayInput)(nil)).Elem(), StoreLocationConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreLocationConfigMapInput)(nil)).Elem(), StoreLocationConfigMap{})
	pulumi.RegisterOutputType(StoreLocationConfigOutput{})
	pulumi.RegisterOutputType(StoreLocationConfigArrayOutput{})
	pulumi.RegisterOutputType(StoreLocationConfigMapOutput{})
}
