// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dlc describeUserType
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.GetDescribeUserType(ctx, &dlc.GetDescribeUserTypeArgs{
//				UserId: pulumi.StringRef("127382378"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDescribeUserType(ctx *pulumi.Context, args *GetDescribeUserTypeArgs, opts ...pulumi.InvokeOption) (*GetDescribeUserTypeResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDescribeUserTypeResult
	err := ctx.Invoke("tencentcloud:Dlc/getDescribeUserType:getDescribeUserType", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDescribeUserType.
type GetDescribeUserTypeArgs struct {
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// User id (uin), if left blank, it defaults to the caller's sub-uin.
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getDescribeUserType.
type GetDescribeUserTypeResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	UserId           *string `pulumi:"userId"`
	// User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
	UserType string `pulumi:"userType"`
}

func GetDescribeUserTypeOutput(ctx *pulumi.Context, args GetDescribeUserTypeOutputArgs, opts ...pulumi.InvokeOption) GetDescribeUserTypeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDescribeUserTypeResult, error) {
			args := v.(GetDescribeUserTypeArgs)
			r, err := GetDescribeUserType(ctx, &args, opts...)
			var s GetDescribeUserTypeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDescribeUserTypeResultOutput)
}

// A collection of arguments for invoking getDescribeUserType.
type GetDescribeUserTypeOutputArgs struct {
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// User id (uin), if left blank, it defaults to the caller's sub-uin.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (GetDescribeUserTypeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDescribeUserTypeArgs)(nil)).Elem()
}

// A collection of values returned by getDescribeUserType.
type GetDescribeUserTypeResultOutput struct{ *pulumi.OutputState }

func (GetDescribeUserTypeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDescribeUserTypeResult)(nil)).Elem()
}

func (o GetDescribeUserTypeResultOutput) ToGetDescribeUserTypeResultOutput() GetDescribeUserTypeResultOutput {
	return o
}

func (o GetDescribeUserTypeResultOutput) ToGetDescribeUserTypeResultOutputWithContext(ctx context.Context) GetDescribeUserTypeResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetDescribeUserTypeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDescribeUserTypeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDescribeUserTypeResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserTypeResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetDescribeUserTypeResultOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserTypeResult) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// User type, only support: ADMIN: ddministrator/COMMON: ordinary user.
func (o GetDescribeUserTypeResultOutput) UserType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDescribeUserTypeResult) string { return v.UserType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDescribeUserTypeResultOutput{})
}
