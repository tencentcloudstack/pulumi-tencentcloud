// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of dlc describeUserInfo
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.GetDescribeUserInfo(ctx, &dlc.GetDescribeUserInfoArgs{
//				SortBy:  pulumi.StringRef("create-time"),
//				Sorting: pulumi.StringRef("desc"),
//				Type:    pulumi.StringRef("Group"),
//				UserId:  pulumi.StringRef("100032772113"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDescribeUserInfo(ctx *pulumi.Context, args *GetDescribeUserInfoArgs, opts ...pulumi.InvokeOption) (*GetDescribeUserInfoResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetDescribeUserInfoResult
	err := ctx.Invoke("tencentcloud:Dlc/getDescribeUserInfo:getDescribeUserInfo", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDescribeUserInfo.
type GetDescribeUserInfoArgs struct {
	// Query filter conditions. when type is Group, fuzzy search with Key as workgroup-name is supported. when type is DataAuth, key is supported. policy-type: permission type, policy-source: data source, data-name: database table. Fuzzy search, when type is EngineAuth, supports fuzzy search of key, policy-type: permission type, policy-source: data source, engine-name: library table.
	Filters []GetDescribeUserInfoFilter `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	// Sorting field, when type is Group, support create-time, group-name, when type is DataAuth, support create-time, when type is EngineAuth, support create-time.
	SortBy *string `pulumi:"sortBy"`
	// Sorting method, desc means forward order, asc means reverse order, the default is asc.
	Sorting *string `pulumi:"sorting"`
	// Query information type, Group: work group DataAuth: data permission EngineAuth: engine permission.
	Type *string `pulumi:"type"`
	// User id, the same as the sub-user uin.
	UserId *string `pulumi:"userId"`
}

// A collection of values returned by getDescribeUserInfo.
type GetDescribeUserInfoResult struct {
	Filters []GetDescribeUserInfoFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id               string  `pulumi:"id"`
	ResultOutputFile *string `pulumi:"resultOutputFile"`
	SortBy           *string `pulumi:"sortBy"`
	Sorting          *string `pulumi:"sorting"`
	// The type of information returned, Group: the returned workgroup information of the current user; DataAuth: the returned data permission information of the current user; EngineAuth: the returned engine permission information of the current user.
	Type *string `pulumi:"type"`
	// User id, the same as the sub-user uin.
	UserId *string `pulumi:"userId"`
	// User details.
	UserInfos []GetDescribeUserInfoUserInfo `pulumi:"userInfos"`
}

func GetDescribeUserInfoOutput(ctx *pulumi.Context, args GetDescribeUserInfoOutputArgs, opts ...pulumi.InvokeOption) GetDescribeUserInfoResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDescribeUserInfoResult, error) {
			args := v.(GetDescribeUserInfoArgs)
			r, err := GetDescribeUserInfo(ctx, &args, opts...)
			var s GetDescribeUserInfoResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDescribeUserInfoResultOutput)
}

// A collection of arguments for invoking getDescribeUserInfo.
type GetDescribeUserInfoOutputArgs struct {
	// Query filter conditions. when type is Group, fuzzy search with Key as workgroup-name is supported. when type is DataAuth, key is supported. policy-type: permission type, policy-source: data source, data-name: database table. Fuzzy search, when type is EngineAuth, supports fuzzy search of key, policy-type: permission type, policy-source: data source, engine-name: library table.
	Filters GetDescribeUserInfoFilterArrayInput `pulumi:"filters"`
	// Used to save results.
	ResultOutputFile pulumi.StringPtrInput `pulumi:"resultOutputFile"`
	// Sorting field, when type is Group, support create-time, group-name, when type is DataAuth, support create-time, when type is EngineAuth, support create-time.
	SortBy pulumi.StringPtrInput `pulumi:"sortBy"`
	// Sorting method, desc means forward order, asc means reverse order, the default is asc.
	Sorting pulumi.StringPtrInput `pulumi:"sorting"`
	// Query information type, Group: work group DataAuth: data permission EngineAuth: engine permission.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User id, the same as the sub-user uin.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (GetDescribeUserInfoOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDescribeUserInfoArgs)(nil)).Elem()
}

// A collection of values returned by getDescribeUserInfo.
type GetDescribeUserInfoResultOutput struct{ *pulumi.OutputState }

func (GetDescribeUserInfoResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDescribeUserInfoResult)(nil)).Elem()
}

func (o GetDescribeUserInfoResultOutput) ToGetDescribeUserInfoResultOutput() GetDescribeUserInfoResultOutput {
	return o
}

func (o GetDescribeUserInfoResultOutput) ToGetDescribeUserInfoResultOutputWithContext(ctx context.Context) GetDescribeUserInfoResultOutput {
	return o
}

func (o GetDescribeUserInfoResultOutput) Filters() GetDescribeUserInfoFilterArrayOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) []GetDescribeUserInfoFilter { return v.Filters }).(GetDescribeUserInfoFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDescribeUserInfoResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDescribeUserInfoResultOutput) ResultOutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) *string { return v.ResultOutputFile }).(pulumi.StringPtrOutput)
}

func (o GetDescribeUserInfoResultOutput) SortBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) *string { return v.SortBy }).(pulumi.StringPtrOutput)
}

func (o GetDescribeUserInfoResultOutput) Sorting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) *string { return v.Sorting }).(pulumi.StringPtrOutput)
}

// The type of information returned, Group: the returned workgroup information of the current user; DataAuth: the returned data permission information of the current user; EngineAuth: the returned engine permission information of the current user.
func (o GetDescribeUserInfoResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User id, the same as the sub-user uin.
func (o GetDescribeUserInfoResultOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

// User details.
func (o GetDescribeUserInfoResultOutput) UserInfos() GetDescribeUserInfoUserInfoArrayOutput {
	return o.ApplyT(func(v GetDescribeUserInfoResult) []GetDescribeUserInfoUserInfo { return v.UserInfos }).(GetDescribeUserInfoUserInfoArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDescribeUserInfoResultOutput{})
}
