// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dlc restartDataEngine
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.NewRestartDataEngineOperation(ctx, "restartDataEngine", &Dlc.RestartDataEngineOperationArgs{
//				DataEngineId:    pulumi.String("DataEngine-g5ds87d8"),
//				ForcedOperation: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RestartDataEngineOperation struct {
	pulumi.CustomResourceState

	// Engine unique id.
	DataEngineId pulumi.StringOutput `pulumi:"dataEngineId"`
	// Whether to force restart and ignore tasks.
	ForcedOperation pulumi.BoolPtrOutput `pulumi:"forcedOperation"`
}

// NewRestartDataEngineOperation registers a new resource with the given unique name, arguments, and options.
func NewRestartDataEngineOperation(ctx *pulumi.Context,
	name string, args *RestartDataEngineOperationArgs, opts ...pulumi.ResourceOption) (*RestartDataEngineOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataEngineId == nil {
		return nil, errors.New("invalid value for required argument 'DataEngineId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RestartDataEngineOperation
	err := ctx.RegisterResource("tencentcloud:Dlc/restartDataEngineOperation:RestartDataEngineOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestartDataEngineOperation gets an existing RestartDataEngineOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestartDataEngineOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestartDataEngineOperationState, opts ...pulumi.ResourceOption) (*RestartDataEngineOperation, error) {
	var resource RestartDataEngineOperation
	err := ctx.ReadResource("tencentcloud:Dlc/restartDataEngineOperation:RestartDataEngineOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RestartDataEngineOperation resources.
type restartDataEngineOperationState struct {
	// Engine unique id.
	DataEngineId *string `pulumi:"dataEngineId"`
	// Whether to force restart and ignore tasks.
	ForcedOperation *bool `pulumi:"forcedOperation"`
}

type RestartDataEngineOperationState struct {
	// Engine unique id.
	DataEngineId pulumi.StringPtrInput
	// Whether to force restart and ignore tasks.
	ForcedOperation pulumi.BoolPtrInput
}

func (RestartDataEngineOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*restartDataEngineOperationState)(nil)).Elem()
}

type restartDataEngineOperationArgs struct {
	// Engine unique id.
	DataEngineId string `pulumi:"dataEngineId"`
	// Whether to force restart and ignore tasks.
	ForcedOperation *bool `pulumi:"forcedOperation"`
}

// The set of arguments for constructing a RestartDataEngineOperation resource.
type RestartDataEngineOperationArgs struct {
	// Engine unique id.
	DataEngineId pulumi.StringInput
	// Whether to force restart and ignore tasks.
	ForcedOperation pulumi.BoolPtrInput
}

func (RestartDataEngineOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restartDataEngineOperationArgs)(nil)).Elem()
}

type RestartDataEngineOperationInput interface {
	pulumi.Input

	ToRestartDataEngineOperationOutput() RestartDataEngineOperationOutput
	ToRestartDataEngineOperationOutputWithContext(ctx context.Context) RestartDataEngineOperationOutput
}

func (*RestartDataEngineOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartDataEngineOperation)(nil)).Elem()
}

func (i *RestartDataEngineOperation) ToRestartDataEngineOperationOutput() RestartDataEngineOperationOutput {
	return i.ToRestartDataEngineOperationOutputWithContext(context.Background())
}

func (i *RestartDataEngineOperation) ToRestartDataEngineOperationOutputWithContext(ctx context.Context) RestartDataEngineOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartDataEngineOperationOutput)
}

// RestartDataEngineOperationArrayInput is an input type that accepts RestartDataEngineOperationArray and RestartDataEngineOperationArrayOutput values.
// You can construct a concrete instance of `RestartDataEngineOperationArrayInput` via:
//
//	RestartDataEngineOperationArray{ RestartDataEngineOperationArgs{...} }
type RestartDataEngineOperationArrayInput interface {
	pulumi.Input

	ToRestartDataEngineOperationArrayOutput() RestartDataEngineOperationArrayOutput
	ToRestartDataEngineOperationArrayOutputWithContext(context.Context) RestartDataEngineOperationArrayOutput
}

type RestartDataEngineOperationArray []RestartDataEngineOperationInput

func (RestartDataEngineOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartDataEngineOperation)(nil)).Elem()
}

func (i RestartDataEngineOperationArray) ToRestartDataEngineOperationArrayOutput() RestartDataEngineOperationArrayOutput {
	return i.ToRestartDataEngineOperationArrayOutputWithContext(context.Background())
}

func (i RestartDataEngineOperationArray) ToRestartDataEngineOperationArrayOutputWithContext(ctx context.Context) RestartDataEngineOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartDataEngineOperationArrayOutput)
}

// RestartDataEngineOperationMapInput is an input type that accepts RestartDataEngineOperationMap and RestartDataEngineOperationMapOutput values.
// You can construct a concrete instance of `RestartDataEngineOperationMapInput` via:
//
//	RestartDataEngineOperationMap{ "key": RestartDataEngineOperationArgs{...} }
type RestartDataEngineOperationMapInput interface {
	pulumi.Input

	ToRestartDataEngineOperationMapOutput() RestartDataEngineOperationMapOutput
	ToRestartDataEngineOperationMapOutputWithContext(context.Context) RestartDataEngineOperationMapOutput
}

type RestartDataEngineOperationMap map[string]RestartDataEngineOperationInput

func (RestartDataEngineOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartDataEngineOperation)(nil)).Elem()
}

func (i RestartDataEngineOperationMap) ToRestartDataEngineOperationMapOutput() RestartDataEngineOperationMapOutput {
	return i.ToRestartDataEngineOperationMapOutputWithContext(context.Background())
}

func (i RestartDataEngineOperationMap) ToRestartDataEngineOperationMapOutputWithContext(ctx context.Context) RestartDataEngineOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestartDataEngineOperationMapOutput)
}

type RestartDataEngineOperationOutput struct{ *pulumi.OutputState }

func (RestartDataEngineOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RestartDataEngineOperation)(nil)).Elem()
}

func (o RestartDataEngineOperationOutput) ToRestartDataEngineOperationOutput() RestartDataEngineOperationOutput {
	return o
}

func (o RestartDataEngineOperationOutput) ToRestartDataEngineOperationOutputWithContext(ctx context.Context) RestartDataEngineOperationOutput {
	return o
}

// Engine unique id.
func (o RestartDataEngineOperationOutput) DataEngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *RestartDataEngineOperation) pulumi.StringOutput { return v.DataEngineId }).(pulumi.StringOutput)
}

// Whether to force restart and ignore tasks.
func (o RestartDataEngineOperationOutput) ForcedOperation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RestartDataEngineOperation) pulumi.BoolPtrOutput { return v.ForcedOperation }).(pulumi.BoolPtrOutput)
}

type RestartDataEngineOperationArrayOutput struct{ *pulumi.OutputState }

func (RestartDataEngineOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RestartDataEngineOperation)(nil)).Elem()
}

func (o RestartDataEngineOperationArrayOutput) ToRestartDataEngineOperationArrayOutput() RestartDataEngineOperationArrayOutput {
	return o
}

func (o RestartDataEngineOperationArrayOutput) ToRestartDataEngineOperationArrayOutputWithContext(ctx context.Context) RestartDataEngineOperationArrayOutput {
	return o
}

func (o RestartDataEngineOperationArrayOutput) Index(i pulumi.IntInput) RestartDataEngineOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RestartDataEngineOperation {
		return vs[0].([]*RestartDataEngineOperation)[vs[1].(int)]
	}).(RestartDataEngineOperationOutput)
}

type RestartDataEngineOperationMapOutput struct{ *pulumi.OutputState }

func (RestartDataEngineOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RestartDataEngineOperation)(nil)).Elem()
}

func (o RestartDataEngineOperationMapOutput) ToRestartDataEngineOperationMapOutput() RestartDataEngineOperationMapOutput {
	return o
}

func (o RestartDataEngineOperationMapOutput) ToRestartDataEngineOperationMapOutputWithContext(ctx context.Context) RestartDataEngineOperationMapOutput {
	return o
}

func (o RestartDataEngineOperationMapOutput) MapIndex(k pulumi.StringInput) RestartDataEngineOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RestartDataEngineOperation {
		return vs[0].(map[string]*RestartDataEngineOperation)[vs[1].(string)]
	}).(RestartDataEngineOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestartDataEngineOperationInput)(nil)).Elem(), &RestartDataEngineOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartDataEngineOperationArrayInput)(nil)).Elem(), RestartDataEngineOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestartDataEngineOperationMapInput)(nil)).Elem(), RestartDataEngineOperationMap{})
	pulumi.RegisterOutputType(RestartDataEngineOperationOutput{})
	pulumi.RegisterOutputType(RestartDataEngineOperationArrayOutput{})
	pulumi.RegisterOutputType(RestartDataEngineOperationMapOutput{})
}
