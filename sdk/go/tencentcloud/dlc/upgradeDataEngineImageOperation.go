// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dlc upgradeDataEngineImageOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.NewUpgradeDataEngineImageOperation(ctx, "upgradeDataEngineImageOperation", &Dlc.UpgradeDataEngineImageOperationArgs{
//				DataEngineId: pulumi.String("DataEngine-g5ds87d8"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UpgradeDataEngineImageOperation struct {
	pulumi.CustomResourceState

	// Engine unique id.
	DataEngineId pulumi.StringOutput `pulumi:"dataEngineId"`
}

// NewUpgradeDataEngineImageOperation registers a new resource with the given unique name, arguments, and options.
func NewUpgradeDataEngineImageOperation(ctx *pulumi.Context,
	name string, args *UpgradeDataEngineImageOperationArgs, opts ...pulumi.ResourceOption) (*UpgradeDataEngineImageOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataEngineId == nil {
		return nil, errors.New("invalid value for required argument 'DataEngineId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UpgradeDataEngineImageOperation
	err := ctx.RegisterResource("tencentcloud:Dlc/upgradeDataEngineImageOperation:UpgradeDataEngineImageOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpgradeDataEngineImageOperation gets an existing UpgradeDataEngineImageOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpgradeDataEngineImageOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpgradeDataEngineImageOperationState, opts ...pulumi.ResourceOption) (*UpgradeDataEngineImageOperation, error) {
	var resource UpgradeDataEngineImageOperation
	err := ctx.ReadResource("tencentcloud:Dlc/upgradeDataEngineImageOperation:UpgradeDataEngineImageOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpgradeDataEngineImageOperation resources.
type upgradeDataEngineImageOperationState struct {
	// Engine unique id.
	DataEngineId *string `pulumi:"dataEngineId"`
}

type UpgradeDataEngineImageOperationState struct {
	// Engine unique id.
	DataEngineId pulumi.StringPtrInput
}

func (UpgradeDataEngineImageOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*upgradeDataEngineImageOperationState)(nil)).Elem()
}

type upgradeDataEngineImageOperationArgs struct {
	// Engine unique id.
	DataEngineId string `pulumi:"dataEngineId"`
}

// The set of arguments for constructing a UpgradeDataEngineImageOperation resource.
type UpgradeDataEngineImageOperationArgs struct {
	// Engine unique id.
	DataEngineId pulumi.StringInput
}

func (UpgradeDataEngineImageOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*upgradeDataEngineImageOperationArgs)(nil)).Elem()
}

type UpgradeDataEngineImageOperationInput interface {
	pulumi.Input

	ToUpgradeDataEngineImageOperationOutput() UpgradeDataEngineImageOperationOutput
	ToUpgradeDataEngineImageOperationOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationOutput
}

func (*UpgradeDataEngineImageOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDataEngineImageOperation)(nil)).Elem()
}

func (i *UpgradeDataEngineImageOperation) ToUpgradeDataEngineImageOperationOutput() UpgradeDataEngineImageOperationOutput {
	return i.ToUpgradeDataEngineImageOperationOutputWithContext(context.Background())
}

func (i *UpgradeDataEngineImageOperation) ToUpgradeDataEngineImageOperationOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDataEngineImageOperationOutput)
}

// UpgradeDataEngineImageOperationArrayInput is an input type that accepts UpgradeDataEngineImageOperationArray and UpgradeDataEngineImageOperationArrayOutput values.
// You can construct a concrete instance of `UpgradeDataEngineImageOperationArrayInput` via:
//
//	UpgradeDataEngineImageOperationArray{ UpgradeDataEngineImageOperationArgs{...} }
type UpgradeDataEngineImageOperationArrayInput interface {
	pulumi.Input

	ToUpgradeDataEngineImageOperationArrayOutput() UpgradeDataEngineImageOperationArrayOutput
	ToUpgradeDataEngineImageOperationArrayOutputWithContext(context.Context) UpgradeDataEngineImageOperationArrayOutput
}

type UpgradeDataEngineImageOperationArray []UpgradeDataEngineImageOperationInput

func (UpgradeDataEngineImageOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpgradeDataEngineImageOperation)(nil)).Elem()
}

func (i UpgradeDataEngineImageOperationArray) ToUpgradeDataEngineImageOperationArrayOutput() UpgradeDataEngineImageOperationArrayOutput {
	return i.ToUpgradeDataEngineImageOperationArrayOutputWithContext(context.Background())
}

func (i UpgradeDataEngineImageOperationArray) ToUpgradeDataEngineImageOperationArrayOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDataEngineImageOperationArrayOutput)
}

// UpgradeDataEngineImageOperationMapInput is an input type that accepts UpgradeDataEngineImageOperationMap and UpgradeDataEngineImageOperationMapOutput values.
// You can construct a concrete instance of `UpgradeDataEngineImageOperationMapInput` via:
//
//	UpgradeDataEngineImageOperationMap{ "key": UpgradeDataEngineImageOperationArgs{...} }
type UpgradeDataEngineImageOperationMapInput interface {
	pulumi.Input

	ToUpgradeDataEngineImageOperationMapOutput() UpgradeDataEngineImageOperationMapOutput
	ToUpgradeDataEngineImageOperationMapOutputWithContext(context.Context) UpgradeDataEngineImageOperationMapOutput
}

type UpgradeDataEngineImageOperationMap map[string]UpgradeDataEngineImageOperationInput

func (UpgradeDataEngineImageOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpgradeDataEngineImageOperation)(nil)).Elem()
}

func (i UpgradeDataEngineImageOperationMap) ToUpgradeDataEngineImageOperationMapOutput() UpgradeDataEngineImageOperationMapOutput {
	return i.ToUpgradeDataEngineImageOperationMapOutputWithContext(context.Background())
}

func (i UpgradeDataEngineImageOperationMap) ToUpgradeDataEngineImageOperationMapOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpgradeDataEngineImageOperationMapOutput)
}

type UpgradeDataEngineImageOperationOutput struct{ *pulumi.OutputState }

func (UpgradeDataEngineImageOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpgradeDataEngineImageOperation)(nil)).Elem()
}

func (o UpgradeDataEngineImageOperationOutput) ToUpgradeDataEngineImageOperationOutput() UpgradeDataEngineImageOperationOutput {
	return o
}

func (o UpgradeDataEngineImageOperationOutput) ToUpgradeDataEngineImageOperationOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationOutput {
	return o
}

// Engine unique id.
func (o UpgradeDataEngineImageOperationOutput) DataEngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *UpgradeDataEngineImageOperation) pulumi.StringOutput { return v.DataEngineId }).(pulumi.StringOutput)
}

type UpgradeDataEngineImageOperationArrayOutput struct{ *pulumi.OutputState }

func (UpgradeDataEngineImageOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpgradeDataEngineImageOperation)(nil)).Elem()
}

func (o UpgradeDataEngineImageOperationArrayOutput) ToUpgradeDataEngineImageOperationArrayOutput() UpgradeDataEngineImageOperationArrayOutput {
	return o
}

func (o UpgradeDataEngineImageOperationArrayOutput) ToUpgradeDataEngineImageOperationArrayOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationArrayOutput {
	return o
}

func (o UpgradeDataEngineImageOperationArrayOutput) Index(i pulumi.IntInput) UpgradeDataEngineImageOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpgradeDataEngineImageOperation {
		return vs[0].([]*UpgradeDataEngineImageOperation)[vs[1].(int)]
	}).(UpgradeDataEngineImageOperationOutput)
}

type UpgradeDataEngineImageOperationMapOutput struct{ *pulumi.OutputState }

func (UpgradeDataEngineImageOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpgradeDataEngineImageOperation)(nil)).Elem()
}

func (o UpgradeDataEngineImageOperationMapOutput) ToUpgradeDataEngineImageOperationMapOutput() UpgradeDataEngineImageOperationMapOutput {
	return o
}

func (o UpgradeDataEngineImageOperationMapOutput) ToUpgradeDataEngineImageOperationMapOutputWithContext(ctx context.Context) UpgradeDataEngineImageOperationMapOutput {
	return o
}

func (o UpgradeDataEngineImageOperationMapOutput) MapIndex(k pulumi.StringInput) UpgradeDataEngineImageOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpgradeDataEngineImageOperation {
		return vs[0].(map[string]*UpgradeDataEngineImageOperation)[vs[1].(string)]
	}).(UpgradeDataEngineImageOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDataEngineImageOperationInput)(nil)).Elem(), &UpgradeDataEngineImageOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDataEngineImageOperationArrayInput)(nil)).Elem(), UpgradeDataEngineImageOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpgradeDataEngineImageOperationMapInput)(nil)).Elem(), UpgradeDataEngineImageOperationMap{})
	pulumi.RegisterOutputType(UpgradeDataEngineImageOperationOutput{})
	pulumi.RegisterOutputType(UpgradeDataEngineImageOperationArrayOutput{})
	pulumi.RegisterOutputType(UpgradeDataEngineImageOperationMapOutput{})
}
