// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dlc updateDataEngineConfigOperation
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dlc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dlc.NewUpdateDataEngineConfigOperation(ctx, "updateDataEngineConfigOperation", &Dlc.UpdateDataEngineConfigOperationArgs{
//				DataEngineConfigCommand: pulumi.String("UpdateSparkSQLLakefsPath"),
//				DataEngineId:            pulumi.String("DataEngine-o3lzpqpo"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type UpdateDataEngineConfigOperation struct {
	pulumi.CustomResourceState

	// Engine configuration command, supports UpdateSparkSQLLakefsPath (update native table configuration), UpdateSparkSQLResultPath (update result path configuration).
	DataEngineConfigCommand pulumi.StringOutput `pulumi:"dataEngineConfigCommand"`
	// Engine unique id.
	DataEngineId pulumi.StringOutput `pulumi:"dataEngineId"`
}

// NewUpdateDataEngineConfigOperation registers a new resource with the given unique name, arguments, and options.
func NewUpdateDataEngineConfigOperation(ctx *pulumi.Context,
	name string, args *UpdateDataEngineConfigOperationArgs, opts ...pulumi.ResourceOption) (*UpdateDataEngineConfigOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataEngineConfigCommand == nil {
		return nil, errors.New("invalid value for required argument 'DataEngineConfigCommand'")
	}
	if args.DataEngineId == nil {
		return nil, errors.New("invalid value for required argument 'DataEngineId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource UpdateDataEngineConfigOperation
	err := ctx.RegisterResource("tencentcloud:Dlc/updateDataEngineConfigOperation:UpdateDataEngineConfigOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpdateDataEngineConfigOperation gets an existing UpdateDataEngineConfigOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpdateDataEngineConfigOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpdateDataEngineConfigOperationState, opts ...pulumi.ResourceOption) (*UpdateDataEngineConfigOperation, error) {
	var resource UpdateDataEngineConfigOperation
	err := ctx.ReadResource("tencentcloud:Dlc/updateDataEngineConfigOperation:UpdateDataEngineConfigOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpdateDataEngineConfigOperation resources.
type updateDataEngineConfigOperationState struct {
	// Engine configuration command, supports UpdateSparkSQLLakefsPath (update native table configuration), UpdateSparkSQLResultPath (update result path configuration).
	DataEngineConfigCommand *string `pulumi:"dataEngineConfigCommand"`
	// Engine unique id.
	DataEngineId *string `pulumi:"dataEngineId"`
}

type UpdateDataEngineConfigOperationState struct {
	// Engine configuration command, supports UpdateSparkSQLLakefsPath (update native table configuration), UpdateSparkSQLResultPath (update result path configuration).
	DataEngineConfigCommand pulumi.StringPtrInput
	// Engine unique id.
	DataEngineId pulumi.StringPtrInput
}

func (UpdateDataEngineConfigOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*updateDataEngineConfigOperationState)(nil)).Elem()
}

type updateDataEngineConfigOperationArgs struct {
	// Engine configuration command, supports UpdateSparkSQLLakefsPath (update native table configuration), UpdateSparkSQLResultPath (update result path configuration).
	DataEngineConfigCommand string `pulumi:"dataEngineConfigCommand"`
	// Engine unique id.
	DataEngineId string `pulumi:"dataEngineId"`
}

// The set of arguments for constructing a UpdateDataEngineConfigOperation resource.
type UpdateDataEngineConfigOperationArgs struct {
	// Engine configuration command, supports UpdateSparkSQLLakefsPath (update native table configuration), UpdateSparkSQLResultPath (update result path configuration).
	DataEngineConfigCommand pulumi.StringInput
	// Engine unique id.
	DataEngineId pulumi.StringInput
}

func (UpdateDataEngineConfigOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*updateDataEngineConfigOperationArgs)(nil)).Elem()
}

type UpdateDataEngineConfigOperationInput interface {
	pulumi.Input

	ToUpdateDataEngineConfigOperationOutput() UpdateDataEngineConfigOperationOutput
	ToUpdateDataEngineConfigOperationOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationOutput
}

func (*UpdateDataEngineConfigOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateDataEngineConfigOperation)(nil)).Elem()
}

func (i *UpdateDataEngineConfigOperation) ToUpdateDataEngineConfigOperationOutput() UpdateDataEngineConfigOperationOutput {
	return i.ToUpdateDataEngineConfigOperationOutputWithContext(context.Background())
}

func (i *UpdateDataEngineConfigOperation) ToUpdateDataEngineConfigOperationOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateDataEngineConfigOperationOutput)
}

// UpdateDataEngineConfigOperationArrayInput is an input type that accepts UpdateDataEngineConfigOperationArray and UpdateDataEngineConfigOperationArrayOutput values.
// You can construct a concrete instance of `UpdateDataEngineConfigOperationArrayInput` via:
//
//	UpdateDataEngineConfigOperationArray{ UpdateDataEngineConfigOperationArgs{...} }
type UpdateDataEngineConfigOperationArrayInput interface {
	pulumi.Input

	ToUpdateDataEngineConfigOperationArrayOutput() UpdateDataEngineConfigOperationArrayOutput
	ToUpdateDataEngineConfigOperationArrayOutputWithContext(context.Context) UpdateDataEngineConfigOperationArrayOutput
}

type UpdateDataEngineConfigOperationArray []UpdateDataEngineConfigOperationInput

func (UpdateDataEngineConfigOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateDataEngineConfigOperation)(nil)).Elem()
}

func (i UpdateDataEngineConfigOperationArray) ToUpdateDataEngineConfigOperationArrayOutput() UpdateDataEngineConfigOperationArrayOutput {
	return i.ToUpdateDataEngineConfigOperationArrayOutputWithContext(context.Background())
}

func (i UpdateDataEngineConfigOperationArray) ToUpdateDataEngineConfigOperationArrayOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateDataEngineConfigOperationArrayOutput)
}

// UpdateDataEngineConfigOperationMapInput is an input type that accepts UpdateDataEngineConfigOperationMap and UpdateDataEngineConfigOperationMapOutput values.
// You can construct a concrete instance of `UpdateDataEngineConfigOperationMapInput` via:
//
//	UpdateDataEngineConfigOperationMap{ "key": UpdateDataEngineConfigOperationArgs{...} }
type UpdateDataEngineConfigOperationMapInput interface {
	pulumi.Input

	ToUpdateDataEngineConfigOperationMapOutput() UpdateDataEngineConfigOperationMapOutput
	ToUpdateDataEngineConfigOperationMapOutputWithContext(context.Context) UpdateDataEngineConfigOperationMapOutput
}

type UpdateDataEngineConfigOperationMap map[string]UpdateDataEngineConfigOperationInput

func (UpdateDataEngineConfigOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateDataEngineConfigOperation)(nil)).Elem()
}

func (i UpdateDataEngineConfigOperationMap) ToUpdateDataEngineConfigOperationMapOutput() UpdateDataEngineConfigOperationMapOutput {
	return i.ToUpdateDataEngineConfigOperationMapOutputWithContext(context.Background())
}

func (i UpdateDataEngineConfigOperationMap) ToUpdateDataEngineConfigOperationMapOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpdateDataEngineConfigOperationMapOutput)
}

type UpdateDataEngineConfigOperationOutput struct{ *pulumi.OutputState }

func (UpdateDataEngineConfigOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpdateDataEngineConfigOperation)(nil)).Elem()
}

func (o UpdateDataEngineConfigOperationOutput) ToUpdateDataEngineConfigOperationOutput() UpdateDataEngineConfigOperationOutput {
	return o
}

func (o UpdateDataEngineConfigOperationOutput) ToUpdateDataEngineConfigOperationOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationOutput {
	return o
}

// Engine configuration command, supports UpdateSparkSQLLakefsPath (update native table configuration), UpdateSparkSQLResultPath (update result path configuration).
func (o UpdateDataEngineConfigOperationOutput) DataEngineConfigCommand() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateDataEngineConfigOperation) pulumi.StringOutput { return v.DataEngineConfigCommand }).(pulumi.StringOutput)
}

// Engine unique id.
func (o UpdateDataEngineConfigOperationOutput) DataEngineId() pulumi.StringOutput {
	return o.ApplyT(func(v *UpdateDataEngineConfigOperation) pulumi.StringOutput { return v.DataEngineId }).(pulumi.StringOutput)
}

type UpdateDataEngineConfigOperationArrayOutput struct{ *pulumi.OutputState }

func (UpdateDataEngineConfigOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpdateDataEngineConfigOperation)(nil)).Elem()
}

func (o UpdateDataEngineConfigOperationArrayOutput) ToUpdateDataEngineConfigOperationArrayOutput() UpdateDataEngineConfigOperationArrayOutput {
	return o
}

func (o UpdateDataEngineConfigOperationArrayOutput) ToUpdateDataEngineConfigOperationArrayOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationArrayOutput {
	return o
}

func (o UpdateDataEngineConfigOperationArrayOutput) Index(i pulumi.IntInput) UpdateDataEngineConfigOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpdateDataEngineConfigOperation {
		return vs[0].([]*UpdateDataEngineConfigOperation)[vs[1].(int)]
	}).(UpdateDataEngineConfigOperationOutput)
}

type UpdateDataEngineConfigOperationMapOutput struct{ *pulumi.OutputState }

func (UpdateDataEngineConfigOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpdateDataEngineConfigOperation)(nil)).Elem()
}

func (o UpdateDataEngineConfigOperationMapOutput) ToUpdateDataEngineConfigOperationMapOutput() UpdateDataEngineConfigOperationMapOutput {
	return o
}

func (o UpdateDataEngineConfigOperationMapOutput) ToUpdateDataEngineConfigOperationMapOutputWithContext(ctx context.Context) UpdateDataEngineConfigOperationMapOutput {
	return o
}

func (o UpdateDataEngineConfigOperationMapOutput) MapIndex(k pulumi.StringInput) UpdateDataEngineConfigOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpdateDataEngineConfigOperation {
		return vs[0].(map[string]*UpdateDataEngineConfigOperation)[vs[1].(string)]
	}).(UpdateDataEngineConfigOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateDataEngineConfigOperationInput)(nil)).Elem(), &UpdateDataEngineConfigOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateDataEngineConfigOperationArrayInput)(nil)).Elem(), UpdateDataEngineConfigOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpdateDataEngineConfigOperationMapInput)(nil)).Elem(), UpdateDataEngineConfigOperationMap{})
	pulumi.RegisterOutputType(UpdateDataEngineConfigOperationOutput{})
	pulumi.RegisterOutputType(UpdateDataEngineConfigOperationArrayOutput{})
	pulumi.RegisterOutputType(UpdateDataEngineConfigOperationMapOutput{})
}
