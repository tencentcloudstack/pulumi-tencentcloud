// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlc

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AttachUserPolicyOperation struct {
	pulumi.CustomResourceState

	// Authentication policy collection.
	PolicySets AttachUserPolicyOperationPolicySetArrayOutput `pulumi:"policySets"`
	// User id, the same as the sub-user uin.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewAttachUserPolicyOperation registers a new resource with the given unique name, arguments, and options.
func NewAttachUserPolicyOperation(ctx *pulumi.Context,
	name string, args *AttachUserPolicyOperationArgs, opts ...pulumi.ResourceOption) (*AttachUserPolicyOperation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AttachUserPolicyOperation
	err := ctx.RegisterResource("tencentcloud:Dlc/attachUserPolicyOperation:AttachUserPolicyOperation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachUserPolicyOperation gets an existing AttachUserPolicyOperation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachUserPolicyOperation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachUserPolicyOperationState, opts ...pulumi.ResourceOption) (*AttachUserPolicyOperation, error) {
	var resource AttachUserPolicyOperation
	err := ctx.ReadResource("tencentcloud:Dlc/attachUserPolicyOperation:AttachUserPolicyOperation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttachUserPolicyOperation resources.
type attachUserPolicyOperationState struct {
	// Authentication policy collection.
	PolicySets []AttachUserPolicyOperationPolicySet `pulumi:"policySets"`
	// User id, the same as the sub-user uin.
	UserId *string `pulumi:"userId"`
}

type AttachUserPolicyOperationState struct {
	// Authentication policy collection.
	PolicySets AttachUserPolicyOperationPolicySetArrayInput
	// User id, the same as the sub-user uin.
	UserId pulumi.StringPtrInput
}

func (AttachUserPolicyOperationState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachUserPolicyOperationState)(nil)).Elem()
}

type attachUserPolicyOperationArgs struct {
	// Authentication policy collection.
	PolicySets []AttachUserPolicyOperationPolicySet `pulumi:"policySets"`
	// User id, the same as the sub-user uin.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a AttachUserPolicyOperation resource.
type AttachUserPolicyOperationArgs struct {
	// Authentication policy collection.
	PolicySets AttachUserPolicyOperationPolicySetArrayInput
	// User id, the same as the sub-user uin.
	UserId pulumi.StringInput
}

func (AttachUserPolicyOperationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachUserPolicyOperationArgs)(nil)).Elem()
}

type AttachUserPolicyOperationInput interface {
	pulumi.Input

	ToAttachUserPolicyOperationOutput() AttachUserPolicyOperationOutput
	ToAttachUserPolicyOperationOutputWithContext(ctx context.Context) AttachUserPolicyOperationOutput
}

func (*AttachUserPolicyOperation) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachUserPolicyOperation)(nil)).Elem()
}

func (i *AttachUserPolicyOperation) ToAttachUserPolicyOperationOutput() AttachUserPolicyOperationOutput {
	return i.ToAttachUserPolicyOperationOutputWithContext(context.Background())
}

func (i *AttachUserPolicyOperation) ToAttachUserPolicyOperationOutputWithContext(ctx context.Context) AttachUserPolicyOperationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachUserPolicyOperationOutput)
}

// AttachUserPolicyOperationArrayInput is an input type that accepts AttachUserPolicyOperationArray and AttachUserPolicyOperationArrayOutput values.
// You can construct a concrete instance of `AttachUserPolicyOperationArrayInput` via:
//
//	AttachUserPolicyOperationArray{ AttachUserPolicyOperationArgs{...} }
type AttachUserPolicyOperationArrayInput interface {
	pulumi.Input

	ToAttachUserPolicyOperationArrayOutput() AttachUserPolicyOperationArrayOutput
	ToAttachUserPolicyOperationArrayOutputWithContext(context.Context) AttachUserPolicyOperationArrayOutput
}

type AttachUserPolicyOperationArray []AttachUserPolicyOperationInput

func (AttachUserPolicyOperationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachUserPolicyOperation)(nil)).Elem()
}

func (i AttachUserPolicyOperationArray) ToAttachUserPolicyOperationArrayOutput() AttachUserPolicyOperationArrayOutput {
	return i.ToAttachUserPolicyOperationArrayOutputWithContext(context.Background())
}

func (i AttachUserPolicyOperationArray) ToAttachUserPolicyOperationArrayOutputWithContext(ctx context.Context) AttachUserPolicyOperationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachUserPolicyOperationArrayOutput)
}

// AttachUserPolicyOperationMapInput is an input type that accepts AttachUserPolicyOperationMap and AttachUserPolicyOperationMapOutput values.
// You can construct a concrete instance of `AttachUserPolicyOperationMapInput` via:
//
//	AttachUserPolicyOperationMap{ "key": AttachUserPolicyOperationArgs{...} }
type AttachUserPolicyOperationMapInput interface {
	pulumi.Input

	ToAttachUserPolicyOperationMapOutput() AttachUserPolicyOperationMapOutput
	ToAttachUserPolicyOperationMapOutputWithContext(context.Context) AttachUserPolicyOperationMapOutput
}

type AttachUserPolicyOperationMap map[string]AttachUserPolicyOperationInput

func (AttachUserPolicyOperationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachUserPolicyOperation)(nil)).Elem()
}

func (i AttachUserPolicyOperationMap) ToAttachUserPolicyOperationMapOutput() AttachUserPolicyOperationMapOutput {
	return i.ToAttachUserPolicyOperationMapOutputWithContext(context.Background())
}

func (i AttachUserPolicyOperationMap) ToAttachUserPolicyOperationMapOutputWithContext(ctx context.Context) AttachUserPolicyOperationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachUserPolicyOperationMapOutput)
}

type AttachUserPolicyOperationOutput struct{ *pulumi.OutputState }

func (AttachUserPolicyOperationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachUserPolicyOperation)(nil)).Elem()
}

func (o AttachUserPolicyOperationOutput) ToAttachUserPolicyOperationOutput() AttachUserPolicyOperationOutput {
	return o
}

func (o AttachUserPolicyOperationOutput) ToAttachUserPolicyOperationOutputWithContext(ctx context.Context) AttachUserPolicyOperationOutput {
	return o
}

// Authentication policy collection.
func (o AttachUserPolicyOperationOutput) PolicySets() AttachUserPolicyOperationPolicySetArrayOutput {
	return o.ApplyT(func(v *AttachUserPolicyOperation) AttachUserPolicyOperationPolicySetArrayOutput { return v.PolicySets }).(AttachUserPolicyOperationPolicySetArrayOutput)
}

// User id, the same as the sub-user uin.
func (o AttachUserPolicyOperationOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachUserPolicyOperation) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type AttachUserPolicyOperationArrayOutput struct{ *pulumi.OutputState }

func (AttachUserPolicyOperationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachUserPolicyOperation)(nil)).Elem()
}

func (o AttachUserPolicyOperationArrayOutput) ToAttachUserPolicyOperationArrayOutput() AttachUserPolicyOperationArrayOutput {
	return o
}

func (o AttachUserPolicyOperationArrayOutput) ToAttachUserPolicyOperationArrayOutputWithContext(ctx context.Context) AttachUserPolicyOperationArrayOutput {
	return o
}

func (o AttachUserPolicyOperationArrayOutput) Index(i pulumi.IntInput) AttachUserPolicyOperationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachUserPolicyOperation {
		return vs[0].([]*AttachUserPolicyOperation)[vs[1].(int)]
	}).(AttachUserPolicyOperationOutput)
}

type AttachUserPolicyOperationMapOutput struct{ *pulumi.OutputState }

func (AttachUserPolicyOperationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachUserPolicyOperation)(nil)).Elem()
}

func (o AttachUserPolicyOperationMapOutput) ToAttachUserPolicyOperationMapOutput() AttachUserPolicyOperationMapOutput {
	return o
}

func (o AttachUserPolicyOperationMapOutput) ToAttachUserPolicyOperationMapOutputWithContext(ctx context.Context) AttachUserPolicyOperationMapOutput {
	return o
}

func (o AttachUserPolicyOperationMapOutput) MapIndex(k pulumi.StringInput) AttachUserPolicyOperationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachUserPolicyOperation {
		return vs[0].(map[string]*AttachUserPolicyOperation)[vs[1].(string)]
	}).(AttachUserPolicyOperationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachUserPolicyOperationInput)(nil)).Elem(), &AttachUserPolicyOperation{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachUserPolicyOperationArrayInput)(nil)).Elem(), AttachUserPolicyOperationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachUserPolicyOperationMapInput)(nil)).Elem(), AttachUserPolicyOperationMap{})
	pulumi.RegisterOutputType(AttachUserPolicyOperationOutput{})
	pulumi.RegisterOutputType(AttachUserPolicyOperationArrayOutput{})
	pulumi.RegisterOutputType(AttachUserPolicyOperationMapOutput{})
}
