// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dcx

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a dc dcxExtraConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Dcx"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Dcx"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Dcx.NewExtraConfig(ctx, "dcxExtraConfig", &Dcx.ExtraConfigArgs{
//				Bandwidth: pulumi.Int(10),
//				BfdEnable: pulumi.Int(0),
//				BfdInfo: &dcx.ExtraConfigBfdInfoArgs{
//					Interval:         pulumi.Int(100),
//					ProbeFailedTimes: pulumi.Int(3),
//				},
//				BgpPeer: &dcx.ExtraConfigBgpPeerArgs{
//					Asn:     pulumi.Int(65101),
//					AuthKey: pulumi.String("test123"),
//				},
//				CustomerAddress:       pulumi.String("192.168.1.4"),
//				DirectConnectTunnelId: pulumi.String("dcx-4z49tnws"),
//				EnableBgpCommunity:    pulumi.Bool(false),
//				Ipv6Enable:            pulumi.Int(0),
//				JumboEnable:           pulumi.Int(0),
//				NqaEnable:             pulumi.Int(1),
//				NqaInfo: &dcx.ExtraConfigNqaInfoArgs{
//					DestinationIp:    pulumi.String("192.168.2.2"),
//					Interval:         pulumi.Int(100),
//					ProbeFailedTimes: pulumi.Int(3),
//				},
//				RouteFilterPrefixes: &dcx.ExtraConfigRouteFilterPrefixesArgs{
//					Cidr: pulumi.String("192.168.0.0/24"),
//				},
//				TencentAddress:       pulumi.String("192.168.1.1"),
//				TencentBackupAddress: pulumi.String("192.168.1.2"),
//				Vlan:                 pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// dc dcx_extra_config can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dcx/extraConfig:ExtraConfig dcx_extra_config dcx_id
//
// ```
type ExtraConfig struct {
	pulumi.CustomResourceState

	// direct connect tunnel bandwidth.
	Bandwidth pulumi.IntPtrOutput `pulumi:"bandwidth"`
	// be enabled BFD.
	BfdEnable pulumi.IntPtrOutput `pulumi:"bfdEnable"`
	// BFD config info.
	BfdInfo ExtraConfigBfdInfoPtrOutput `pulumi:"bfdInfo"`
	// idc BGP, Asn, AuthKey.
	BgpPeer ExtraConfigBgpPeerPtrOutput `pulumi:"bgpPeer"`
	// direct connect tunnel user idc connect ip.
	CustomerAddress pulumi.StringPtrOutput `pulumi:"customerAddress"`
	// direct connect tunnel id.
	DirectConnectTunnelId pulumi.StringOutput `pulumi:"directConnectTunnelId"`
	// BGP community attribute.
	EnableBgpCommunity pulumi.BoolPtrOutput `pulumi:"enableBgpCommunity"`
	// 0: disable IPv61: enable IPv6.
	Ipv6Enable pulumi.IntPtrOutput `pulumi:"ipv6Enable"`
	// direct connect tunnel support jumbo frame1: enable direct connect tunnel jumbo frame0: disable direct connect tunnel jumbo frame.
	JumboEnable pulumi.IntPtrOutput `pulumi:"jumboEnable"`
	// be enabled NQA.
	NqaEnable pulumi.IntPtrOutput `pulumi:"nqaEnable"`
	// NQA config info.
	NqaInfo ExtraConfigNqaInfoPtrOutput `pulumi:"nqaInfo"`
	// user filter network prefixes.
	RouteFilterPrefixes ExtraConfigRouteFilterPrefixesPtrOutput `pulumi:"routeFilterPrefixes"`
	// direct connect tunnel tencent cloud connect ip.
	TencentAddress pulumi.StringPtrOutput `pulumi:"tencentAddress"`
	// direct connect tunnel tencent cloud backup connect ip.
	TencentBackupAddress pulumi.StringPtrOutput `pulumi:"tencentBackupAddress"`
	// direct connect tunnel vlan id.
	Vlan pulumi.IntPtrOutput `pulumi:"vlan"`
}

// NewExtraConfig registers a new resource with the given unique name, arguments, and options.
func NewExtraConfig(ctx *pulumi.Context,
	name string, args *ExtraConfigArgs, opts ...pulumi.ResourceOption) (*ExtraConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DirectConnectTunnelId == nil {
		return nil, errors.New("invalid value for required argument 'DirectConnectTunnelId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ExtraConfig
	err := ctx.RegisterResource("tencentcloud:Dcx/extraConfig:ExtraConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExtraConfig gets an existing ExtraConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExtraConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExtraConfigState, opts ...pulumi.ResourceOption) (*ExtraConfig, error) {
	var resource ExtraConfig
	err := ctx.ReadResource("tencentcloud:Dcx/extraConfig:ExtraConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ExtraConfig resources.
type extraConfigState struct {
	// direct connect tunnel bandwidth.
	Bandwidth *int `pulumi:"bandwidth"`
	// be enabled BFD.
	BfdEnable *int `pulumi:"bfdEnable"`
	// BFD config info.
	BfdInfo *ExtraConfigBfdInfo `pulumi:"bfdInfo"`
	// idc BGP, Asn, AuthKey.
	BgpPeer *ExtraConfigBgpPeer `pulumi:"bgpPeer"`
	// direct connect tunnel user idc connect ip.
	CustomerAddress *string `pulumi:"customerAddress"`
	// direct connect tunnel id.
	DirectConnectTunnelId *string `pulumi:"directConnectTunnelId"`
	// BGP community attribute.
	EnableBgpCommunity *bool `pulumi:"enableBgpCommunity"`
	// 0: disable IPv61: enable IPv6.
	Ipv6Enable *int `pulumi:"ipv6Enable"`
	// direct connect tunnel support jumbo frame1: enable direct connect tunnel jumbo frame0: disable direct connect tunnel jumbo frame.
	JumboEnable *int `pulumi:"jumboEnable"`
	// be enabled NQA.
	NqaEnable *int `pulumi:"nqaEnable"`
	// NQA config info.
	NqaInfo *ExtraConfigNqaInfo `pulumi:"nqaInfo"`
	// user filter network prefixes.
	RouteFilterPrefixes *ExtraConfigRouteFilterPrefixes `pulumi:"routeFilterPrefixes"`
	// direct connect tunnel tencent cloud connect ip.
	TencentAddress *string `pulumi:"tencentAddress"`
	// direct connect tunnel tencent cloud backup connect ip.
	TencentBackupAddress *string `pulumi:"tencentBackupAddress"`
	// direct connect tunnel vlan id.
	Vlan *int `pulumi:"vlan"`
}

type ExtraConfigState struct {
	// direct connect tunnel bandwidth.
	Bandwidth pulumi.IntPtrInput
	// be enabled BFD.
	BfdEnable pulumi.IntPtrInput
	// BFD config info.
	BfdInfo ExtraConfigBfdInfoPtrInput
	// idc BGP, Asn, AuthKey.
	BgpPeer ExtraConfigBgpPeerPtrInput
	// direct connect tunnel user idc connect ip.
	CustomerAddress pulumi.StringPtrInput
	// direct connect tunnel id.
	DirectConnectTunnelId pulumi.StringPtrInput
	// BGP community attribute.
	EnableBgpCommunity pulumi.BoolPtrInput
	// 0: disable IPv61: enable IPv6.
	Ipv6Enable pulumi.IntPtrInput
	// direct connect tunnel support jumbo frame1: enable direct connect tunnel jumbo frame0: disable direct connect tunnel jumbo frame.
	JumboEnable pulumi.IntPtrInput
	// be enabled NQA.
	NqaEnable pulumi.IntPtrInput
	// NQA config info.
	NqaInfo ExtraConfigNqaInfoPtrInput
	// user filter network prefixes.
	RouteFilterPrefixes ExtraConfigRouteFilterPrefixesPtrInput
	// direct connect tunnel tencent cloud connect ip.
	TencentAddress pulumi.StringPtrInput
	// direct connect tunnel tencent cloud backup connect ip.
	TencentBackupAddress pulumi.StringPtrInput
	// direct connect tunnel vlan id.
	Vlan pulumi.IntPtrInput
}

func (ExtraConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*extraConfigState)(nil)).Elem()
}

type extraConfigArgs struct {
	// direct connect tunnel bandwidth.
	Bandwidth *int `pulumi:"bandwidth"`
	// be enabled BFD.
	BfdEnable *int `pulumi:"bfdEnable"`
	// BFD config info.
	BfdInfo *ExtraConfigBfdInfo `pulumi:"bfdInfo"`
	// idc BGP, Asn, AuthKey.
	BgpPeer *ExtraConfigBgpPeer `pulumi:"bgpPeer"`
	// direct connect tunnel user idc connect ip.
	CustomerAddress *string `pulumi:"customerAddress"`
	// direct connect tunnel id.
	DirectConnectTunnelId string `pulumi:"directConnectTunnelId"`
	// BGP community attribute.
	EnableBgpCommunity *bool `pulumi:"enableBgpCommunity"`
	// 0: disable IPv61: enable IPv6.
	Ipv6Enable *int `pulumi:"ipv6Enable"`
	// direct connect tunnel support jumbo frame1: enable direct connect tunnel jumbo frame0: disable direct connect tunnel jumbo frame.
	JumboEnable *int `pulumi:"jumboEnable"`
	// be enabled NQA.
	NqaEnable *int `pulumi:"nqaEnable"`
	// NQA config info.
	NqaInfo *ExtraConfigNqaInfo `pulumi:"nqaInfo"`
	// user filter network prefixes.
	RouteFilterPrefixes *ExtraConfigRouteFilterPrefixes `pulumi:"routeFilterPrefixes"`
	// direct connect tunnel tencent cloud connect ip.
	TencentAddress *string `pulumi:"tencentAddress"`
	// direct connect tunnel tencent cloud backup connect ip.
	TencentBackupAddress *string `pulumi:"tencentBackupAddress"`
	// direct connect tunnel vlan id.
	Vlan *int `pulumi:"vlan"`
}

// The set of arguments for constructing a ExtraConfig resource.
type ExtraConfigArgs struct {
	// direct connect tunnel bandwidth.
	Bandwidth pulumi.IntPtrInput
	// be enabled BFD.
	BfdEnable pulumi.IntPtrInput
	// BFD config info.
	BfdInfo ExtraConfigBfdInfoPtrInput
	// idc BGP, Asn, AuthKey.
	BgpPeer ExtraConfigBgpPeerPtrInput
	// direct connect tunnel user idc connect ip.
	CustomerAddress pulumi.StringPtrInput
	// direct connect tunnel id.
	DirectConnectTunnelId pulumi.StringInput
	// BGP community attribute.
	EnableBgpCommunity pulumi.BoolPtrInput
	// 0: disable IPv61: enable IPv6.
	Ipv6Enable pulumi.IntPtrInput
	// direct connect tunnel support jumbo frame1: enable direct connect tunnel jumbo frame0: disable direct connect tunnel jumbo frame.
	JumboEnable pulumi.IntPtrInput
	// be enabled NQA.
	NqaEnable pulumi.IntPtrInput
	// NQA config info.
	NqaInfo ExtraConfigNqaInfoPtrInput
	// user filter network prefixes.
	RouteFilterPrefixes ExtraConfigRouteFilterPrefixesPtrInput
	// direct connect tunnel tencent cloud connect ip.
	TencentAddress pulumi.StringPtrInput
	// direct connect tunnel tencent cloud backup connect ip.
	TencentBackupAddress pulumi.StringPtrInput
	// direct connect tunnel vlan id.
	Vlan pulumi.IntPtrInput
}

func (ExtraConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*extraConfigArgs)(nil)).Elem()
}

type ExtraConfigInput interface {
	pulumi.Input

	ToExtraConfigOutput() ExtraConfigOutput
	ToExtraConfigOutputWithContext(ctx context.Context) ExtraConfigOutput
}

func (*ExtraConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtraConfig)(nil)).Elem()
}

func (i *ExtraConfig) ToExtraConfigOutput() ExtraConfigOutput {
	return i.ToExtraConfigOutputWithContext(context.Background())
}

func (i *ExtraConfig) ToExtraConfigOutputWithContext(ctx context.Context) ExtraConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtraConfigOutput)
}

// ExtraConfigArrayInput is an input type that accepts ExtraConfigArray and ExtraConfigArrayOutput values.
// You can construct a concrete instance of `ExtraConfigArrayInput` via:
//
//	ExtraConfigArray{ ExtraConfigArgs{...} }
type ExtraConfigArrayInput interface {
	pulumi.Input

	ToExtraConfigArrayOutput() ExtraConfigArrayOutput
	ToExtraConfigArrayOutputWithContext(context.Context) ExtraConfigArrayOutput
}

type ExtraConfigArray []ExtraConfigInput

func (ExtraConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtraConfig)(nil)).Elem()
}

func (i ExtraConfigArray) ToExtraConfigArrayOutput() ExtraConfigArrayOutput {
	return i.ToExtraConfigArrayOutputWithContext(context.Background())
}

func (i ExtraConfigArray) ToExtraConfigArrayOutputWithContext(ctx context.Context) ExtraConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtraConfigArrayOutput)
}

// ExtraConfigMapInput is an input type that accepts ExtraConfigMap and ExtraConfigMapOutput values.
// You can construct a concrete instance of `ExtraConfigMapInput` via:
//
//	ExtraConfigMap{ "key": ExtraConfigArgs{...} }
type ExtraConfigMapInput interface {
	pulumi.Input

	ToExtraConfigMapOutput() ExtraConfigMapOutput
	ToExtraConfigMapOutputWithContext(context.Context) ExtraConfigMapOutput
}

type ExtraConfigMap map[string]ExtraConfigInput

func (ExtraConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtraConfig)(nil)).Elem()
}

func (i ExtraConfigMap) ToExtraConfigMapOutput() ExtraConfigMapOutput {
	return i.ToExtraConfigMapOutputWithContext(context.Background())
}

func (i ExtraConfigMap) ToExtraConfigMapOutputWithContext(ctx context.Context) ExtraConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExtraConfigMapOutput)
}

type ExtraConfigOutput struct{ *pulumi.OutputState }

func (ExtraConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExtraConfig)(nil)).Elem()
}

func (o ExtraConfigOutput) ToExtraConfigOutput() ExtraConfigOutput {
	return o
}

func (o ExtraConfigOutput) ToExtraConfigOutputWithContext(ctx context.Context) ExtraConfigOutput {
	return o
}

// direct connect tunnel bandwidth.
func (o ExtraConfigOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.IntPtrOutput { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// be enabled BFD.
func (o ExtraConfigOutput) BfdEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.IntPtrOutput { return v.BfdEnable }).(pulumi.IntPtrOutput)
}

// BFD config info.
func (o ExtraConfigOutput) BfdInfo() ExtraConfigBfdInfoPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) ExtraConfigBfdInfoPtrOutput { return v.BfdInfo }).(ExtraConfigBfdInfoPtrOutput)
}

// idc BGP, Asn, AuthKey.
func (o ExtraConfigOutput) BgpPeer() ExtraConfigBgpPeerPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) ExtraConfigBgpPeerPtrOutput { return v.BgpPeer }).(ExtraConfigBgpPeerPtrOutput)
}

// direct connect tunnel user idc connect ip.
func (o ExtraConfigOutput) CustomerAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.StringPtrOutput { return v.CustomerAddress }).(pulumi.StringPtrOutput)
}

// direct connect tunnel id.
func (o ExtraConfigOutput) DirectConnectTunnelId() pulumi.StringOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.StringOutput { return v.DirectConnectTunnelId }).(pulumi.StringOutput)
}

// BGP community attribute.
func (o ExtraConfigOutput) EnableBgpCommunity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.BoolPtrOutput { return v.EnableBgpCommunity }).(pulumi.BoolPtrOutput)
}

// 0: disable IPv61: enable IPv6.
func (o ExtraConfigOutput) Ipv6Enable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.IntPtrOutput { return v.Ipv6Enable }).(pulumi.IntPtrOutput)
}

// direct connect tunnel support jumbo frame1: enable direct connect tunnel jumbo frame0: disable direct connect tunnel jumbo frame.
func (o ExtraConfigOutput) JumboEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.IntPtrOutput { return v.JumboEnable }).(pulumi.IntPtrOutput)
}

// be enabled NQA.
func (o ExtraConfigOutput) NqaEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.IntPtrOutput { return v.NqaEnable }).(pulumi.IntPtrOutput)
}

// NQA config info.
func (o ExtraConfigOutput) NqaInfo() ExtraConfigNqaInfoPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) ExtraConfigNqaInfoPtrOutput { return v.NqaInfo }).(ExtraConfigNqaInfoPtrOutput)
}

// user filter network prefixes.
func (o ExtraConfigOutput) RouteFilterPrefixes() ExtraConfigRouteFilterPrefixesPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) ExtraConfigRouteFilterPrefixesPtrOutput { return v.RouteFilterPrefixes }).(ExtraConfigRouteFilterPrefixesPtrOutput)
}

// direct connect tunnel tencent cloud connect ip.
func (o ExtraConfigOutput) TencentAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.StringPtrOutput { return v.TencentAddress }).(pulumi.StringPtrOutput)
}

// direct connect tunnel tencent cloud backup connect ip.
func (o ExtraConfigOutput) TencentBackupAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.StringPtrOutput { return v.TencentBackupAddress }).(pulumi.StringPtrOutput)
}

// direct connect tunnel vlan id.
func (o ExtraConfigOutput) Vlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ExtraConfig) pulumi.IntPtrOutput { return v.Vlan }).(pulumi.IntPtrOutput)
}

type ExtraConfigArrayOutput struct{ *pulumi.OutputState }

func (ExtraConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ExtraConfig)(nil)).Elem()
}

func (o ExtraConfigArrayOutput) ToExtraConfigArrayOutput() ExtraConfigArrayOutput {
	return o
}

func (o ExtraConfigArrayOutput) ToExtraConfigArrayOutputWithContext(ctx context.Context) ExtraConfigArrayOutput {
	return o
}

func (o ExtraConfigArrayOutput) Index(i pulumi.IntInput) ExtraConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ExtraConfig {
		return vs[0].([]*ExtraConfig)[vs[1].(int)]
	}).(ExtraConfigOutput)
}

type ExtraConfigMapOutput struct{ *pulumi.OutputState }

func (ExtraConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ExtraConfig)(nil)).Elem()
}

func (o ExtraConfigMapOutput) ToExtraConfigMapOutput() ExtraConfigMapOutput {
	return o
}

func (o ExtraConfigMapOutput) ToExtraConfigMapOutputWithContext(ctx context.Context) ExtraConfigMapOutput {
	return o
}

func (o ExtraConfigMapOutput) MapIndex(k pulumi.StringInput) ExtraConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ExtraConfig {
		return vs[0].(map[string]*ExtraConfig)[vs[1].(string)]
	}).(ExtraConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExtraConfigInput)(nil)).Elem(), &ExtraConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtraConfigArrayInput)(nil)).Elem(), ExtraConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExtraConfigMapInput)(nil)).Elem(), ExtraConfigMap{})
	pulumi.RegisterOutputType(ExtraConfigOutput{})
	pulumi.RegisterOutputType(ExtraConfigArrayOutput{})
	pulumi.RegisterOutputType(ExtraConfigMapOutput{})
}
