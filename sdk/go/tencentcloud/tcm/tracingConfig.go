// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tcm tracingConfig
//
// > **NOTE:** If you use the config attribute tracing in tencentcloud_tcm_mesh, do not use Tcm.TracingConfig
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcm"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcm.NewTracingConfig(ctx, "tracingConfig", &Tcm.TracingConfigArgs{
//				Apm: &tcm.TracingConfigApmArgs{
//					Enable:     pulumi.Bool(true),
//					InstanceId: pulumi.String("apm-xxx"),
//					Region:     pulumi.String("ap-guangzhou"),
//				},
//				Enable:   pulumi.Bool(true),
//				MeshId:   pulumi.String("mesh-xxxxxxxx"),
//				Sampling: pulumi.Float64(""),
//				Zipkin: &tcm.TracingConfigZipkinArgs{
//					Address: pulumi.String("10.10.10.10:9411"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Tcm.NewTracingConfig(ctx, "deleteConfig", &Tcm.TracingConfigArgs{
//				Apm: &tcm.TracingConfigApmArgs{
//					Enable: pulumi.Bool(false),
//				},
//				Enable:   pulumi.Bool(true),
//				MeshId:   pulumi.String("mesh-rofjmxxx"),
//				Sampling: pulumi.Float64(0),
//				Zipkin: &tcm.TracingConfigZipkinArgs{
//					Address: pulumi.String(""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcm tracing_config can be imported using the mesh_id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcm/tracingConfig:TracingConfig tracing_config mesh-rofjmxxx
//
// ```
type TracingConfig struct {
	pulumi.CustomResourceState

	// APM config.
	Apm TracingConfigApmPtrOutput `pulumi:"apm"`
	// Whether enable tracing.
	Enable pulumi.BoolPtrOutput `pulumi:"enable"`
	// Mesh ID.
	MeshId pulumi.StringOutput `pulumi:"meshId"`
	// Tracing sampling, 0.0-1.0.
	Sampling pulumi.Float64PtrOutput `pulumi:"sampling"`
	// Third party zipkin config.
	Zipkin TracingConfigZipkinPtrOutput `pulumi:"zipkin"`
}

// NewTracingConfig registers a new resource with the given unique name, arguments, and options.
func NewTracingConfig(ctx *pulumi.Context,
	name string, args *TracingConfigArgs, opts ...pulumi.ResourceOption) (*TracingConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MeshId == nil {
		return nil, errors.New("invalid value for required argument 'MeshId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TracingConfig
	err := ctx.RegisterResource("tencentcloud:Tcm/tracingConfig:TracingConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTracingConfig gets an existing TracingConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTracingConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TracingConfigState, opts ...pulumi.ResourceOption) (*TracingConfig, error) {
	var resource TracingConfig
	err := ctx.ReadResource("tencentcloud:Tcm/tracingConfig:TracingConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TracingConfig resources.
type tracingConfigState struct {
	// APM config.
	Apm *TracingConfigApm `pulumi:"apm"`
	// Whether enable tracing.
	Enable *bool `pulumi:"enable"`
	// Mesh ID.
	MeshId *string `pulumi:"meshId"`
	// Tracing sampling, 0.0-1.0.
	Sampling *float64 `pulumi:"sampling"`
	// Third party zipkin config.
	Zipkin *TracingConfigZipkin `pulumi:"zipkin"`
}

type TracingConfigState struct {
	// APM config.
	Apm TracingConfigApmPtrInput
	// Whether enable tracing.
	Enable pulumi.BoolPtrInput
	// Mesh ID.
	MeshId pulumi.StringPtrInput
	// Tracing sampling, 0.0-1.0.
	Sampling pulumi.Float64PtrInput
	// Third party zipkin config.
	Zipkin TracingConfigZipkinPtrInput
}

func (TracingConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*tracingConfigState)(nil)).Elem()
}

type tracingConfigArgs struct {
	// APM config.
	Apm *TracingConfigApm `pulumi:"apm"`
	// Whether enable tracing.
	Enable *bool `pulumi:"enable"`
	// Mesh ID.
	MeshId string `pulumi:"meshId"`
	// Tracing sampling, 0.0-1.0.
	Sampling *float64 `pulumi:"sampling"`
	// Third party zipkin config.
	Zipkin *TracingConfigZipkin `pulumi:"zipkin"`
}

// The set of arguments for constructing a TracingConfig resource.
type TracingConfigArgs struct {
	// APM config.
	Apm TracingConfigApmPtrInput
	// Whether enable tracing.
	Enable pulumi.BoolPtrInput
	// Mesh ID.
	MeshId pulumi.StringInput
	// Tracing sampling, 0.0-1.0.
	Sampling pulumi.Float64PtrInput
	// Third party zipkin config.
	Zipkin TracingConfigZipkinPtrInput
}

func (TracingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tracingConfigArgs)(nil)).Elem()
}

type TracingConfigInput interface {
	pulumi.Input

	ToTracingConfigOutput() TracingConfigOutput
	ToTracingConfigOutputWithContext(ctx context.Context) TracingConfigOutput
}

func (*TracingConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingConfig)(nil)).Elem()
}

func (i *TracingConfig) ToTracingConfigOutput() TracingConfigOutput {
	return i.ToTracingConfigOutputWithContext(context.Background())
}

func (i *TracingConfig) ToTracingConfigOutputWithContext(ctx context.Context) TracingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingConfigOutput)
}

// TracingConfigArrayInput is an input type that accepts TracingConfigArray and TracingConfigArrayOutput values.
// You can construct a concrete instance of `TracingConfigArrayInput` via:
//
//	TracingConfigArray{ TracingConfigArgs{...} }
type TracingConfigArrayInput interface {
	pulumi.Input

	ToTracingConfigArrayOutput() TracingConfigArrayOutput
	ToTracingConfigArrayOutputWithContext(context.Context) TracingConfigArrayOutput
}

type TracingConfigArray []TracingConfigInput

func (TracingConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TracingConfig)(nil)).Elem()
}

func (i TracingConfigArray) ToTracingConfigArrayOutput() TracingConfigArrayOutput {
	return i.ToTracingConfigArrayOutputWithContext(context.Background())
}

func (i TracingConfigArray) ToTracingConfigArrayOutputWithContext(ctx context.Context) TracingConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingConfigArrayOutput)
}

// TracingConfigMapInput is an input type that accepts TracingConfigMap and TracingConfigMapOutput values.
// You can construct a concrete instance of `TracingConfigMapInput` via:
//
//	TracingConfigMap{ "key": TracingConfigArgs{...} }
type TracingConfigMapInput interface {
	pulumi.Input

	ToTracingConfigMapOutput() TracingConfigMapOutput
	ToTracingConfigMapOutputWithContext(context.Context) TracingConfigMapOutput
}

type TracingConfigMap map[string]TracingConfigInput

func (TracingConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TracingConfig)(nil)).Elem()
}

func (i TracingConfigMap) ToTracingConfigMapOutput() TracingConfigMapOutput {
	return i.ToTracingConfigMapOutputWithContext(context.Background())
}

func (i TracingConfigMap) ToTracingConfigMapOutputWithContext(ctx context.Context) TracingConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TracingConfigMapOutput)
}

type TracingConfigOutput struct{ *pulumi.OutputState }

func (TracingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TracingConfig)(nil)).Elem()
}

func (o TracingConfigOutput) ToTracingConfigOutput() TracingConfigOutput {
	return o
}

func (o TracingConfigOutput) ToTracingConfigOutputWithContext(ctx context.Context) TracingConfigOutput {
	return o
}

// APM config.
func (o TracingConfigOutput) Apm() TracingConfigApmPtrOutput {
	return o.ApplyT(func(v *TracingConfig) TracingConfigApmPtrOutput { return v.Apm }).(TracingConfigApmPtrOutput)
}

// Whether enable tracing.
func (o TracingConfigOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TracingConfig) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Mesh ID.
func (o TracingConfigOutput) MeshId() pulumi.StringOutput {
	return o.ApplyT(func(v *TracingConfig) pulumi.StringOutput { return v.MeshId }).(pulumi.StringOutput)
}

// Tracing sampling, 0.0-1.0.
func (o TracingConfigOutput) Sampling() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *TracingConfig) pulumi.Float64PtrOutput { return v.Sampling }).(pulumi.Float64PtrOutput)
}

// Third party zipkin config.
func (o TracingConfigOutput) Zipkin() TracingConfigZipkinPtrOutput {
	return o.ApplyT(func(v *TracingConfig) TracingConfigZipkinPtrOutput { return v.Zipkin }).(TracingConfigZipkinPtrOutput)
}

type TracingConfigArrayOutput struct{ *pulumi.OutputState }

func (TracingConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TracingConfig)(nil)).Elem()
}

func (o TracingConfigArrayOutput) ToTracingConfigArrayOutput() TracingConfigArrayOutput {
	return o
}

func (o TracingConfigArrayOutput) ToTracingConfigArrayOutputWithContext(ctx context.Context) TracingConfigArrayOutput {
	return o
}

func (o TracingConfigArrayOutput) Index(i pulumi.IntInput) TracingConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TracingConfig {
		return vs[0].([]*TracingConfig)[vs[1].(int)]
	}).(TracingConfigOutput)
}

type TracingConfigMapOutput struct{ *pulumi.OutputState }

func (TracingConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TracingConfig)(nil)).Elem()
}

func (o TracingConfigMapOutput) ToTracingConfigMapOutput() TracingConfigMapOutput {
	return o
}

func (o TracingConfigMapOutput) ToTracingConfigMapOutputWithContext(ctx context.Context) TracingConfigMapOutput {
	return o
}

func (o TracingConfigMapOutput) MapIndex(k pulumi.StringInput) TracingConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TracingConfig {
		return vs[0].(map[string]*TracingConfig)[vs[1].(string)]
	}).(TracingConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TracingConfigInput)(nil)).Elem(), &TracingConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*TracingConfigArrayInput)(nil)).Elem(), TracingConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TracingConfigMapInput)(nil)).Elem(), TracingConfigMap{})
	pulumi.RegisterOutputType(TracingConfigOutput{})
	pulumi.RegisterOutputType(TracingConfigArrayOutput{})
	pulumi.RegisterOutputType(TracingConfigMapOutput{})
}
