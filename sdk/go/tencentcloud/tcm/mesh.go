// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tcm

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a tcm mesh
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Tcm"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Tcm"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Tcm.NewMesh(ctx, "mesh", &Tcm.MeshArgs{
//				Config: &tcm.MeshConfigArgs{
//					Inject: &tcm.MeshConfigInjectArgs{
//						ExcludeIpRanges: pulumi.StringArray{
//							pulumi.String("172.16.0.0/16"),
//						},
//						HoldApplicationUntilProxyStarts: pulumi.Bool(true),
//						HoldProxyUntilApplicationEnds:   pulumi.Bool(true),
//					},
//					Istio: &tcm.MeshConfigIstioArgs{
//						DisableHttpRetry:      pulumi.Bool(true),
//						DisablePolicyChecks:   pulumi.Bool(true),
//						EnablePilotHttp:       pulumi.Bool(true),
//						OutboundTrafficPolicy: pulumi.String("ALLOW_ANY"),
//						SmartDns: &tcm.MeshConfigIstioSmartDnsArgs{
//							IstioMetaDnsAutoAllocate: pulumi.Bool(true),
//							IstioMetaDnsCapture:      pulumi.Bool(true),
//						},
//						Tracing: &tcm.MeshConfigIstioTracingArgs{
//							Enable: pulumi.Bool(false),
//						},
//					},
//					Prometheus: &tcm.MeshConfigPrometheusArgs{
//						CustomProm: &tcm.MeshConfigPrometheusCustomPromArgs{
//							AuthType: pulumi.String("none"),
//							Url:      pulumi.String("https://10.0.0.1:1000"),
//							VpcId:    pulumi.String("vpc-j9yhbzpn"),
//						},
//					},
//					SidecarResources: &tcm.MeshConfigSidecarResourcesArgs{
//						Limits: tcm.MeshConfigSidecarResourcesLimitArray{
//							&tcm.MeshConfigSidecarResourcesLimitArgs{
//								Name:     pulumi.String("cpu"),
//								Quantity: pulumi.String("2"),
//							},
//							&tcm.MeshConfigSidecarResourcesLimitArgs{
//								Name:     pulumi.String("memory"),
//								Quantity: pulumi.String("1Gi"),
//							},
//						},
//						Requests: tcm.MeshConfigSidecarResourcesRequestArray{
//							&tcm.MeshConfigSidecarResourcesRequestArgs{
//								Name:     pulumi.String("cpu"),
//								Quantity: pulumi.String("100m"),
//							},
//							&tcm.MeshConfigSidecarResourcesRequestArgs{
//								Name:     pulumi.String("memory"),
//								Quantity: pulumi.String("128Mi"),
//							},
//						},
//					},
//					Tracing: &tcm.MeshConfigTracingArgs{
//						Apm: &tcm.MeshConfigTracingApmArgs{
//							Enable: pulumi.Bool(true),
//							Region: pulumi.String("ap-guangzhou"),
//						},
//						Enable:   pulumi.Bool(true),
//						Sampling: pulumi.Float64(1),
//					},
//				},
//				DisplayName: pulumi.String("test_mesh"),
//				MeshVersion: pulumi.String("1.12.5"),
//				TagLists: tcm.MeshTagListArray{
//					&tcm.MeshTagListArgs{
//						Key:         pulumi.String("key"),
//						Passthrough: pulumi.Bool(false),
//						Value:       pulumi.String("value"),
//					},
//				},
//				Type: pulumi.String("HOSTED"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tcm mesh can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Tcm/mesh:Mesh mesh mesh_id
//
// ```
type Mesh struct {
	pulumi.CustomResourceState

	// Mesh configuration.
	Config MeshConfigOutput `pulumi:"config"`
	// Mesh name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Mesh ID.
	MeshId pulumi.StringOutput `pulumi:"meshId"`
	// Mesh version.
	MeshVersion pulumi.StringOutput `pulumi:"meshVersion"`
	// A list of associated tags.
	TagLists MeshTagListArrayOutput `pulumi:"tagLists"`
	// Mesh type.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMesh registers a new resource with the given unique name, arguments, and options.
func NewMesh(ctx *pulumi.Context,
	name string, args *MeshArgs, opts ...pulumi.ResourceOption) (*Mesh, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Config == nil {
		return nil, errors.New("invalid value for required argument 'Config'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MeshVersion == nil {
		return nil, errors.New("invalid value for required argument 'MeshVersion'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Mesh
	err := ctx.RegisterResource("tencentcloud:Tcm/mesh:Mesh", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMesh gets an existing Mesh resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMesh(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeshState, opts ...pulumi.ResourceOption) (*Mesh, error) {
	var resource Mesh
	err := ctx.ReadResource("tencentcloud:Tcm/mesh:Mesh", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mesh resources.
type meshState struct {
	// Mesh configuration.
	Config *MeshConfig `pulumi:"config"`
	// Mesh name.
	DisplayName *string `pulumi:"displayName"`
	// Mesh ID.
	MeshId *string `pulumi:"meshId"`
	// Mesh version.
	MeshVersion *string `pulumi:"meshVersion"`
	// A list of associated tags.
	TagLists []MeshTagList `pulumi:"tagLists"`
	// Mesh type.
	Type *string `pulumi:"type"`
}

type MeshState struct {
	// Mesh configuration.
	Config MeshConfigPtrInput
	// Mesh name.
	DisplayName pulumi.StringPtrInput
	// Mesh ID.
	MeshId pulumi.StringPtrInput
	// Mesh version.
	MeshVersion pulumi.StringPtrInput
	// A list of associated tags.
	TagLists MeshTagListArrayInput
	// Mesh type.
	Type pulumi.StringPtrInput
}

func (MeshState) ElementType() reflect.Type {
	return reflect.TypeOf((*meshState)(nil)).Elem()
}

type meshArgs struct {
	// Mesh configuration.
	Config MeshConfig `pulumi:"config"`
	// Mesh name.
	DisplayName string `pulumi:"displayName"`
	// Mesh ID.
	MeshId *string `pulumi:"meshId"`
	// Mesh version.
	MeshVersion string `pulumi:"meshVersion"`
	// A list of associated tags.
	TagLists []MeshTagList `pulumi:"tagLists"`
	// Mesh type.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Mesh resource.
type MeshArgs struct {
	// Mesh configuration.
	Config MeshConfigInput
	// Mesh name.
	DisplayName pulumi.StringInput
	// Mesh ID.
	MeshId pulumi.StringPtrInput
	// Mesh version.
	MeshVersion pulumi.StringInput
	// A list of associated tags.
	TagLists MeshTagListArrayInput
	// Mesh type.
	Type pulumi.StringInput
}

func (MeshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meshArgs)(nil)).Elem()
}

type MeshInput interface {
	pulumi.Input

	ToMeshOutput() MeshOutput
	ToMeshOutputWithContext(ctx context.Context) MeshOutput
}

func (*Mesh) ElementType() reflect.Type {
	return reflect.TypeOf((**Mesh)(nil)).Elem()
}

func (i *Mesh) ToMeshOutput() MeshOutput {
	return i.ToMeshOutputWithContext(context.Background())
}

func (i *Mesh) ToMeshOutputWithContext(ctx context.Context) MeshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshOutput)
}

// MeshArrayInput is an input type that accepts MeshArray and MeshArrayOutput values.
// You can construct a concrete instance of `MeshArrayInput` via:
//
//	MeshArray{ MeshArgs{...} }
type MeshArrayInput interface {
	pulumi.Input

	ToMeshArrayOutput() MeshArrayOutput
	ToMeshArrayOutputWithContext(context.Context) MeshArrayOutput
}

type MeshArray []MeshInput

func (MeshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mesh)(nil)).Elem()
}

func (i MeshArray) ToMeshArrayOutput() MeshArrayOutput {
	return i.ToMeshArrayOutputWithContext(context.Background())
}

func (i MeshArray) ToMeshArrayOutputWithContext(ctx context.Context) MeshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshArrayOutput)
}

// MeshMapInput is an input type that accepts MeshMap and MeshMapOutput values.
// You can construct a concrete instance of `MeshMapInput` via:
//
//	MeshMap{ "key": MeshArgs{...} }
type MeshMapInput interface {
	pulumi.Input

	ToMeshMapOutput() MeshMapOutput
	ToMeshMapOutputWithContext(context.Context) MeshMapOutput
}

type MeshMap map[string]MeshInput

func (MeshMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mesh)(nil)).Elem()
}

func (i MeshMap) ToMeshMapOutput() MeshMapOutput {
	return i.ToMeshMapOutputWithContext(context.Background())
}

func (i MeshMap) ToMeshMapOutputWithContext(ctx context.Context) MeshMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshMapOutput)
}

type MeshOutput struct{ *pulumi.OutputState }

func (MeshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mesh)(nil)).Elem()
}

func (o MeshOutput) ToMeshOutput() MeshOutput {
	return o
}

func (o MeshOutput) ToMeshOutputWithContext(ctx context.Context) MeshOutput {
	return o
}

// Mesh configuration.
func (o MeshOutput) Config() MeshConfigOutput {
	return o.ApplyT(func(v *Mesh) MeshConfigOutput { return v.Config }).(MeshConfigOutput)
}

// Mesh name.
func (o MeshOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Mesh) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Mesh ID.
func (o MeshOutput) MeshId() pulumi.StringOutput {
	return o.ApplyT(func(v *Mesh) pulumi.StringOutput { return v.MeshId }).(pulumi.StringOutput)
}

// Mesh version.
func (o MeshOutput) MeshVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Mesh) pulumi.StringOutput { return v.MeshVersion }).(pulumi.StringOutput)
}

// A list of associated tags.
func (o MeshOutput) TagLists() MeshTagListArrayOutput {
	return o.ApplyT(func(v *Mesh) MeshTagListArrayOutput { return v.TagLists }).(MeshTagListArrayOutput)
}

// Mesh type.
func (o MeshOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Mesh) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type MeshArrayOutput struct{ *pulumi.OutputState }

func (MeshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mesh)(nil)).Elem()
}

func (o MeshArrayOutput) ToMeshArrayOutput() MeshArrayOutput {
	return o
}

func (o MeshArrayOutput) ToMeshArrayOutputWithContext(ctx context.Context) MeshArrayOutput {
	return o
}

func (o MeshArrayOutput) Index(i pulumi.IntInput) MeshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mesh {
		return vs[0].([]*Mesh)[vs[1].(int)]
	}).(MeshOutput)
}

type MeshMapOutput struct{ *pulumi.OutputState }

func (MeshMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mesh)(nil)).Elem()
}

func (o MeshMapOutput) ToMeshMapOutput() MeshMapOutput {
	return o
}

func (o MeshMapOutput) ToMeshMapOutputWithContext(ctx context.Context) MeshMapOutput {
	return o
}

func (o MeshMapOutput) MapIndex(k pulumi.StringInput) MeshOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mesh {
		return vs[0].(map[string]*Mesh)[vs[1].(string)]
	}).(MeshOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeshInput)(nil)).Elem(), &Mesh{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeshArrayInput)(nil)).Elem(), MeshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeshMapInput)(nil)).Elem(), MeshMap{})
	pulumi.RegisterOutputType(MeshOutput{})
	pulumi.RegisterOutputType(MeshArrayOutput{})
	pulumi.RegisterOutputType(MeshMapOutput{})
}
