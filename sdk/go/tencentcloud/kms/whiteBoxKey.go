// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a kms whiteBoxKey
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Kms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Kms.NewWhiteBoxKey(ctx, "example", &Kms.WhiteBoxKeyArgs{
//				Algorithm:   pulumi.String("SM4"),
//				Alias:       pulumi.String("tf_example"),
//				Description: pulumi.String("test desc."),
//				Status:      pulumi.String("Enabled"),
//				Tags: pulumi.AnyMap{
//					"createdBy": pulumi.Any("terraform"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// kms white_box_key can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Kms/whiteBoxKey:WhiteBoxKey example 244dab8c-6dad-11ea-80c6-5254006d0810
//
// ```
type WhiteBoxKey struct {
	pulumi.CustomResourceState

	// All algorithm types for creating keys, supported values: AES_256, SM4.
	Algorithm pulumi.StringOutput `pulumi:"algorithm"`
	// As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
	Alias pulumi.StringOutput `pulumi:"alias"`
	// Description of the key, up to 1024 bytes.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether to enable the key. Enabled or Disabled. Default is Enabled.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// The tags of Key.
	Tags pulumi.MapOutput `pulumi:"tags"`
}

// NewWhiteBoxKey registers a new resource with the given unique name, arguments, and options.
func NewWhiteBoxKey(ctx *pulumi.Context,
	name string, args *WhiteBoxKeyArgs, opts ...pulumi.ResourceOption) (*WhiteBoxKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.Alias == nil {
		return nil, errors.New("invalid value for required argument 'Alias'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource WhiteBoxKey
	err := ctx.RegisterResource("tencentcloud:Kms/whiteBoxKey:WhiteBoxKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWhiteBoxKey gets an existing WhiteBoxKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWhiteBoxKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WhiteBoxKeyState, opts ...pulumi.ResourceOption) (*WhiteBoxKey, error) {
	var resource WhiteBoxKey
	err := ctx.ReadResource("tencentcloud:Kms/whiteBoxKey:WhiteBoxKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WhiteBoxKey resources.
type whiteBoxKeyState struct {
	// All algorithm types for creating keys, supported values: AES_256, SM4.
	Algorithm *string `pulumi:"algorithm"`
	// As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
	Alias *string `pulumi:"alias"`
	// Description of the key, up to 1024 bytes.
	Description *string `pulumi:"description"`
	// Whether to enable the key. Enabled or Disabled. Default is Enabled.
	Status *string `pulumi:"status"`
	// The tags of Key.
	Tags map[string]interface{} `pulumi:"tags"`
}

type WhiteBoxKeyState struct {
	// All algorithm types for creating keys, supported values: AES_256, SM4.
	Algorithm pulumi.StringPtrInput
	// As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
	Alias pulumi.StringPtrInput
	// Description of the key, up to 1024 bytes.
	Description pulumi.StringPtrInput
	// Whether to enable the key. Enabled or Disabled. Default is Enabled.
	Status pulumi.StringPtrInput
	// The tags of Key.
	Tags pulumi.MapInput
}

func (WhiteBoxKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*whiteBoxKeyState)(nil)).Elem()
}

type whiteBoxKeyArgs struct {
	// All algorithm types for creating keys, supported values: AES_256, SM4.
	Algorithm string `pulumi:"algorithm"`
	// As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
	Alias string `pulumi:"alias"`
	// Description of the key, up to 1024 bytes.
	Description *string `pulumi:"description"`
	// Whether to enable the key. Enabled or Disabled. Default is Enabled.
	Status *string `pulumi:"status"`
	// The tags of Key.
	Tags map[string]interface{} `pulumi:"tags"`
}

// The set of arguments for constructing a WhiteBoxKey resource.
type WhiteBoxKeyArgs struct {
	// All algorithm types for creating keys, supported values: AES_256, SM4.
	Algorithm pulumi.StringInput
	// As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
	Alias pulumi.StringInput
	// Description of the key, up to 1024 bytes.
	Description pulumi.StringPtrInput
	// Whether to enable the key. Enabled or Disabled. Default is Enabled.
	Status pulumi.StringPtrInput
	// The tags of Key.
	Tags pulumi.MapInput
}

func (WhiteBoxKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*whiteBoxKeyArgs)(nil)).Elem()
}

type WhiteBoxKeyInput interface {
	pulumi.Input

	ToWhiteBoxKeyOutput() WhiteBoxKeyOutput
	ToWhiteBoxKeyOutputWithContext(ctx context.Context) WhiteBoxKeyOutput
}

func (*WhiteBoxKey) ElementType() reflect.Type {
	return reflect.TypeOf((**WhiteBoxKey)(nil)).Elem()
}

func (i *WhiteBoxKey) ToWhiteBoxKeyOutput() WhiteBoxKeyOutput {
	return i.ToWhiteBoxKeyOutputWithContext(context.Background())
}

func (i *WhiteBoxKey) ToWhiteBoxKeyOutputWithContext(ctx context.Context) WhiteBoxKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WhiteBoxKeyOutput)
}

// WhiteBoxKeyArrayInput is an input type that accepts WhiteBoxKeyArray and WhiteBoxKeyArrayOutput values.
// You can construct a concrete instance of `WhiteBoxKeyArrayInput` via:
//
//	WhiteBoxKeyArray{ WhiteBoxKeyArgs{...} }
type WhiteBoxKeyArrayInput interface {
	pulumi.Input

	ToWhiteBoxKeyArrayOutput() WhiteBoxKeyArrayOutput
	ToWhiteBoxKeyArrayOutputWithContext(context.Context) WhiteBoxKeyArrayOutput
}

type WhiteBoxKeyArray []WhiteBoxKeyInput

func (WhiteBoxKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WhiteBoxKey)(nil)).Elem()
}

func (i WhiteBoxKeyArray) ToWhiteBoxKeyArrayOutput() WhiteBoxKeyArrayOutput {
	return i.ToWhiteBoxKeyArrayOutputWithContext(context.Background())
}

func (i WhiteBoxKeyArray) ToWhiteBoxKeyArrayOutputWithContext(ctx context.Context) WhiteBoxKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WhiteBoxKeyArrayOutput)
}

// WhiteBoxKeyMapInput is an input type that accepts WhiteBoxKeyMap and WhiteBoxKeyMapOutput values.
// You can construct a concrete instance of `WhiteBoxKeyMapInput` via:
//
//	WhiteBoxKeyMap{ "key": WhiteBoxKeyArgs{...} }
type WhiteBoxKeyMapInput interface {
	pulumi.Input

	ToWhiteBoxKeyMapOutput() WhiteBoxKeyMapOutput
	ToWhiteBoxKeyMapOutputWithContext(context.Context) WhiteBoxKeyMapOutput
}

type WhiteBoxKeyMap map[string]WhiteBoxKeyInput

func (WhiteBoxKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WhiteBoxKey)(nil)).Elem()
}

func (i WhiteBoxKeyMap) ToWhiteBoxKeyMapOutput() WhiteBoxKeyMapOutput {
	return i.ToWhiteBoxKeyMapOutputWithContext(context.Background())
}

func (i WhiteBoxKeyMap) ToWhiteBoxKeyMapOutputWithContext(ctx context.Context) WhiteBoxKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WhiteBoxKeyMapOutput)
}

type WhiteBoxKeyOutput struct{ *pulumi.OutputState }

func (WhiteBoxKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WhiteBoxKey)(nil)).Elem()
}

func (o WhiteBoxKeyOutput) ToWhiteBoxKeyOutput() WhiteBoxKeyOutput {
	return o
}

func (o WhiteBoxKeyOutput) ToWhiteBoxKeyOutputWithContext(ctx context.Context) WhiteBoxKeyOutput {
	return o
}

// All algorithm types for creating keys, supported values: AES_256, SM4.
func (o WhiteBoxKeyOutput) Algorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *WhiteBoxKey) pulumi.StringOutput { return v.Algorithm }).(pulumi.StringOutput)
}

// As an alias for the key to be easier to identify and easier to understand, it cannot be empty and is a combination of 1-60 alphanumeric characters - _. The first character must be a letter or number. Alias are not repeatable.
func (o WhiteBoxKeyOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *WhiteBoxKey) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

// Description of the key, up to 1024 bytes.
func (o WhiteBoxKeyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WhiteBoxKey) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to enable the key. Enabled or Disabled. Default is Enabled.
func (o WhiteBoxKeyOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WhiteBoxKey) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// The tags of Key.
func (o WhiteBoxKeyOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *WhiteBoxKey) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

type WhiteBoxKeyArrayOutput struct{ *pulumi.OutputState }

func (WhiteBoxKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WhiteBoxKey)(nil)).Elem()
}

func (o WhiteBoxKeyArrayOutput) ToWhiteBoxKeyArrayOutput() WhiteBoxKeyArrayOutput {
	return o
}

func (o WhiteBoxKeyArrayOutput) ToWhiteBoxKeyArrayOutputWithContext(ctx context.Context) WhiteBoxKeyArrayOutput {
	return o
}

func (o WhiteBoxKeyArrayOutput) Index(i pulumi.IntInput) WhiteBoxKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WhiteBoxKey {
		return vs[0].([]*WhiteBoxKey)[vs[1].(int)]
	}).(WhiteBoxKeyOutput)
}

type WhiteBoxKeyMapOutput struct{ *pulumi.OutputState }

func (WhiteBoxKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WhiteBoxKey)(nil)).Elem()
}

func (o WhiteBoxKeyMapOutput) ToWhiteBoxKeyMapOutput() WhiteBoxKeyMapOutput {
	return o
}

func (o WhiteBoxKeyMapOutput) ToWhiteBoxKeyMapOutputWithContext(ctx context.Context) WhiteBoxKeyMapOutput {
	return o
}

func (o WhiteBoxKeyMapOutput) MapIndex(k pulumi.StringInput) WhiteBoxKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WhiteBoxKey {
		return vs[0].(map[string]*WhiteBoxKey)[vs[1].(string)]
	}).(WhiteBoxKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WhiteBoxKeyInput)(nil)).Elem(), &WhiteBoxKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*WhiteBoxKeyArrayInput)(nil)).Elem(), WhiteBoxKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WhiteBoxKeyMapInput)(nil)).Elem(), WhiteBoxKeyMap{})
	pulumi.RegisterOutputType(WhiteBoxKeyOutput{})
	pulumi.RegisterOutputType(WhiteBoxKeyArrayOutput{})
	pulumi.RegisterOutputType(WhiteBoxKeyMapOutput{})
}
