// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a teo teoFunctionRulePriority
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Teo.NewFunctionRulePriority(ctx, "teoFunctionRulePriority", &Teo.FunctionRulePriorityArgs{
//				FunctionId: pulumi.String("ef-txx7fnua"),
//				RuleIds: pulumi.StringArray{
//					pulumi.String("rule-equpbht3"),
//					pulumi.String("rule-ax28n3g6"),
//				},
//				ZoneId: pulumi.String("zone-2qtuhspy7cr6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// teo teo_function_rule_priority can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Teo/functionRulePriority:FunctionRulePriority teo_function_rule_priority zone_id#function_id
// ```
type FunctionRulePriority struct {
	pulumi.CustomResourceState

	// ID of the Function.
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// he list of rule IDs. It is required to include all rule IDs after adjusting their priorities. The execution order of multiple rules follows a top-down sequence. If not specified, the original priority order will be maintained.
	RuleIds pulumi.StringArrayOutput `pulumi:"ruleIds"`
	// ID of the site.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFunctionRulePriority registers a new resource with the given unique name, arguments, and options.
func NewFunctionRulePriority(ctx *pulumi.Context,
	name string, args *FunctionRulePriorityArgs, opts ...pulumi.ResourceOption) (*FunctionRulePriority, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionId'")
	}
	if args.RuleIds == nil {
		return nil, errors.New("invalid value for required argument 'RuleIds'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionRulePriority
	err := ctx.RegisterResource("tencentcloud:Teo/functionRulePriority:FunctionRulePriority", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionRulePriority gets an existing FunctionRulePriority resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionRulePriority(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionRulePriorityState, opts ...pulumi.ResourceOption) (*FunctionRulePriority, error) {
	var resource FunctionRulePriority
	err := ctx.ReadResource("tencentcloud:Teo/functionRulePriority:FunctionRulePriority", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionRulePriority resources.
type functionRulePriorityState struct {
	// ID of the Function.
	FunctionId *string `pulumi:"functionId"`
	// he list of rule IDs. It is required to include all rule IDs after adjusting their priorities. The execution order of multiple rules follows a top-down sequence. If not specified, the original priority order will be maintained.
	RuleIds []string `pulumi:"ruleIds"`
	// ID of the site.
	ZoneId *string `pulumi:"zoneId"`
}

type FunctionRulePriorityState struct {
	// ID of the Function.
	FunctionId pulumi.StringPtrInput
	// he list of rule IDs. It is required to include all rule IDs after adjusting their priorities. The execution order of multiple rules follows a top-down sequence. If not specified, the original priority order will be maintained.
	RuleIds pulumi.StringArrayInput
	// ID of the site.
	ZoneId pulumi.StringPtrInput
}

func (FunctionRulePriorityState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionRulePriorityState)(nil)).Elem()
}

type functionRulePriorityArgs struct {
	// ID of the Function.
	FunctionId string `pulumi:"functionId"`
	// he list of rule IDs. It is required to include all rule IDs after adjusting their priorities. The execution order of multiple rules follows a top-down sequence. If not specified, the original priority order will be maintained.
	RuleIds []string `pulumi:"ruleIds"`
	// ID of the site.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FunctionRulePriority resource.
type FunctionRulePriorityArgs struct {
	// ID of the Function.
	FunctionId pulumi.StringInput
	// he list of rule IDs. It is required to include all rule IDs after adjusting their priorities. The execution order of multiple rules follows a top-down sequence. If not specified, the original priority order will be maintained.
	RuleIds pulumi.StringArrayInput
	// ID of the site.
	ZoneId pulumi.StringInput
}

func (FunctionRulePriorityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionRulePriorityArgs)(nil)).Elem()
}

type FunctionRulePriorityInput interface {
	pulumi.Input

	ToFunctionRulePriorityOutput() FunctionRulePriorityOutput
	ToFunctionRulePriorityOutputWithContext(ctx context.Context) FunctionRulePriorityOutput
}

func (*FunctionRulePriority) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionRulePriority)(nil)).Elem()
}

func (i *FunctionRulePriority) ToFunctionRulePriorityOutput() FunctionRulePriorityOutput {
	return i.ToFunctionRulePriorityOutputWithContext(context.Background())
}

func (i *FunctionRulePriority) ToFunctionRulePriorityOutputWithContext(ctx context.Context) FunctionRulePriorityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRulePriorityOutput)
}

// FunctionRulePriorityArrayInput is an input type that accepts FunctionRulePriorityArray and FunctionRulePriorityArrayOutput values.
// You can construct a concrete instance of `FunctionRulePriorityArrayInput` via:
//
//	FunctionRulePriorityArray{ FunctionRulePriorityArgs{...} }
type FunctionRulePriorityArrayInput interface {
	pulumi.Input

	ToFunctionRulePriorityArrayOutput() FunctionRulePriorityArrayOutput
	ToFunctionRulePriorityArrayOutputWithContext(context.Context) FunctionRulePriorityArrayOutput
}

type FunctionRulePriorityArray []FunctionRulePriorityInput

func (FunctionRulePriorityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionRulePriority)(nil)).Elem()
}

func (i FunctionRulePriorityArray) ToFunctionRulePriorityArrayOutput() FunctionRulePriorityArrayOutput {
	return i.ToFunctionRulePriorityArrayOutputWithContext(context.Background())
}

func (i FunctionRulePriorityArray) ToFunctionRulePriorityArrayOutputWithContext(ctx context.Context) FunctionRulePriorityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRulePriorityArrayOutput)
}

// FunctionRulePriorityMapInput is an input type that accepts FunctionRulePriorityMap and FunctionRulePriorityMapOutput values.
// You can construct a concrete instance of `FunctionRulePriorityMapInput` via:
//
//	FunctionRulePriorityMap{ "key": FunctionRulePriorityArgs{...} }
type FunctionRulePriorityMapInput interface {
	pulumi.Input

	ToFunctionRulePriorityMapOutput() FunctionRulePriorityMapOutput
	ToFunctionRulePriorityMapOutputWithContext(context.Context) FunctionRulePriorityMapOutput
}

type FunctionRulePriorityMap map[string]FunctionRulePriorityInput

func (FunctionRulePriorityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionRulePriority)(nil)).Elem()
}

func (i FunctionRulePriorityMap) ToFunctionRulePriorityMapOutput() FunctionRulePriorityMapOutput {
	return i.ToFunctionRulePriorityMapOutputWithContext(context.Background())
}

func (i FunctionRulePriorityMap) ToFunctionRulePriorityMapOutputWithContext(ctx context.Context) FunctionRulePriorityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRulePriorityMapOutput)
}

type FunctionRulePriorityOutput struct{ *pulumi.OutputState }

func (FunctionRulePriorityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionRulePriority)(nil)).Elem()
}

func (o FunctionRulePriorityOutput) ToFunctionRulePriorityOutput() FunctionRulePriorityOutput {
	return o
}

func (o FunctionRulePriorityOutput) ToFunctionRulePriorityOutputWithContext(ctx context.Context) FunctionRulePriorityOutput {
	return o
}

// ID of the Function.
func (o FunctionRulePriorityOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionRulePriority) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// he list of rule IDs. It is required to include all rule IDs after adjusting their priorities. The execution order of multiple rules follows a top-down sequence. If not specified, the original priority order will be maintained.
func (o FunctionRulePriorityOutput) RuleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FunctionRulePriority) pulumi.StringArrayOutput { return v.RuleIds }).(pulumi.StringArrayOutput)
}

// ID of the site.
func (o FunctionRulePriorityOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionRulePriority) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FunctionRulePriorityArrayOutput struct{ *pulumi.OutputState }

func (FunctionRulePriorityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionRulePriority)(nil)).Elem()
}

func (o FunctionRulePriorityArrayOutput) ToFunctionRulePriorityArrayOutput() FunctionRulePriorityArrayOutput {
	return o
}

func (o FunctionRulePriorityArrayOutput) ToFunctionRulePriorityArrayOutputWithContext(ctx context.Context) FunctionRulePriorityArrayOutput {
	return o
}

func (o FunctionRulePriorityArrayOutput) Index(i pulumi.IntInput) FunctionRulePriorityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionRulePriority {
		return vs[0].([]*FunctionRulePriority)[vs[1].(int)]
	}).(FunctionRulePriorityOutput)
}

type FunctionRulePriorityMapOutput struct{ *pulumi.OutputState }

func (FunctionRulePriorityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionRulePriority)(nil)).Elem()
}

func (o FunctionRulePriorityMapOutput) ToFunctionRulePriorityMapOutput() FunctionRulePriorityMapOutput {
	return o
}

func (o FunctionRulePriorityMapOutput) ToFunctionRulePriorityMapOutputWithContext(ctx context.Context) FunctionRulePriorityMapOutput {
	return o
}

func (o FunctionRulePriorityMapOutput) MapIndex(k pulumi.StringInput) FunctionRulePriorityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionRulePriority {
		return vs[0].(map[string]*FunctionRulePriority)[vs[1].(string)]
	}).(FunctionRulePriorityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRulePriorityInput)(nil)).Elem(), &FunctionRulePriority{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRulePriorityArrayInput)(nil)).Elem(), FunctionRulePriorityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRulePriorityMapInput)(nil)).Elem(), FunctionRulePriorityMap{})
	pulumi.RegisterOutputType(FunctionRulePriorityOutput{})
	pulumi.RegisterOutputType(FunctionRulePriorityArrayOutput{})
	pulumi.RegisterOutputType(FunctionRulePriorityMapOutput{})
}
