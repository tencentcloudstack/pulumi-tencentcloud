// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a teo ownershipVerify
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Teo.NewOwnershipVerify(ctx, "ownershipVerify", &Teo.OwnershipVerifyArgs{
//				Domain: pulumi.String("qq.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type OwnershipVerify struct {
	pulumi.CustomResourceState

	// Verify domain name.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// When the verification result is failed, this field will return the reason.
	Result pulumi.StringOutput `pulumi:"result"`
	// Ownership verification results. `success`: verification successful; `fail`: verification failed.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewOwnershipVerify registers a new resource with the given unique name, arguments, and options.
func NewOwnershipVerify(ctx *pulumi.Context,
	name string, args *OwnershipVerifyArgs, opts ...pulumi.ResourceOption) (*OwnershipVerify, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource OwnershipVerify
	err := ctx.RegisterResource("tencentcloud:Teo/ownershipVerify:OwnershipVerify", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOwnershipVerify gets an existing OwnershipVerify resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOwnershipVerify(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OwnershipVerifyState, opts ...pulumi.ResourceOption) (*OwnershipVerify, error) {
	var resource OwnershipVerify
	err := ctx.ReadResource("tencentcloud:Teo/ownershipVerify:OwnershipVerify", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OwnershipVerify resources.
type ownershipVerifyState struct {
	// Verify domain name.
	Domain *string `pulumi:"domain"`
	// When the verification result is failed, this field will return the reason.
	Result *string `pulumi:"result"`
	// Ownership verification results. `success`: verification successful; `fail`: verification failed.
	Status *string `pulumi:"status"`
}

type OwnershipVerifyState struct {
	// Verify domain name.
	Domain pulumi.StringPtrInput
	// When the verification result is failed, this field will return the reason.
	Result pulumi.StringPtrInput
	// Ownership verification results. `success`: verification successful; `fail`: verification failed.
	Status pulumi.StringPtrInput
}

func (OwnershipVerifyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ownershipVerifyState)(nil)).Elem()
}

type ownershipVerifyArgs struct {
	// Verify domain name.
	Domain string `pulumi:"domain"`
}

// The set of arguments for constructing a OwnershipVerify resource.
type OwnershipVerifyArgs struct {
	// Verify domain name.
	Domain pulumi.StringInput
}

func (OwnershipVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ownershipVerifyArgs)(nil)).Elem()
}

type OwnershipVerifyInput interface {
	pulumi.Input

	ToOwnershipVerifyOutput() OwnershipVerifyOutput
	ToOwnershipVerifyOutputWithContext(ctx context.Context) OwnershipVerifyOutput
}

func (*OwnershipVerify) ElementType() reflect.Type {
	return reflect.TypeOf((**OwnershipVerify)(nil)).Elem()
}

func (i *OwnershipVerify) ToOwnershipVerifyOutput() OwnershipVerifyOutput {
	return i.ToOwnershipVerifyOutputWithContext(context.Background())
}

func (i *OwnershipVerify) ToOwnershipVerifyOutputWithContext(ctx context.Context) OwnershipVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnershipVerifyOutput)
}

// OwnershipVerifyArrayInput is an input type that accepts OwnershipVerifyArray and OwnershipVerifyArrayOutput values.
// You can construct a concrete instance of `OwnershipVerifyArrayInput` via:
//
//	OwnershipVerifyArray{ OwnershipVerifyArgs{...} }
type OwnershipVerifyArrayInput interface {
	pulumi.Input

	ToOwnershipVerifyArrayOutput() OwnershipVerifyArrayOutput
	ToOwnershipVerifyArrayOutputWithContext(context.Context) OwnershipVerifyArrayOutput
}

type OwnershipVerifyArray []OwnershipVerifyInput

func (OwnershipVerifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OwnershipVerify)(nil)).Elem()
}

func (i OwnershipVerifyArray) ToOwnershipVerifyArrayOutput() OwnershipVerifyArrayOutput {
	return i.ToOwnershipVerifyArrayOutputWithContext(context.Background())
}

func (i OwnershipVerifyArray) ToOwnershipVerifyArrayOutputWithContext(ctx context.Context) OwnershipVerifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnershipVerifyArrayOutput)
}

// OwnershipVerifyMapInput is an input type that accepts OwnershipVerifyMap and OwnershipVerifyMapOutput values.
// You can construct a concrete instance of `OwnershipVerifyMapInput` via:
//
//	OwnershipVerifyMap{ "key": OwnershipVerifyArgs{...} }
type OwnershipVerifyMapInput interface {
	pulumi.Input

	ToOwnershipVerifyMapOutput() OwnershipVerifyMapOutput
	ToOwnershipVerifyMapOutputWithContext(context.Context) OwnershipVerifyMapOutput
}

type OwnershipVerifyMap map[string]OwnershipVerifyInput

func (OwnershipVerifyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OwnershipVerify)(nil)).Elem()
}

func (i OwnershipVerifyMap) ToOwnershipVerifyMapOutput() OwnershipVerifyMapOutput {
	return i.ToOwnershipVerifyMapOutputWithContext(context.Background())
}

func (i OwnershipVerifyMap) ToOwnershipVerifyMapOutputWithContext(ctx context.Context) OwnershipVerifyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OwnershipVerifyMapOutput)
}

type OwnershipVerifyOutput struct{ *pulumi.OutputState }

func (OwnershipVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OwnershipVerify)(nil)).Elem()
}

func (o OwnershipVerifyOutput) ToOwnershipVerifyOutput() OwnershipVerifyOutput {
	return o
}

func (o OwnershipVerifyOutput) ToOwnershipVerifyOutputWithContext(ctx context.Context) OwnershipVerifyOutput {
	return o
}

// Verify domain name.
func (o OwnershipVerifyOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *OwnershipVerify) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// When the verification result is failed, this field will return the reason.
func (o OwnershipVerifyOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *OwnershipVerify) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

// Ownership verification results. `success`: verification successful; `fail`: verification failed.
func (o OwnershipVerifyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *OwnershipVerify) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type OwnershipVerifyArrayOutput struct{ *pulumi.OutputState }

func (OwnershipVerifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OwnershipVerify)(nil)).Elem()
}

func (o OwnershipVerifyArrayOutput) ToOwnershipVerifyArrayOutput() OwnershipVerifyArrayOutput {
	return o
}

func (o OwnershipVerifyArrayOutput) ToOwnershipVerifyArrayOutputWithContext(ctx context.Context) OwnershipVerifyArrayOutput {
	return o
}

func (o OwnershipVerifyArrayOutput) Index(i pulumi.IntInput) OwnershipVerifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OwnershipVerify {
		return vs[0].([]*OwnershipVerify)[vs[1].(int)]
	}).(OwnershipVerifyOutput)
}

type OwnershipVerifyMapOutput struct{ *pulumi.OutputState }

func (OwnershipVerifyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OwnershipVerify)(nil)).Elem()
}

func (o OwnershipVerifyMapOutput) ToOwnershipVerifyMapOutput() OwnershipVerifyMapOutput {
	return o
}

func (o OwnershipVerifyMapOutput) ToOwnershipVerifyMapOutputWithContext(ctx context.Context) OwnershipVerifyMapOutput {
	return o
}

func (o OwnershipVerifyMapOutput) MapIndex(k pulumi.StringInput) OwnershipVerifyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OwnershipVerify {
		return vs[0].(map[string]*OwnershipVerify)[vs[1].(string)]
	}).(OwnershipVerifyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OwnershipVerifyInput)(nil)).Elem(), &OwnershipVerify{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnershipVerifyArrayInput)(nil)).Elem(), OwnershipVerifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OwnershipVerifyMapInput)(nil)).Elem(), OwnershipVerifyMap{})
	pulumi.RegisterOutputType(OwnershipVerifyOutput{})
	pulumi.RegisterOutputType(OwnershipVerifyArrayOutput{})
	pulumi.RegisterOutputType(OwnershipVerifyMapOutput{})
}
