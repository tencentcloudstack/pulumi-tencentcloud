// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a teo certificate
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Teo.NewCertificateConfig(ctx, "certificate", &Teo.CertificateConfigArgs{
//				Host:   pulumi.String("test.tencentcloud-terraform-provider.cn"),
//				Mode:   pulumi.String("eofreecert"),
//				ZoneId: pulumi.String("zone-2o1t24kgy362"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Configure SSL certificate
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Teo.NewCertificateConfig(ctx, "certificate", &Teo.CertificateConfigArgs{
//				Host: pulumi.String("test.tencentcloud-terraform-provider.cn"),
//				Mode: pulumi.String("sslcert"),
//				ServerCertInfos: teo.CertificateConfigServerCertInfoArray{
//					&teo.CertificateConfigServerCertInfoArgs{
//						CertId: pulumi.String("8xiUJIJd"),
//					},
//				},
//				ZoneId: pulumi.String("zone-2o1t24kgy362"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// teo certificate can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Teo/certificateConfig:CertificateConfig certificate zone_id#host#cert_id
//
// ```
type CertificateConfig struct {
	pulumi.CustomResourceState

	// Acceleration domain name that needs to modify the certificate configuration.
	Host pulumi.StringOutput `pulumi:"host"`
	// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
	ServerCertInfos CertificateConfigServerCertInfoArrayOutput `pulumi:"serverCertInfos"`
	// Site ID.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewCertificateConfig registers a new resource with the given unique name, arguments, and options.
func NewCertificateConfig(ctx *pulumi.Context,
	name string, args *CertificateConfigArgs, opts ...pulumi.ResourceOption) (*CertificateConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CertificateConfig
	err := ctx.RegisterResource("tencentcloud:Teo/certificateConfig:CertificateConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateConfig gets an existing CertificateConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateConfigState, opts ...pulumi.ResourceOption) (*CertificateConfig, error) {
	var resource CertificateConfig
	err := ctx.ReadResource("tencentcloud:Teo/certificateConfig:CertificateConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateConfig resources.
type certificateConfigState struct {
	// Acceleration domain name that needs to modify the certificate configuration.
	Host *string `pulumi:"host"`
	// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
	Mode *string `pulumi:"mode"`
	// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
	ServerCertInfos []CertificateConfigServerCertInfo `pulumi:"serverCertInfos"`
	// Site ID.
	ZoneId *string `pulumi:"zoneId"`
}

type CertificateConfigState struct {
	// Acceleration domain name that needs to modify the certificate configuration.
	Host pulumi.StringPtrInput
	// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
	Mode pulumi.StringPtrInput
	// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
	ServerCertInfos CertificateConfigServerCertInfoArrayInput
	// Site ID.
	ZoneId pulumi.StringPtrInput
}

func (CertificateConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateConfigState)(nil)).Elem()
}

type certificateConfigArgs struct {
	// Acceleration domain name that needs to modify the certificate configuration.
	Host string `pulumi:"host"`
	// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
	Mode *string `pulumi:"mode"`
	// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
	ServerCertInfos []CertificateConfigServerCertInfo `pulumi:"serverCertInfos"`
	// Site ID.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a CertificateConfig resource.
type CertificateConfigArgs struct {
	// Acceleration domain name that needs to modify the certificate configuration.
	Host pulumi.StringInput
	// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
	Mode pulumi.StringPtrInput
	// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
	ServerCertInfos CertificateConfigServerCertInfoArrayInput
	// Site ID.
	ZoneId pulumi.StringInput
}

func (CertificateConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateConfigArgs)(nil)).Elem()
}

type CertificateConfigInput interface {
	pulumi.Input

	ToCertificateConfigOutput() CertificateConfigOutput
	ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput
}

func (*CertificateConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfig)(nil)).Elem()
}

func (i *CertificateConfig) ToCertificateConfigOutput() CertificateConfigOutput {
	return i.ToCertificateConfigOutputWithContext(context.Background())
}

func (i *CertificateConfig) ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigOutput)
}

// CertificateConfigArrayInput is an input type that accepts CertificateConfigArray and CertificateConfigArrayOutput values.
// You can construct a concrete instance of `CertificateConfigArrayInput` via:
//
//	CertificateConfigArray{ CertificateConfigArgs{...} }
type CertificateConfigArrayInput interface {
	pulumi.Input

	ToCertificateConfigArrayOutput() CertificateConfigArrayOutput
	ToCertificateConfigArrayOutputWithContext(context.Context) CertificateConfigArrayOutput
}

type CertificateConfigArray []CertificateConfigInput

func (CertificateConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateConfig)(nil)).Elem()
}

func (i CertificateConfigArray) ToCertificateConfigArrayOutput() CertificateConfigArrayOutput {
	return i.ToCertificateConfigArrayOutputWithContext(context.Background())
}

func (i CertificateConfigArray) ToCertificateConfigArrayOutputWithContext(ctx context.Context) CertificateConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigArrayOutput)
}

// CertificateConfigMapInput is an input type that accepts CertificateConfigMap and CertificateConfigMapOutput values.
// You can construct a concrete instance of `CertificateConfigMapInput` via:
//
//	CertificateConfigMap{ "key": CertificateConfigArgs{...} }
type CertificateConfigMapInput interface {
	pulumi.Input

	ToCertificateConfigMapOutput() CertificateConfigMapOutput
	ToCertificateConfigMapOutputWithContext(context.Context) CertificateConfigMapOutput
}

type CertificateConfigMap map[string]CertificateConfigInput

func (CertificateConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateConfig)(nil)).Elem()
}

func (i CertificateConfigMap) ToCertificateConfigMapOutput() CertificateConfigMapOutput {
	return i.ToCertificateConfigMapOutputWithContext(context.Background())
}

func (i CertificateConfigMap) ToCertificateConfigMapOutputWithContext(ctx context.Context) CertificateConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateConfigMapOutput)
}

type CertificateConfigOutput struct{ *pulumi.OutputState }

func (CertificateConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigOutput) ToCertificateConfigOutput() CertificateConfigOutput {
	return o
}

func (o CertificateConfigOutput) ToCertificateConfigOutputWithContext(ctx context.Context) CertificateConfigOutput {
	return o
}

// Acceleration domain name that needs to modify the certificate configuration.
func (o CertificateConfigOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateConfig) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Mode of configuring the certificate, the values are: `disable`: Do not configure the certificate; `eofreecert`: Configure EdgeOne free certificate; `sslcert`: Configure SSL certificate. If not filled in, the default value is `disable`.
func (o CertificateConfigOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateConfig) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// SSL certificate configuration, this parameter takes effect only when mode = sslcert, just enter the corresponding CertId. You can go to the SSL certificate list to view the CertId.
func (o CertificateConfigOutput) ServerCertInfos() CertificateConfigServerCertInfoArrayOutput {
	return o.ApplyT(func(v *CertificateConfig) CertificateConfigServerCertInfoArrayOutput { return v.ServerCertInfos }).(CertificateConfigServerCertInfoArrayOutput)
}

// Site ID.
func (o CertificateConfigOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateConfig) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type CertificateConfigArrayOutput struct{ *pulumi.OutputState }

func (CertificateConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigArrayOutput) ToCertificateConfigArrayOutput() CertificateConfigArrayOutput {
	return o
}

func (o CertificateConfigArrayOutput) ToCertificateConfigArrayOutputWithContext(ctx context.Context) CertificateConfigArrayOutput {
	return o
}

func (o CertificateConfigArrayOutput) Index(i pulumi.IntInput) CertificateConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateConfig {
		return vs[0].([]*CertificateConfig)[vs[1].(int)]
	}).(CertificateConfigOutput)
}

type CertificateConfigMapOutput struct{ *pulumi.OutputState }

func (CertificateConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateConfig)(nil)).Elem()
}

func (o CertificateConfigMapOutput) ToCertificateConfigMapOutput() CertificateConfigMapOutput {
	return o
}

func (o CertificateConfigMapOutput) ToCertificateConfigMapOutputWithContext(ctx context.Context) CertificateConfigMapOutput {
	return o
}

func (o CertificateConfigMapOutput) MapIndex(k pulumi.StringInput) CertificateConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateConfig {
		return vs[0].(map[string]*CertificateConfig)[vs[1].(string)]
	}).(CertificateConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateConfigInput)(nil)).Elem(), &CertificateConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateConfigArrayInput)(nil)).Elem(), CertificateConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateConfigMapInput)(nil)).Elem(), CertificateConfigMap{})
	pulumi.RegisterOutputType(CertificateConfigOutput{})
	pulumi.RegisterOutputType(CertificateConfigArrayOutput{})
	pulumi.RegisterOutputType(CertificateConfigMapOutput{})
}
