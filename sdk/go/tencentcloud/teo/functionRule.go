// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package teo

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/internal"
)

// Provides a resource to create a teo teoFunctionRule
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Teo"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Teo.NewFunctionRule(ctx, "teoFunctionRule", &Teo.FunctionRuleArgs{
//				FunctionId: pulumi.String("ef-txx7fnua"),
//				Remark:     pulumi.String("aaa"),
//				ZoneId:     pulumi.String("zone-2qtuhspy7cr6"),
//				FunctionRuleConditions: teo.FunctionRuleFunctionRuleConditionArray{
//					&teo.FunctionRuleFunctionRuleConditionArgs{
//						RuleConditions: teo.FunctionRuleFunctionRuleConditionRuleConditionArray{
//							&teo.FunctionRuleFunctionRuleConditionRuleConditionArgs{
//								IgnoreCase: pulumi.Bool(false),
//								Name:       nil,
//								Operator:   pulumi.String("equal"),
//								Target:     pulumi.String("host"),
//								Values: pulumi.StringArray{
//									pulumi.String("aaa.makn.cn"),
//								},
//							},
//							&teo.FunctionRuleFunctionRuleConditionRuleConditionArgs{
//								IgnoreCase: pulumi.Bool(false),
//								Name:       nil,
//								Operator:   pulumi.String("equal"),
//								Target:     pulumi.String("extension"),
//								Values: pulumi.StringArray{
//									pulumi.String(".txt"),
//								},
//							},
//						},
//					},
//					&teo.FunctionRuleFunctionRuleConditionArgs{
//						RuleConditions: teo.FunctionRuleFunctionRuleConditionRuleConditionArray{
//							&teo.FunctionRuleFunctionRuleConditionRuleConditionArgs{
//								IgnoreCase: pulumi.Bool(false),
//								Name:       nil,
//								Operator:   pulumi.String("notequal"),
//								Target:     pulumi.String("host"),
//								Values: pulumi.StringArray{
//									pulumi.String("aaa.makn.cn"),
//								},
//							},
//							&teo.FunctionRuleFunctionRuleConditionRuleConditionArgs{
//								IgnoreCase: pulumi.Bool(false),
//								Name:       nil,
//								Operator:   pulumi.String("equal"),
//								Target:     pulumi.String("extension"),
//								Values: pulumi.StringArray{
//									pulumi.String(".png"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// teo teo_function_rule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import tencentcloud:Teo/functionRule:FunctionRule teo_function_rule zone_id#function_id#rule_id
// ```
type FunctionRule struct {
	pulumi.CustomResourceState

	// ID of the Function.
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// The name of the function.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The list of rule conditions, where the conditions are connected by an "OR" relationship.
	FunctionRuleConditions FunctionRuleFunctionRuleConditionArrayOutput `pulumi:"functionRuleConditions"`
	// The priority of the function trigger rule. A higher numerical value indicates a higher priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// Rule description, maximum support of 60 characters.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// ID of the Function Rule.
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// ID of the site.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewFunctionRule registers a new resource with the given unique name, arguments, and options.
func NewFunctionRule(ctx *pulumi.Context,
	name string, args *FunctionRuleArgs, opts ...pulumi.ResourceOption) (*FunctionRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionId'")
	}
	if args.FunctionRuleConditions == nil {
		return nil, errors.New("invalid value for required argument 'FunctionRuleConditions'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FunctionRule
	err := ctx.RegisterResource("tencentcloud:Teo/functionRule:FunctionRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionRule gets an existing FunctionRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionRuleState, opts ...pulumi.ResourceOption) (*FunctionRule, error) {
	var resource FunctionRule
	err := ctx.ReadResource("tencentcloud:Teo/functionRule:FunctionRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FunctionRule resources.
type functionRuleState struct {
	// ID of the Function.
	FunctionId *string `pulumi:"functionId"`
	// The name of the function.
	FunctionName *string `pulumi:"functionName"`
	// The list of rule conditions, where the conditions are connected by an "OR" relationship.
	FunctionRuleConditions []FunctionRuleFunctionRuleCondition `pulumi:"functionRuleConditions"`
	// The priority of the function trigger rule. A higher numerical value indicates a higher priority.
	Priority *int `pulumi:"priority"`
	// Rule description, maximum support of 60 characters.
	Remark *string `pulumi:"remark"`
	// ID of the Function Rule.
	RuleId *string `pulumi:"ruleId"`
	// ID of the site.
	ZoneId *string `pulumi:"zoneId"`
}

type FunctionRuleState struct {
	// ID of the Function.
	FunctionId pulumi.StringPtrInput
	// The name of the function.
	FunctionName pulumi.StringPtrInput
	// The list of rule conditions, where the conditions are connected by an "OR" relationship.
	FunctionRuleConditions FunctionRuleFunctionRuleConditionArrayInput
	// The priority of the function trigger rule. A higher numerical value indicates a higher priority.
	Priority pulumi.IntPtrInput
	// Rule description, maximum support of 60 characters.
	Remark pulumi.StringPtrInput
	// ID of the Function Rule.
	RuleId pulumi.StringPtrInput
	// ID of the site.
	ZoneId pulumi.StringPtrInput
}

func (FunctionRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionRuleState)(nil)).Elem()
}

type functionRuleArgs struct {
	// ID of the Function.
	FunctionId string `pulumi:"functionId"`
	// The list of rule conditions, where the conditions are connected by an "OR" relationship.
	FunctionRuleConditions []FunctionRuleFunctionRuleCondition `pulumi:"functionRuleConditions"`
	// Rule description, maximum support of 60 characters.
	Remark *string `pulumi:"remark"`
	// ID of the site.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FunctionRule resource.
type FunctionRuleArgs struct {
	// ID of the Function.
	FunctionId pulumi.StringInput
	// The list of rule conditions, where the conditions are connected by an "OR" relationship.
	FunctionRuleConditions FunctionRuleFunctionRuleConditionArrayInput
	// Rule description, maximum support of 60 characters.
	Remark pulumi.StringPtrInput
	// ID of the site.
	ZoneId pulumi.StringInput
}

func (FunctionRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionRuleArgs)(nil)).Elem()
}

type FunctionRuleInput interface {
	pulumi.Input

	ToFunctionRuleOutput() FunctionRuleOutput
	ToFunctionRuleOutputWithContext(ctx context.Context) FunctionRuleOutput
}

func (*FunctionRule) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionRule)(nil)).Elem()
}

func (i *FunctionRule) ToFunctionRuleOutput() FunctionRuleOutput {
	return i.ToFunctionRuleOutputWithContext(context.Background())
}

func (i *FunctionRule) ToFunctionRuleOutputWithContext(ctx context.Context) FunctionRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuleOutput)
}

// FunctionRuleArrayInput is an input type that accepts FunctionRuleArray and FunctionRuleArrayOutput values.
// You can construct a concrete instance of `FunctionRuleArrayInput` via:
//
//	FunctionRuleArray{ FunctionRuleArgs{...} }
type FunctionRuleArrayInput interface {
	pulumi.Input

	ToFunctionRuleArrayOutput() FunctionRuleArrayOutput
	ToFunctionRuleArrayOutputWithContext(context.Context) FunctionRuleArrayOutput
}

type FunctionRuleArray []FunctionRuleInput

func (FunctionRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionRule)(nil)).Elem()
}

func (i FunctionRuleArray) ToFunctionRuleArrayOutput() FunctionRuleArrayOutput {
	return i.ToFunctionRuleArrayOutputWithContext(context.Background())
}

func (i FunctionRuleArray) ToFunctionRuleArrayOutputWithContext(ctx context.Context) FunctionRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuleArrayOutput)
}

// FunctionRuleMapInput is an input type that accepts FunctionRuleMap and FunctionRuleMapOutput values.
// You can construct a concrete instance of `FunctionRuleMapInput` via:
//
//	FunctionRuleMap{ "key": FunctionRuleArgs{...} }
type FunctionRuleMapInput interface {
	pulumi.Input

	ToFunctionRuleMapOutput() FunctionRuleMapOutput
	ToFunctionRuleMapOutputWithContext(context.Context) FunctionRuleMapOutput
}

type FunctionRuleMap map[string]FunctionRuleInput

func (FunctionRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionRule)(nil)).Elem()
}

func (i FunctionRuleMap) ToFunctionRuleMapOutput() FunctionRuleMapOutput {
	return i.ToFunctionRuleMapOutputWithContext(context.Background())
}

func (i FunctionRuleMap) ToFunctionRuleMapOutputWithContext(ctx context.Context) FunctionRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionRuleMapOutput)
}

type FunctionRuleOutput struct{ *pulumi.OutputState }

func (FunctionRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FunctionRule)(nil)).Elem()
}

func (o FunctionRuleOutput) ToFunctionRuleOutput() FunctionRuleOutput {
	return o
}

func (o FunctionRuleOutput) ToFunctionRuleOutputWithContext(ctx context.Context) FunctionRuleOutput {
	return o
}

// ID of the Function.
func (o FunctionRuleOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionRule) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// The name of the function.
func (o FunctionRuleOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionRule) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The list of rule conditions, where the conditions are connected by an "OR" relationship.
func (o FunctionRuleOutput) FunctionRuleConditions() FunctionRuleFunctionRuleConditionArrayOutput {
	return o.ApplyT(func(v *FunctionRule) FunctionRuleFunctionRuleConditionArrayOutput { return v.FunctionRuleConditions }).(FunctionRuleFunctionRuleConditionArrayOutput)
}

// The priority of the function trigger rule. A higher numerical value indicates a higher priority.
func (o FunctionRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *FunctionRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// Rule description, maximum support of 60 characters.
func (o FunctionRuleOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FunctionRule) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// ID of the Function Rule.
func (o FunctionRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionRule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// ID of the site.
func (o FunctionRuleOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FunctionRule) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type FunctionRuleArrayOutput struct{ *pulumi.OutputState }

func (FunctionRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FunctionRule)(nil)).Elem()
}

func (o FunctionRuleArrayOutput) ToFunctionRuleArrayOutput() FunctionRuleArrayOutput {
	return o
}

func (o FunctionRuleArrayOutput) ToFunctionRuleArrayOutputWithContext(ctx context.Context) FunctionRuleArrayOutput {
	return o
}

func (o FunctionRuleArrayOutput) Index(i pulumi.IntInput) FunctionRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FunctionRule {
		return vs[0].([]*FunctionRule)[vs[1].(int)]
	}).(FunctionRuleOutput)
}

type FunctionRuleMapOutput struct{ *pulumi.OutputState }

func (FunctionRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FunctionRule)(nil)).Elem()
}

func (o FunctionRuleMapOutput) ToFunctionRuleMapOutput() FunctionRuleMapOutput {
	return o
}

func (o FunctionRuleMapOutput) ToFunctionRuleMapOutputWithContext(ctx context.Context) FunctionRuleMapOutput {
	return o
}

func (o FunctionRuleMapOutput) MapIndex(k pulumi.StringInput) FunctionRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FunctionRule {
		return vs[0].(map[string]*FunctionRule)[vs[1].(string)]
	}).(FunctionRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRuleInput)(nil)).Elem(), &FunctionRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRuleArrayInput)(nil)).Elem(), FunctionRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionRuleMapInput)(nil)).Elem(), FunctionRuleMap{})
	pulumi.RegisterOutputType(FunctionRuleOutput{})
	pulumi.RegisterOutputType(FunctionRuleArrayOutput{})
	pulumi.RegisterOutputType(FunctionRuleMapOutput{})
}
