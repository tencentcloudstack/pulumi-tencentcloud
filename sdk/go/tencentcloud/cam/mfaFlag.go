// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cam mfaFlag
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/User"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/User"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			info, err := User.GetInfo(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cam.NewMfaFlag(ctx, "mfaFlag", &Cam.MfaFlagArgs{
//				OpUin: pulumi.String(info.Uin),
//				LoginFlag: &cam.MfaFlagLoginFlagArgs{
//					Phone:  pulumi.Int(0),
//					Stoken: pulumi.Int(1),
//					Wechat: pulumi.Int(0),
//				},
//				ActionFlag: &cam.MfaFlagActionFlagArgs{
//					Phone:  pulumi.Int(0),
//					Stoken: pulumi.Int(1),
//					Wechat: pulumi.Int(0),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cam mfa_flag can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/mfaFlag:MfaFlag mfa_flag mfa_flag_id
//
// ```
type MfaFlag struct {
	pulumi.CustomResourceState

	// Action flag setting.
	ActionFlag MfaFlagActionFlagPtrOutput `pulumi:"actionFlag"`
	// Login flag setting.
	LoginFlag MfaFlagLoginFlagPtrOutput `pulumi:"loginFlag"`
	// Operate uin.
	OpUin pulumi.IntOutput `pulumi:"opUin"`
}

// NewMfaFlag registers a new resource with the given unique name, arguments, and options.
func NewMfaFlag(ctx *pulumi.Context,
	name string, args *MfaFlagArgs, opts ...pulumi.ResourceOption) (*MfaFlag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OpUin == nil {
		return nil, errors.New("invalid value for required argument 'OpUin'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MfaFlag
	err := ctx.RegisterResource("tencentcloud:Cam/mfaFlag:MfaFlag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMfaFlag gets an existing MfaFlag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMfaFlag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MfaFlagState, opts ...pulumi.ResourceOption) (*MfaFlag, error) {
	var resource MfaFlag
	err := ctx.ReadResource("tencentcloud:Cam/mfaFlag:MfaFlag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MfaFlag resources.
type mfaFlagState struct {
	// Action flag setting.
	ActionFlag *MfaFlagActionFlag `pulumi:"actionFlag"`
	// Login flag setting.
	LoginFlag *MfaFlagLoginFlag `pulumi:"loginFlag"`
	// Operate uin.
	OpUin *int `pulumi:"opUin"`
}

type MfaFlagState struct {
	// Action flag setting.
	ActionFlag MfaFlagActionFlagPtrInput
	// Login flag setting.
	LoginFlag MfaFlagLoginFlagPtrInput
	// Operate uin.
	OpUin pulumi.IntPtrInput
}

func (MfaFlagState) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaFlagState)(nil)).Elem()
}

type mfaFlagArgs struct {
	// Action flag setting.
	ActionFlag *MfaFlagActionFlag `pulumi:"actionFlag"`
	// Login flag setting.
	LoginFlag *MfaFlagLoginFlag `pulumi:"loginFlag"`
	// Operate uin.
	OpUin int `pulumi:"opUin"`
}

// The set of arguments for constructing a MfaFlag resource.
type MfaFlagArgs struct {
	// Action flag setting.
	ActionFlag MfaFlagActionFlagPtrInput
	// Login flag setting.
	LoginFlag MfaFlagLoginFlagPtrInput
	// Operate uin.
	OpUin pulumi.IntInput
}

func (MfaFlagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mfaFlagArgs)(nil)).Elem()
}

type MfaFlagInput interface {
	pulumi.Input

	ToMfaFlagOutput() MfaFlagOutput
	ToMfaFlagOutputWithContext(ctx context.Context) MfaFlagOutput
}

func (*MfaFlag) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaFlag)(nil)).Elem()
}

func (i *MfaFlag) ToMfaFlagOutput() MfaFlagOutput {
	return i.ToMfaFlagOutputWithContext(context.Background())
}

func (i *MfaFlag) ToMfaFlagOutputWithContext(ctx context.Context) MfaFlagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaFlagOutput)
}

// MfaFlagArrayInput is an input type that accepts MfaFlagArray and MfaFlagArrayOutput values.
// You can construct a concrete instance of `MfaFlagArrayInput` via:
//
//	MfaFlagArray{ MfaFlagArgs{...} }
type MfaFlagArrayInput interface {
	pulumi.Input

	ToMfaFlagArrayOutput() MfaFlagArrayOutput
	ToMfaFlagArrayOutputWithContext(context.Context) MfaFlagArrayOutput
}

type MfaFlagArray []MfaFlagInput

func (MfaFlagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaFlag)(nil)).Elem()
}

func (i MfaFlagArray) ToMfaFlagArrayOutput() MfaFlagArrayOutput {
	return i.ToMfaFlagArrayOutputWithContext(context.Background())
}

func (i MfaFlagArray) ToMfaFlagArrayOutputWithContext(ctx context.Context) MfaFlagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaFlagArrayOutput)
}

// MfaFlagMapInput is an input type that accepts MfaFlagMap and MfaFlagMapOutput values.
// You can construct a concrete instance of `MfaFlagMapInput` via:
//
//	MfaFlagMap{ "key": MfaFlagArgs{...} }
type MfaFlagMapInput interface {
	pulumi.Input

	ToMfaFlagMapOutput() MfaFlagMapOutput
	ToMfaFlagMapOutputWithContext(context.Context) MfaFlagMapOutput
}

type MfaFlagMap map[string]MfaFlagInput

func (MfaFlagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaFlag)(nil)).Elem()
}

func (i MfaFlagMap) ToMfaFlagMapOutput() MfaFlagMapOutput {
	return i.ToMfaFlagMapOutputWithContext(context.Background())
}

func (i MfaFlagMap) ToMfaFlagMapOutputWithContext(ctx context.Context) MfaFlagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MfaFlagMapOutput)
}

type MfaFlagOutput struct{ *pulumi.OutputState }

func (MfaFlagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MfaFlag)(nil)).Elem()
}

func (o MfaFlagOutput) ToMfaFlagOutput() MfaFlagOutput {
	return o
}

func (o MfaFlagOutput) ToMfaFlagOutputWithContext(ctx context.Context) MfaFlagOutput {
	return o
}

// Action flag setting.
func (o MfaFlagOutput) ActionFlag() MfaFlagActionFlagPtrOutput {
	return o.ApplyT(func(v *MfaFlag) MfaFlagActionFlagPtrOutput { return v.ActionFlag }).(MfaFlagActionFlagPtrOutput)
}

// Login flag setting.
func (o MfaFlagOutput) LoginFlag() MfaFlagLoginFlagPtrOutput {
	return o.ApplyT(func(v *MfaFlag) MfaFlagLoginFlagPtrOutput { return v.LoginFlag }).(MfaFlagLoginFlagPtrOutput)
}

// Operate uin.
func (o MfaFlagOutput) OpUin() pulumi.IntOutput {
	return o.ApplyT(func(v *MfaFlag) pulumi.IntOutput { return v.OpUin }).(pulumi.IntOutput)
}

type MfaFlagArrayOutput struct{ *pulumi.OutputState }

func (MfaFlagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MfaFlag)(nil)).Elem()
}

func (o MfaFlagArrayOutput) ToMfaFlagArrayOutput() MfaFlagArrayOutput {
	return o
}

func (o MfaFlagArrayOutput) ToMfaFlagArrayOutputWithContext(ctx context.Context) MfaFlagArrayOutput {
	return o
}

func (o MfaFlagArrayOutput) Index(i pulumi.IntInput) MfaFlagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MfaFlag {
		return vs[0].([]*MfaFlag)[vs[1].(int)]
	}).(MfaFlagOutput)
}

type MfaFlagMapOutput struct{ *pulumi.OutputState }

func (MfaFlagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MfaFlag)(nil)).Elem()
}

func (o MfaFlagMapOutput) ToMfaFlagMapOutput() MfaFlagMapOutput {
	return o
}

func (o MfaFlagMapOutput) ToMfaFlagMapOutputWithContext(ctx context.Context) MfaFlagMapOutput {
	return o
}

func (o MfaFlagMapOutput) MapIndex(k pulumi.StringInput) MfaFlagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MfaFlag {
		return vs[0].(map[string]*MfaFlag)[vs[1].(string)]
	}).(MfaFlagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MfaFlagInput)(nil)).Elem(), &MfaFlag{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaFlagArrayInput)(nil)).Elem(), MfaFlagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MfaFlagMapInput)(nil)).Elem(), MfaFlagMap{})
	pulumi.RegisterOutputType(MfaFlagOutput{})
	pulumi.RegisterOutputType(MfaFlagArrayOutput{})
	pulumi.RegisterOutputType(MfaFlagMapOutput{})
}
