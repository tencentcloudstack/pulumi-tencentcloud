// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cam accessKey
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewAccessKey(ctx, "accessKey", &Cam.AccessKeyArgs{
//				TargetUin: pulumi.Int(100033690181),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Update
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewAccessKey(ctx, "accessKey", &Cam.AccessKeyArgs{
//				Status:    pulumi.String("Inactive"),
//				TargetUin: pulumi.Int(100033690181),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Encrypted
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewAccessKey(ctx, "accessKey", &Cam.AccessKeyArgs{
//				PgpKey:    pulumi.String("keybase:some_person_that_exists"),
//				TargetUin: pulumi.Int(100033690181),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cam access_key can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/accessKey:AccessKey access_key access_key_id
//
// ```
type AccessKey struct {
	pulumi.CustomResourceState

	// Access_key is the access key identification, required when updating.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// Encrypted secret, base64 encoded, if pgp_key was specified. This attribute is not available for imported resources. The
	// encrypted secret may be decrypted using the command line, for example: terraform output -raw encrypted_secret | base64
	// --decode | keybase pgp decrypt.
	EncryptedSecretAccessKey pulumi.StringOutput `pulumi:"encryptedSecretAccessKey"`
	// Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
	KeyFingerprint pulumi.StringOutput `pulumi:"keyFingerprint"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in the encryptedSecret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw" version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
	PgpKey pulumi.StringPtrOutput `pulumi:"pgpKey"`
	// Access key (key is only visible when created, please keep it properly).
	SecretAccessKey pulumi.StringOutput `pulumi:"secretAccessKey"`
	// Key status, activated (Active) or inactive (Inactive), required when updating.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specify user Uin, if not filled, the access key is created for the current user by default.
	TargetUin pulumi.IntPtrOutput `pulumi:"targetUin"`
}

// NewAccessKey registers a new resource with the given unique name, arguments, and options.
func NewAccessKey(ctx *pulumi.Context,
	name string, args *AccessKeyArgs, opts ...pulumi.ResourceOption) (*AccessKey, error) {
	if args == nil {
		args = &AccessKeyArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource AccessKey
	err := ctx.RegisterResource("tencentcloud:Cam/accessKey:AccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessKey gets an existing AccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessKeyState, opts ...pulumi.ResourceOption) (*AccessKey, error) {
	var resource AccessKey
	err := ctx.ReadResource("tencentcloud:Cam/accessKey:AccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessKey resources.
type accessKeyState struct {
	// Access_key is the access key identification, required when updating.
	AccessKey *string `pulumi:"accessKey"`
	// Encrypted secret, base64 encoded, if pgp_key was specified. This attribute is not available for imported resources. The
	// encrypted secret may be decrypted using the command line, for example: terraform output -raw encrypted_secret | base64
	// --decode | keybase pgp decrypt.
	EncryptedSecretAccessKey *string `pulumi:"encryptedSecretAccessKey"`
	// Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
	KeyFingerprint *string `pulumi:"keyFingerprint"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in the encryptedSecret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw" version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
	PgpKey *string `pulumi:"pgpKey"`
	// Access key (key is only visible when created, please keep it properly).
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// Key status, activated (Active) or inactive (Inactive), required when updating.
	Status *string `pulumi:"status"`
	// Specify user Uin, if not filled, the access key is created for the current user by default.
	TargetUin *int `pulumi:"targetUin"`
}

type AccessKeyState struct {
	// Access_key is the access key identification, required when updating.
	AccessKey pulumi.StringPtrInput
	// Encrypted secret, base64 encoded, if pgp_key was specified. This attribute is not available for imported resources. The
	// encrypted secret may be decrypted using the command line, for example: terraform output -raw encrypted_secret | base64
	// --decode | keybase pgp decrypt.
	EncryptedSecretAccessKey pulumi.StringPtrInput
	// Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
	KeyFingerprint pulumi.StringPtrInput
	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in the encryptedSecret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw" version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
	PgpKey pulumi.StringPtrInput
	// Access key (key is only visible when created, please keep it properly).
	SecretAccessKey pulumi.StringPtrInput
	// Key status, activated (Active) or inactive (Inactive), required when updating.
	Status pulumi.StringPtrInput
	// Specify user Uin, if not filled, the access key is created for the current user by default.
	TargetUin pulumi.IntPtrInput
}

func (AccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeyState)(nil)).Elem()
}

type accessKeyArgs struct {
	// Access_key is the access key identification, required when updating.
	AccessKey *string `pulumi:"accessKey"`
	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in the encryptedSecret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw" version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
	PgpKey *string `pulumi:"pgpKey"`
	// Key status, activated (Active) or inactive (Inactive), required when updating.
	Status *string `pulumi:"status"`
	// Specify user Uin, if not filled, the access key is created for the current user by default.
	TargetUin *int `pulumi:"targetUin"`
}

// The set of arguments for constructing a AccessKey resource.
type AccessKeyArgs struct {
	// Access_key is the access key identification, required when updating.
	AccessKey pulumi.StringPtrInput
	// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in the encryptedSecret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw" version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
	PgpKey pulumi.StringPtrInput
	// Key status, activated (Active) or inactive (Inactive), required when updating.
	Status pulumi.StringPtrInput
	// Specify user Uin, if not filled, the access key is created for the current user by default.
	TargetUin pulumi.IntPtrInput
}

func (AccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessKeyArgs)(nil)).Elem()
}

type AccessKeyInput interface {
	pulumi.Input

	ToAccessKeyOutput() AccessKeyOutput
	ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput
}

func (*AccessKey) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKey)(nil)).Elem()
}

func (i *AccessKey) ToAccessKeyOutput() AccessKeyOutput {
	return i.ToAccessKeyOutputWithContext(context.Background())
}

func (i *AccessKey) ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyOutput)
}

// AccessKeyArrayInput is an input type that accepts AccessKeyArray and AccessKeyArrayOutput values.
// You can construct a concrete instance of `AccessKeyArrayInput` via:
//
//	AccessKeyArray{ AccessKeyArgs{...} }
type AccessKeyArrayInput interface {
	pulumi.Input

	ToAccessKeyArrayOutput() AccessKeyArrayOutput
	ToAccessKeyArrayOutputWithContext(context.Context) AccessKeyArrayOutput
}

type AccessKeyArray []AccessKeyInput

func (AccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKey)(nil)).Elem()
}

func (i AccessKeyArray) ToAccessKeyArrayOutput() AccessKeyArrayOutput {
	return i.ToAccessKeyArrayOutputWithContext(context.Background())
}

func (i AccessKeyArray) ToAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyArrayOutput)
}

// AccessKeyMapInput is an input type that accepts AccessKeyMap and AccessKeyMapOutput values.
// You can construct a concrete instance of `AccessKeyMapInput` via:
//
//	AccessKeyMap{ "key": AccessKeyArgs{...} }
type AccessKeyMapInput interface {
	pulumi.Input

	ToAccessKeyMapOutput() AccessKeyMapOutput
	ToAccessKeyMapOutputWithContext(context.Context) AccessKeyMapOutput
}

type AccessKeyMap map[string]AccessKeyInput

func (AccessKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKey)(nil)).Elem()
}

func (i AccessKeyMap) ToAccessKeyMapOutput() AccessKeyMapOutput {
	return i.ToAccessKeyMapOutputWithContext(context.Background())
}

func (i AccessKeyMap) ToAccessKeyMapOutputWithContext(ctx context.Context) AccessKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeyMapOutput)
}

type AccessKeyOutput struct{ *pulumi.OutputState }

func (AccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessKey)(nil)).Elem()
}

func (o AccessKeyOutput) ToAccessKeyOutput() AccessKeyOutput {
	return o
}

func (o AccessKeyOutput) ToAccessKeyOutputWithContext(ctx context.Context) AccessKeyOutput {
	return o
}

// Access_key is the access key identification, required when updating.
func (o AccessKeyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// Encrypted secret, base64 encoded, if pgp_key was specified. This attribute is not available for imported resources. The
// encrypted secret may be decrypted using the command line, for example: terraform output -raw encrypted_secret | base64
// --decode | keybase pgp decrypt.
func (o AccessKeyOutput) EncryptedSecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.EncryptedSecretAccessKey }).(pulumi.StringOutput)
}

// Fingerprint of the PGP key used to encrypt the secret. This attribute is not available for imported resources.
func (o AccessKeyOutput) KeyFingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.KeyFingerprint }).(pulumi.StringOutput)
}

// Either a base-64 encoded PGP public key, or a keybase username in the form keybase:some_person_that_exists, for use in the encryptedSecret output attribute. If providing a base-64 encoded PGP public key, make sure to provide the "raw" version and not the "armored" one (e.g. avoid passing the -a option to gpg --export).
func (o AccessKeyOutput) PgpKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringPtrOutput { return v.PgpKey }).(pulumi.StringPtrOutput)
}

// Access key (key is only visible when created, please keep it properly).
func (o AccessKeyOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.SecretAccessKey }).(pulumi.StringOutput)
}

// Key status, activated (Active) or inactive (Inactive), required when updating.
func (o AccessKeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Specify user Uin, if not filled, the access key is created for the current user by default.
func (o AccessKeyOutput) TargetUin() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AccessKey) pulumi.IntPtrOutput { return v.TargetUin }).(pulumi.IntPtrOutput)
}

type AccessKeyArrayOutput struct{ *pulumi.OutputState }

func (AccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessKey)(nil)).Elem()
}

func (o AccessKeyArrayOutput) ToAccessKeyArrayOutput() AccessKeyArrayOutput {
	return o
}

func (o AccessKeyArrayOutput) ToAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeyArrayOutput {
	return o
}

func (o AccessKeyArrayOutput) Index(i pulumi.IntInput) AccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessKey {
		return vs[0].([]*AccessKey)[vs[1].(int)]
	}).(AccessKeyOutput)
}

type AccessKeyMapOutput struct{ *pulumi.OutputState }

func (AccessKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessKey)(nil)).Elem()
}

func (o AccessKeyMapOutput) ToAccessKeyMapOutput() AccessKeyMapOutput {
	return o
}

func (o AccessKeyMapOutput) ToAccessKeyMapOutputWithContext(ctx context.Context) AccessKeyMapOutput {
	return o
}

func (o AccessKeyMapOutput) MapIndex(k pulumi.StringInput) AccessKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessKey {
		return vs[0].(map[string]*AccessKey)[vs[1].(string)]
	}).(AccessKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyInput)(nil)).Elem(), &AccessKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyArrayInput)(nil)).Elem(), AccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeyMapInput)(nil)).Elem(), AccessKeyMap{})
	pulumi.RegisterOutputType(AccessKeyOutput{})
	pulumi.RegisterOutputType(AccessKeyArrayOutput{})
	pulumi.RegisterOutputType(AccessKeyMapOutput{})
}
