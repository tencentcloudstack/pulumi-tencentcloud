// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage CAM user.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewUser(ctx, "foo", &Cam.UserArgs{
//				ConsoleLogin:      pulumi.Bool(true),
//				CountryCode:       pulumi.String("86"),
//				Email:             pulumi.String("hello@test.com"),
//				ForceDelete:       pulumi.Bool(true),
//				NeedResetPassword: pulumi.Bool(true),
//				Password:          pulumi.String("Gail@1234"),
//				PhoneNum:          pulumi.String("12345678910"),
//				Remark:            pulumi.String("tf_user_test"),
//				Tags: pulumi.AnyMap{
//					"test": pulumi.Any("tf_cam_user"),
//				},
//				UseApi: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CAM user can be imported using the user name, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/user:User foo cam-user-test
//
// ```
type User struct {
	pulumi.CustomResourceState

	// Indicate whether the CAM user can login to the web console or not.
	ConsoleLogin pulumi.BoolPtrOutput `pulumi:"consoleLogin"`
	// Country code of the phone number, for example: '86'.
	CountryCode pulumi.StringOutput `pulumi:"countryCode"`
	// Email of the CAM user.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Indicate whether to force deletes the CAM user. If set false, the API secret key will be checked and failed when exists; otherwise the user will be deleted directly. Default is false.
	ForceDelete pulumi.BoolPtrOutput `pulumi:"forceDelete"`
	// Name of the CAM user.
	Name pulumi.StringOutput `pulumi:"name"`
	// Indicate whether the CAM user need to reset the password when first logins.
	NeedResetPassword pulumi.BoolPtrOutput `pulumi:"needResetPassword"`
	// The password of the CAM user. Password should be at least 8 characters and no more than 32 characters, includes uppercase letters, lowercase letters, numbers and special characters. Only required when `consoleLogin` is true. If not set, a random password will be automatically generated.
	Password pulumi.StringOutput `pulumi:"password"`
	// Phone number of the CAM user.
	PhoneNum pulumi.StringPtrOutput `pulumi:"phoneNum"`
	// Remark of the CAM user.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// Secret ID of the CAM user.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// Secret key of the CAM user.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// A list of tags used to associate different resources.
	Tags pulumi.MapOutput `pulumi:"tags"`
	// ID of the CAM user.
	Uid pulumi.IntOutput `pulumi:"uid"`
	// Uin of the CAM User.
	Uin pulumi.IntOutput `pulumi:"uin"`
	// Indicate whether to generate the API secret key or not.
	UseApi pulumi.BoolPtrOutput `pulumi:"useApi"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		args = &UserArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("tencentcloud:Cam/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("tencentcloud:Cam/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// Indicate whether the CAM user can login to the web console or not.
	ConsoleLogin *bool `pulumi:"consoleLogin"`
	// Country code of the phone number, for example: '86'.
	CountryCode *string `pulumi:"countryCode"`
	// Email of the CAM user.
	Email *string `pulumi:"email"`
	// Indicate whether to force deletes the CAM user. If set false, the API secret key will be checked and failed when exists; otherwise the user will be deleted directly. Default is false.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Name of the CAM user.
	Name *string `pulumi:"name"`
	// Indicate whether the CAM user need to reset the password when first logins.
	NeedResetPassword *bool `pulumi:"needResetPassword"`
	// The password of the CAM user. Password should be at least 8 characters and no more than 32 characters, includes uppercase letters, lowercase letters, numbers and special characters. Only required when `consoleLogin` is true. If not set, a random password will be automatically generated.
	Password *string `pulumi:"password"`
	// Phone number of the CAM user.
	PhoneNum *string `pulumi:"phoneNum"`
	// Remark of the CAM user.
	Remark *string `pulumi:"remark"`
	// Secret ID of the CAM user.
	SecretId *string `pulumi:"secretId"`
	// Secret key of the CAM user.
	SecretKey *string `pulumi:"secretKey"`
	// A list of tags used to associate different resources.
	Tags map[string]interface{} `pulumi:"tags"`
	// ID of the CAM user.
	Uid *int `pulumi:"uid"`
	// Uin of the CAM User.
	Uin *int `pulumi:"uin"`
	// Indicate whether to generate the API secret key or not.
	UseApi *bool `pulumi:"useApi"`
}

type UserState struct {
	// Indicate whether the CAM user can login to the web console or not.
	ConsoleLogin pulumi.BoolPtrInput
	// Country code of the phone number, for example: '86'.
	CountryCode pulumi.StringPtrInput
	// Email of the CAM user.
	Email pulumi.StringPtrInput
	// Indicate whether to force deletes the CAM user. If set false, the API secret key will be checked and failed when exists; otherwise the user will be deleted directly. Default is false.
	ForceDelete pulumi.BoolPtrInput
	// Name of the CAM user.
	Name pulumi.StringPtrInput
	// Indicate whether the CAM user need to reset the password when first logins.
	NeedResetPassword pulumi.BoolPtrInput
	// The password of the CAM user. Password should be at least 8 characters and no more than 32 characters, includes uppercase letters, lowercase letters, numbers and special characters. Only required when `consoleLogin` is true. If not set, a random password will be automatically generated.
	Password pulumi.StringPtrInput
	// Phone number of the CAM user.
	PhoneNum pulumi.StringPtrInput
	// Remark of the CAM user.
	Remark pulumi.StringPtrInput
	// Secret ID of the CAM user.
	SecretId pulumi.StringPtrInput
	// Secret key of the CAM user.
	SecretKey pulumi.StringPtrInput
	// A list of tags used to associate different resources.
	Tags pulumi.MapInput
	// ID of the CAM user.
	Uid pulumi.IntPtrInput
	// Uin of the CAM User.
	Uin pulumi.IntPtrInput
	// Indicate whether to generate the API secret key or not.
	UseApi pulumi.BoolPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// Indicate whether the CAM user can login to the web console or not.
	ConsoleLogin *bool `pulumi:"consoleLogin"`
	// Country code of the phone number, for example: '86'.
	CountryCode *string `pulumi:"countryCode"`
	// Email of the CAM user.
	Email *string `pulumi:"email"`
	// Indicate whether to force deletes the CAM user. If set false, the API secret key will be checked and failed when exists; otherwise the user will be deleted directly. Default is false.
	ForceDelete *bool `pulumi:"forceDelete"`
	// Name of the CAM user.
	Name *string `pulumi:"name"`
	// Indicate whether the CAM user need to reset the password when first logins.
	NeedResetPassword *bool `pulumi:"needResetPassword"`
	// The password of the CAM user. Password should be at least 8 characters and no more than 32 characters, includes uppercase letters, lowercase letters, numbers and special characters. Only required when `consoleLogin` is true. If not set, a random password will be automatically generated.
	Password *string `pulumi:"password"`
	// Phone number of the CAM user.
	PhoneNum *string `pulumi:"phoneNum"`
	// Remark of the CAM user.
	Remark *string `pulumi:"remark"`
	// A list of tags used to associate different resources.
	Tags map[string]interface{} `pulumi:"tags"`
	// Indicate whether to generate the API secret key or not.
	UseApi *bool `pulumi:"useApi"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// Indicate whether the CAM user can login to the web console or not.
	ConsoleLogin pulumi.BoolPtrInput
	// Country code of the phone number, for example: '86'.
	CountryCode pulumi.StringPtrInput
	// Email of the CAM user.
	Email pulumi.StringPtrInput
	// Indicate whether to force deletes the CAM user. If set false, the API secret key will be checked and failed when exists; otherwise the user will be deleted directly. Default is false.
	ForceDelete pulumi.BoolPtrInput
	// Name of the CAM user.
	Name pulumi.StringPtrInput
	// Indicate whether the CAM user need to reset the password when first logins.
	NeedResetPassword pulumi.BoolPtrInput
	// The password of the CAM user. Password should be at least 8 characters and no more than 32 characters, includes uppercase letters, lowercase letters, numbers and special characters. Only required when `consoleLogin` is true. If not set, a random password will be automatically generated.
	Password pulumi.StringPtrInput
	// Phone number of the CAM user.
	PhoneNum pulumi.StringPtrInput
	// Remark of the CAM user.
	Remark pulumi.StringPtrInput
	// A list of tags used to associate different resources.
	Tags pulumi.MapInput
	// Indicate whether to generate the API secret key or not.
	UseApi pulumi.BoolPtrInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// Indicate whether the CAM user can login to the web console or not.
func (o UserOutput) ConsoleLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ConsoleLogin }).(pulumi.BoolPtrOutput)
}

// Country code of the phone number, for example: '86'.
func (o UserOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CountryCode }).(pulumi.StringOutput)
}

// Email of the CAM user.
func (o UserOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// Indicate whether to force deletes the CAM user. If set false, the API secret key will be checked and failed when exists; otherwise the user will be deleted directly. Default is false.
func (o UserOutput) ForceDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.ForceDelete }).(pulumi.BoolPtrOutput)
}

// Name of the CAM user.
func (o UserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Indicate whether the CAM user need to reset the password when first logins.
func (o UserOutput) NeedResetPassword() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.NeedResetPassword }).(pulumi.BoolPtrOutput)
}

// The password of the CAM user. Password should be at least 8 characters and no more than 32 characters, includes uppercase letters, lowercase letters, numbers and special characters. Only required when `consoleLogin` is true. If not set, a random password will be automatically generated.
func (o UserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Phone number of the CAM user.
func (o UserOutput) PhoneNum() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.PhoneNum }).(pulumi.StringPtrOutput)
}

// Remark of the CAM user.
func (o UserOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *User) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// Secret ID of the CAM user.
func (o UserOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// Secret key of the CAM user.
func (o UserOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// A list of tags used to associate different resources.
func (o UserOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v *User) pulumi.MapOutput { return v.Tags }).(pulumi.MapOutput)
}

// ID of the CAM user.
func (o UserOutput) Uid() pulumi.IntOutput {
	return o.ApplyT(func(v *User) pulumi.IntOutput { return v.Uid }).(pulumi.IntOutput)
}

// Uin of the CAM User.
func (o UserOutput) Uin() pulumi.IntOutput {
	return o.ApplyT(func(v *User) pulumi.IntOutput { return v.Uin }).(pulumi.IntOutput)
}

// Indicate whether to generate the API secret key or not.
func (o UserOutput) UseApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *User) pulumi.BoolPtrOutput { return v.UseApi }).(pulumi.BoolPtrOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
