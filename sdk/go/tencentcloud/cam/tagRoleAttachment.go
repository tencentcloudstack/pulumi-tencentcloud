// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cam tagRole
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewTagRoleAttachment(ctx, "tagRole", &Cam.TagRoleAttachmentArgs{
//				RoleId: pulumi.String("test-cam-tag"),
//				Tags: cam.TagRoleAttachmentTagArray{
//					&cam.TagRoleAttachmentTagArgs{
//						Key:   pulumi.String("test1"),
//						Value: pulumi.String("test1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cam tag_role can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/tagRoleAttachment:TagRoleAttachment tag_role tag_role_id
//
// ```
type TagRoleAttachment struct {
	pulumi.CustomResourceState

	// Character ID, at least one input with the character name.
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// Character name, at least one input with the character ID.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// Label.
	Tags TagRoleAttachmentTagArrayOutput `pulumi:"tags"`
}

// NewTagRoleAttachment registers a new resource with the given unique name, arguments, and options.
func NewTagRoleAttachment(ctx *pulumi.Context,
	name string, args *TagRoleAttachmentArgs, opts ...pulumi.ResourceOption) (*TagRoleAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource TagRoleAttachment
	err := ctx.RegisterResource("tencentcloud:Cam/tagRoleAttachment:TagRoleAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTagRoleAttachment gets an existing TagRoleAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTagRoleAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TagRoleAttachmentState, opts ...pulumi.ResourceOption) (*TagRoleAttachment, error) {
	var resource TagRoleAttachment
	err := ctx.ReadResource("tencentcloud:Cam/tagRoleAttachment:TagRoleAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TagRoleAttachment resources.
type tagRoleAttachmentState struct {
	// Character ID, at least one input with the character name.
	RoleId *string `pulumi:"roleId"`
	// Character name, at least one input with the character ID.
	RoleName *string `pulumi:"roleName"`
	// Label.
	Tags []TagRoleAttachmentTag `pulumi:"tags"`
}

type TagRoleAttachmentState struct {
	// Character ID, at least one input with the character name.
	RoleId pulumi.StringPtrInput
	// Character name, at least one input with the character ID.
	RoleName pulumi.StringPtrInput
	// Label.
	Tags TagRoleAttachmentTagArrayInput
}

func (TagRoleAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*tagRoleAttachmentState)(nil)).Elem()
}

type tagRoleAttachmentArgs struct {
	// Character ID, at least one input with the character name.
	RoleId *string `pulumi:"roleId"`
	// Character name, at least one input with the character ID.
	RoleName *string `pulumi:"roleName"`
	// Label.
	Tags []TagRoleAttachmentTag `pulumi:"tags"`
}

// The set of arguments for constructing a TagRoleAttachment resource.
type TagRoleAttachmentArgs struct {
	// Character ID, at least one input with the character name.
	RoleId pulumi.StringPtrInput
	// Character name, at least one input with the character ID.
	RoleName pulumi.StringPtrInput
	// Label.
	Tags TagRoleAttachmentTagArrayInput
}

func (TagRoleAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tagRoleAttachmentArgs)(nil)).Elem()
}

type TagRoleAttachmentInput interface {
	pulumi.Input

	ToTagRoleAttachmentOutput() TagRoleAttachmentOutput
	ToTagRoleAttachmentOutputWithContext(ctx context.Context) TagRoleAttachmentOutput
}

func (*TagRoleAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRoleAttachment)(nil)).Elem()
}

func (i *TagRoleAttachment) ToTagRoleAttachmentOutput() TagRoleAttachmentOutput {
	return i.ToTagRoleAttachmentOutputWithContext(context.Background())
}

func (i *TagRoleAttachment) ToTagRoleAttachmentOutputWithContext(ctx context.Context) TagRoleAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRoleAttachmentOutput)
}

// TagRoleAttachmentArrayInput is an input type that accepts TagRoleAttachmentArray and TagRoleAttachmentArrayOutput values.
// You can construct a concrete instance of `TagRoleAttachmentArrayInput` via:
//
//	TagRoleAttachmentArray{ TagRoleAttachmentArgs{...} }
type TagRoleAttachmentArrayInput interface {
	pulumi.Input

	ToTagRoleAttachmentArrayOutput() TagRoleAttachmentArrayOutput
	ToTagRoleAttachmentArrayOutputWithContext(context.Context) TagRoleAttachmentArrayOutput
}

type TagRoleAttachmentArray []TagRoleAttachmentInput

func (TagRoleAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagRoleAttachment)(nil)).Elem()
}

func (i TagRoleAttachmentArray) ToTagRoleAttachmentArrayOutput() TagRoleAttachmentArrayOutput {
	return i.ToTagRoleAttachmentArrayOutputWithContext(context.Background())
}

func (i TagRoleAttachmentArray) ToTagRoleAttachmentArrayOutputWithContext(ctx context.Context) TagRoleAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRoleAttachmentArrayOutput)
}

// TagRoleAttachmentMapInput is an input type that accepts TagRoleAttachmentMap and TagRoleAttachmentMapOutput values.
// You can construct a concrete instance of `TagRoleAttachmentMapInput` via:
//
//	TagRoleAttachmentMap{ "key": TagRoleAttachmentArgs{...} }
type TagRoleAttachmentMapInput interface {
	pulumi.Input

	ToTagRoleAttachmentMapOutput() TagRoleAttachmentMapOutput
	ToTagRoleAttachmentMapOutputWithContext(context.Context) TagRoleAttachmentMapOutput
}

type TagRoleAttachmentMap map[string]TagRoleAttachmentInput

func (TagRoleAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagRoleAttachment)(nil)).Elem()
}

func (i TagRoleAttachmentMap) ToTagRoleAttachmentMapOutput() TagRoleAttachmentMapOutput {
	return i.ToTagRoleAttachmentMapOutputWithContext(context.Background())
}

func (i TagRoleAttachmentMap) ToTagRoleAttachmentMapOutputWithContext(ctx context.Context) TagRoleAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagRoleAttachmentMapOutput)
}

type TagRoleAttachmentOutput struct{ *pulumi.OutputState }

func (TagRoleAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TagRoleAttachment)(nil)).Elem()
}

func (o TagRoleAttachmentOutput) ToTagRoleAttachmentOutput() TagRoleAttachmentOutput {
	return o
}

func (o TagRoleAttachmentOutput) ToTagRoleAttachmentOutputWithContext(ctx context.Context) TagRoleAttachmentOutput {
	return o
}

// Character ID, at least one input with the character name.
func (o TagRoleAttachmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *TagRoleAttachment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// Character name, at least one input with the character ID.
func (o TagRoleAttachmentOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *TagRoleAttachment) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// Label.
func (o TagRoleAttachmentOutput) Tags() TagRoleAttachmentTagArrayOutput {
	return o.ApplyT(func(v *TagRoleAttachment) TagRoleAttachmentTagArrayOutput { return v.Tags }).(TagRoleAttachmentTagArrayOutput)
}

type TagRoleAttachmentArrayOutput struct{ *pulumi.OutputState }

func (TagRoleAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TagRoleAttachment)(nil)).Elem()
}

func (o TagRoleAttachmentArrayOutput) ToTagRoleAttachmentArrayOutput() TagRoleAttachmentArrayOutput {
	return o
}

func (o TagRoleAttachmentArrayOutput) ToTagRoleAttachmentArrayOutputWithContext(ctx context.Context) TagRoleAttachmentArrayOutput {
	return o
}

func (o TagRoleAttachmentArrayOutput) Index(i pulumi.IntInput) TagRoleAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TagRoleAttachment {
		return vs[0].([]*TagRoleAttachment)[vs[1].(int)]
	}).(TagRoleAttachmentOutput)
}

type TagRoleAttachmentMapOutput struct{ *pulumi.OutputState }

func (TagRoleAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TagRoleAttachment)(nil)).Elem()
}

func (o TagRoleAttachmentMapOutput) ToTagRoleAttachmentMapOutput() TagRoleAttachmentMapOutput {
	return o
}

func (o TagRoleAttachmentMapOutput) ToTagRoleAttachmentMapOutputWithContext(ctx context.Context) TagRoleAttachmentMapOutput {
	return o
}

func (o TagRoleAttachmentMapOutput) MapIndex(k pulumi.StringInput) TagRoleAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TagRoleAttachment {
		return vs[0].(map[string]*TagRoleAttachment)[vs[1].(string)]
	}).(TagRoleAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TagRoleAttachmentInput)(nil)).Elem(), &TagRoleAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRoleAttachmentArrayInput)(nil)).Elem(), TagRoleAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagRoleAttachmentMapInput)(nil)).Elem(), TagRoleAttachmentMap{})
	pulumi.RegisterOutputType(TagRoleAttachmentOutput{})
	pulumi.RegisterOutputType(TagRoleAttachmentArrayOutput{})
	pulumi.RegisterOutputType(TagRoleAttachmentMapOutput{})
}
