// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a CAM role policy attachment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			camPolicyBasic := "keep-cam-policy"
//			if param := cfg.Get("camPolicyBasic"); param != "" {
//				camPolicyBasic = param
//			}
//			camRoleBasic := "keep-cam-role"
//			if param := cfg.Get("camRoleBasic"); param != "" {
//				camRoleBasic = param
//			}
//			_, err := Cam.GetPolicies(ctx, &cam.GetPoliciesArgs{
//				Name: pulumi.StringRef(camPolicyBasic),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cam.GetRoles(ctx, &cam.GetRolesArgs{
//				Name: pulumi.StringRef(camRoleBasic),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cam.NewRolePolicyAttachmentByName(ctx, "rolePolicyAttachmentBasic", &Cam.RolePolicyAttachmentByNameArgs{
//				RoleName:   pulumi.String(camRoleBasic),
//				PolicyName: pulumi.String(camPolicyBasic),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CAM role policy attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/rolePolicyAttachmentByName:RolePolicyAttachmentByName foo ${role_name}#${policy_name}
//
// ```
type RolePolicyAttachmentByName struct {
	pulumi.CustomResourceState

	// Mode of Creation of the CAM role policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
	CreateMode pulumi.IntOutput `pulumi:"createMode"`
	// The create time of the CAM role policy attachment.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Name of the policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// Name of the attached CAM role.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
}

// NewRolePolicyAttachmentByName registers a new resource with the given unique name, arguments, and options.
func NewRolePolicyAttachmentByName(ctx *pulumi.Context,
	name string, args *RolePolicyAttachmentByNameArgs, opts ...pulumi.ResourceOption) (*RolePolicyAttachmentByName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RolePolicyAttachmentByName
	err := ctx.RegisterResource("tencentcloud:Cam/rolePolicyAttachmentByName:RolePolicyAttachmentByName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePolicyAttachmentByName gets an existing RolePolicyAttachmentByName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePolicyAttachmentByName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePolicyAttachmentByNameState, opts ...pulumi.ResourceOption) (*RolePolicyAttachmentByName, error) {
	var resource RolePolicyAttachmentByName
	err := ctx.ReadResource("tencentcloud:Cam/rolePolicyAttachmentByName:RolePolicyAttachmentByName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePolicyAttachmentByName resources.
type rolePolicyAttachmentByNameState struct {
	// Mode of Creation of the CAM role policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
	CreateMode *int `pulumi:"createMode"`
	// The create time of the CAM role policy attachment.
	CreateTime *string `pulumi:"createTime"`
	// Name of the policy.
	PolicyName *string `pulumi:"policyName"`
	// Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
	PolicyType *string `pulumi:"policyType"`
	// Name of the attached CAM role.
	RoleName *string `pulumi:"roleName"`
}

type RolePolicyAttachmentByNameState struct {
	// Mode of Creation of the CAM role policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
	CreateMode pulumi.IntPtrInput
	// The create time of the CAM role policy attachment.
	CreateTime pulumi.StringPtrInput
	// Name of the policy.
	PolicyName pulumi.StringPtrInput
	// Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
	PolicyType pulumi.StringPtrInput
	// Name of the attached CAM role.
	RoleName pulumi.StringPtrInput
}

func (RolePolicyAttachmentByNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyAttachmentByNameState)(nil)).Elem()
}

type rolePolicyAttachmentByNameArgs struct {
	// Name of the policy.
	PolicyName string `pulumi:"policyName"`
	// Name of the attached CAM role.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a RolePolicyAttachmentByName resource.
type RolePolicyAttachmentByNameArgs struct {
	// Name of the policy.
	PolicyName pulumi.StringInput
	// Name of the attached CAM role.
	RoleName pulumi.StringInput
}

func (RolePolicyAttachmentByNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePolicyAttachmentByNameArgs)(nil)).Elem()
}

type RolePolicyAttachmentByNameInput interface {
	pulumi.Input

	ToRolePolicyAttachmentByNameOutput() RolePolicyAttachmentByNameOutput
	ToRolePolicyAttachmentByNameOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameOutput
}

func (*RolePolicyAttachmentByName) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePolicyAttachmentByName)(nil)).Elem()
}

func (i *RolePolicyAttachmentByName) ToRolePolicyAttachmentByNameOutput() RolePolicyAttachmentByNameOutput {
	return i.ToRolePolicyAttachmentByNameOutputWithContext(context.Background())
}

func (i *RolePolicyAttachmentByName) ToRolePolicyAttachmentByNameOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyAttachmentByNameOutput)
}

// RolePolicyAttachmentByNameArrayInput is an input type that accepts RolePolicyAttachmentByNameArray and RolePolicyAttachmentByNameArrayOutput values.
// You can construct a concrete instance of `RolePolicyAttachmentByNameArrayInput` via:
//
//	RolePolicyAttachmentByNameArray{ RolePolicyAttachmentByNameArgs{...} }
type RolePolicyAttachmentByNameArrayInput interface {
	pulumi.Input

	ToRolePolicyAttachmentByNameArrayOutput() RolePolicyAttachmentByNameArrayOutput
	ToRolePolicyAttachmentByNameArrayOutputWithContext(context.Context) RolePolicyAttachmentByNameArrayOutput
}

type RolePolicyAttachmentByNameArray []RolePolicyAttachmentByNameInput

func (RolePolicyAttachmentByNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePolicyAttachmentByName)(nil)).Elem()
}

func (i RolePolicyAttachmentByNameArray) ToRolePolicyAttachmentByNameArrayOutput() RolePolicyAttachmentByNameArrayOutput {
	return i.ToRolePolicyAttachmentByNameArrayOutputWithContext(context.Background())
}

func (i RolePolicyAttachmentByNameArray) ToRolePolicyAttachmentByNameArrayOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyAttachmentByNameArrayOutput)
}

// RolePolicyAttachmentByNameMapInput is an input type that accepts RolePolicyAttachmentByNameMap and RolePolicyAttachmentByNameMapOutput values.
// You can construct a concrete instance of `RolePolicyAttachmentByNameMapInput` via:
//
//	RolePolicyAttachmentByNameMap{ "key": RolePolicyAttachmentByNameArgs{...} }
type RolePolicyAttachmentByNameMapInput interface {
	pulumi.Input

	ToRolePolicyAttachmentByNameMapOutput() RolePolicyAttachmentByNameMapOutput
	ToRolePolicyAttachmentByNameMapOutputWithContext(context.Context) RolePolicyAttachmentByNameMapOutput
}

type RolePolicyAttachmentByNameMap map[string]RolePolicyAttachmentByNameInput

func (RolePolicyAttachmentByNameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePolicyAttachmentByName)(nil)).Elem()
}

func (i RolePolicyAttachmentByNameMap) ToRolePolicyAttachmentByNameMapOutput() RolePolicyAttachmentByNameMapOutput {
	return i.ToRolePolicyAttachmentByNameMapOutputWithContext(context.Background())
}

func (i RolePolicyAttachmentByNameMap) ToRolePolicyAttachmentByNameMapOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyAttachmentByNameMapOutput)
}

type RolePolicyAttachmentByNameOutput struct{ *pulumi.OutputState }

func (RolePolicyAttachmentByNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePolicyAttachmentByName)(nil)).Elem()
}

func (o RolePolicyAttachmentByNameOutput) ToRolePolicyAttachmentByNameOutput() RolePolicyAttachmentByNameOutput {
	return o
}

func (o RolePolicyAttachmentByNameOutput) ToRolePolicyAttachmentByNameOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameOutput {
	return o
}

// Mode of Creation of the CAM role policy attachment. `1` means the CAM policy attachment is created by production, and the others indicate syntax strategy ways.
func (o RolePolicyAttachmentByNameOutput) CreateMode() pulumi.IntOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentByName) pulumi.IntOutput { return v.CreateMode }).(pulumi.IntOutput)
}

// The create time of the CAM role policy attachment.
func (o RolePolicyAttachmentByNameOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentByName) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Name of the policy.
func (o RolePolicyAttachmentByNameOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentByName) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Type of the policy strategy. `User` means customer strategy and `QCS` means preset strategy.
func (o RolePolicyAttachmentByNameOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentByName) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// Name of the attached CAM role.
func (o RolePolicyAttachmentByNameOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePolicyAttachmentByName) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

type RolePolicyAttachmentByNameArrayOutput struct{ *pulumi.OutputState }

func (RolePolicyAttachmentByNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePolicyAttachmentByName)(nil)).Elem()
}

func (o RolePolicyAttachmentByNameArrayOutput) ToRolePolicyAttachmentByNameArrayOutput() RolePolicyAttachmentByNameArrayOutput {
	return o
}

func (o RolePolicyAttachmentByNameArrayOutput) ToRolePolicyAttachmentByNameArrayOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameArrayOutput {
	return o
}

func (o RolePolicyAttachmentByNameArrayOutput) Index(i pulumi.IntInput) RolePolicyAttachmentByNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolePolicyAttachmentByName {
		return vs[0].([]*RolePolicyAttachmentByName)[vs[1].(int)]
	}).(RolePolicyAttachmentByNameOutput)
}

type RolePolicyAttachmentByNameMapOutput struct{ *pulumi.OutputState }

func (RolePolicyAttachmentByNameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePolicyAttachmentByName)(nil)).Elem()
}

func (o RolePolicyAttachmentByNameMapOutput) ToRolePolicyAttachmentByNameMapOutput() RolePolicyAttachmentByNameMapOutput {
	return o
}

func (o RolePolicyAttachmentByNameMapOutput) ToRolePolicyAttachmentByNameMapOutputWithContext(ctx context.Context) RolePolicyAttachmentByNameMapOutput {
	return o
}

func (o RolePolicyAttachmentByNameMapOutput) MapIndex(k pulumi.StringInput) RolePolicyAttachmentByNameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolePolicyAttachmentByName {
		return vs[0].(map[string]*RolePolicyAttachmentByName)[vs[1].(string)]
	}).(RolePolicyAttachmentByNameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyAttachmentByNameInput)(nil)).Elem(), &RolePolicyAttachmentByName{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyAttachmentByNameArrayInput)(nil)).Elem(), RolePolicyAttachmentByNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyAttachmentByNameMapInput)(nil)).Elem(), RolePolicyAttachmentByNameMap{})
	pulumi.RegisterOutputType(RolePolicyAttachmentByNameOutput{})
	pulumi.RegisterOutputType(RolePolicyAttachmentByNameArrayOutput{})
	pulumi.RegisterOutputType(RolePolicyAttachmentByNameMapOutput{})
}
