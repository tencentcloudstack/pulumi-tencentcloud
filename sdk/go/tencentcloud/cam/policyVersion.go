// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cam policyVersion
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"version": "2.0",
//				"statement": []map[string]interface{}{
//					map[string]interface{}{
//						"effect": "allow",
//						"action": []string{
//							"sts:AssumeRole",
//						},
//						"resource": []string{
//							"*",
//						},
//					},
//					map[string]interface{}{
//						"effect": "allow",
//						"action": []string{
//							"cos:PutObject",
//						},
//						"resource": []string{
//							"*",
//						},
//					},
//					map[string]interface{}{
//						"effect": "deny",
//						"action": []string{
//							"aa:*",
//						},
//						"resource": []string{
//							"*",
//						},
//					},
//					map[string]interface{}{
//						"effect": "deny",
//						"action": []string{
//							"aa:*",
//						},
//						"resource": []string{
//							"*",
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			_, err := Cam.NewPolicyVersion(ctx, "policyVersion", &Cam.PolicyVersionArgs{
//				PolicyId:       pulumi.Int(171173780),
//				PolicyDocument: pulumi.String(json0),
//				SetAsDefault:   pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cam policy_version can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/policyVersion:PolicyVersion policy_version policy_version_id
//
// ```
type PolicyVersion struct {
	pulumi.CustomResourceState

	// Strategic text information.
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	// Strategy ID.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
	PolicyVersions PolicyVersionPolicyVersionArrayOutput `pulumi:"policyVersions"`
	// Whether to set as a version of the current strategy.
	SetAsDefault pulumi.BoolOutput `pulumi:"setAsDefault"`
}

// NewPolicyVersion registers a new resource with the given unique name, arguments, and options.
func NewPolicyVersion(ctx *pulumi.Context,
	name string, args *PolicyVersionArgs, opts ...pulumi.ResourceOption) (*PolicyVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.SetAsDefault == nil {
		return nil, errors.New("invalid value for required argument 'SetAsDefault'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PolicyVersion
	err := ctx.RegisterResource("tencentcloud:Cam/policyVersion:PolicyVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyVersion gets an existing PolicyVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyVersionState, opts ...pulumi.ResourceOption) (*PolicyVersion, error) {
	var resource PolicyVersion
	err := ctx.ReadResource("tencentcloud:Cam/policyVersion:PolicyVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyVersion resources.
type policyVersionState struct {
	// Strategic text information.
	PolicyDocument *string `pulumi:"policyDocument"`
	// Strategy ID.
	PolicyId *int `pulumi:"policyId"`
	// Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
	PolicyVersions []PolicyVersionPolicyVersion `pulumi:"policyVersions"`
	// Whether to set as a version of the current strategy.
	SetAsDefault *bool `pulumi:"setAsDefault"`
}

type PolicyVersionState struct {
	// Strategic text information.
	PolicyDocument pulumi.StringPtrInput
	// Strategy ID.
	PolicyId pulumi.IntPtrInput
	// Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
	PolicyVersions PolicyVersionPolicyVersionArrayInput
	// Whether to set as a version of the current strategy.
	SetAsDefault pulumi.BoolPtrInput
}

func (PolicyVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyVersionState)(nil)).Elem()
}

type policyVersionArgs struct {
	// Strategic text information.
	PolicyDocument string `pulumi:"policyDocument"`
	// Strategy ID.
	PolicyId int `pulumi:"policyId"`
	// Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
	PolicyVersions []PolicyVersionPolicyVersion `pulumi:"policyVersions"`
	// Whether to set as a version of the current strategy.
	SetAsDefault bool `pulumi:"setAsDefault"`
}

// The set of arguments for constructing a PolicyVersion resource.
type PolicyVersionArgs struct {
	// Strategic text information.
	PolicyDocument pulumi.StringInput
	// Strategy ID.
	PolicyId pulumi.IntInput
	// Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
	PolicyVersions PolicyVersionPolicyVersionArrayInput
	// Whether to set as a version of the current strategy.
	SetAsDefault pulumi.BoolInput
}

func (PolicyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyVersionArgs)(nil)).Elem()
}

type PolicyVersionInput interface {
	pulumi.Input

	ToPolicyVersionOutput() PolicyVersionOutput
	ToPolicyVersionOutputWithContext(ctx context.Context) PolicyVersionOutput
}

func (*PolicyVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVersion)(nil)).Elem()
}

func (i *PolicyVersion) ToPolicyVersionOutput() PolicyVersionOutput {
	return i.ToPolicyVersionOutputWithContext(context.Background())
}

func (i *PolicyVersion) ToPolicyVersionOutputWithContext(ctx context.Context) PolicyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVersionOutput)
}

// PolicyVersionArrayInput is an input type that accepts PolicyVersionArray and PolicyVersionArrayOutput values.
// You can construct a concrete instance of `PolicyVersionArrayInput` via:
//
//	PolicyVersionArray{ PolicyVersionArgs{...} }
type PolicyVersionArrayInput interface {
	pulumi.Input

	ToPolicyVersionArrayOutput() PolicyVersionArrayOutput
	ToPolicyVersionArrayOutputWithContext(context.Context) PolicyVersionArrayOutput
}

type PolicyVersionArray []PolicyVersionInput

func (PolicyVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyVersion)(nil)).Elem()
}

func (i PolicyVersionArray) ToPolicyVersionArrayOutput() PolicyVersionArrayOutput {
	return i.ToPolicyVersionArrayOutputWithContext(context.Background())
}

func (i PolicyVersionArray) ToPolicyVersionArrayOutputWithContext(ctx context.Context) PolicyVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVersionArrayOutput)
}

// PolicyVersionMapInput is an input type that accepts PolicyVersionMap and PolicyVersionMapOutput values.
// You can construct a concrete instance of `PolicyVersionMapInput` via:
//
//	PolicyVersionMap{ "key": PolicyVersionArgs{...} }
type PolicyVersionMapInput interface {
	pulumi.Input

	ToPolicyVersionMapOutput() PolicyVersionMapOutput
	ToPolicyVersionMapOutputWithContext(context.Context) PolicyVersionMapOutput
}

type PolicyVersionMap map[string]PolicyVersionInput

func (PolicyVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyVersion)(nil)).Elem()
}

func (i PolicyVersionMap) ToPolicyVersionMapOutput() PolicyVersionMapOutput {
	return i.ToPolicyVersionMapOutputWithContext(context.Background())
}

func (i PolicyVersionMap) ToPolicyVersionMapOutputWithContext(ctx context.Context) PolicyVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyVersionMapOutput)
}

type PolicyVersionOutput struct{ *pulumi.OutputState }

func (PolicyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyVersion)(nil)).Elem()
}

func (o PolicyVersionOutput) ToPolicyVersionOutput() PolicyVersionOutput {
	return o
}

func (o PolicyVersionOutput) ToPolicyVersionOutputWithContext(ctx context.Context) PolicyVersionOutput {
	return o
}

// Strategic text information.
func (o PolicyVersionOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyVersion) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

// Strategy ID.
func (o PolicyVersionOutput) PolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyVersion) pulumi.IntOutput { return v.PolicyId }).(pulumi.IntOutput)
}

// Strategic version detailsNote: This field may return NULL, indicating that the valid value cannot be obtained.
func (o PolicyVersionOutput) PolicyVersions() PolicyVersionPolicyVersionArrayOutput {
	return o.ApplyT(func(v *PolicyVersion) PolicyVersionPolicyVersionArrayOutput { return v.PolicyVersions }).(PolicyVersionPolicyVersionArrayOutput)
}

// Whether to set as a version of the current strategy.
func (o PolicyVersionOutput) SetAsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *PolicyVersion) pulumi.BoolOutput { return v.SetAsDefault }).(pulumi.BoolOutput)
}

type PolicyVersionArrayOutput struct{ *pulumi.OutputState }

func (PolicyVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyVersion)(nil)).Elem()
}

func (o PolicyVersionArrayOutput) ToPolicyVersionArrayOutput() PolicyVersionArrayOutput {
	return o
}

func (o PolicyVersionArrayOutput) ToPolicyVersionArrayOutputWithContext(ctx context.Context) PolicyVersionArrayOutput {
	return o
}

func (o PolicyVersionArrayOutput) Index(i pulumi.IntInput) PolicyVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyVersion {
		return vs[0].([]*PolicyVersion)[vs[1].(int)]
	}).(PolicyVersionOutput)
}

type PolicyVersionMapOutput struct{ *pulumi.OutputState }

func (PolicyVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyVersion)(nil)).Elem()
}

func (o PolicyVersionMapOutput) ToPolicyVersionMapOutput() PolicyVersionMapOutput {
	return o
}

func (o PolicyVersionMapOutput) ToPolicyVersionMapOutputWithContext(ctx context.Context) PolicyVersionMapOutput {
	return o
}

func (o PolicyVersionMapOutput) MapIndex(k pulumi.StringInput) PolicyVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyVersion {
		return vs[0].(map[string]*PolicyVersion)[vs[1].(string)]
	}).(PolicyVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVersionInput)(nil)).Elem(), &PolicyVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVersionArrayInput)(nil)).Elem(), PolicyVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyVersionMapInput)(nil)).Elem(), PolicyVersionMap{})
	pulumi.RegisterOutputType(PolicyVersionOutput{})
	pulumi.RegisterOutputType(PolicyVersionArrayOutput{})
	pulumi.RegisterOutputType(PolicyVersionMapOutput{})
}
