// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a cam rolePermissionBoundaryAttachment
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewRolePermissionBoundaryAttachment(ctx, "rolePermissionBoundaryAttachment", &Cam.RolePermissionBoundaryAttachmentArgs{
//				PolicyId: pulumi.Int(1),
//				RoleName: pulumi.String("test-cam-tag"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// cam role_permission_boundary_attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/rolePermissionBoundaryAttachment:RolePermissionBoundaryAttachment role_permission_boundary_attachment role_permission_boundary_attachment_id
//
// ```
type RolePermissionBoundaryAttachment struct {
	pulumi.CustomResourceState

	// Role ID.
	PolicyId pulumi.IntOutput `pulumi:"policyId"`
	// Role ID (at least one should be filled in with the role name).
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// Role name (at least one should be filled in with the role ID).
	RoleName pulumi.StringPtrOutput `pulumi:"roleName"`
}

// NewRolePermissionBoundaryAttachment registers a new resource with the given unique name, arguments, and options.
func NewRolePermissionBoundaryAttachment(ctx *pulumi.Context,
	name string, args *RolePermissionBoundaryAttachmentArgs, opts ...pulumi.ResourceOption) (*RolePermissionBoundaryAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RolePermissionBoundaryAttachment
	err := ctx.RegisterResource("tencentcloud:Cam/rolePermissionBoundaryAttachment:RolePermissionBoundaryAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRolePermissionBoundaryAttachment gets an existing RolePermissionBoundaryAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRolePermissionBoundaryAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RolePermissionBoundaryAttachmentState, opts ...pulumi.ResourceOption) (*RolePermissionBoundaryAttachment, error) {
	var resource RolePermissionBoundaryAttachment
	err := ctx.ReadResource("tencentcloud:Cam/rolePermissionBoundaryAttachment:RolePermissionBoundaryAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RolePermissionBoundaryAttachment resources.
type rolePermissionBoundaryAttachmentState struct {
	// Role ID.
	PolicyId *int `pulumi:"policyId"`
	// Role ID (at least one should be filled in with the role name).
	RoleId *string `pulumi:"roleId"`
	// Role name (at least one should be filled in with the role ID).
	RoleName *string `pulumi:"roleName"`
}

type RolePermissionBoundaryAttachmentState struct {
	// Role ID.
	PolicyId pulumi.IntPtrInput
	// Role ID (at least one should be filled in with the role name).
	RoleId pulumi.StringPtrInput
	// Role name (at least one should be filled in with the role ID).
	RoleName pulumi.StringPtrInput
}

func (RolePermissionBoundaryAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePermissionBoundaryAttachmentState)(nil)).Elem()
}

type rolePermissionBoundaryAttachmentArgs struct {
	// Role ID.
	PolicyId int `pulumi:"policyId"`
	// Role ID (at least one should be filled in with the role name).
	RoleId *string `pulumi:"roleId"`
	// Role name (at least one should be filled in with the role ID).
	RoleName *string `pulumi:"roleName"`
}

// The set of arguments for constructing a RolePermissionBoundaryAttachment resource.
type RolePermissionBoundaryAttachmentArgs struct {
	// Role ID.
	PolicyId pulumi.IntInput
	// Role ID (at least one should be filled in with the role name).
	RoleId pulumi.StringPtrInput
	// Role name (at least one should be filled in with the role ID).
	RoleName pulumi.StringPtrInput
}

func (RolePermissionBoundaryAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rolePermissionBoundaryAttachmentArgs)(nil)).Elem()
}

type RolePermissionBoundaryAttachmentInput interface {
	pulumi.Input

	ToRolePermissionBoundaryAttachmentOutput() RolePermissionBoundaryAttachmentOutput
	ToRolePermissionBoundaryAttachmentOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentOutput
}

func (*RolePermissionBoundaryAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePermissionBoundaryAttachment)(nil)).Elem()
}

func (i *RolePermissionBoundaryAttachment) ToRolePermissionBoundaryAttachmentOutput() RolePermissionBoundaryAttachmentOutput {
	return i.ToRolePermissionBoundaryAttachmentOutputWithContext(context.Background())
}

func (i *RolePermissionBoundaryAttachment) ToRolePermissionBoundaryAttachmentOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionBoundaryAttachmentOutput)
}

// RolePermissionBoundaryAttachmentArrayInput is an input type that accepts RolePermissionBoundaryAttachmentArray and RolePermissionBoundaryAttachmentArrayOutput values.
// You can construct a concrete instance of `RolePermissionBoundaryAttachmentArrayInput` via:
//
//	RolePermissionBoundaryAttachmentArray{ RolePermissionBoundaryAttachmentArgs{...} }
type RolePermissionBoundaryAttachmentArrayInput interface {
	pulumi.Input

	ToRolePermissionBoundaryAttachmentArrayOutput() RolePermissionBoundaryAttachmentArrayOutput
	ToRolePermissionBoundaryAttachmentArrayOutputWithContext(context.Context) RolePermissionBoundaryAttachmentArrayOutput
}

type RolePermissionBoundaryAttachmentArray []RolePermissionBoundaryAttachmentInput

func (RolePermissionBoundaryAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePermissionBoundaryAttachment)(nil)).Elem()
}

func (i RolePermissionBoundaryAttachmentArray) ToRolePermissionBoundaryAttachmentArrayOutput() RolePermissionBoundaryAttachmentArrayOutput {
	return i.ToRolePermissionBoundaryAttachmentArrayOutputWithContext(context.Background())
}

func (i RolePermissionBoundaryAttachmentArray) ToRolePermissionBoundaryAttachmentArrayOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionBoundaryAttachmentArrayOutput)
}

// RolePermissionBoundaryAttachmentMapInput is an input type that accepts RolePermissionBoundaryAttachmentMap and RolePermissionBoundaryAttachmentMapOutput values.
// You can construct a concrete instance of `RolePermissionBoundaryAttachmentMapInput` via:
//
//	RolePermissionBoundaryAttachmentMap{ "key": RolePermissionBoundaryAttachmentArgs{...} }
type RolePermissionBoundaryAttachmentMapInput interface {
	pulumi.Input

	ToRolePermissionBoundaryAttachmentMapOutput() RolePermissionBoundaryAttachmentMapOutput
	ToRolePermissionBoundaryAttachmentMapOutputWithContext(context.Context) RolePermissionBoundaryAttachmentMapOutput
}

type RolePermissionBoundaryAttachmentMap map[string]RolePermissionBoundaryAttachmentInput

func (RolePermissionBoundaryAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePermissionBoundaryAttachment)(nil)).Elem()
}

func (i RolePermissionBoundaryAttachmentMap) ToRolePermissionBoundaryAttachmentMapOutput() RolePermissionBoundaryAttachmentMapOutput {
	return i.ToRolePermissionBoundaryAttachmentMapOutputWithContext(context.Background())
}

func (i RolePermissionBoundaryAttachmentMap) ToRolePermissionBoundaryAttachmentMapOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionBoundaryAttachmentMapOutput)
}

type RolePermissionBoundaryAttachmentOutput struct{ *pulumi.OutputState }

func (RolePermissionBoundaryAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RolePermissionBoundaryAttachment)(nil)).Elem()
}

func (o RolePermissionBoundaryAttachmentOutput) ToRolePermissionBoundaryAttachmentOutput() RolePermissionBoundaryAttachmentOutput {
	return o
}

func (o RolePermissionBoundaryAttachmentOutput) ToRolePermissionBoundaryAttachmentOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentOutput {
	return o
}

// Role ID.
func (o RolePermissionBoundaryAttachmentOutput) PolicyId() pulumi.IntOutput {
	return o.ApplyT(func(v *RolePermissionBoundaryAttachment) pulumi.IntOutput { return v.PolicyId }).(pulumi.IntOutput)
}

// Role ID (at least one should be filled in with the role name).
func (o RolePermissionBoundaryAttachmentOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RolePermissionBoundaryAttachment) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// Role name (at least one should be filled in with the role ID).
func (o RolePermissionBoundaryAttachmentOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RolePermissionBoundaryAttachment) pulumi.StringPtrOutput { return v.RoleName }).(pulumi.StringPtrOutput)
}

type RolePermissionBoundaryAttachmentArrayOutput struct{ *pulumi.OutputState }

func (RolePermissionBoundaryAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RolePermissionBoundaryAttachment)(nil)).Elem()
}

func (o RolePermissionBoundaryAttachmentArrayOutput) ToRolePermissionBoundaryAttachmentArrayOutput() RolePermissionBoundaryAttachmentArrayOutput {
	return o
}

func (o RolePermissionBoundaryAttachmentArrayOutput) ToRolePermissionBoundaryAttachmentArrayOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentArrayOutput {
	return o
}

func (o RolePermissionBoundaryAttachmentArrayOutput) Index(i pulumi.IntInput) RolePermissionBoundaryAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RolePermissionBoundaryAttachment {
		return vs[0].([]*RolePermissionBoundaryAttachment)[vs[1].(int)]
	}).(RolePermissionBoundaryAttachmentOutput)
}

type RolePermissionBoundaryAttachmentMapOutput struct{ *pulumi.OutputState }

func (RolePermissionBoundaryAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RolePermissionBoundaryAttachment)(nil)).Elem()
}

func (o RolePermissionBoundaryAttachmentMapOutput) ToRolePermissionBoundaryAttachmentMapOutput() RolePermissionBoundaryAttachmentMapOutput {
	return o
}

func (o RolePermissionBoundaryAttachmentMapOutput) ToRolePermissionBoundaryAttachmentMapOutputWithContext(ctx context.Context) RolePermissionBoundaryAttachmentMapOutput {
	return o
}

func (o RolePermissionBoundaryAttachmentMapOutput) MapIndex(k pulumi.StringInput) RolePermissionBoundaryAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RolePermissionBoundaryAttachment {
		return vs[0].(map[string]*RolePermissionBoundaryAttachment)[vs[1].(string)]
	}).(RolePermissionBoundaryAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionBoundaryAttachmentInput)(nil)).Elem(), &RolePermissionBoundaryAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionBoundaryAttachmentArrayInput)(nil)).Elem(), RolePermissionBoundaryAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionBoundaryAttachmentMapInput)(nil)).Elem(), RolePermissionBoundaryAttachmentMap{})
	pulumi.RegisterOutputType(RolePermissionBoundaryAttachmentOutput{})
	pulumi.RegisterOutputType(RolePermissionBoundaryAttachmentArrayOutput{})
	pulumi.RegisterOutputType(RolePermissionBoundaryAttachmentMapOutput{})
}
