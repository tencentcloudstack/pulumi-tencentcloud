// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a CAM group membership.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			camGroupBasic := "keep-cam-group"
//			if param := cfg.Get("camGroupBasic"); param != "" {
//				camGroupBasic = param
//			}
//			groups, err := Cam.GetGroups(ctx, &cam.GetGroupsArgs{
//				Name: pulumi.StringRef(camGroupBasic),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			foo, err := Cam.NewUser(ctx, "foo", &Cam.UserArgs{
//				Remark:            pulumi.String("tf_user_remark"),
//				ConsoleLogin:      pulumi.Bool(true),
//				UseApi:            pulumi.Bool(true),
//				NeedResetPassword: pulumi.Bool(true),
//				Password:          pulumi.String("Gail@1234"),
//				PhoneNum:          pulumi.String("12345678910"),
//				CountryCode:       pulumi.String("86"),
//				Email:             pulumi.String("1234@qq.com"),
//				ForceDelete:       pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = Cam.NewGroupMembership(ctx, "groupMembershipBasic", &Cam.GroupMembershipArgs{
//				GroupId: pulumi.String(groups.GroupLists[0].GroupId),
//				UserNames: pulumi.StringArray{
//					foo.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CAM group membership can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/groupMembership:GroupMembership foo 12515263
//
// ```
type GroupMembership struct {
	pulumi.CustomResourceState

	// ID of CAM group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
	//
	// Deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.
	UserIds pulumi.StringArrayOutput `pulumi:"userIds"`
	// User name set as ID of the CAM group members.
	UserNames pulumi.StringArrayOutput `pulumi:"userNames"`
}

// NewGroupMembership registers a new resource with the given unique name, arguments, and options.
func NewGroupMembership(ctx *pulumi.Context,
	name string, args *GroupMembershipArgs, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GroupMembership
	err := ctx.RegisterResource("tencentcloud:Cam/groupMembership:GroupMembership", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMembership gets an existing GroupMembership resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMembership(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMembershipState, opts ...pulumi.ResourceOption) (*GroupMembership, error) {
	var resource GroupMembership
	err := ctx.ReadResource("tencentcloud:Cam/groupMembership:GroupMembership", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMembership resources.
type groupMembershipState struct {
	// ID of CAM group.
	GroupId *string `pulumi:"groupId"`
	// It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
	//
	// Deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.
	UserIds []string `pulumi:"userIds"`
	// User name set as ID of the CAM group members.
	UserNames []string `pulumi:"userNames"`
}

type GroupMembershipState struct {
	// ID of CAM group.
	GroupId pulumi.StringPtrInput
	// It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
	//
	// Deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.
	UserIds pulumi.StringArrayInput
	// User name set as ID of the CAM group members.
	UserNames pulumi.StringArrayInput
}

func (GroupMembershipState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipState)(nil)).Elem()
}

type groupMembershipArgs struct {
	// ID of CAM group.
	GroupId string `pulumi:"groupId"`
	// It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
	//
	// Deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.
	UserIds []string `pulumi:"userIds"`
	// User name set as ID of the CAM group members.
	UserNames []string `pulumi:"userNames"`
}

// The set of arguments for constructing a GroupMembership resource.
type GroupMembershipArgs struct {
	// ID of CAM group.
	GroupId pulumi.StringInput
	// It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
	//
	// Deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.
	UserIds pulumi.StringArrayInput
	// User name set as ID of the CAM group members.
	UserNames pulumi.StringArrayInput
}

func (GroupMembershipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMembershipArgs)(nil)).Elem()
}

type GroupMembershipInput interface {
	pulumi.Input

	ToGroupMembershipOutput() GroupMembershipOutput
	ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput
}

func (*GroupMembership) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembership)(nil)).Elem()
}

func (i *GroupMembership) ToGroupMembershipOutput() GroupMembershipOutput {
	return i.ToGroupMembershipOutputWithContext(context.Background())
}

func (i *GroupMembership) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipOutput)
}

// GroupMembershipArrayInput is an input type that accepts GroupMembershipArray and GroupMembershipArrayOutput values.
// You can construct a concrete instance of `GroupMembershipArrayInput` via:
//
//	GroupMembershipArray{ GroupMembershipArgs{...} }
type GroupMembershipArrayInput interface {
	pulumi.Input

	ToGroupMembershipArrayOutput() GroupMembershipArrayOutput
	ToGroupMembershipArrayOutputWithContext(context.Context) GroupMembershipArrayOutput
}

type GroupMembershipArray []GroupMembershipInput

func (GroupMembershipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMembership)(nil)).Elem()
}

func (i GroupMembershipArray) ToGroupMembershipArrayOutput() GroupMembershipArrayOutput {
	return i.ToGroupMembershipArrayOutputWithContext(context.Background())
}

func (i GroupMembershipArray) ToGroupMembershipArrayOutputWithContext(ctx context.Context) GroupMembershipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipArrayOutput)
}

// GroupMembershipMapInput is an input type that accepts GroupMembershipMap and GroupMembershipMapOutput values.
// You can construct a concrete instance of `GroupMembershipMapInput` via:
//
//	GroupMembershipMap{ "key": GroupMembershipArgs{...} }
type GroupMembershipMapInput interface {
	pulumi.Input

	ToGroupMembershipMapOutput() GroupMembershipMapOutput
	ToGroupMembershipMapOutputWithContext(context.Context) GroupMembershipMapOutput
}

type GroupMembershipMap map[string]GroupMembershipInput

func (GroupMembershipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMembership)(nil)).Elem()
}

func (i GroupMembershipMap) ToGroupMembershipMapOutput() GroupMembershipMapOutput {
	return i.ToGroupMembershipMapOutputWithContext(context.Background())
}

func (i GroupMembershipMap) ToGroupMembershipMapOutputWithContext(ctx context.Context) GroupMembershipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembershipMapOutput)
}

type GroupMembershipOutput struct{ *pulumi.OutputState }

func (GroupMembershipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMembership)(nil)).Elem()
}

func (o GroupMembershipOutput) ToGroupMembershipOutput() GroupMembershipOutput {
	return o
}

func (o GroupMembershipOutput) ToGroupMembershipOutputWithContext(ctx context.Context) GroupMembershipOutput {
	return o
}

// ID of CAM group.
func (o GroupMembershipOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMembership) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// It has been deprecated from version 1.59.5. Use `userNames` instead. ID set of the CAM group members.
//
// Deprecated: It has been deprecated from version 1.59.5. Use `user_names` instead.
func (o GroupMembershipOutput) UserIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupMembership) pulumi.StringArrayOutput { return v.UserIds }).(pulumi.StringArrayOutput)
}

// User name set as ID of the CAM group members.
func (o GroupMembershipOutput) UserNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GroupMembership) pulumi.StringArrayOutput { return v.UserNames }).(pulumi.StringArrayOutput)
}

type GroupMembershipArrayOutput struct{ *pulumi.OutputState }

func (GroupMembershipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMembership)(nil)).Elem()
}

func (o GroupMembershipArrayOutput) ToGroupMembershipArrayOutput() GroupMembershipArrayOutput {
	return o
}

func (o GroupMembershipArrayOutput) ToGroupMembershipArrayOutputWithContext(ctx context.Context) GroupMembershipArrayOutput {
	return o
}

func (o GroupMembershipArrayOutput) Index(i pulumi.IntInput) GroupMembershipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupMembership {
		return vs[0].([]*GroupMembership)[vs[1].(int)]
	}).(GroupMembershipOutput)
}

type GroupMembershipMapOutput struct{ *pulumi.OutputState }

func (GroupMembershipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMembership)(nil)).Elem()
}

func (o GroupMembershipMapOutput) ToGroupMembershipMapOutput() GroupMembershipMapOutput {
	return o
}

func (o GroupMembershipMapOutput) ToGroupMembershipMapOutputWithContext(ctx context.Context) GroupMembershipMapOutput {
	return o
}

func (o GroupMembershipMapOutput) MapIndex(k pulumi.StringInput) GroupMembershipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupMembership {
		return vs[0].(map[string]*GroupMembership)[vs[1].(string)]
	}).(GroupMembershipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipInput)(nil)).Elem(), &GroupMembership{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipArrayInput)(nil)).Elem(), GroupMembershipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembershipMapInput)(nil)).Elem(), GroupMembershipMap{})
	pulumi.RegisterOutputType(GroupMembershipOutput{})
	pulumi.RegisterOutputType(GroupMembershipArrayOutput{})
	pulumi.RegisterOutputType(GroupMembershipMapOutput{})
}
