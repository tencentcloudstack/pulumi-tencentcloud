// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a CAM policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Cam.NewPolicyByName(ctx, "foo", &Cam.PolicyByNameArgs{
//				Description: pulumi.String("tf_test"),
//				Document:    pulumi.String(fmt.Sprintf("%v%v%v%v%v%v%v%v%v%v%v%v%v%v%v", "{\n", "  \"version\": \"2.0\",\n", "  \"statement\": [\n", "    {\n", "      \"action\": [\n", "        \"name/sts:AssumeRole\"\n", "      ],\n", "      \"effect\": \"allow\",\n", "      \"resource\": [\n", "        \"*\"\n", "      ]\n", "    }\n", "  ]\n", "}\n", "\n")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CAM policy can be imported using the name, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/policyByName:PolicyByName foo name
//
// ```
type PolicyByName struct {
	pulumi.CustomResourceState

	// Create time of the CAM policy.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Description of the CAM policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Document of the CAM policy. The syntax refers to [CAM
	// POLICY](https://intl.cloud.tencent.com/document/product/598/10604). There are some notes when using this para in
	// terraform: 1. The elements in JSON claimed supporting two types as `string` and `array` only support type `array`; 2.
	// Terraform does not support the `root` syntax, when it appears, it must be replaced with the uin it stands for.
	Document pulumi.StringOutput `pulumi:"document"`
	// Name of CAM policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of the policy strategy. Valid values: `1`, `2`.  `1` means customer strategy and `2` means preset strategy.
	Type pulumi.IntOutput `pulumi:"type"`
	// The last update time of the CAM policy.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPolicyByName registers a new resource with the given unique name, arguments, and options.
func NewPolicyByName(ctx *pulumi.Context,
	name string, args *PolicyByNameArgs, opts ...pulumi.ResourceOption) (*PolicyByName, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Document == nil {
		return nil, errors.New("invalid value for required argument 'Document'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource PolicyByName
	err := ctx.RegisterResource("tencentcloud:Cam/policyByName:PolicyByName", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyByName gets an existing PolicyByName resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyByName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyByNameState, opts ...pulumi.ResourceOption) (*PolicyByName, error) {
	var resource PolicyByName
	err := ctx.ReadResource("tencentcloud:Cam/policyByName:PolicyByName", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyByName resources.
type policyByNameState struct {
	// Create time of the CAM policy.
	CreateTime *string `pulumi:"createTime"`
	// Description of the CAM policy.
	Description *string `pulumi:"description"`
	// Document of the CAM policy. The syntax refers to [CAM
	// POLICY](https://intl.cloud.tencent.com/document/product/598/10604). There are some notes when using this para in
	// terraform: 1. The elements in JSON claimed supporting two types as `string` and `array` only support type `array`; 2.
	// Terraform does not support the `root` syntax, when it appears, it must be replaced with the uin it stands for.
	Document *string `pulumi:"document"`
	// Name of CAM policy.
	Name *string `pulumi:"name"`
	// Type of the policy strategy. Valid values: `1`, `2`.  `1` means customer strategy and `2` means preset strategy.
	Type *int `pulumi:"type"`
	// The last update time of the CAM policy.
	UpdateTime *string `pulumi:"updateTime"`
}

type PolicyByNameState struct {
	// Create time of the CAM policy.
	CreateTime pulumi.StringPtrInput
	// Description of the CAM policy.
	Description pulumi.StringPtrInput
	// Document of the CAM policy. The syntax refers to [CAM
	// POLICY](https://intl.cloud.tencent.com/document/product/598/10604). There are some notes when using this para in
	// terraform: 1. The elements in JSON claimed supporting two types as `string` and `array` only support type `array`; 2.
	// Terraform does not support the `root` syntax, when it appears, it must be replaced with the uin it stands for.
	Document pulumi.StringPtrInput
	// Name of CAM policy.
	Name pulumi.StringPtrInput
	// Type of the policy strategy. Valid values: `1`, `2`.  `1` means customer strategy and `2` means preset strategy.
	Type pulumi.IntPtrInput
	// The last update time of the CAM policy.
	UpdateTime pulumi.StringPtrInput
}

func (PolicyByNameState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyByNameState)(nil)).Elem()
}

type policyByNameArgs struct {
	// Description of the CAM policy.
	Description *string `pulumi:"description"`
	// Document of the CAM policy. The syntax refers to [CAM
	// POLICY](https://intl.cloud.tencent.com/document/product/598/10604). There are some notes when using this para in
	// terraform: 1. The elements in JSON claimed supporting two types as `string` and `array` only support type `array`; 2.
	// Terraform does not support the `root` syntax, when it appears, it must be replaced with the uin it stands for.
	Document string `pulumi:"document"`
	// Name of CAM policy.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyByName resource.
type PolicyByNameArgs struct {
	// Description of the CAM policy.
	Description pulumi.StringPtrInput
	// Document of the CAM policy. The syntax refers to [CAM
	// POLICY](https://intl.cloud.tencent.com/document/product/598/10604). There are some notes when using this para in
	// terraform: 1. The elements in JSON claimed supporting two types as `string` and `array` only support type `array`; 2.
	// Terraform does not support the `root` syntax, when it appears, it must be replaced with the uin it stands for.
	Document pulumi.StringInput
	// Name of CAM policy.
	Name pulumi.StringPtrInput
}

func (PolicyByNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyByNameArgs)(nil)).Elem()
}

type PolicyByNameInput interface {
	pulumi.Input

	ToPolicyByNameOutput() PolicyByNameOutput
	ToPolicyByNameOutputWithContext(ctx context.Context) PolicyByNameOutput
}

func (*PolicyByName) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyByName)(nil)).Elem()
}

func (i *PolicyByName) ToPolicyByNameOutput() PolicyByNameOutput {
	return i.ToPolicyByNameOutputWithContext(context.Background())
}

func (i *PolicyByName) ToPolicyByNameOutputWithContext(ctx context.Context) PolicyByNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyByNameOutput)
}

// PolicyByNameArrayInput is an input type that accepts PolicyByNameArray and PolicyByNameArrayOutput values.
// You can construct a concrete instance of `PolicyByNameArrayInput` via:
//
//	PolicyByNameArray{ PolicyByNameArgs{...} }
type PolicyByNameArrayInput interface {
	pulumi.Input

	ToPolicyByNameArrayOutput() PolicyByNameArrayOutput
	ToPolicyByNameArrayOutputWithContext(context.Context) PolicyByNameArrayOutput
}

type PolicyByNameArray []PolicyByNameInput

func (PolicyByNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyByName)(nil)).Elem()
}

func (i PolicyByNameArray) ToPolicyByNameArrayOutput() PolicyByNameArrayOutput {
	return i.ToPolicyByNameArrayOutputWithContext(context.Background())
}

func (i PolicyByNameArray) ToPolicyByNameArrayOutputWithContext(ctx context.Context) PolicyByNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyByNameArrayOutput)
}

// PolicyByNameMapInput is an input type that accepts PolicyByNameMap and PolicyByNameMapOutput values.
// You can construct a concrete instance of `PolicyByNameMapInput` via:
//
//	PolicyByNameMap{ "key": PolicyByNameArgs{...} }
type PolicyByNameMapInput interface {
	pulumi.Input

	ToPolicyByNameMapOutput() PolicyByNameMapOutput
	ToPolicyByNameMapOutputWithContext(context.Context) PolicyByNameMapOutput
}

type PolicyByNameMap map[string]PolicyByNameInput

func (PolicyByNameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyByName)(nil)).Elem()
}

func (i PolicyByNameMap) ToPolicyByNameMapOutput() PolicyByNameMapOutput {
	return i.ToPolicyByNameMapOutputWithContext(context.Background())
}

func (i PolicyByNameMap) ToPolicyByNameMapOutputWithContext(ctx context.Context) PolicyByNameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyByNameMapOutput)
}

type PolicyByNameOutput struct{ *pulumi.OutputState }

func (PolicyByNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyByName)(nil)).Elem()
}

func (o PolicyByNameOutput) ToPolicyByNameOutput() PolicyByNameOutput {
	return o
}

func (o PolicyByNameOutput) ToPolicyByNameOutputWithContext(ctx context.Context) PolicyByNameOutput {
	return o
}

// Create time of the CAM policy.
func (o PolicyByNameOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyByName) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Description of the CAM policy.
func (o PolicyByNameOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyByName) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Document of the CAM policy. The syntax refers to [CAM
// POLICY](https://intl.cloud.tencent.com/document/product/598/10604). There are some notes when using this para in
// terraform: 1. The elements in JSON claimed supporting two types as `string` and `array` only support type `array`; 2.
// Terraform does not support the `root` syntax, when it appears, it must be replaced with the uin it stands for.
func (o PolicyByNameOutput) Document() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyByName) pulumi.StringOutput { return v.Document }).(pulumi.StringOutput)
}

// Name of CAM policy.
func (o PolicyByNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyByName) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of the policy strategy. Valid values: `1`, `2`.  `1` means customer strategy and `2` means preset strategy.
func (o PolicyByNameOutput) Type() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyByName) pulumi.IntOutput { return v.Type }).(pulumi.IntOutput)
}

// The last update time of the CAM policy.
func (o PolicyByNameOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyByName) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PolicyByNameArrayOutput struct{ *pulumi.OutputState }

func (PolicyByNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyByName)(nil)).Elem()
}

func (o PolicyByNameArrayOutput) ToPolicyByNameArrayOutput() PolicyByNameArrayOutput {
	return o
}

func (o PolicyByNameArrayOutput) ToPolicyByNameArrayOutputWithContext(ctx context.Context) PolicyByNameArrayOutput {
	return o
}

func (o PolicyByNameArrayOutput) Index(i pulumi.IntInput) PolicyByNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyByName {
		return vs[0].([]*PolicyByName)[vs[1].(int)]
	}).(PolicyByNameOutput)
}

type PolicyByNameMapOutput struct{ *pulumi.OutputState }

func (PolicyByNameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyByName)(nil)).Elem()
}

func (o PolicyByNameMapOutput) ToPolicyByNameMapOutput() PolicyByNameMapOutput {
	return o
}

func (o PolicyByNameMapOutput) ToPolicyByNameMapOutputWithContext(ctx context.Context) PolicyByNameMapOutput {
	return o
}

func (o PolicyByNameMapOutput) MapIndex(k pulumi.StringInput) PolicyByNameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyByName {
		return vs[0].(map[string]*PolicyByName)[vs[1].(string)]
	}).(PolicyByNameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyByNameInput)(nil)).Elem(), &PolicyByName{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyByNameArrayInput)(nil)).Elem(), PolicyByNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyByNameMapInput)(nil)).Elem(), PolicyByNameMap{})
	pulumi.RegisterOutputType(PolicyByNameOutput{})
	pulumi.RegisterOutputType(PolicyByNameArrayOutput{})
	pulumi.RegisterOutputType(PolicyByNameMapOutput{})
}
