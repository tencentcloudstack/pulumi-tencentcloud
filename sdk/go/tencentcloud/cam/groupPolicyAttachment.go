// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cam

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a CAM group policy attachment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/tencentcloudstack/pulumi-tencentcloud/sdk/go/tencentcloud/Cam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			camPolicyBasic := "keep-cam-policy"
//			if param := cfg.Get("camPolicyBasic"); param != "" {
//				camPolicyBasic = param
//			}
//			camGroupBasic := "keep-cam-group"
//			if param := cfg.Get("camGroupBasic"); param != "" {
//				camGroupBasic = param
//			}
//			groups, err := Cam.GetGroups(ctx, &cam.GetGroupsArgs{
//				Name: pulumi.StringRef(camGroupBasic),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			policy, err := Cam.GetPolicies(ctx, &cam.GetPoliciesArgs{
//				Name: pulumi.StringRef(camPolicyBasic),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Cam.NewGroupPolicyAttachment(ctx, "groupPolicyAttachmentBasic", &Cam.GroupPolicyAttachmentArgs{
//				GroupId:  pulumi.String(groups.GroupLists[0].GroupId),
//				PolicyId: pulumi.String(policy.PolicyLists[0].PolicyId),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CAM group policy attachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Cam/groupPolicyAttachment:GroupPolicyAttachment foo 12515263#26800353
//
// ```
type GroupPolicyAttachment struct {
	pulumi.CustomResourceState

	// Mode of Creation of the CAM group policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
	CreateMode pulumi.IntOutput `pulumi:"createMode"`
	// Create time of the CAM group policy attachment.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// ID of the attached CAM group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// ID of the policy.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// Name of the policy.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Type of the policy strategy. 'Group' means customer strategy and 'QCS' means preset strategy.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
}

// NewGroupPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewGroupPolicyAttachment(ctx *pulumi.Context,
	name string, args *GroupPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*GroupPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GroupPolicyAttachment
	err := ctx.RegisterResource("tencentcloud:Cam/groupPolicyAttachment:GroupPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupPolicyAttachment gets an existing GroupPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupPolicyAttachmentState, opts ...pulumi.ResourceOption) (*GroupPolicyAttachment, error) {
	var resource GroupPolicyAttachment
	err := ctx.ReadResource("tencentcloud:Cam/groupPolicyAttachment:GroupPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupPolicyAttachment resources.
type groupPolicyAttachmentState struct {
	// Mode of Creation of the CAM group policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
	CreateMode *int `pulumi:"createMode"`
	// Create time of the CAM group policy attachment.
	CreateTime *string `pulumi:"createTime"`
	// ID of the attached CAM group.
	GroupId *string `pulumi:"groupId"`
	// ID of the policy.
	PolicyId *string `pulumi:"policyId"`
	// Name of the policy.
	PolicyName *string `pulumi:"policyName"`
	// Type of the policy strategy. 'Group' means customer strategy and 'QCS' means preset strategy.
	PolicyType *string `pulumi:"policyType"`
}

type GroupPolicyAttachmentState struct {
	// Mode of Creation of the CAM group policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
	CreateMode pulumi.IntPtrInput
	// Create time of the CAM group policy attachment.
	CreateTime pulumi.StringPtrInput
	// ID of the attached CAM group.
	GroupId pulumi.StringPtrInput
	// ID of the policy.
	PolicyId pulumi.StringPtrInput
	// Name of the policy.
	PolicyName pulumi.StringPtrInput
	// Type of the policy strategy. 'Group' means customer strategy and 'QCS' means preset strategy.
	PolicyType pulumi.StringPtrInput
}

func (GroupPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAttachmentState)(nil)).Elem()
}

type groupPolicyAttachmentArgs struct {
	// ID of the attached CAM group.
	GroupId string `pulumi:"groupId"`
	// ID of the policy.
	PolicyId string `pulumi:"policyId"`
}

// The set of arguments for constructing a GroupPolicyAttachment resource.
type GroupPolicyAttachmentArgs struct {
	// ID of the attached CAM group.
	GroupId pulumi.StringInput
	// ID of the policy.
	PolicyId pulumi.StringInput
}

func (GroupPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupPolicyAttachmentArgs)(nil)).Elem()
}

type GroupPolicyAttachmentInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentOutput() GroupPolicyAttachmentOutput
	ToGroupPolicyAttachmentOutputWithContext(ctx context.Context) GroupPolicyAttachmentOutput
}

func (*GroupPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAttachment)(nil)).Elem()
}

func (i *GroupPolicyAttachment) ToGroupPolicyAttachmentOutput() GroupPolicyAttachmentOutput {
	return i.ToGroupPolicyAttachmentOutputWithContext(context.Background())
}

func (i *GroupPolicyAttachment) ToGroupPolicyAttachmentOutputWithContext(ctx context.Context) GroupPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentOutput)
}

// GroupPolicyAttachmentArrayInput is an input type that accepts GroupPolicyAttachmentArray and GroupPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `GroupPolicyAttachmentArrayInput` via:
//
//	GroupPolicyAttachmentArray{ GroupPolicyAttachmentArgs{...} }
type GroupPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentArrayOutput() GroupPolicyAttachmentArrayOutput
	ToGroupPolicyAttachmentArrayOutputWithContext(context.Context) GroupPolicyAttachmentArrayOutput
}

type GroupPolicyAttachmentArray []GroupPolicyAttachmentInput

func (GroupPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAttachment)(nil)).Elem()
}

func (i GroupPolicyAttachmentArray) ToGroupPolicyAttachmentArrayOutput() GroupPolicyAttachmentArrayOutput {
	return i.ToGroupPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i GroupPolicyAttachmentArray) ToGroupPolicyAttachmentArrayOutputWithContext(ctx context.Context) GroupPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentArrayOutput)
}

// GroupPolicyAttachmentMapInput is an input type that accepts GroupPolicyAttachmentMap and GroupPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `GroupPolicyAttachmentMapInput` via:
//
//	GroupPolicyAttachmentMap{ "key": GroupPolicyAttachmentArgs{...} }
type GroupPolicyAttachmentMapInput interface {
	pulumi.Input

	ToGroupPolicyAttachmentMapOutput() GroupPolicyAttachmentMapOutput
	ToGroupPolicyAttachmentMapOutputWithContext(context.Context) GroupPolicyAttachmentMapOutput
}

type GroupPolicyAttachmentMap map[string]GroupPolicyAttachmentInput

func (GroupPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAttachment)(nil)).Elem()
}

func (i GroupPolicyAttachmentMap) ToGroupPolicyAttachmentMapOutput() GroupPolicyAttachmentMapOutput {
	return i.ToGroupPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i GroupPolicyAttachmentMap) ToGroupPolicyAttachmentMapOutputWithContext(ctx context.Context) GroupPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupPolicyAttachmentMapOutput)
}

type GroupPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupPolicyAttachment)(nil)).Elem()
}

func (o GroupPolicyAttachmentOutput) ToGroupPolicyAttachmentOutput() GroupPolicyAttachmentOutput {
	return o
}

func (o GroupPolicyAttachmentOutput) ToGroupPolicyAttachmentOutputWithContext(ctx context.Context) GroupPolicyAttachmentOutput {
	return o
}

// Mode of Creation of the CAM group policy attachment. `1` means the cam policy attachment is created by production, and the others indicate syntax strategy ways.
func (o GroupPolicyAttachmentOutput) CreateMode() pulumi.IntOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.IntOutput { return v.CreateMode }).(pulumi.IntOutput)
}

// Create time of the CAM group policy attachment.
func (o GroupPolicyAttachmentOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// ID of the attached CAM group.
func (o GroupPolicyAttachmentOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// ID of the policy.
func (o GroupPolicyAttachmentOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// Name of the policy.
func (o GroupPolicyAttachmentOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Type of the policy strategy. 'Group' means customer strategy and 'QCS' means preset strategy.
func (o GroupPolicyAttachmentOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupPolicyAttachment) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

type GroupPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupPolicyAttachment)(nil)).Elem()
}

func (o GroupPolicyAttachmentArrayOutput) ToGroupPolicyAttachmentArrayOutput() GroupPolicyAttachmentArrayOutput {
	return o
}

func (o GroupPolicyAttachmentArrayOutput) ToGroupPolicyAttachmentArrayOutputWithContext(ctx context.Context) GroupPolicyAttachmentArrayOutput {
	return o
}

func (o GroupPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) GroupPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupPolicyAttachment {
		return vs[0].([]*GroupPolicyAttachment)[vs[1].(int)]
	}).(GroupPolicyAttachmentOutput)
}

type GroupPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (GroupPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupPolicyAttachment)(nil)).Elem()
}

func (o GroupPolicyAttachmentMapOutput) ToGroupPolicyAttachmentMapOutput() GroupPolicyAttachmentMapOutput {
	return o
}

func (o GroupPolicyAttachmentMapOutput) ToGroupPolicyAttachmentMapOutputWithContext(ctx context.Context) GroupPolicyAttachmentMapOutput {
	return o
}

func (o GroupPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) GroupPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupPolicyAttachment {
		return vs[0].(map[string]*GroupPolicyAttachment)[vs[1].(string)]
	}).(GroupPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentInput)(nil)).Elem(), &GroupPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentArrayInput)(nil)).Elem(), GroupPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupPolicyAttachmentMapInput)(nil)).Elem(), GroupPolicyAttachmentMap{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(GroupPolicyAttachmentMapOutput{})
}
