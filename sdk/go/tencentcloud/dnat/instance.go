// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dnat

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to create a NAT forwarding.
//
// ## Import
//
// NAT forwarding can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import tencentcloud:Dnat/instance:Instance foo tcp://vpc-asg3sfa3:nat-1asg3t63@127.15.2.3:8080
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Description of the NAT forward.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Network address of the EIP.
	ElasticIp pulumi.StringOutput `pulumi:"elasticIp"`
	// Port of the EIP.
	ElasticPort pulumi.StringOutput `pulumi:"elasticPort"`
	// ID of the NAT gateway.
	NatId pulumi.StringOutput `pulumi:"natId"`
	// Network address of the backend service.
	PrivateIp pulumi.StringOutput `pulumi:"privateIp"`
	// Port of intranet.
	PrivatePort pulumi.StringOutput `pulumi:"privatePort"`
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ElasticIp == nil {
		return nil, errors.New("invalid value for required argument 'ElasticIp'")
	}
	if args.ElasticPort == nil {
		return nil, errors.New("invalid value for required argument 'ElasticPort'")
	}
	if args.NatId == nil {
		return nil, errors.New("invalid value for required argument 'NatId'")
	}
	if args.PrivateIp == nil {
		return nil, errors.New("invalid value for required argument 'PrivateIp'")
	}
	if args.PrivatePort == nil {
		return nil, errors.New("invalid value for required argument 'PrivatePort'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("tencentcloud:Dnat/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("tencentcloud:Dnat/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Description of the NAT forward.
	Description *string `pulumi:"description"`
	// Network address of the EIP.
	ElasticIp *string `pulumi:"elasticIp"`
	// Port of the EIP.
	ElasticPort *string `pulumi:"elasticPort"`
	// ID of the NAT gateway.
	NatId *string `pulumi:"natId"`
	// Network address of the backend service.
	PrivateIp *string `pulumi:"privateIp"`
	// Port of intranet.
	PrivatePort *string `pulumi:"privatePort"`
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol *string `pulumi:"protocol"`
	// ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

type InstanceState struct {
	// Description of the NAT forward.
	Description pulumi.StringPtrInput
	// Network address of the EIP.
	ElasticIp pulumi.StringPtrInput
	// Port of the EIP.
	ElasticPort pulumi.StringPtrInput
	// ID of the NAT gateway.
	NatId pulumi.StringPtrInput
	// Network address of the backend service.
	PrivateIp pulumi.StringPtrInput
	// Port of intranet.
	PrivatePort pulumi.StringPtrInput
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol pulumi.StringPtrInput
	// ID of the VPC.
	VpcId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Description of the NAT forward.
	Description *string `pulumi:"description"`
	// Network address of the EIP.
	ElasticIp string `pulumi:"elasticIp"`
	// Port of the EIP.
	ElasticPort string `pulumi:"elasticPort"`
	// ID of the NAT gateway.
	NatId string `pulumi:"natId"`
	// Network address of the backend service.
	PrivateIp string `pulumi:"privateIp"`
	// Port of intranet.
	PrivatePort string `pulumi:"privatePort"`
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol string `pulumi:"protocol"`
	// ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Description of the NAT forward.
	Description pulumi.StringPtrInput
	// Network address of the EIP.
	ElasticIp pulumi.StringInput
	// Port of the EIP.
	ElasticPort pulumi.StringInput
	// ID of the NAT gateway.
	NatId pulumi.StringInput
	// Network address of the backend service.
	PrivateIp pulumi.StringInput
	// Port of intranet.
	PrivatePort pulumi.StringInput
	// Type of the network protocol. Valid value: `TCP` and `UDP`.
	Protocol pulumi.StringInput
	// ID of the VPC.
	VpcId pulumi.StringInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Description of the NAT forward.
func (o InstanceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Network address of the EIP.
func (o InstanceOutput) ElasticIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ElasticIp }).(pulumi.StringOutput)
}

// Port of the EIP.
func (o InstanceOutput) ElasticPort() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ElasticPort }).(pulumi.StringOutput)
}

// ID of the NAT gateway.
func (o InstanceOutput) NatId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NatId }).(pulumi.StringOutput)
}

// Network address of the backend service.
func (o InstanceOutput) PrivateIp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PrivateIp }).(pulumi.StringOutput)
}

// Port of intranet.
func (o InstanceOutput) PrivatePort() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PrivatePort }).(pulumi.StringOutput)
}

// Type of the network protocol. Valid value: `TCP` and `UDP`.
func (o InstanceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// ID of the VPC.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
